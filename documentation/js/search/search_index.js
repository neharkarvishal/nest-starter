var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/interfaces/APIResponse.html",[0,0.255,1,1.427]],["body/interfaces/APIResponse.html",[0,0.513,1,2.626,2,0.874,3,0.092,4,0.071,5,0.081,6,1.222,7,0.155,8,0.804,9,1.241,10,1.729,11,0.964,12,2.223,13,2.007,14,1.582,15,1.782,16,1.89,17,1.582,18,1.395,19,0.329,20,0.012,21,1.324,22,2.341,23,0.788,24,1.63,25,0.112,26,0.236,27,0.224,28,0.007,29,1.713,30,1.713,31,1.713,32,1.713,33,1.713,34,1.713,35,1.713,36,1.406,37,0.007,38,2.772,39,1.304,40,1.702,41,1.304,42,1.304,43,1.304,44,1.304,45,1.304,46,1.304,47,1.222,48,1.304,49,1.304,50,1.147,51,2.006,52,1.222,53,0.901,54,1.887,55,1.304,56,2.146,57,1.304,58,1.304,59,1.304,60,1.304,61,1.304,62,1.304,63,1.304,64,1.304,65,1.304,66,1.304,67,1.304,68,2.217,69,1.887,70,1.304,71,1.304,72,1.304,73,1.95,74,1.304,75,1.304,76,1.887,77,1.304,78,1.304,79,1.304,80,1.304,81,1.304,82,2.277,83,1.304,84,1.768,85,1.768,86,1.304,87,1.304,88,1.304,89,1.304,90,1.304,91,1.304,92,1.304,93,1.304,94,1.304,95,1.887,96,1.304,97,1.304,98,1.304,99,1.222,100,1.304,101,1.304,102,2.277,103,1.304,104,1.304,105,1.304,106,1.304,107,1.304,108,1.304,109,1.304,110,1.304,111,0.985,112,1.304,113,1.304,114,1.304,115,1.304,116,0.285,117,1.304,118,1.304,119,1.304,120,1.304,121,1.304,122,1.222,123,2.078,124,1.304,125,1.304,126,1.304,127,1.768,128,1.713,129,1.304,130,1.304,131,1.304,132,0.007]],["title/classes/ApiException.html",[133,0.148,134,3.312]],["body/classes/ApiException.html",[3,0.107,4,0.084,5,0.095,7,0.182,8,0.899,9,1.313,12,2.446,13,2.204,16,2.127,18,1.166,19,0.355,20,0.012,23,0.776,24,0.966,25,0.182,26,0.276,27,0.148,28,0.005,37,0.005,116,0.335,132,0.007,133,0.144,134,6.114,135,1.344,136,3.488,137,5.91,138,3.22,139,4.956,140,2.719,141,7.699,142,3.908,143,4.704,144,2.182,145,4.054,146,4.676,147,1.405,148,5.601,149,0.858,150,3.522,151,6.705,152,4.054,153,4.054,154,4.054,155,4.054,156,4.054,157,4.054,158,4.054,159,6.417,160,5.096,161,5.601,162,5.601,163,4.448,164,4.448,165,3.606,166,6.417,167,6.417,168,6.417,169,6.417,170,6.417,171,5.601,172,1.58,173,4.054,174,4.054,175,4.054,176,4.054,177,4.054,178,4.054,179,1.479,180,2.774,181,4.054,182,4.054,183,4.054,184,1.479,185,2.972,186,1.15,187,1.834,188,4.106,189,4.054,190,2.138,191,4.054,192,2.972,193,4.054,194,4.054]],["title/controllers/AppController.html",[195,1.805,196,3.058]],["body/controllers/AppController.html",[3,0.166,4,0.129,5,0.147,7,0.28,20,0.012,23,0.563,25,0.24,26,0.426,27,0.166,28,0.008,37,0.008,132,0.01,133,0.222,140,2.209,147,1.103,150,2.807,172,2.437,186,1.285,195,2.706,196,5.424,197,2.916,198,5.478,199,1.388,200,8.144,201,6.254,202,1.324,203,3.809,204,6.254,205,6.254,206,2.14,207,6.254,208,6.254]],["title/interfaces/AppLaunchAction.html",[0,0.255,47,1.473]],["body/interfaces/AppLaunchAction.html",[0,0.516,1,2.609,2,0.916,3,0.096,4,0.075,5,0.085,6,1.28,7,0.162,8,0.831,9,0.805,10,0.972,11,0.73,12,1.883,13,1.519,14,0.89,15,1.001,16,1.43,17,0.89,18,1.389,19,0.311,20,0.012,21,1.063,22,2.066,23,0.79,24,1.439,25,0.118,26,0.247,27,0.225,28,0.007,29,1.771,30,1.771,31,1.771,32,1.771,33,1.771,34,1.771,35,1.771,36,1.436,37,0.007,38,2.811,39,1.366,40,1.726,41,1.366,42,1.366,43,1.366,44,1.366,45,1.366,46,1.366,47,1.828,48,2.483,49,2.483,50,2.184,51,2.042,52,2.327,53,0.944,54,1.951,55,1.366,56,2.203,57,1.366,58,1.366,59,1.366,60,1.366,61,1.366,62,1.366,63,1.366,64,1.366,65,1.366,66,1.366,67,1.366,68,2.276,69,1.951,70,1.366,71,1.366,72,1.366,73,2.002,74,1.366,75,1.366,76,1.951,77,1.366,78,1.366,79,1.366,80,1.366,81,1.366,82,2.327,83,1.366,84,1.828,85,1.828,86,1.366,87,1.366,88,1.366,89,1.366,90,1.366,91,1.366,92,1.366,93,1.366,94,1.366,95,1.951,96,1.366,97,1.366,98,1.366,99,1.28,100,1.366,101,1.366,102,2.327,103,1.366,104,1.366,105,1.366,106,1.366,107,1.366,108,1.366,109,1.366,110,1.366,111,1.032,112,1.366,113,1.366,114,1.366,115,1.366,116,0.299,117,1.366,118,1.366,119,1.366,120,1.366,121,1.366,122,1.28,123,2.133,124,1.366,125,1.366,126,1.366,127,1.828,128,1.771,129,1.366,130,1.366,131,1.366,132,0.007]],["title/modules/AppModule.html",[209,1.682,210,3.058]],["body/modules/AppModule.html",[3,0.107,4,0.084,5,0.095,9,0.63,19,0.169,20,0.012,23,0.578,25,0.27,26,0.276,27,0.107,28,0.005,37,0.005,116,0.334,132,0.007,133,0.144,147,0.987,149,0.857,184,1.477,187,0.965,196,4.701,197,2.609,199,1.05,202,1.357,209,3.027,210,6.163,211,2.045,212,2.135,213,2.343,214,1.888,215,2.135,216,3.087,217,2.233,218,3.546,219,3.546,220,5.138,221,5.138,222,5.138,223,5.138,224,4.834,225,3.238,226,2.343,227,2.233,228,3.215,229,4.102,230,4.701,231,4.102,232,6.059,233,4.901,234,4.049,235,6.359,236,2.771,237,3.647,238,6.359,239,4.049,240,3.215,241,2.233,242,4.049,243,3.546,244,4.049,245,2.771,246,5.596,247,3.215,248,4.049,249,3.546,250,4.049,251,4.049,252,3.83,253,4.049,254,4.102,255,4.049,256,4.049,257,4.049,258,4.049,259,3.546,260,0.965,261,3.215,262,3.546,263,3.031,264,3.215,265,3.546,266,3.546,267,2.061,268,1.799,269,3.546,270,3.546,271,3.215,272,3.546,273,3.546,274,3.546,275,2.466,276,3.546,277,2.771,278,3.215,279,3.546,280,3.546,281,2.968,282,3.546,283,3.546,284,6.577,285,3.546,286,3.546,287,3.546,288,3.546,289,3.546,290,1.963,291,4.049,292,4.049,293,3.215,294,4.049,295,4.049,296,3.546,297,4.049,298,4.049,299,4.049,300,1.188,301,4.049,302,4.049,303,4.049,304,4.901,305,5.596,306,4.049,307,4.049,308,5.596,309,4.049,310,4.049,311,4.049,312,4.049,313,4.049,314,4.049,315,4.049,316,2.951,317,3.546,318,4.049,319,4.049,320,4.049,321,4.049,322,4.049,323,3.546,324,4.049,325,1.262,326,1.342,327,1.632,328,2.607,329,2.607,330,2.607,331,3.215,332,3.546]],["title/controllers/AuthController.html",[195,1.805,333,2.854]],["body/controllers/AuthController.html",[3,0.114,4,0.089,5,0.101,7,0.192,9,0.905,11,0.821,16,1.185,19,0.275,20,0.012,23,0.524,24,1.022,25,0.254,26,0.292,27,0.154,28,0.006,37,0.006,53,1.117,116,0.48,132,0.008,133,0.234,140,1.515,144,1.671,147,1.166,149,1.232,150,2.966,172,1.671,184,2.41,186,1.456,190,4.121,195,1.856,197,2,199,1.092,202,1.398,203,2.612,206,1.467,260,1.575,267,2.124,268,2.124,277,2.935,316,3.069,325,1.815,326,2.191,327,2.664,328,3.748,329,3.748,330,3.748,333,3.984,334,3.406,335,2.382,336,6.207,337,5.821,338,6.532,339,4.289,340,4.289,341,5.195,342,5.099,343,6.207,344,4.623,345,5.099,346,4.289,347,6.49,348,4.289,349,4.289,350,4.623,351,5.729,352,4.289,353,5.829,354,4.289,355,4.289,356,3.748,357,2.761,358,3.406,359,3.406,360,2.482,361,3.645,362,3.338,363,1.925,364,3.406,365,3.069,366,3.144,367,3.645,368,2.935,369,4.623,370,3.757,371,2.959,372,2.268,373,3.757,374,2.823,375,3.757,376,3.757,377,3.406,378,3.144,379,3.757,380,3.757,381,1.729,382,3.757,383,2.262,384,3.757,385,2.482,386,2.761,387,3.757,388,3.757,389,3.757,390,3.757,391,3.757,392,5.099,393,3.757,394,3.757,395,3.757]],["title/modules/AuthModule.html",[209,1.682,220,2.854]],["body/modules/AuthModule.html",[3,0.134,4,0.105,5,0.12,20,0.012,25,0.272,26,0.346,27,0.134,28,0.007,37,0.007,132,0.009,133,0.18,187,1.21,197,3.033,209,3.156,211,2.564,212,2.677,213,2.937,214,2.367,215,2.677,216,3.96,217,3.588,220,5.869,224,5.156,225,3.764,226,2.937,227,2.8,231,5.263,240,5.702,241,2.8,259,4.446,333,4.913,335,1.582,360,2.937,367,4.418,368,3.474,377,5.167,396,4.446,397,5.076,398,4.446,399,5.481,400,5.481,401,5.481,402,5.076,403,4.875,404,6.506,405,4.031,406,7.18,407,5.076,408,5.076,409,5.076,410,5.076,411,5.076,412,3.721,413,4.031,414,5.076,415,4.446,416,5.076,417,4.446,418,5.076]],["title/injectables/AuthService.html",[367,2.301,419,1.119]],["body/injectables/AuthService.html",[3,0.113,4,0.088,5,0.101,7,0.191,9,1.187,19,0.308,20,0.012,23,0.746,25,0.24,26,0.291,27,0.113,28,0.006,37,0.006,53,1.987,116,0.644,132,0.008,133,0.152,144,2.262,147,1.347,149,1.615,163,3.393,165,2.75,179,2.117,186,1.632,199,1.089,202,1.566,241,2.356,260,1.86,335,2.627,338,4.61,365,3.73,366,3.132,367,3.202,371,2.753,372,1.665,374,3.198,378,4.256,381,2.983,403,4.555,405,3.393,417,5.085,419,1.557,420,1.917,421,3.742,422,5.805,423,5.805,424,6.594,425,5.805,426,4.272,427,7.807,428,3.637,429,4.272,430,5.805,431,7.075,432,4.272,433,4.272,434,5.805,435,3.558,436,4.272,437,5.805,438,4.272,439,5.805,440,5.776,441,6.197,442,4.272,443,3.742,444,5.805,445,4.272,446,4.256,447,4.272,448,5.805,449,4.272,450,4.272,451,4.272,452,3.973,453,4.272,454,5.805,455,5.085,456,4.272,457,3.742,458,3.393,459,4.272,460,4.272,461,5.805,462,2.252,463,4.272,464,4.272,465,4.272,466,4.272,467,4.272,468,4.272,469,2.158,470,3.132,471,4.272]],["title/classes/BaseModel.html",[133,0.148,472,2.107]],["body/classes/BaseModel.html",[0,0.269,3,0.116,4,0.091,5,0.103,7,0.197,8,0.95,9,1.113,11,0.619,18,1.074,19,0.328,20,0.012,23,0.644,25,0.232,27,0.157,28,0.006,36,1.289,37,0.008,116,0.488,132,0.008,133,0.156,135,1.455,139,2.826,147,1.41,149,1.251,179,1.601,180,3.004,186,1.215,199,1.109,202,1.251,206,2.632,267,1.411,268,1.411,300,1.735,325,1.368,326,1.455,327,1.77,335,2.398,374,2.867,381,2.384,435,3.117,472,2.987,473,3.486,474,4.902,475,5.64,476,4.451,477,5.245,478,3.211,479,4.576,480,5.64,481,4.696,482,4.902,483,4.39,484,4.39,485,2.229,486,1.961,487,4.335,488,4.39,489,4.39,490,4.548,491,4.39,492,4.39,493,4.335,494,5.245,495,5.86,496,4.39,497,3.486,498,3.486,499,3.336,500,4.902,501,4.39,502,4.902,503,2.885,504,3.486,505,3.845,506,1.654,507,3.845,508,5.179,509,3.218,510,5.179,511,3.486,512,1.833,513,3.845,514,3.486,515,2.673,516,2.304,517,3.845,518,2.54,519,3.486,520,2.54,521,3.845,522,3.845,523,3.845,524,2.54,525,2.421,526,2.673,527,3.845,528,1.97,529,1.97,530,3.845,531,3.845,532,3.845,533,3.845,534,3.486,535,3.845]],["title/interfaces/BaseRoute.html",[0,0.255,536,2.022]],["body/interfaces/BaseRoute.html",[0,0.45,2,1.059,3,0.111,4,0.087,5,0.099,7,0.188,8,0.92,10,1.123,11,0.59,14,1.028,15,1.157,17,1.028,18,1.27,19,0.334,20,0.012,21,1.176,23,0.722,25,0.186,26,0.285,27,0.215,28,0.006,36,1.249,37,0.005,51,2.04,116,0.606,132,0.008,136,1.812,140,2.478,184,2.089,186,1.341,260,1.672,267,1.841,268,1.841,290,3.402,325,1.785,326,1.899,327,1.688,385,2.423,462,2.208,469,2.115,506,1.578,516,1.632,524,2.423,525,2.31,536,2.777,537,2.31,538,2.644,539,3.7,540,3.7,541,3.7,542,3.545,543,3.919,544,3.919,545,2.866,546,2.866,547,2.696,548,2.696,549,2.115,550,2.696,551,2.696,552,2.696,553,2.696,554,3.687,555,2.115,556,2.031,557,3.488,558,2.866,559,2.866,560,2.55,561,2.866,562,2.55,563,3.488,564,2.423,565,2.031,566,2.208,567,2.866,568,2.866,569,2.115,570,3.6,571,2.031,572,2.696,573,2.866,574,2.866,575,2.208,576,2.208,577,2.208,578,2.251,579,1.688,580,2.866,581,2.031,582,2.866,583,2.208,584,2.696,585,2.696,586,2.866,587,2.866,588,2.866,589,2.866,590,2.866,591,3.919,592,2.866,593,2.866,594,2.478,595,2.696,596,2.031,597,2.696,598,2.696,599,2.696,600,2.031,601,3.02,602,2.208,603,2.866,604,2.866,605,2.866,606,2.866]],["title/interfaces/Comment.html",[0,0.255,123,1.473]],["body/interfaces/Comment.html",[0,0.516,1,2.606,2,0.911,3,0.095,4,0.074,5,0.085,6,1.273,7,0.162,8,0.828,10,0.967,11,0.727,12,1.877,13,1.513,14,0.884,15,0.996,16,1.425,17,0.884,18,1.392,19,0.317,20,0.012,21,1.059,22,2.06,23,0.791,24,1.434,25,0.117,26,0.246,27,0.225,28,0.007,29,1.764,30,1.764,31,1.764,32,1.764,33,1.764,34,1.764,35,1.764,36,1.433,37,0.007,38,2.807,39,1.358,40,1.723,41,1.358,42,1.358,43,1.358,44,1.358,45,1.358,46,1.358,47,1.273,48,1.358,49,1.358,50,1.195,51,2.019,52,1.273,53,0.938,54,1.943,55,1.358,56,2.196,57,1.358,58,1.358,59,1.358,60,1.358,61,1.358,62,1.358,63,1.358,64,1.358,65,1.358,66,1.358,67,1.358,68,2.269,69,1.943,70,1.358,71,1.358,72,1.358,73,1.996,74,1.358,75,1.358,76,1.943,77,1.358,78,1.358,79,1.358,80,1.358,81,1.358,82,2.321,83,1.358,84,1.821,85,1.821,86,1.358,87,1.358,88,1.358,89,1.358,90,1.358,91,1.358,92,1.358,93,1.358,94,1.358,95,2.62,96,1.358,97,1.358,98,1.358,99,1.273,100,1.358,101,1.358,102,2.321,103,1.358,104,1.358,105,1.358,106,1.358,107,1.358,108,1.358,109,1.358,110,1.358,111,1.026,112,1.358,113,1.358,114,1.358,115,1.358,116,0.297,117,1.358,118,1.358,119,1.358,120,1.358,121,1.358,122,1.273,123,2.63,124,2.476,125,2.476,126,2.476,127,1.821,128,1.764,129,1.358,130,1.358,131,1.358,132,0.007]],["title/interfaces/Comments.html",[0,0.255,127,1.473]],["body/interfaces/Comments.html",[0,0.518,1,2.628,2,0.941,3,0.099,4,0.077,5,0.088,6,1.314,7,0.167,8,0.847,10,0.998,11,0.744,12,1.91,13,1.548,14,0.913,15,1.028,16,1.458,17,0.913,18,1.388,19,0.278,20,0.012,21,1.084,22,2.097,23,0.789,24,1.46,25,0.121,26,0.254,27,0.226,28,0.007,29,1.805,30,1.805,31,1.805,32,1.805,33,1.805,34,1.805,35,1.805,36,1.454,37,0.007,38,2.833,39,1.403,40,1.739,41,1.403,42,1.403,43,1.403,44,1.403,45,1.403,46,1.403,47,1.314,48,1.403,49,1.403,50,1.234,51,2.029,52,1.314,53,0.969,54,1.988,55,1.403,56,2.235,57,1.403,58,1.403,59,1.403,60,1.403,61,1.403,62,1.403,63,1.403,64,1.403,65,1.403,66,1.403,67,1.403,68,2.31,69,1.988,70,1.403,71,1.403,72,1.403,73,2.032,74,1.403,75,1.403,76,1.988,77,1.403,78,1.403,79,1.403,80,1.403,81,1.403,82,2.355,83,1.403,84,1.863,85,1.863,86,1.403,87,1.403,88,1.403,89,1.403,90,1.403,91,1.403,92,1.403,93,1.403,94,1.403,95,1.988,96,1.403,97,1.403,98,1.403,99,1.314,100,1.403,101,1.403,102,2.355,103,1.403,104,1.403,105,1.403,106,1.403,107,1.403,108,1.403,109,1.403,110,1.403,111,1.06,112,1.403,113,1.403,114,1.403,115,1.403,116,0.307,117,1.403,118,1.403,119,1.403,120,1.403,121,1.403,122,1.314,123,2.486,124,1.403,125,1.403,126,1.403,127,2.582,128,1.805,129,1.403,130,1.403,131,1.403,132,0.007]],["title/classes/CreateTagsDto.html",[133,0.148,607,2.199]],["body/classes/CreateTagsDto.html",[0,0.396,3,0.133,4,0.104,5,0.118,7,0.225,8,1.211,19,0.346,20,0.012,23,0.719,25,0.245,27,0.207,28,0.007,36,1.095,37,0.007,111,1.429,116,0.67,132,0.009,133,0.277,135,1.664,147,0.886,150,2.253,172,1.956,199,0.942,206,2.21,275,3.057,300,2.095,362,3.263,363,2.253,472,3.263,476,2.905,478,2.253,503,2.604,506,2.434,512,2.697,569,2.536,578,1.429,607,3.406,608,3.232,609,4.854,610,4.397,611,5.02,612,3.232,613,3.563,614,3.934,615,3.934,616,4.888,617,4.598,618,4.158,619,3.057,620,2.647,621,3.057,622,3.057,623,3.436,624,3.608,625,2.769,626,3.436,627,3.436,628,3.436,629,3.737,630,3.436,631,3.436,632,2.769,633,3.436,634,3.436,635,3.436,636,3.436,637,3.436,638,3.436,639,3.436,640,2.905,641,3.232,642,3.232,643,3.232,644,3.232,645,3.436,646,3.436,647,3.232,648,3.232,649,2.905,650,3.68]],["title/classes/CreateUserDto.html",[133,0.148,651,2.413]],["body/classes/CreateUserDto.html",[3,0.134,4,0.105,5,0.119,7,0.227,8,1.043,9,1.176,11,1.01,13,1.484,19,0.333,20,0.012,23,0.756,25,0.245,27,0.172,28,0.007,37,0.007,50,2.377,51,1.593,73,2.377,132,0.009,133,0.254,135,1.678,147,1.412,150,3.592,172,1.972,187,1.206,300,1.905,362,4.043,363,2.271,372,3.048,374,3.476,512,2.112,578,2.041,610,4.432,612,3.258,613,4.314,614,3.082,615,3.082,647,4.869,648,3.258,651,3.757,652,4.019,653,6.279,654,4.615,655,5.256,656,5.256,657,5.06,658,5.156,659,5.06,660,6.492,661,5.06,662,5.256,663,5.06,664,5.06,665,5.06,666,5.06,667,5.06,668,5.156,669,4.443,670,4.432,671,4.019,672,4.432,673,3.258,674,4.432]],["title/modules/CronModule.html",[209,1.682,252,2.854]],["body/modules/CronModule.html",[3,0.158,4,0.124,5,0.141,20,0.012,25,0.251,26,0.408,27,0.158,28,0.008,37,0.008,132,0.01,133,0.212,187,1.426,209,3.311,211,3.023,212,3.155,213,3.462,214,2.79,215,3.155,216,4.265,217,3.3,225,4.169,226,3.462,227,3.3,252,5.824,675,5.241,676,5.241,677,5.709,678,5.709,679,5.983,680,4.931,681,7.206,682,5.983]],["title/injectables/CronService.html",[419,1.119,677,2.854]],["body/injectables/CronService.html",[3,0.07,4,0.055,5,0.062,7,0.119,8,0.659,9,1.082,10,1.514,12,0.827,18,1.273,19,0.309,20,0.012,23,0.749,25,0.163,26,0.181,27,0.07,28,0.004,37,0.003,111,0.755,116,0.71,132,0.005,133,0.094,144,1.033,147,1.409,149,1.472,150,2.252,179,1.83,186,0.843,187,1.604,188,3.678,199,0.77,202,1.616,206,1.716,237,3.975,245,1.815,260,1.738,263,1.107,267,0.852,268,0.852,325,2.099,326,0.879,327,1.069,328,1.707,329,1.707,330,1.707,350,3.258,419,1.1,420,1.19,462,1.398,469,1.34,470,1.944,485,2.128,486,1.872,538,2.128,547,3.635,564,2.903,583,3.404,677,2.807,680,5.082,683,2.323,684,4.102,685,4.394,686,6.994,687,4.477,688,4.102,689,5.646,690,6.945,691,4.102,692,5.017,693,4.484,694,5.017,695,4.102,696,4.102,697,4.102,698,4.102,699,4.102,700,4.102,701,4.102,702,5.646,703,5.017,704,5.017,705,5.017,706,5.646,707,5.646,708,2.652,709,4.484,710,4.102,711,3.593,712,4.102,713,7.14,714,2.652,715,7.539,716,5.656,717,6.065,718,4.102,719,6.892,720,2.652,721,7.294,722,4.102,723,2.652,724,4.102,725,2.652,726,4.102,727,4.102,728,2.652,729,4.102,730,2.652,731,4.102,732,2.652,733,5.017,734,4.102,735,4.102,736,2.652,737,2.652,738,2.652,739,2.652,740,2.652,741,2.652,742,2.652,743,2.652,744,2.652,745,5.017,746,2.652,747,5.017,748,3.055,749,2.652,750,4.102,751,4.102,752,2.652,753,4.102,754,2.652,755,2.652,756,2.323,757,1.707,758,4.139,759,2.652,760,4.102,761,2.652,762,2.652,763,2.323,764,2.323,765,1.815,766,2.652,767,2.652,768,2.652,769,2.652,770,2.652,771,2.981,772,2.652,773,2.652,774,2.652,775,2.323,776,5.017,777,2.323,778,1.944,779,2.652,780,2.652,781,2.652,782,4.394,783,2.652,784,2.652,785,2.652,786,2.652,787,4.102,788,2.323,789,2.652,790,2.652,791,2.652,792,2.652,793,4.102,794,2.652,795,2.652,796,2.652,797,5.017,798,2.652,799,2.652,800,2.652,801,2.652]],["title/classes/CrudConfigService.html",[133,0.148,802,2.54]],["body/classes/CrudConfigService.html",[3,0.063,4,0.049,5,0.056,7,0.106,8,0.603,9,0.368,10,0.635,11,0.334,14,0.581,15,0.655,17,0.581,18,1.075,19,0.31,20,0.012,21,0.487,23,0.581,24,0.565,25,0.188,26,0.161,27,0.153,28,0.003,37,0.003,40,1.339,116,0.569,132,0.005,133,0.237,135,0.786,136,2.019,140,1.326,147,0.663,149,0.501,179,0.864,184,2.111,186,1.595,187,1.265,199,0.705,202,0.501,206,2.678,214,1.105,237,1.249,260,1.747,263,1.948,267,0.762,268,0.762,290,1.821,300,0.695,325,0.739,326,0.786,361,3.397,383,2.46,428,3.193,435,2.699,485,1.415,486,1.547,499,3.121,516,2.609,528,1.686,529,1.686,536,2.807,538,1.759,539,1.98,540,1.98,541,1.249,542,2.924,549,1.897,555,1.897,556,1.821,565,2.575,566,2.8,570,3.455,571,1.821,575,1.98,576,2.46,577,1.249,578,1.512,579,1.514,594,2.504,596,2.807,600,3.246,601,3.247,602,1.98,624,1.897,802,2.287,803,3.004,804,1.525,805,3.29,806,1.98,807,2.369,808,2.57,809,2.369,810,1.371,811,3.004,812,1.443,813,1.443,814,1.443,815,1.443,816,2.57,817,1.443,818,3.634,819,2.57,820,3.193,821,2.57,822,2.57,823,1.621,824,4.215,825,1.621,826,1.621,827,1.621,828,1.621,829,2.57,830,1.621,831,3.564,832,2.57,833,1.621,834,2.57,835,2.418,836,1.621,837,2.173,838,1.621,839,1.621,840,1.621,841,1.621,842,1.98,843,1.621,844,2.57,845,1.621,846,1.621,847,2.57,848,1.621,849,1.621,850,1.621,851,1.621,852,1.621,853,1.621,854,1.621,855,2.57,856,1.525,857,3.004,858,2.842,859,1.621,860,1.371,861,1.621,862,1.621,863,1.621,864,3.193,865,2.57,866,1.621,867,1.371,868,1.443,869,1.621,870,1.621,871,1.443,872,1.621,873,1.621,874,2.57,875,1.621,876,1.621,877,2.57,878,1.621,879,1.621,880,2.57,881,1.621,882,1.621,883,1.621,884,1.621,885,1.621,886,1.621,887,1.621,888,1.621,889,2.57,890,1.621,891,2.418,892,1.525,893,2.287,894,2.287,895,1.621,896,3.193,897,1.621,898,1.443,899,1.621,900,1.621,901,4.417,902,3.193,903,2.57,904,1.621,905,1.621,906,1.621,907,1.621,908,1.621,909,1.621,910,4.417,911,1.621,912,1.525,913,1.621,914,1.621,915,1.621,916,1.621,917,1.621,918,1.621,919,1.621,920,3.193,921,1.621,922,1.621,923,1.621,924,1.621,925,1.621,926,1.621,927,2.57,928,1.621,929,1.621,930,1.621,931,2.57,932,1.621,933,1.621,934,1.621,935,2.57,936,1.621,937,1.621,938,2.57,939,3.193,940,1.621,941,1.621,942,3.193,943,1.621,944,1.621,945,1.621,946,2.57,947,1.621,948,1.621,949,2.57,950,1.621,951,1.621,952,2.57,953,1.621,954,1.621,955,1.621,956,2.57,957,1.621,958,1.621,959,1.621,960,1.621,961,1.621,962,1.621,963,1.621,964,1.621,965,1.621,966,1.621,967,1.621,968,1.621,969,1.621,970,1.621,971,1.621,972,1.621,973,1.621,974,1.621,975,1.621,976,2.57,977,1.621,978,2.57,979,1.621,980,1.621,981,1.621,982,1.621,983,1.621,984,1.621,985,1.621,986,2.57,987,1.621,988,1.621]],["title/classes/CrudController.html",[133,0.148,989,2.854]],["body/classes/CrudController.html",[1,2.383,3,0.077,4,0.06,5,0.069,7,0.131,9,1.043,11,1.128,16,1.762,18,1.179,19,0.34,20,0.012,21,1.43,24,0.696,25,0.226,26,0.199,27,0.077,28,0.004,37,0.006,116,0.554,132,0.006,133,0.104,135,0.968,137,2.14,142,4.084,144,2.075,146,1.879,147,1.183,149,1.419,150,2.862,163,2.318,164,2.318,172,1.138,179,1.61,185,3.237,186,1.43,187,1.984,188,4.916,195,2.902,199,0.828,202,1.349,260,1.519,316,3.13,335,2.476,356,2.842,357,1.879,371,1.219,381,2.57,383,3.871,435,3.868,452,3.022,472,3.623,478,3.593,516,1.721,520,1.689,579,2.891,581,3.478,583,3.672,594,1.263,619,1.778,625,3.274,632,2.435,771,1.843,782,5.2,806,2.808,842,4.418,858,4.084,894,2.689,989,3.022,990,2.557,991,3.904,992,3.867,993,4.352,994,3.022,995,5.2,996,3.867,997,4.714,998,4.363,999,4.063,1000,4.063,1001,2.919,1002,4.363,1003,2.919,1004,3.867,1005,5.2,1006,4.766,1007,3.867,1008,3.237,1009,3.867,1010,1.879,1011,5.584,1012,3.867,1013,4.415,1014,4.317,1015,2.919,1016,2.919,1017,4.317,1018,2.919,1019,3.841,1020,2.919,1021,2.919,1022,2.919,1023,1.998,1024,5.936,1025,4.415,1026,2.919,1027,2.919,1028,1.998,1029,4.352,1030,2.919,1031,2.919,1032,2.919,1033,1.778,1034,3.237,1035,4.415,1036,2.919,1037,2.919,1038,4.714,1039,2.318,1040,5.874,1041,2.318,1042,2.919,1043,2.557,1044,2.689,1045,2.557,1046,5.584,1047,3.867,1048,2.919,1049,3.237,1050,2.919,1051,2.919,1052,2.919,1053,2.919,1054,4.415,1055,4.229,1056,2.919,1057,2.919,1058,2.919,1059,2.919,1060,2.318,1061,2.318,1062,2.318,1063,2.318,1064,2.919,1065,2.318]],["title/interfaces/CrudOptions.html",[0,0.255,565,2.022]],["body/interfaces/CrudOptions.html",[0,0.443,2,1.014,3,0.106,4,0.083,5,0.095,7,0.18,8,0.893,9,1.275,10,1.076,11,0.566,14,0.985,15,1.109,17,0.985,18,1.257,19,0.355,20,0.012,21,1.142,23,0.692,25,0.18,26,0.273,27,0.213,28,0.005,36,1.213,37,0.005,51,1.884,116,0.459,132,0.007,136,1.736,140,1.417,184,2.029,186,1.311,260,1.642,267,1.788,268,1.788,290,1.946,325,1.734,326,1.844,327,1.618,385,2.322,462,2.116,469,2.027,506,2.597,516,2.685,524,2.322,525,2.214,536,1.946,537,2.214,538,1.512,539,2.116,540,2.116,541,2.932,542,2.81,543,4.716,544,3.806,545,2.746,546,2.746,547,2.584,548,2.584,549,2.027,550,2.584,551,2.584,552,2.584,553,2.584,554,3.58,555,2.027,556,1.946,557,3.387,558,2.746,559,2.746,560,2.444,561,2.746,562,2.444,563,4.197,564,2.322,565,2.697,566,3.633,567,4.716,568,2.746,569,3.481,570,3.567,571,3.342,572,2.584,573,2.746,574,2.746,575,2.116,576,3.633,577,2.116,578,2.228,579,1.618,580,2.746,581,1.946,582,2.746,583,2.116,584,2.584,585,2.584,586,2.746,587,2.746,588,2.746,589,2.746,590,2.746,591,3.806,592,2.746,593,2.746,594,2.406,595,2.584,596,1.946,597,2.584,598,2.584,599,2.584,600,1.946,601,2.932,602,2.116,603,2.746,604,2.746,605,2.746,606,2.746,1014,3.58,1066,5.179]],["title/classes/CrudRoutesFactory.html",[133,0.148,893,2.54]],["body/classes/CrudRoutesFactory.html",[3,0.055,4,0.043,5,0.049,7,0.094,8,0.545,9,0.954,10,0.56,11,0.294,14,0.513,15,0.577,17,0.513,18,1.026,19,0.321,20,0.012,21,0.429,23,0.552,24,0.498,25,0.176,26,0.142,27,0.144,28,0.003,37,0.003,40,1.257,116,0.631,132,0.004,133,0.227,135,0.693,136,3.276,140,1.199,144,0.814,147,1.322,149,1.298,179,0.762,184,1.981,186,1.555,187,1.177,199,0.637,202,1.437,206,2.614,214,0.974,237,3.37,260,1.689,263,1.79,267,0.672,268,0.672,290,1.646,300,0.613,325,0.651,326,0.693,361,3.211,383,2.261,428,1.873,435,1.999,485,1.28,486,1.422,499,3.41,516,2.39,528,1.524,529,1.524,536,3.293,538,1.616,539,1.79,540,1.79,541,1.102,542,3.511,549,2.495,555,2.495,556,1.646,565,3.099,566,2.604,570,3.325,571,1.646,575,1.102,576,2.261,577,1.102,578,1.82,579,2.473,594,2.35,596,2.634,600,3.293,601,3.069,602,1.79,624,1.715,802,1.272,803,4.874,804,1.345,806,1.102,808,1.43,810,1.209,811,2.761,812,1.272,813,1.272,814,1.272,815,1.272,816,2.323,817,1.272,818,3.38,819,2.323,820,2.935,821,2.323,822,2.323,823,1.43,824,3.983,825,1.43,826,1.43,827,1.43,828,1.43,829,2.323,830,1.43,831,3.368,832,2.323,833,1.43,834,2.323,835,2.186,836,1.43,837,1.964,838,1.43,839,1.43,840,1.43,841,1.43,842,1.79,843,1.43,844,2.323,845,1.43,846,1.43,847,2.323,848,1.43,849,1.43,850,1.43,851,1.43,852,1.43,853,1.43,854,1.43,855,3.38,856,1.345,857,2.761,858,2.612,859,1.43,860,1.209,861,1.43,862,1.43,863,1.43,864,2.935,865,2.323,866,1.43,867,1.209,868,1.272,869,1.43,870,1.43,871,1.272,872,1.43,873,1.43,874,2.323,875,1.43,876,1.43,877,2.323,878,1.43,879,1.43,880,2.323,881,1.43,882,1.43,883,1.43,884,1.43,885,1.43,886,1.43,887,1.43,888,1.43,889,2.323,890,1.43,891,2.186,892,1.345,893,3.008,894,3.545,895,1.43,896,2.935,897,1.43,898,1.272,899,1.43,900,1.43,901,4.198,902,2.935,903,2.323,904,2.323,905,1.43,906,2.935,907,1.43,908,2.935,909,1.43,910,4.522,911,1.43,912,2.761,913,2.935,914,1.43,915,1.43,916,1.43,917,1.43,918,1.43,919,2.323,920,2.935,921,1.43,922,1.43,923,2.323,924,1.43,925,1.43,926,3.38,927,2.323,928,3.38,929,1.43,930,1.43,931,2.323,932,1.43,933,1.43,934,1.43,935,2.323,936,1.43,937,1.43,938,2.323,939,2.935,940,1.43,941,1.43,942,2.935,943,1.43,944,1.43,945,1.43,946,2.323,947,1.43,948,1.43,949,2.323,950,1.43,951,1.43,952,2.323,953,1.43,954,1.43,955,1.43,956,2.323,957,1.43,958,1.43,959,3.38,960,1.43,961,1.43,962,1.43,963,1.43,964,1.43,965,1.43,966,1.43,967,1.43,968,1.43,969,1.43,970,1.43,971,1.43,972,1.43,973,1.43,974,1.43,975,2.323,976,2.323,977,1.43,978,2.323,979,1.43,980,1.43,981,2.323,982,1.43,983,1.43,984,2.323,985,1.43,986,2.323,987,1.43,988,1.43,1067,3.395,1068,3.395,1069,3.395,1070,3.395,1071,2.089,1072,3.395,1073,2.089,1074,2.089,1075,2.089,1076,2.089,1077,2.089,1078,2.089,1079,2.089,1080,2.089,1081,2.089,1082,2.089,1083,2.089,1084,2.089,1085,2.089,1086,2.089,1087,2.089,1088,2.089,1089,2.089]],["title/classes/CrudService.html",[133,0.148,1090,2.854]],["body/classes/CrudService.html",[3,0.081,4,0.063,5,0.072,7,0.137,9,1.13,11,1.144,14,1.119,17,1.119,18,1.193,19,0.303,20,0.012,21,1.246,23,0.492,25,0.229,26,0.208,27,0.081,28,0.007,37,0.01,116,0.6,132,0.006,133,0.108,135,1.011,144,2.13,146,4.549,147,1.311,149,1.538,160,2.421,186,1.729,187,1.087,199,0.856,202,1.538,260,1.77,300,1.338,316,3.726,335,2.609,371,1.272,372,2.364,381,2.849,458,3.622,462,2.405,469,2.304,470,3.344,472,1.54,476,1.764,478,2.723,485,1.149,486,1.011,503,1.229,504,2.421,506,2.738,515,3.328,516,1.777,520,1.764,528,1.368,529,1.368,534,2.421,578,1.298,579,2.446,581,2.942,583,2.405,607,3.199,619,1.856,632,2.516,651,3.51,748,1.856,771,1.272,806,2.882,842,2.405,858,4.151,860,3.51,894,2.778,991,4.007,992,3.995,993,4.447,994,3.121,995,5.314,996,3.995,997,3.622,998,4.152,999,3.121,1000,3.121,1002,3.74,1004,3.995,1005,5.314,1006,4.152,1007,3.995,1008,4.007,1009,3.995,1010,2.936,1017,3.905,1019,3.76,1023,3.121,1028,3.121,1029,3.344,1033,2.778,1034,3.344,1043,2.67,1044,1.856,1045,2.67,1049,2.234,1090,3.121,1091,2.67,1092,3.995,1093,3.622,1094,3.344,1095,3.344,1096,2.421,1097,4.447,1098,3.048,1099,3.048,1100,6.008,1101,3.048,1102,5.546,1103,5.413,1104,3.622,1105,3.048,1106,3.344,1107,3.048,1108,3.622,1109,3.048,1110,3.344,1111,3.048,1112,3.048,1113,3.622,1114,3.048,1115,2.67,1116,3.048,1117,3.048,1118,4.818,1119,2.67,1120,3.048,1121,2.234,1122,3.048,1123,3.048,1124,2.67,1125,2.67,1126,3.048,1127,4.561,1128,3.048,1129,4.561,1130,4.561,1131,4.561,1132,3.048,1133,3.048]],["title/classes/CustomQueryBuilder.html",[133,0.148,490,2.54]],["body/classes/CustomQueryBuilder.html",[3,0.108,4,0.084,5,0.096,7,0.183,8,0.903,9,0.874,11,0.574,14,1.846,17,1,18,1.28,19,0.321,20,0.012,25,0.182,27,0.149,28,0.005,36,0.888,37,0.008,51,1.379,116,0.464,132,0.007,135,1.351,146,4.142,147,1.386,149,1.189,184,2.654,186,1.495,199,1.055,202,1.468,260,1.653,263,1.701,267,2.339,268,2.339,316,2.964,325,1.27,326,2.413,327,1.643,335,2.562,381,3.108,386,2.623,479,4.403,486,2.494,490,4.856,503,1.643,506,1.536,512,2.346,516,1.588,520,2.358,524,2.358,525,2.248,526,2.482,578,1.6,658,5.508,748,2.482,758,4.121,771,2.896,892,4.142,1047,3.569,1121,2.987,1134,3.236,1135,6.434,1136,6.434,1137,6.434,1138,6.434,1139,5.621,1140,6.936,1141,5.621,1142,4.075,1143,4.075,1144,4.075,1145,4.075,1146,5.621,1147,5.508,1148,4.075,1149,4.075,1150,4.075,1151,4.075,1152,5.621,1153,7.973,1154,4.075,1155,4.075,1156,3.569,1157,4.464,1158,3.569,1159,3.569,1160,3.569,1161,4.075,1162,4.464,1163,4.075,1164,4.075,1165,4.075,1166,4.075,1167,4.075,1168,4.075,1169,4.075,1170,4.075,1171,4.075,1172,6.434,1173,6.936,1174,4.075,1175,4.075,1176,5.621,1177,4.075,1178,4.075]],["title/modules/DatabaseModule.html",[209,1.682,221,2.854]],["body/modules/DatabaseModule.html",[3,0.144,4,0.112,5,0.128,20,0.012,25,0.268,26,0.369,27,0.205,28,0.007,37,0.007,53,1.766,132,0.009,133,0.192,186,1.393,187,1.292,209,3.127,211,2.739,216,2.991,217,2.991,221,4.642,254,3.975,260,1.903,263,2.832,293,4.306,335,1.69,413,4.306,503,2.735,506,2.556,519,4.306,528,2.434,529,2.434,585,4.367,620,3.577,625,3.742,837,3.137,993,4.973,1115,4.749,1179,4.306,1180,6.484,1181,5.854,1182,5.422,1183,5.422,1184,4.749,1185,4.749,1186,5.387,1187,4.749,1188,4.749,1189,4.749,1190,5.879,1191,4.749,1192,4.749,1193,4.749,1194,4.749,1195,4.749,1196,4.306,1197,4.749]],["title/modules/EmailModule.html",[209,1.682,1198,2.854]],["body/modules/EmailModule.html",[3,0.157,4,0.123,5,0.14,20,0.012,25,0.25,26,0.405,27,0.157,28,0.008,37,0.008,132,0.009,133,0.211,187,1.415,197,2.769,209,3.304,211,3,212,3.131,213,3.436,214,2.769,215,3.131,216,4.251,217,4.251,225,4.15,226,3.436,227,3.276,231,4.354,240,5.697,241,3.276,372,2.795,1198,5.765,1199,5.202,1200,5.202,1201,5.202,1202,5.586,1203,5.939,1204,5.939]],["title/classes/EmailScheduleDto.html",[133,0.148,1205,2.854]],["body/classes/EmailScheduleDto.html",[3,0.156,4,0.122,5,0.139,7,0.264,8,1.147,19,0.333,20,0.012,23,0.764,25,0.191,27,0.156,28,0.008,37,0.008,52,2.713,111,2.187,132,0.009,133,0.253,135,1.954,147,1.409,150,3.584,362,3.881,363,2.646,613,4.238,668,6.101,1205,4.887,1206,5.163,1207,7.683,1208,7.683,1209,7.141,1210,5.895,1211,6.101,1212,5.895,1213,5.895,1214,5.895]],["title/controllers/EmailSchedulingController.html",[195,1.805,1215,3.058]],["body/controllers/EmailSchedulingController.html",[3,0.154,4,0.12,5,0.137,7,0.261,9,0.907,19,0.243,20,0.012,25,0.258,26,0.397,27,0.154,28,0.008,37,0.008,116,0.481,132,0.009,133,0.207,140,2.059,147,1.029,149,1.234,150,2.617,172,2.272,195,2.522,197,2.718,199,1.331,202,1.234,203,3.55,206,1.994,267,1.874,268,1.874,325,1.817,326,1.933,327,2.35,335,2.383,356,3.753,357,3.753,372,2.272,381,2.86,485,2.197,757,3.753,1205,5.444,1215,5.2,1216,5.106,1217,6.213,1218,5.106,1219,7.093,1220,5.83,1221,6.213,1222,5.106,1223,4.922,1224,5.106,1225,5.83,1226,5.83,1227,5.106,1228,5.83,1229,5.83,1230,5.83]],["title/modules/EmailSchedulingModule.html",[209,1.682,222,2.854]],["body/modules/EmailSchedulingModule.html",[3,0.156,4,0.122,5,0.139,20,0.012,25,0.259,26,0.401,27,0.156,28,0.008,37,0.008,132,0.009,133,0.209,187,1.402,197,3.326,209,3.296,211,2.972,212,3.102,213,3.404,214,2.743,215,3.102,216,4.234,217,3.245,222,5.806,225,4.127,226,3.404,227,3.245,231,5.229,372,2.78,1198,5.687,1215,5.628,1223,5.349,1224,5.154,1227,6.248,1231,5.154,1232,5.884,1233,5.154,1234,5.884,1235,5.884,1236,5.884]],["title/injectables/EmailSchedulingService.html",[419,1.119,1223,2.685]],["body/injectables/EmailSchedulingService.html",[3,0.142,4,0.111,5,0.126,7,0.24,8,1.081,9,1.047,19,0.281,20,0.012,25,0.258,26,0.365,27,0.142,28,0.007,37,0.007,52,1.892,111,1.526,116,0.556,132,0.009,133,0.19,144,2.624,147,1.299,149,1.425,179,2.817,199,1.263,202,1.134,245,3.667,260,1.604,335,2.295,371,2.811,419,1.806,420,2.405,485,2.538,486,1.777,680,3.667,693,6.134,709,6.134,711,6.449,717,5.847,756,4.693,775,4.693,777,4.693,1202,5.229,1205,5.286,1217,5.897,1218,5.897,1221,4.693,1222,4.693,1223,4.335,1237,4.693,1238,5.358,1239,6.733,1240,5.358,1241,6.733,1242,5.358,1243,5.358,1244,5.358,1245,5.358,1246,6.733,1247,5.358,1248,5.358,1249,5.358,1250,5.358,1251,5.358,1252,5.358]],["title/injectables/EmailService.html",[419,1.119,1202,2.685]],["body/injectables/EmailService.html",[3,0.158,4,0.124,5,0.141,7,0.268,9,1.121,19,0.249,20,0.012,25,0.234,26,0.408,27,0.158,28,0.008,37,0.008,116,0.595,132,0.01,133,0.212,144,2.808,147,1.271,149,1.525,199,1.352,202,1.266,237,3.155,241,3.3,371,2.498,403,5.37,419,1.933,420,2.686,428,3.3,485,2.255,499,3.359,898,3.644,912,3.852,1202,4.639,1253,5.241,1254,7.206,1255,5.241,1256,5.983,1257,7.206,1258,5.983,1259,5.241,1260,3.462,1261,5.983]],["title/injectables/ExcludeNullUndefinedInterceptor.html",[419,1.119,1262,3.312]],["body/injectables/ExcludeNullUndefinedInterceptor.html",[3,0.123,4,0.096,5,0.109,7,0.208,9,0.723,19,0.194,20,0.012,23,0.553,25,0.223,26,0.317,27,0.123,28,0.006,36,1.659,37,0.006,40,1.421,116,0.383,132,0.008,133,0.244,146,3.954,147,0.82,149,0.983,184,1.695,186,1.563,187,1.463,199,1.373,202,0.983,267,1.493,268,1.493,300,1.363,325,2.372,326,1.54,327,1.873,385,2.688,386,3.954,419,1.647,420,2.085,486,2.684,518,3.553,526,2.83,528,2.757,529,2.757,538,2.315,578,1.959,771,2.564,778,4.502,1014,3.954,1160,4.07,1260,3.553,1262,4.877,1263,4.877,1264,3.69,1265,6.141,1266,4.203,1267,6.141,1268,4.502,1269,4.877,1270,4.762,1271,5.732,1272,4.646,1273,5.366,1274,3.954,1275,4.502,1276,4.235,1277,5.009,1278,5.009,1279,4.203,1280,4.502,1281,3.954,1282,4.635,1283,4.502,1284,4.502,1285,4.502,1286,2.688,1287,4.203,1288,3.18,1289,4.07,1290,4.07,1291,4.07,1292,5.379,1293,4.646,1294,4.646,1295,4.646,1296,4.646,1297,4.646,1298,4.646,1299,4.646,1300,4.07]],["title/interfaces/Follower.html",[0,0.255,128,1.427]],["body/interfaces/Follower.html",[0,0.516,1,2.606,2,0.911,3,0.095,4,0.074,5,0.085,6,1.273,7,0.162,8,0.828,10,0.967,11,0.727,12,1.877,13,1.513,14,0.884,15,0.996,16,1.425,17,0.884,18,1.389,19,0.317,20,0.012,21,1.059,22,2.06,23,0.79,24,1.434,25,0.117,26,0.246,27,0.225,28,0.007,29,1.764,30,1.764,31,1.764,32,1.764,33,1.764,34,1.764,35,1.764,36,1.433,37,0.007,38,2.807,39,1.358,40,1.723,41,1.358,42,1.358,43,1.358,44,1.358,45,1.358,46,1.358,47,1.273,48,1.358,49,1.358,50,1.195,51,2.059,52,1.273,53,0.938,54,1.943,55,1.358,56,2.196,57,1.358,58,1.358,59,1.358,60,1.358,61,1.358,62,1.358,63,1.358,64,1.358,65,1.358,66,1.358,67,1.358,68,2.726,69,1.943,70,1.358,71,1.358,72,1.358,73,2.398,74,1.358,75,1.358,76,1.943,77,1.358,78,1.358,79,1.358,80,1.358,81,1.358,82,2.321,83,1.358,84,1.821,85,1.821,86,1.358,87,1.358,88,1.358,89,1.358,90,1.358,91,1.358,92,1.358,93,1.358,94,1.358,95,1.943,96,1.358,97,1.358,98,1.358,99,1.273,100,1.358,101,1.358,102,2.321,103,1.358,104,1.358,105,1.358,106,1.358,107,1.358,108,1.358,109,1.358,110,1.358,111,1.026,112,1.358,113,1.358,114,1.358,115,1.358,116,0.297,117,1.358,118,1.358,119,1.358,120,1.358,121,1.358,122,1.273,123,2.126,124,1.358,125,1.358,126,1.358,127,1.821,128,2.06,129,2.476,130,2.476,131,2.476,132,0.007]],["title/interfaces/GetAppLaunchData.html",[0,0.255,29,1.427]],["body/interfaces/GetAppLaunchData.html",[0,0.517,1,2.708,2,0.938,3,0.098,4,0.077,5,0.087,6,1.31,7,0.166,8,0.845,10,0.995,11,0.742,12,1.907,13,1.544,14,0.91,15,1.025,16,1.454,17,0.91,18,1.388,19,0.277,20,0.012,21,1.081,22,2.093,23,0.789,24,1.457,25,0.12,26,0.253,27,0.226,28,0.007,29,2.093,30,1.8,31,1.8,32,1.8,33,1.8,34,1.8,35,1.8,36,1.451,37,0.007,38,2.983,39,1.398,40,1.831,41,1.398,42,1.398,43,1.398,44,1.398,45,1.398,46,1.398,47,1.31,48,1.398,49,1.398,50,1.23,51,2.028,52,1.31,53,0.966,54,1.983,55,1.398,56,2.231,57,1.398,58,1.398,59,1.398,60,1.398,61,1.398,62,1.398,63,1.398,64,1.398,65,1.398,66,1.398,67,1.398,68,2.305,69,1.983,70,1.398,71,1.398,72,1.398,73,2.028,74,1.398,75,1.398,76,1.983,77,1.398,78,1.398,79,1.398,80,1.398,81,1.398,82,2.351,83,1.398,84,1.859,85,1.859,86,1.398,87,1.398,88,1.398,89,1.398,90,1.398,91,1.398,92,1.398,93,1.398,94,1.398,95,1.983,96,1.398,97,1.398,98,1.398,99,1.31,100,1.398,101,1.398,102,2.351,103,1.398,104,1.398,105,1.398,106,1.398,107,1.398,108,1.398,109,1.398,110,1.398,111,1.056,112,1.398,113,1.398,114,1.398,115,1.398,116,0.306,117,1.398,118,1.398,119,1.398,120,1.398,121,1.398,122,1.31,123,2.16,124,1.398,125,1.398,126,1.398,127,1.859,128,1.8,129,1.398,130,1.398,131,1.398,132,0.007]],["title/interfaces/GetComments.html",[0,0.255,32,1.427]],["body/interfaces/GetComments.html",[0,0.517,1,2.708,2,0.938,3,0.098,4,0.077,5,0.087,6,1.31,7,0.166,8,0.845,10,0.995,11,0.742,12,1.907,13,1.544,14,0.91,15,1.025,16,1.454,17,0.91,18,1.388,19,0.277,20,0.012,21,1.081,22,2.093,23,0.789,24,1.457,25,0.12,26,0.253,27,0.226,28,0.007,29,1.8,30,1.8,31,1.8,32,2.093,33,1.8,34,1.8,35,1.8,36,1.451,37,0.007,38,2.983,39,1.398,40,1.831,41,1.398,42,1.398,43,1.398,44,1.398,45,1.398,46,1.398,47,1.31,48,1.398,49,1.398,50,1.23,51,2.028,52,1.31,53,0.966,54,1.983,55,1.398,56,2.231,57,1.398,58,1.398,59,1.398,60,1.398,61,1.398,62,1.398,63,1.398,64,1.398,65,1.398,66,1.398,67,1.398,68,2.305,69,1.983,70,1.398,71,1.398,72,1.398,73,2.028,74,1.398,75,1.398,76,1.983,77,1.398,78,1.398,79,1.398,80,1.398,81,1.398,82,2.351,83,1.398,84,1.859,85,1.859,86,1.398,87,1.398,88,1.398,89,1.398,90,1.398,91,1.398,92,1.398,93,1.398,94,1.398,95,1.983,96,1.398,97,1.398,98,1.398,99,1.31,100,1.398,101,1.398,102,2.351,103,1.398,104,1.398,105,1.398,106,1.398,107,1.398,108,1.398,109,1.398,110,1.398,111,1.056,112,1.398,113,1.398,114,1.398,115,1.398,116,0.306,117,1.398,118,1.398,119,1.398,120,1.398,121,1.398,122,1.31,123,2.16,124,1.398,125,1.398,126,1.398,127,1.859,128,1.8,129,1.398,130,1.398,131,1.398,132,0.007]],["title/interfaces/GetFollowers.html",[0,0.255,34,1.427]],["body/interfaces/GetFollowers.html",[0,0.517,1,2.708,2,0.938,3,0.098,4,0.077,5,0.087,6,1.31,7,0.166,8,0.845,10,0.995,11,0.742,12,1.907,13,1.544,14,0.91,15,1.025,16,1.454,17,0.91,18,1.388,19,0.277,20,0.012,21,1.081,22,2.093,23,0.789,24,1.457,25,0.12,26,0.253,27,0.226,28,0.007,29,1.8,30,1.8,31,1.8,32,1.8,33,1.8,34,2.093,35,1.8,36,1.451,37,0.007,38,2.983,39,1.398,40,1.831,41,1.398,42,1.398,43,1.398,44,1.398,45,1.398,46,1.398,47,1.31,48,1.398,49,1.398,50,1.23,51,2.028,52,1.31,53,0.966,54,1.983,55,1.398,56,2.231,57,1.398,58,1.398,59,1.398,60,1.398,61,1.398,62,1.398,63,1.398,64,1.398,65,1.398,66,1.398,67,1.398,68,2.305,69,1.983,70,1.398,71,1.398,72,1.398,73,2.028,74,1.398,75,1.398,76,1.983,77,1.398,78,1.398,79,1.398,80,1.398,81,1.398,82,2.351,83,1.398,84,1.859,85,1.859,86,1.398,87,1.398,88,1.398,89,1.398,90,1.398,91,1.398,92,1.398,93,1.398,94,1.398,95,1.983,96,1.398,97,1.398,98,1.398,99,1.31,100,1.398,101,1.398,102,2.351,103,1.398,104,1.398,105,1.398,106,1.398,107,1.398,108,1.398,109,1.398,110,1.398,111,1.056,112,1.398,113,1.398,114,1.398,115,1.398,116,0.306,117,1.398,118,1.398,119,1.398,120,1.398,121,1.398,122,1.31,123,2.16,124,1.398,125,1.398,126,1.398,127,1.859,128,1.8,129,1.398,130,1.398,131,1.398,132,0.007]],["title/interfaces/GetFollowing.html",[0,0.255,35,1.427]],["body/interfaces/GetFollowing.html",[0,0.517,1,2.708,2,0.938,3,0.098,4,0.077,5,0.087,6,1.31,7,0.166,8,0.845,10,0.995,11,0.742,12,1.907,13,1.544,14,0.91,15,1.025,16,1.454,17,0.91,18,1.388,19,0.277,20,0.012,21,1.081,22,2.093,23,0.789,24,1.457,25,0.12,26,0.253,27,0.226,28,0.007,29,1.8,30,1.8,31,1.8,32,1.8,33,1.8,34,1.8,35,2.093,36,1.451,37,0.007,38,2.983,39,1.398,40,1.831,41,1.398,42,1.398,43,1.398,44,1.398,45,1.398,46,1.398,47,1.31,48,1.398,49,1.398,50,1.23,51,2.028,52,1.31,53,0.966,54,1.983,55,1.398,56,2.231,57,1.398,58,1.398,59,1.398,60,1.398,61,1.398,62,1.398,63,1.398,64,1.398,65,1.398,66,1.398,67,1.398,68,2.305,69,1.983,70,1.398,71,1.398,72,1.398,73,2.028,74,1.398,75,1.398,76,1.983,77,1.398,78,1.398,79,1.398,80,1.398,81,1.398,82,2.351,83,1.398,84,1.859,85,1.859,86,1.398,87,1.398,88,1.398,89,1.398,90,1.398,91,1.398,92,1.398,93,1.398,94,1.398,95,1.983,96,1.398,97,1.398,98,1.398,99,1.31,100,1.398,101,1.398,102,2.351,103,1.398,104,1.398,105,1.398,106,1.398,107,1.398,108,1.398,109,1.398,110,1.398,111,1.056,112,1.398,113,1.398,114,1.398,115,1.398,116,0.306,117,1.398,118,1.398,119,1.398,120,1.398,121,1.398,122,1.31,123,2.16,124,1.398,125,1.398,126,1.398,127,1.859,128,1.8,129,1.398,130,1.398,131,1.398,132,0.007]],["title/interfaces/GetManyDefaultResponse.html",[0,0.255,556,2.022]],["body/interfaces/GetManyDefaultResponse.html",[0,0.451,2,1.068,3,0.112,4,0.087,5,0.1,7,0.189,8,0.926,10,1.889,11,0.993,14,1.729,15,1.946,17,1.729,18,1.357,19,0.33,20,0.012,21,1.447,23,0.701,25,0.187,26,0.288,27,0.215,28,0.006,36,1.256,37,0.006,51,1.911,116,0.476,132,0.008,136,1.829,140,1.493,184,2.102,186,1.347,260,1.678,267,1.852,268,1.852,290,2.049,325,1.796,326,1.911,327,1.704,385,2.445,462,2.228,469,2.135,506,1.593,516,1.647,524,2.445,525,2.331,536,2.049,537,2.331,538,1.593,539,2.228,540,2.228,541,3.039,542,2.911,543,3.944,544,3.944,545,2.892,546,2.892,547,2.721,548,2.721,549,2.135,550,2.721,551,2.721,552,2.721,553,2.721,554,3.71,555,2.135,556,2.795,557,3.51,558,2.892,559,2.892,560,2.574,561,2.892,562,2.574,563,3.51,564,2.445,565,2.049,566,2.228,567,2.892,568,2.892,569,2.135,570,3.607,571,2.049,572,2.721,573,2.892,574,2.892,575,2.228,576,2.228,577,2.228,578,2.256,579,1.704,580,2.892,581,2.049,582,2.892,583,2.228,584,2.721,585,2.721,586,2.892,587,2.892,588,2.892,589,2.892,590,2.892,591,3.944,592,2.892,593,2.892,594,2.493,595,2.721,596,2.049,597,2.721,598,2.721,599,2.721,600,2.049,601,3.039,602,2.228,603,2.892,604,2.892,605,2.892,606,2.892]],["title/interfaces/GetRescueList.html",[0,0.255,33,1.427]],["body/interfaces/GetRescueList.html",[0,0.517,1,2.708,2,0.938,3,0.098,4,0.077,5,0.087,6,1.31,7,0.166,8,0.845,10,0.995,11,0.742,12,1.907,13,1.544,14,0.91,15,1.025,16,1.454,17,0.91,18,1.388,19,0.277,20,0.012,21,1.081,22,2.093,23,0.789,24,1.457,25,0.12,26,0.253,27,0.226,28,0.007,29,1.8,30,1.8,31,1.8,32,1.8,33,2.093,34,1.8,35,1.8,36,1.451,37,0.007,38,2.983,39,1.398,40,1.831,41,1.398,42,1.398,43,1.398,44,1.398,45,1.398,46,1.398,47,1.31,48,1.398,49,1.398,50,1.23,51,2.028,52,1.31,53,0.966,54,1.983,55,1.398,56,2.231,57,1.398,58,1.398,59,1.398,60,1.398,61,1.398,62,1.398,63,1.398,64,1.398,65,1.398,66,1.398,67,1.398,68,2.305,69,1.983,70,1.398,71,1.398,72,1.398,73,2.028,74,1.398,75,1.398,76,1.983,77,1.398,78,1.398,79,1.398,80,1.398,81,1.398,82,2.351,83,1.398,84,1.859,85,1.859,86,1.398,87,1.398,88,1.398,89,1.398,90,1.398,91,1.398,92,1.398,93,1.398,94,1.398,95,1.983,96,1.398,97,1.398,98,1.398,99,1.31,100,1.398,101,1.398,102,2.351,103,1.398,104,1.398,105,1.398,106,1.398,107,1.398,108,1.398,109,1.398,110,1.398,111,1.056,112,1.398,113,1.398,114,1.398,115,1.398,116,0.306,117,1.398,118,1.398,119,1.398,120,1.398,121,1.398,122,1.31,123,2.16,124,1.398,125,1.398,126,1.398,127,1.859,128,1.8,129,1.398,130,1.398,131,1.398,132,0.007]],["title/interfaces/GetUserPosts.html",[0,0.255,31,1.427]],["body/interfaces/GetUserPosts.html",[0,0.517,1,2.708,2,0.938,3,0.098,4,0.077,5,0.087,6,1.31,7,0.166,8,0.845,10,0.995,11,0.742,12,1.907,13,1.544,14,0.91,15,1.025,16,1.454,17,0.91,18,1.388,19,0.277,20,0.012,21,1.081,22,2.093,23,0.789,24,1.457,25,0.12,26,0.253,27,0.226,28,0.007,29,1.8,30,1.8,31,2.093,32,1.8,33,1.8,34,1.8,35,1.8,36,1.451,37,0.007,38,2.983,39,1.398,40,1.831,41,1.398,42,1.398,43,1.398,44,1.398,45,1.398,46,1.398,47,1.31,48,1.398,49,1.398,50,1.23,51,2.028,52,1.31,53,0.966,54,1.983,55,1.398,56,2.231,57,1.398,58,1.398,59,1.398,60,1.398,61,1.398,62,1.398,63,1.398,64,1.398,65,1.398,66,1.398,67,1.398,68,2.305,69,1.983,70,1.398,71,1.398,72,1.398,73,2.028,74,1.398,75,1.398,76,1.983,77,1.398,78,1.398,79,1.398,80,1.398,81,1.398,82,2.351,83,1.398,84,1.859,85,1.859,86,1.398,87,1.398,88,1.398,89,1.398,90,1.398,91,1.398,92,1.398,93,1.398,94,1.398,95,1.983,96,1.398,97,1.398,98,1.398,99,1.31,100,1.398,101,1.398,102,2.351,103,1.398,104,1.398,105,1.398,106,1.398,107,1.398,108,1.398,109,1.398,110,1.398,111,1.056,112,1.398,113,1.398,114,1.398,115,1.398,116,0.306,117,1.398,118,1.398,119,1.398,120,1.398,121,1.398,122,1.31,123,2.16,124,1.398,125,1.398,126,1.398,127,1.859,128,1.8,129,1.398,130,1.398,131,1.398,132,0.007]],["title/interfaces/GetUserProfile.html",[0,0.255,30,1.427]],["body/interfaces/GetUserProfile.html",[0,0.517,1,2.708,2,0.938,3,0.098,4,0.077,5,0.087,6,1.31,7,0.166,8,0.845,10,0.995,11,0.742,12,1.907,13,1.544,14,0.91,15,1.025,16,1.454,17,0.91,18,1.388,19,0.277,20,0.012,21,1.081,22,2.093,23,0.789,24,1.457,25,0.12,26,0.253,27,0.226,28,0.007,29,1.8,30,2.093,31,1.8,32,1.8,33,1.8,34,1.8,35,1.8,36,1.451,37,0.007,38,2.983,39,1.398,40,1.831,41,1.398,42,1.398,43,1.398,44,1.398,45,1.398,46,1.398,47,1.31,48,1.398,49,1.398,50,1.23,51,2.028,52,1.31,53,0.966,54,1.983,55,1.398,56,2.231,57,1.398,58,1.398,59,1.398,60,1.398,61,1.398,62,1.398,63,1.398,64,1.398,65,1.398,66,1.398,67,1.398,68,2.305,69,1.983,70,1.398,71,1.398,72,1.398,73,2.028,74,1.398,75,1.398,76,1.983,77,1.398,78,1.398,79,1.398,80,1.398,81,1.398,82,2.351,83,1.398,84,1.859,85,1.859,86,1.398,87,1.398,88,1.398,89,1.398,90,1.398,91,1.398,92,1.398,93,1.398,94,1.398,95,1.983,96,1.398,97,1.398,98,1.398,99,1.31,100,1.398,101,1.398,102,2.351,103,1.398,104,1.398,105,1.398,106,1.398,107,1.398,108,1.398,109,1.398,110,1.398,111,1.056,112,1.398,113,1.398,114,1.398,115,1.398,116,0.306,117,1.398,118,1.398,119,1.398,120,1.398,121,1.398,122,1.31,123,2.16,124,1.398,125,1.398,126,1.398,127,1.859,128,1.8,129,1.398,130,1.398,131,1.398,132,0.007]],["title/injectables/GoogleStrategy.html",[399,2.854,419,1.119]],["body/injectables/GoogleStrategy.html",[3,0.131,4,0.102,5,0.116,7,0.221,9,0.994,19,0.295,20,0.012,23,0.716,25,0.258,26,0.336,27,0.131,28,0.007,37,0.006,116,0.527,132,0.008,133,0.175,144,2.489,147,1.127,149,1.352,165,3.177,186,1.312,190,3.368,199,1.199,202,1.044,241,2.722,263,2.06,267,1.586,268,1.586,271,3.919,304,5.595,325,1.538,326,1.636,327,1.989,328,3.177,329,3.177,330,3.177,335,2.208,341,5.492,360,3.696,367,4.463,368,3.377,371,2.667,372,1.923,381,1.989,399,4.372,403,4.823,419,1.713,420,2.215,428,3.524,440,6.562,441,7.258,443,6.562,458,3.919,462,2.602,469,2.493,512,2.06,562,3.89,1301,4.322,1302,5.193,1303,4.935,1304,4.935,1305,4.935,1306,5.626,1307,7.084,1308,7.492,1309,4.935,1310,3.919,1311,4.683,1312,5.595,1313,5.073,1314,3.919,1315,3.919,1316,3.919,1317,4.935,1318,4.935,1319,4.935,1320,4.935,1321,4.935,1322,4.935,1323,4.935,1324,4.935,1325,4.935,1326,4.935,1327,3.919,1328,4.935]],["title/controllers/HealthController.html",[195,1.805,230,3.058]],["body/controllers/HealthController.html",[3,0.105,4,0.082,5,0.094,7,0.178,9,0.859,11,0.56,18,1.158,19,0.286,20,0.012,23,0.572,25,0.253,26,0.271,27,0.105,28,0.005,37,0.005,116,0.456,132,0.007,133,0.141,140,1.951,143,2.913,144,1.548,147,1.272,149,1.169,150,2.479,172,1.548,186,1.409,195,1.719,197,1.852,199,1.036,202,1.526,203,2.42,206,1.359,230,5.03,232,6.01,233,4.838,235,5.561,236,2.719,237,3.347,238,6.538,241,2.191,247,3.155,260,0.947,267,2.318,268,2.318,296,4.838,300,1.166,323,3.48,325,1.238,326,2.391,327,1.602,328,2.558,329,2.558,330,2.558,331,3.155,332,3.48,335,2.139,371,3.01,403,3.556,428,3.046,528,1.783,529,1.783,686,5.561,758,4.049,763,3.48,764,4.838,771,2.864,805,3.48,891,2.558,898,2.42,1066,3.556,1157,5.449,1162,5.449,1282,3.866,1286,2.299,1287,2.719,1288,2.719,1327,4.386,1329,3.48,1330,5.523,1331,7.211,1332,3.973,1333,3.973,1334,5.523,1335,3.973,1336,6.349,1337,3.973,1338,3.973,1339,5.523,1340,3.973,1341,3.973,1342,3.973,1343,5.523,1344,5.523,1345,5.523,1346,5.523,1347,5.523,1348,6.861,1349,5.561,1350,3.973,1351,3.973,1352,6.349,1353,3.973,1354,3.973,1355,5.523,1356,3.973,1357,3.973,1358,3.973,1359,3.973,1360,3.973,1361,3.973,1362,3.973,1363,3.973,1364,3.48,1365,7.464,1366,3.973,1367,3.973,1368,3.973,1369,3.973,1370,3.973,1371,3.973,1372,3.973,1373,3.973,1374,5.523,1375,3.973,1376,3.973,1377,5.523,1378,3.973,1379,3.973,1380,3.973,1381,3.973,1382,3.973,1383,3.973,1384,3.973]],["title/interfaces/IBaseModel.html",[0,0.255,474,3.058]],["body/interfaces/IBaseModel.html",[0,0.305,2,1.259,3,0.132,4,0.103,5,0.117,7,0.223,8,1.032,9,1,11,0.702,18,1.207,19,0.313,20,0.012,23,0.579,25,0.244,27,0.17,28,0.007,36,1.086,37,0.008,132,0.009,133,0.177,139,3.207,179,1.817,180,3.409,186,1.32,206,2.199,267,1.601,268,1.601,300,1.461,325,1.553,326,1.651,327,2.008,335,2.003,374,2.415,381,2.591,435,2.322,472,2.516,473,3.956,474,5.216,475,5.842,476,4.611,477,4.712,478,3.493,479,3.409,480,5.842,482,3.652,487,3.652,490,4.579,493,3.652,494,4.712,495,5.512,499,2.996,500,3.652,502,4.712,503,3.031,504,3.956,505,4.363,506,1.877,507,4.363,508,5.629,509,3.652,510,5.629,511,3.956,512,2.079,513,4.363,514,3.956,515,3.033,516,2.504,517,4.363,518,2.882,519,3.956,520,2.882,521,4.363,522,4.363,523,4.363,524,2.882,525,2.747,526,3.033,527,4.363,528,2.236,529,2.236,530,4.363,531,4.363,532,4.363,533,4.363,534,3.956,535,4.363]],["title/interfaces/ICrudService.html",[0,0.255,1002,2.854]],["body/interfaces/ICrudService.html",[0,0.428,2,1.213,3,0.127,4,0.099,5,0.113,7,0.215,9,1.227,11,1.045,18,1.324,19,0.329,20,0.012,21,1.436,23,0.63,25,0.156,27,0.127,28,0.006,37,0.006,116,0.651,132,0.008,147,1.418,149,1.67,187,1.144,199,1.177,202,1.701,236,3.285,316,4.491,372,1.871,478,3.138,520,2.778,579,2.989,581,3.595,806,3.686,994,4.294,998,5.4,999,5.073,1000,5.073,1002,4.294,1019,4.352,1023,4.294,1028,4.294,1033,3.821,1044,2.924,1092,5.496,1094,5.435,1095,5.639,1106,4.6,1110,3.519,1385,4.205,1386,6.275,1387,6.275,1388,4.8,1389,4.8,1390,4.8,1391,4.8,1392,4.8,1393,4.8,1394,4.8]],["title/interfaces/IPaginationResult.html",[0,0.255,1044,2.54]],["body/interfaces/IPaginationResult.html",[0,0.414,2,1.133,3,0.119,4,0.093,5,0.106,7,0.201,8,0.963,9,1.122,11,1.017,12,2.413,13,2.271,14,1.771,16,1.994,17,1.1,18,1.29,19,0.339,20,0.012,21,1.482,22,2.469,23,0.723,24,1.719,25,0.244,26,0.305,27,0.179,28,0.006,37,0.006,40,1.387,132,0.008,133,0.24,142,3.652,151,5.73,172,1.747,187,1.068,363,2.012,371,3.14,520,3.91,560,2.73,571,2.174,640,3.91,748,4.116,765,4.104,810,2.594,831,3.47,868,3.652,991,4.396,1008,4.396,1019,2.472,1041,3.56,1044,3.652,1049,5.674,1066,3.861,1118,4.762,1121,3.286,1147,3.56,1266,3.068,1395,3.286,1396,5.253,1397,5.253,1398,5.253,1399,5.253,1400,4.762,1401,6.32,1402,3.926,1403,4.762,1404,4.762,1405,4.762,1406,3.926,1407,5.253,1408,5.253,1409,5.253,1410,5.253,1411,5.919,1412,3.926,1413,3.926]],["title/interfaces/ITag.html",[0,0.255,609,2.685]],["body/interfaces/ITag.html",[0,0.398,2,1.279,3,0.134,4,0.105,5,0.119,7,0.227,8,1.215,19,0.347,20,0.012,23,0.733,25,0.245,27,0.207,28,0.007,36,1.103,37,0.007,111,1.441,116,0.68,132,0.009,133,0.277,172,1.972,199,0.949,206,2.221,275,3.082,300,1.905,362,3.28,363,2.271,472,3.28,476,2.928,478,2.271,503,2.618,506,2.447,512,2.71,569,2.556,578,1.441,607,2.668,608,3.258,609,4.869,612,3.258,613,3.581,614,3.954,615,3.954,616,4.906,617,4.615,618,4.18,619,3.082,620,2.668,621,3.082,622,3.082,623,3.463,624,3.622,625,2.791,626,3.463,627,3.463,628,3.463,629,3.757,630,3.463,631,3.463,632,2.791,633,3.463,634,3.463,635,3.463,636,3.463,637,3.463,638,3.463,639,3.463,640,2.928,641,3.258,642,3.258,643,3.258,644,3.258,645,3.463,646,3.463,647,3.258,648,3.258,649,2.928,650,3.71]],["title/interfaces/IUser.html",[0,0.255,654,2.685]],["body/interfaces/IUser.html",[0,0.438,2,1.493,3,0.156,4,0.122,5,0.139,7,0.265,8,1.148,9,1.243,19,0.347,20,0.011,23,0.788,27,0.156,28,0.008,37,0.008,50,2.649,51,1.887,53,1.538,73,2.649,132,0.009,187,1.407,372,3.114,374,3.875,654,4.602,655,5.858,656,5.858,1414,5.173,1415,5.906]],["title/classes/IsEmailExistsConstraint.html",[133,0.148,1416,3.058]],["body/classes/IsEmailExistsConstraint.html",[3,0.144,4,0.112,5,0.128,7,0.244,9,1.057,19,0.283,20,0.012,23,0.699,25,0.252,26,0.371,27,0.18,28,0.007,37,0.007,53,2.081,116,0.561,132,0.009,133,0.241,135,1.804,144,2.12,147,1.199,149,1.439,186,1.396,199,1.275,202,1.151,260,1.62,264,6.167,300,1.994,335,2.421,363,3.051,371,2.271,372,2.649,381,2.194,412,3.989,499,2.537,503,2.194,570,2.442,578,1.549,600,2.638,669,3.724,1097,5.693,1184,4.766,1302,4.983,1416,5.435,1417,4.321,1418,7.414,1419,5.441,1420,5.441,1421,6.798,1422,5.441,1423,5.954,1424,6.798,1425,4.766,1426,5.441,1427,5.954,1428,4.766,1429,4.766]],["title/injectables/JwtStrategy.html",[400,2.854,419,1.119]],["body/injectables/JwtStrategy.html",[3,0.145,4,0.113,5,0.129,7,0.245,9,1.061,19,0.284,20,0.012,25,0.265,26,0.373,27,0.145,28,0.007,37,0.007,116,0.563,132,0.009,133,0.194,144,2.657,147,1.203,149,1.443,165,3.521,199,1.279,202,1.157,241,3.017,260,1.303,263,2.847,335,2.316,351,4.009,360,3.164,365,4.102,366,4.009,371,2.847,378,5.448,400,4.667,403,5.255,415,4.79,419,1.829,420,2.455,512,2.283,1255,4.79,1302,4.999,1306,5.902,1310,4.343,1311,4.009,1313,4.343,1314,4.343,1315,4.343,1316,4.343,1430,4.79,1431,5.469,1432,5.973,1433,7.431,1434,5.704,1435,5.469,1436,5.469,1437,4.79,1438,5.469,1439,5.469,1440,5.469,1441,5.469,1442,5.469,1443,6.82,1444,5.469,1445,5.469,1446,5.469]],["title/injectables/LocalStrategy.html",[401,2.854,419,1.119]],["body/injectables/LocalStrategy.html",[3,0.138,4,0.107,5,0.122,7,0.233,8,1.061,9,1.028,19,0.318,20,0.012,23,0.746,25,0.248,26,0.354,27,0.138,28,0.007,37,0.007,116,0.545,132,0.009,133,0.185,144,2.027,147,1.348,149,1.398,165,3.348,179,1.897,186,1.357,199,1.24,202,1.101,206,2.758,263,2.171,335,2.264,351,3.813,360,3.009,367,4.446,368,3.559,372,3.141,374,3.971,386,3.348,401,4.522,419,1.772,420,2.334,452,3.559,485,2.49,486,2.191,512,2.171,570,2.334,757,3.348,1302,4.844,1306,5.767,1310,4.13,1311,3.813,1313,4.13,1314,4.13,1315,4.13,1316,4.13,1432,5.787,1447,4.555,1448,7.64,1449,7.64,1450,5.201,1451,6.607,1452,5.201,1453,5.201,1454,4.555,1455,5.201,1456,5.201,1457,5.201,1458,5.201,1459,5.201]],["title/classes/PaginationParams.html",[133,0.148,1019,2.301]],["body/classes/PaginationParams.html",[0,0.369,3,0.12,4,0.093,5,0.106,7,0.203,8,0.969,9,1.207,11,0.637,12,1.88,13,1.769,14,1.975,16,1.249,17,1.109,18,1.342,19,0.302,20,0.012,21,1.239,22,2.063,23,0.652,24,1.437,25,0.245,26,0.308,27,0.18,28,0.006,37,0.006,40,1.046,132,0.008,133,0.241,135,1.499,142,2.753,147,1.197,150,3.046,151,5.75,172,1.762,187,1.077,363,2.029,371,3.465,520,3.927,560,2.753,571,2.924,640,3.927,748,4.133,765,3.094,810,2.616,831,2.616,868,2.753,991,5.308,1008,5.53,1019,3.327,1041,3.59,1044,2.753,1049,4.421,1118,5.75,1121,3.314,1147,4.789,1266,3.094,1395,3.314,1396,3.96,1397,3.96,1398,3.96,1399,3.96,1400,3.59,1401,6.342,1402,3.96,1403,4.789,1404,4.789,1405,4.789,1406,5.282,1407,6.342,1408,5.282,1409,5.282,1410,5.282,1411,5.944,1412,3.96,1413,3.96,1460,4.521,1461,4.521,1462,6.031,1463,6.031,1464,4.521,1465,4.521]],["title/interfaces/ParamOption.html",[0,0.255,557,2.54]],["body/interfaces/ParamOption.html",[0,0.448,2,1.043,3,0.109,4,0.085,5,0.097,7,0.185,8,0.911,9,1.258,10,1.107,11,0.582,14,1.013,15,1.141,17,1.013,18,1.299,19,0.34,20,0.012,21,1.165,23,0.736,25,0.184,26,0.281,27,0.214,28,0.005,36,1.236,37,0.005,51,2.005,116,0.468,132,0.008,136,1.786,140,1.458,184,2.068,186,1.331,260,1.662,267,1.823,268,1.823,290,2.002,325,1.768,326,1.88,327,1.664,385,2.388,462,2.176,469,2.085,506,1.556,516,1.608,524,2.388,525,2.277,536,2.002,537,2.277,538,1.556,539,2.176,540,2.176,541,2.99,542,2.865,543,3.881,544,4.773,545,2.825,546,2.825,547,2.657,548,2.657,549,2.085,550,2.657,551,2.657,552,2.657,553,2.657,554,3.651,555,2.085,556,2.002,557,3.945,558,4.773,559,4.433,560,4.247,561,4.773,562,4.247,563,3.454,564,2.388,565,2.002,566,2.176,567,2.825,568,2.825,569,2.085,570,3.589,571,2.002,572,2.657,573,2.825,574,2.825,575,2.176,576,2.176,577,2.176,578,2.243,579,1.664,580,2.825,581,2.002,582,2.825,583,2.176,584,2.657,585,2.657,586,2.825,587,2.825,588,2.825,589,2.825,590,2.825,591,3.881,592,2.825,593,2.825,594,2.453,595,2.657,596,2.002,597,2.657,598,2.657,599,2.657,600,2.002,601,2.99,602,2.176,603,2.825,604,2.825,605,2.825,606,2.825]],["title/interfaces/ParamsOptions.html",[0,0.255,563,2.54]],["body/interfaces/ParamsOptions.html",[0,0.458,2,1.114,3,0.117,4,0.091,5,0.104,10,1.182,11,0.621,14,1.082,15,1.218,17,1.082,18,1.285,19,0.279,20,0.012,21,1.218,23,0.721,25,0.192,26,0.3,27,0.217,28,0.006,36,1.293,37,0.006,51,1.932,116,0.489,132,0.008,136,2.566,140,1.557,147,0.778,184,2.163,186,1.376,260,1.708,267,1.906,268,1.906,290,2.137,325,1.848,326,1.966,327,1.777,385,2.55,462,2.324,469,2.227,506,1.661,516,1.718,524,2.55,525,2.431,536,2.137,537,2.431,538,1.661,539,2.324,540,2.324,541,3.127,542,2.995,543,4.058,544,4.058,545,3.017,546,3.017,547,2.838,548,2.838,549,2.227,550,2.838,551,2.838,552,2.838,553,2.838,554,3.817,555,2.227,556,2.137,557,4.081,558,3.017,559,3.017,560,2.685,561,3.017,562,2.685,563,4.081,564,3.431,565,2.137,566,2.324,567,3.017,568,3.017,569,2.227,570,3.639,571,2.137,572,2.838,573,3.017,574,3.017,575,2.324,576,2.324,577,2.324,578,2.278,579,1.777,580,3.017,581,2.137,582,3.017,583,2.324,584,2.838,585,2.838,586,3.017,587,3.017,588,3.017,589,3.017,590,3.017,591,4.058,592,3.017,593,3.017,594,2.566,595,2.838,596,2.137,597,2.838,598,2.838,599,2.838,600,2.137,601,3.127,602,2.324,603,3.017,604,3.017,605,3.017,606,3.017,1466,4.408,1467,4.408]],["title/injectables/PersistedCronService.html",[419,1.119,678,2.854]],["body/injectables/PersistedCronService.html",[3,0.133,4,0.104,5,0.118,7,0.225,8,1.036,9,0.78,19,0.269,20,0.012,25,0.209,26,0.342,27,0.133,28,0.007,37,0.007,116,0.414,132,0.009,133,0.178,144,1.953,147,1.259,149,1.061,179,2.603,186,1.03,187,1.194,192,4.731,199,1.211,202,1.061,227,2.765,229,4.731,245,3.43,260,1.538,300,1.47,331,5.125,335,2.225,381,2.021,419,1.731,420,2.25,485,1.889,486,1.662,678,4.416,680,5.157,685,6.992,693,5.985,709,5.985,716,5.652,717,5.125,757,3.227,778,5.232,788,5.652,1006,5.157,1102,4.731,1259,6.251,1260,2.9,1278,3.43,1279,4.416,1468,6.601,1469,4.39,1470,6.453,1471,5.668,1472,6.453,1473,6.453,1474,6.453,1475,6.453,1476,7.983,1477,5.012,1478,6.453,1479,5.012,1480,6.453,1481,6.453,1482,6.453,1483,6.453,1484,5.012,1485,5.012,1486,5.012,1487,5.012,1488,5.012,1489,5.012,1490,5.012,1491,5.012,1492,5.012,1493,4.39]],["title/interfaces/PostType.html",[0,0.255,82,1.473]],["body/interfaces/PostType.html",[0,0.517,1,2.622,2,0.933,3,0.098,4,0.076,5,0.087,6,1.304,7,0.165,8,0.842,10,0.99,11,0.739,12,1.902,13,1.539,14,0.906,15,1.02,16,1.449,17,0.906,18,1.391,19,0.292,20,0.012,21,1.077,22,2.087,23,0.79,24,1.454,25,0.12,26,0.252,27,0.226,28,0.007,29,1.794,30,1.794,31,1.794,32,1.794,33,1.794,34,1.794,35,1.794,36,1.448,37,0.007,38,2.826,39,1.391,40,1.735,41,1.391,42,1.391,43,1.391,44,1.391,45,1.391,46,1.391,47,1.304,48,1.391,49,1.391,50,1.224,51,2.026,52,1.304,53,0.961,54,1.977,55,1.391,56,2.225,57,1.391,58,1.391,59,1.391,60,1.391,61,1.391,62,1.391,63,1.391,64,1.391,65,1.391,66,1.391,67,1.391,68,2.299,69,1.977,70,1.391,71,1.391,72,1.391,73,2.023,74,1.391,75,1.391,76,1.977,77,1.391,78,1.391,79,1.391,80,1.391,81,1.391,82,2.707,83,2.504,84,1.852,85,1.852,86,1.391,87,1.391,88,1.391,89,1.391,90,1.391,91,1.391,92,1.391,93,1.391,94,1.391,95,1.977,96,1.391,97,1.391,98,1.391,99,1.304,100,1.391,101,1.391,102,2.346,103,1.391,104,1.391,105,1.391,106,1.391,107,1.391,108,1.391,109,1.391,110,1.391,111,1.051,112,1.391,113,1.391,114,1.391,115,1.391,116,0.305,117,1.391,118,1.391,119,1.391,120,1.391,121,1.391,122,1.304,123,2.155,124,1.391,125,1.391,126,1.391,127,1.852,128,1.794,129,1.391,130,1.391,131,1.391,132,0.007]],["title/interfaces/PostedByUser.html",[0,0.255,84,1.473]],["body/interfaces/PostedByUser.html",[0,0.515,1,2.6,2,0.904,3,0.095,4,0.074,5,0.084,6,1.263,7,0.16,8,0.823,10,0.959,11,0.723,12,1.868,13,1.504,14,0.878,15,0.988,16,1.417,17,0.878,18,1.388,19,0.322,20,0.012,21,1.053,22,2.051,23,0.79,24,1.428,25,0.116,26,0.244,27,0.225,28,0.007,29,1.754,30,1.754,31,1.754,32,1.754,33,1.754,34,1.754,35,1.754,36,1.427,37,0.007,38,2.8,39,1.348,40,1.719,41,1.348,42,1.348,43,1.348,44,1.348,45,1.348,46,1.348,47,1.263,48,1.348,49,1.348,50,1.186,51,2.057,52,1.263,53,0.931,54,2.612,55,1.348,56,2.631,57,1.348,58,1.348,59,1.348,60,1.348,61,1.348,62,1.348,63,1.348,64,1.348,65,1.348,66,1.348,67,1.348,68,2.719,69,2.612,70,1.348,71,1.348,72,1.348,73,2.392,74,1.348,75,1.348,76,2.612,77,1.348,78,1.348,79,1.348,80,1.348,81,1.348,82,2.312,83,1.348,84,2.117,85,1.811,86,1.348,87,1.348,88,1.348,89,1.348,90,1.348,91,1.348,92,1.348,93,1.348,94,1.348,95,1.932,96,1.348,97,1.348,98,1.348,99,1.263,100,1.348,101,1.348,102,2.312,103,1.348,104,1.348,105,1.348,106,1.348,107,1.348,108,1.348,109,1.348,110,1.348,111,1.018,112,1.348,113,1.348,114,1.348,115,1.348,116,0.295,117,1.348,118,1.348,119,1.348,120,1.348,121,1.348,122,1.263,123,2.117,124,1.348,125,1.348,126,1.348,127,1.811,128,1.754,129,1.348,130,1.348,131,1.348,132,0.007]],["title/classes/QueryFailedFilter.html",[133,0.148,1494,3.312]],["body/classes/QueryFailedFilter.html",[3,0.116,4,0.09,5,0.103,7,0.196,9,0.68,11,0.831,13,1.73,16,1.208,19,0.278,20,0.012,24,1.042,25,0.216,26,0.298,27,0.116,28,0.006,37,0.006,40,1.011,116,0.551,132,0.008,133,0.237,135,1.449,139,2.814,140,1.544,142,3.591,143,3.205,147,0.771,149,0.925,179,1.594,180,2.992,187,1.405,190,3.518,199,1.106,202,0.925,237,2.305,260,1.777,281,5.236,300,1.73,469,3.767,503,2.377,509,3.205,515,4.35,516,2.298,518,3.412,528,3.732,529,3.732,538,2.222,624,2.979,625,3.253,629,3.412,771,2.462,867,3.412,1260,3.412,1276,3.412,1471,4.683,1494,4.683,1495,5.165,1496,3.472,1497,5.165,1498,7.164,1499,5.845,1500,3.829,1501,7.458,1502,7.458,1503,7.458,1504,7.458,1505,7.458,1506,7.458,1507,7.458,1508,6.256,1509,4.372,1510,5.165,1511,5.165,1512,5.165,1513,5.165,1514,3.472,1515,3.829,1516,3.829,1517,3.829,1518,3.829,1519,5.845,1520,6.673,1521,5.897,1522,5.897,1523,3.472,1524,3.829]],["title/classes/R.html",[133,0.148,817,2.54]],["body/classes/R.html",[3,0.061,4,0.047,5,0.054,7,0.102,9,0.709,10,0.613,11,0.322,14,0.561,15,0.632,17,0.561,18,1.061,19,0.315,20,0.012,21,0.936,23,0.664,24,0.545,25,0.184,26,0.156,27,0.151,28,0.003,37,0.003,40,1.316,116,0.589,132,0.005,133,0.234,135,0.758,136,2.251,140,1.289,147,0.804,149,1.101,179,0.834,184,2.321,186,1.584,187,1.24,199,0.685,202,0.964,206,2.699,214,1.066,236,2.498,237,1.925,260,1.731,263,1.902,267,0.735,268,0.735,290,1.77,300,0.671,325,0.713,326,0.758,361,3.344,383,2.403,428,2.013,435,2.125,485,0.861,486,1.21,499,3.081,516,2.48,528,1.638,529,1.638,536,3.086,538,1.717,539,1.925,540,1.925,541,1.205,542,2.873,549,1.844,555,1.844,556,1.77,565,2.523,566,2.743,570,3.395,571,1.77,575,1.205,576,2.403,577,1.205,578,1.882,579,1.472,594,2.461,596,2.758,600,3.522,601,3.684,602,3.197,624,1.844,802,1.392,803,3.35,804,1.472,806,1.205,808,1.564,810,1.323,811,2.934,812,1.392,813,1.392,814,1.392,815,1.392,816,2.498,817,2.223,818,4.149,819,3.561,820,3.892,821,2.498,822,2.498,823,2.498,824,4.523,825,1.564,826,1.564,827,1.564,828,1.564,829,2.498,830,1.564,831,3.508,832,2.498,833,1.564,834,2.498,835,2.35,836,1.564,837,2.112,838,1.564,839,1.564,840,1.564,841,1.564,842,1.925,843,1.564,844,2.498,845,1.564,846,1.564,847,2.498,848,1.564,849,1.564,850,1.564,851,1.564,852,1.564,853,1.564,854,1.564,855,2.498,856,1.472,857,2.934,858,2.775,859,1.564,860,1.323,861,1.564,862,1.564,863,1.564,864,3.119,865,2.498,866,1.564,867,1.323,868,1.392,869,1.564,870,1.564,871,1.392,872,1.564,873,1.564,874,2.498,875,1.564,876,1.564,877,2.498,878,1.564,879,1.564,880,2.498,881,1.564,882,1.564,883,1.564,884,1.564,885,1.564,886,1.564,887,1.564,888,1.564,889,2.498,890,1.564,891,2.35,892,1.472,893,2.223,894,2.223,895,1.564,896,3.119,897,1.564,898,1.392,899,1.564,900,1.564,901,4.355,902,3.119,903,2.498,904,1.564,905,1.564,906,1.564,907,1.564,908,1.564,909,1.564,910,4.355,911,1.564,912,1.472,913,1.564,914,1.564,915,1.564,916,1.564,917,1.564,918,1.564,919,1.564,920,3.119,921,1.564,922,1.564,923,1.564,924,1.564,925,1.564,926,1.564,927,2.498,928,1.564,929,1.564,930,1.564,931,2.498,932,1.564,933,1.564,934,1.564,935,2.498,936,1.564,937,1.564,938,2.498,939,3.119,940,1.564,941,1.564,942,3.119,943,1.564,944,1.564,945,1.564,946,2.498,947,1.564,948,1.564,949,2.498,950,1.564,951,1.564,952,2.498,953,1.564,954,1.564,955,1.564,956,2.498,957,1.564,958,1.564,959,1.564,960,1.564,961,1.564,962,1.564,963,1.564,964,1.564,965,1.564,966,1.564,967,1.564,968,1.564,969,1.564,970,1.564,971,1.564,972,1.564,973,1.564,974,1.564,975,1.564,976,2.498,977,1.564,978,2.498,979,1.564,980,1.564,981,1.564,982,1.564,983,1.564,984,1.564,985,1.564,986,2.498,987,1.564,988,1.564,1277,1.564,1525,3.65,1526,2.286,1527,2.286,1528,2.286,1529,2.286,1530,2.286]],["title/guards/RequestGuard.html",[1531,2.854,1532,3.312]],["body/guards/RequestGuard.html",[3,0.127,4,0.099,5,0.113,7,0.216,9,0.978,19,0.262,20,0.012,23,0.566,25,0.204,26,0.328,27,0.127,28,0.006,37,0.006,51,1.543,116,0.519,132,0.008,133,0.171,147,1.109,149,1.331,184,1.756,186,1.438,187,1.498,190,4.421,199,1.18,202,1.482,260,1.668,263,2.01,267,1.548,268,1.548,300,1.413,316,3.315,325,1.501,326,1.596,419,1.686,435,2.245,486,2.553,526,2.932,538,2.37,564,2.786,765,5.404,771,2.625,1270,4.52,1274,4.957,1276,3.638,1281,4.048,1282,4.263,1286,2.786,1531,5.269,1532,4.993,1533,3.824,1534,4.217,1535,6.287,1536,6.744,1537,6.287,1538,4.815,1539,5.507,1540,5.507,1541,4.217,1542,4.815,1543,5.507,1544,5.507,1545,5.507,1546,5.507,1547,5.507,1548,5.507,1549,5.507,1550,4.815,1551,7.001,1552,4.815,1553,4.815,1554,4.815,1555,4.815,1556,4.815,1557,4.815,1558,6.287,1559,3.824,1560,4.815,1561,4.815]],["title/interfaces/RescueLists.html",[0,0.255,122,1.473]],["body/interfaces/RescueLists.html",[0,0.518,1,2.628,2,0.941,3,0.099,4,0.077,5,0.088,6,1.314,7,0.167,8,0.847,10,0.998,11,0.744,12,1.91,13,1.548,14,0.913,15,1.028,16,1.458,17,0.913,18,1.388,19,0.278,20,0.012,21,1.084,22,2.097,23,0.789,24,1.46,25,0.121,26,0.254,27,0.226,28,0.007,29,1.805,30,1.805,31,1.805,32,1.805,33,1.805,34,1.805,35,1.805,36,1.454,37,0.007,38,2.833,39,1.403,40,1.739,41,1.403,42,1.403,43,1.403,44,1.403,45,1.403,46,1.403,47,1.314,48,1.403,49,1.403,50,1.234,51,2.029,52,1.314,53,0.969,54,1.988,55,1.403,56,2.235,57,1.403,58,1.403,59,1.403,60,1.403,61,1.403,62,1.403,63,1.403,64,1.403,65,1.403,66,1.403,67,1.403,68,2.31,69,1.988,70,1.403,71,1.403,72,1.403,73,2.032,74,1.403,75,1.403,76,1.988,77,1.403,78,1.403,79,1.403,80,1.403,81,1.403,82,2.355,83,1.403,84,1.863,85,1.863,86,1.403,87,1.403,88,1.403,89,1.403,90,1.403,91,1.403,92,1.403,93,1.403,94,1.403,95,1.988,96,1.403,97,1.403,98,1.403,99,1.314,100,1.403,101,1.403,102,2.759,103,1.403,104,1.403,105,1.403,106,1.403,107,1.403,108,1.403,109,1.403,110,1.403,111,1.06,112,1.403,113,1.403,114,1.403,115,1.403,116,0.307,117,1.403,118,1.403,119,1.403,120,1.403,121,1.403,122,1.863,123,2.164,124,1.403,125,1.403,126,1.403,127,1.863,128,1.805,129,1.403,130,1.403,131,1.403,132,0.007]],["title/interfaces/Rescues.html",[0,0.255,102,1.473]],["body/interfaces/Rescues.html",[0,0.512,1,2.561,2,0.855,3,0.09,4,0.07,5,0.08,6,1.194,7,0.152,8,0.791,10,0.907,11,0.694,12,1.81,13,1.445,14,0.83,15,0.934,16,1.361,17,0.83,18,1.39,19,0.345,20,0.012,21,1.011,22,1.987,23,0.793,24,1.384,25,0.11,26,0.23,27,0.223,28,0.007,29,1.685,30,1.685,31,1.685,32,1.685,33,1.685,34,1.685,35,1.685,36,1.391,37,0.006,38,2.753,39,1.275,40,1.69,41,1.275,42,1.275,43,1.275,44,1.275,45,1.275,46,1.275,47,1.194,48,1.275,49,1.275,50,1.121,51,1.999,52,1.194,53,0.881,54,1.856,55,1.275,56,2.118,57,1.275,58,1.275,59,1.275,60,1.275,61,1.275,62,1.275,63,1.275,64,1.275,65,1.275,66,1.275,67,1.275,68,2.189,69,1.856,70,1.275,71,1.275,72,1.275,73,1.926,74,1.275,75,1.275,76,1.856,77,1.275,78,1.275,79,1.275,80,1.275,81,1.275,82,2.253,83,1.275,84,1.739,85,1.739,86,1.275,87,1.275,88,1.275,89,1.275,90,1.275,91,1.275,92,1.275,93,1.275,94,1.275,95,1.856,96,1.275,97,1.275,98,1.275,99,1.194,100,1.275,101,1.275,102,2.395,103,2.404,104,2.404,105,2.404,106,2.404,107,2.404,108,2.404,109,2.404,110,2.404,111,1.653,112,2.404,113,2.404,114,2.404,115,1.275,116,0.279,117,1.275,118,1.275,119,1.275,120,2.404,121,2.404,122,1.194,123,2.051,124,1.275,125,1.275,126,1.275,127,1.739,128,1.685,129,1.275,130,1.275,131,1.275,132,0.007,1066,3.17]],["title/interfaces/Response.html",[0,0.255,40,0.965]],["body/interfaces/Response.html",[0,0.341,2,1.409,3,0.148,4,0.115,5,0.131,7,0.25,8,1.108,11,1.135,19,0.232,20,0.012,21,1.54,25,0.243,26,0.38,27,0.183,28,0.007,37,0.007,40,1.812,132,0.009,133,0.245,186,1.145,199,1.046,300,1.635,325,2.151,419,1.851,518,3.225,538,2.101,578,1.587,771,2.881,1260,3.225,1266,4.723,1268,4.087,1270,4.565,1271,5.495,1273,5.495,1274,4.443,1275,4.087,1276,3.993,1277,4.723,1278,4.723,1279,3.815,1280,4.087,1281,3.589,1282,4.565,1283,4.087,1284,4.087,1285,5.059,1286,3.225,1287,3.815,1288,3.815,1562,4.427,1563,4.427,1564,4.087,1565,4.883]],["title/guards/ResponseGuard.html",[1531,2.854,1566,3.312]],["body/guards/ResponseGuard.html",[3,0.116,4,0.091,5,0.104,7,0.197,9,0.921,11,1.053,12,1.37,13,2.1,19,0.247,20,0.012,23,0.603,25,0.192,26,0.3,27,0.116,28,0.006,36,0.958,37,0.006,40,1.819,51,1.453,116,0.488,132,0.008,133,0.156,139,4.308,142,4.687,147,1.044,149,1.253,184,2.611,186,1.581,187,1.41,190,3.775,199,1.11,202,1.416,260,1.047,263,2.793,300,1.29,316,3.121,419,1.587,435,3.12,486,1.962,526,2.677,538,2.231,570,1.973,765,5.267,771,2.471,835,3.81,867,2.543,1270,4.36,1274,4.81,1276,3.425,1281,3.81,1282,4.075,1286,2.543,1327,4.7,1364,5.184,1400,5.314,1523,5.314,1531,4.899,1533,3.491,1536,6.544,1539,5.184,1540,5.184,1541,3.85,1543,5.184,1544,5.184,1545,5.184,1546,5.184,1547,5.184,1548,5.184,1549,5.184,1566,4.7,1567,3.85,1568,5.919,1569,5.919,1570,4.396,1571,4.396,1572,4.396,1573,7.472,1574,4.396,1575,4.396,1576,4.396,1577,4.396,1578,4.396,1579,4.396,1580,4.396,1581,5.919,1582,4.396,1583,4.396,1584,5.919,1585,4.396,1586,4.396,1587,4.396,1588,4.396,1589,4.396]],["title/interfaces/Result.html",[0,0.255,37,0.005]],["body/interfaces/Result.html",[0,0.516,1,2.605,2,0.91,3,0.095,4,0.074,5,0.085,6,1.271,7,0.161,8,0.827,9,1.021,10,0.966,11,0.98,12,2.254,13,2.039,14,0.883,15,0.995,16,1.92,17,0.883,18,1.384,19,0.31,20,0.012,21,1.349,22,2.378,23,0.79,24,1.656,25,0.117,26,0.245,27,0.225,28,0.007,29,1.763,30,1.763,31,1.763,32,1.763,33,1.763,34,1.763,35,1.763,36,1.432,37,0.008,38,2.806,39,1.357,40,1.722,41,1.357,42,1.357,43,1.357,44,1.357,45,1.357,46,1.357,47,1.271,48,1.357,49,1.357,50,1.194,51,2.019,52,1.271,53,0.937,54,1.942,55,1.357,56,2.194,57,1.357,58,1.357,59,1.357,60,1.357,61,1.357,62,1.357,63,1.357,64,1.357,65,1.357,66,1.357,67,1.357,68,2.267,69,1.942,70,1.357,71,1.357,72,1.357,73,1.995,74,1.357,75,1.357,76,1.942,77,1.357,78,1.357,79,1.357,80,1.357,81,1.357,82,2.319,83,1.357,84,1.819,85,1.819,86,1.357,87,1.357,88,1.357,89,1.357,90,1.357,91,1.357,92,1.357,93,1.357,94,1.357,95,1.942,96,1.357,97,1.357,98,1.357,99,1.271,100,1.357,101,1.357,102,2.319,103,1.357,104,1.357,105,1.357,106,1.357,107,1.357,108,1.357,109,1.357,110,1.357,111,1.025,112,1.357,113,1.357,114,1.357,115,1.357,116,0.297,117,1.357,118,1.357,119,1.357,120,1.357,121,1.357,122,1.271,123,2.125,124,1.357,125,1.357,126,1.357,127,1.819,128,1.763,129,1.357,130,1.357,131,1.357,132,0.007]],["title/classes/SerializeHelper.html",[133,0.148,871,2.54]],["body/classes/SerializeHelper.html",[3,0.063,4,0.049,5,0.056,7,0.106,9,0.585,10,0.637,11,0.335,14,0.583,15,0.656,17,0.583,18,1.076,19,0.31,20,0.012,21,0.488,23,0.65,24,0.566,25,0.188,26,0.162,27,0.153,28,0.003,37,0.003,40,1.341,116,0.583,132,0.005,133,0.238,135,0.787,136,2.022,140,1.329,147,0.664,149,0.796,179,0.866,184,2.114,186,1.596,187,1.267,199,0.706,202,0.796,206,2.679,214,1.107,260,1.748,263,1.951,267,0.763,268,0.763,290,1.824,300,0.697,325,0.74,326,0.787,361,3.4,383,2.464,428,2.075,435,2.179,485,0.895,486,1.247,499,3.123,516,2.517,528,1.689,529,1.689,536,2.81,538,1.761,539,1.984,540,1.984,541,1.252,542,2.927,549,1.901,555,1.901,556,1.824,565,2.578,566,3.055,570,3.423,571,1.824,575,1.252,576,2.464,577,1.252,578,1.513,579,1.517,594,2.507,596,2.81,600,3.249,601,3.251,602,1.984,624,1.901,802,1.446,803,3.008,804,1.529,806,1.252,808,1.625,810,1.374,811,3.008,812,1.446,813,1.446,814,1.446,815,1.446,816,2.575,817,1.446,818,3.638,819,2.575,820,3.198,821,2.575,822,2.575,823,1.625,824,4.219,825,1.625,826,1.625,827,1.625,828,1.625,829,2.575,830,1.625,831,3.567,832,2.575,833,1.625,834,2.575,835,2.422,836,1.625,837,2.177,838,1.625,839,1.625,840,1.625,841,1.625,842,1.984,843,1.625,844,2.575,845,1.625,846,1.625,847,2.575,848,1.625,849,1.625,850,1.625,851,1.625,852,1.625,853,1.625,854,1.625,855,2.575,856,1.529,857,3.008,858,2.846,859,1.625,860,1.374,861,1.625,862,1.625,863,1.625,864,3.198,865,2.575,866,1.625,867,1.374,868,1.446,869,1.625,870,1.625,871,2.291,872,2.575,873,3.638,874,2.575,875,1.625,876,1.625,877,2.575,878,1.625,879,2.575,880,2.575,881,1.625,882,1.625,883,1.625,884,1.625,885,1.625,886,1.625,887,1.625,888,1.625,889,2.575,890,1.625,891,2.422,892,1.529,893,2.291,894,2.291,895,1.625,896,3.198,897,1.625,898,1.446,899,1.625,900,1.625,901,4.421,902,3.198,903,2.575,904,1.625,905,1.625,906,1.625,907,1.625,908,1.625,909,1.625,910,4.421,911,1.625,912,1.529,913,1.625,914,1.625,915,1.625,916,1.625,917,1.625,918,1.625,919,1.625,920,3.198,921,1.625,922,1.625,923,1.625,924,1.625,925,1.625,926,1.625,927,2.575,928,1.625,929,1.625,930,1.625,931,2.575,932,1.625,933,1.625,934,1.625,935,2.575,936,1.625,937,1.625,938,2.575,939,3.198,940,1.625,941,1.625,942,3.198,943,1.625,944,1.625,945,1.625,946,2.575,947,1.625,948,1.625,949,2.575,950,1.625,951,1.625,952,2.575,953,1.625,954,1.625,955,1.625,956,2.575,957,1.625,958,1.625,959,1.625,960,1.625,961,1.625,962,1.625,963,1.625,964,1.625,965,1.625,966,1.625,967,1.625,968,1.625,969,1.625,970,1.625,971,1.625,972,1.625,973,1.625,974,1.625,975,1.625,976,2.575,977,1.625,978,2.575,979,1.625,980,1.625,981,1.625,982,1.625,983,1.625,984,1.625,985,1.625,986,2.575,987,1.625,988,1.625,1590,3.762,1591,3.762,1592,2.374,1593,2.374]],["title/classes/Swagger.html",[133,0.148,594,1.805]],["body/classes/Swagger.html",[3,0.059,4,0.046,5,0.053,7,0.1,9,0.874,10,0.598,11,0.315,14,0.548,15,0.617,17,0.548,18,1.085,19,0.327,20,0.012,21,0.458,23,0.568,24,0.532,25,0.182,26,0.152,27,0.149,28,0.003,37,0.003,40,1.388,116,0.613,132,0.005,133,0.232,135,0.74,136,2.595,140,1.264,147,0.991,149,1.189,179,0.814,184,2.465,186,1.576,187,1.223,199,0.672,202,1.189,206,2.748,214,1.04,237,1.888,260,1.72,263,1.872,267,0.717,268,0.717,290,1.736,300,0.655,325,0.696,326,0.74,361,3.308,383,2.364,428,1.975,435,2.62,485,0.841,486,1.187,499,3.233,516,2.456,528,1.607,529,1.607,536,2.725,538,1.69,539,1.888,540,1.888,541,1.176,542,3.184,549,1.809,555,1.809,556,1.736,565,2.909,566,2.706,570,3.376,571,1.736,575,1.176,576,2.364,577,1.176,578,1.461,579,1.444,594,2.834,596,2.725,600,3.277,601,3.163,602,1.888,624,1.809,802,1.359,803,3.861,804,1.436,806,1.176,808,1.527,810,1.291,811,2.887,812,1.359,813,1.359,814,1.359,815,1.359,816,2.45,817,1.359,818,3.512,819,2.45,820,3.069,821,2.45,822,2.45,823,1.527,824,4.626,825,1.527,826,1.527,827,1.527,828,1.527,829,3.512,830,2.45,831,3.911,832,3.512,833,2.45,834,3.069,835,2.305,836,1.527,837,2.072,838,1.527,839,1.527,840,1.527,841,1.527,842,1.888,843,1.527,844,2.45,845,1.527,846,1.527,847,2.45,848,2.45,849,1.527,850,2.45,851,1.527,852,2.45,853,1.527,854,3.069,855,3.845,856,1.436,857,2.887,858,2.731,859,1.527,860,1.291,861,1.527,862,1.527,863,1.527,864,3.069,865,2.45,866,1.527,867,1.291,868,1.359,869,1.527,870,1.527,871,1.359,872,1.527,873,1.527,874,2.45,875,1.527,876,1.527,877,2.45,878,1.527,879,1.527,880,2.45,881,1.527,882,1.527,883,1.527,884,1.527,885,1.527,886,1.527,887,1.527,888,1.527,889,2.45,890,1.527,891,2.305,892,1.436,893,2.18,894,2.18,895,1.527,896,3.069,897,1.527,898,1.359,899,1.527,900,1.527,901,4.313,902,3.069,903,2.45,904,1.527,905,1.527,906,1.527,907,1.527,908,1.527,909,1.527,910,4.313,911,1.527,912,1.436,913,1.527,914,1.527,915,1.527,916,1.527,917,1.527,918,1.527,919,1.527,920,3.069,921,1.527,922,1.527,923,1.527,924,1.527,925,1.527,926,1.527,927,2.45,928,1.527,929,1.527,930,1.527,931,2.45,932,1.527,933,1.527,934,1.527,935,2.45,936,1.527,937,1.527,938,2.45,939,3.069,940,1.527,941,1.527,942,3.069,943,1.527,944,1.527,945,1.527,946,2.45,947,1.527,948,1.527,949,2.45,950,1.527,951,1.527,952,2.45,953,1.527,954,1.527,955,1.527,956,2.45,957,1.527,958,1.527,959,1.527,960,1.527,961,1.527,962,1.527,963,1.527,964,1.527,965,1.527,966,1.527,967,1.527,968,1.527,969,1.527,970,1.527,971,1.527,972,1.527,973,1.527,974,1.527,975,1.527,976,2.45,977,1.527,978,2.45,979,1.527,980,1.527,981,1.527,982,1.527,983,1.527,984,1.527,985,1.527,986,2.45,987,1.527,988,1.527,1066,3.304,1594,3.58,1595,3.58,1596,3.58,1597,3.58,1598,2.231,1599,2.231,1600,2.231,1601,2.231,1602,2.231,1603,2.231]],["title/classes/Tag.html",[133,0.148,620,2.199]],["body/classes/Tag.html",[0,0.333,3,0.103,4,0.08,5,0.092,7,0.174,8,1.149,9,1.057,18,0.624,19,0.357,20,0.012,23,0.728,25,0.22,27,0.189,28,0.005,36,1.368,37,0.005,111,1.548,116,0.667,132,0.007,133,0.254,135,1.288,147,1.425,149,1.151,172,1.514,199,1.177,202,1.151,206,2.734,275,3.312,300,1.84,335,2.118,362,2.747,363,1.744,374,1.884,435,2.535,472,4.081,475,4.599,476,4.138,477,3.987,478,3.05,479,3.722,480,4.599,481,4.319,482,3.987,485,2.561,486,2.253,487,2.849,490,2.366,493,2.849,494,3.987,495,4.982,497,3.086,498,3.086,499,2.535,500,3.987,502,2.849,503,2.192,506,2.05,512,2.619,569,1.963,578,1.548,607,2.049,608,2.502,609,4.375,612,2.502,613,3,614,3.821,615,3.821,616,5.073,617,4.039,618,3.501,619,2.366,620,2.867,621,3.821,622,3.312,623,2.659,624,3.169,625,2.143,626,2.659,627,2.659,628,2.659,629,3.146,630,2.659,631,2.659,632,2.143,633,2.659,634,2.659,635,3.722,636,3.722,637,3.722,638,3.722,639,3.722,640,2.248,641,2.502,642,2.502,643,2.502,644,2.502,645,2.659,646,2.659,647,2.502,648,2.502,649,2.248,650,2.849,1604,3.886,1605,3.886,1606,3.886,1607,5.692,1608,3.403,1609,3.403,1610,3.403,1611,3.403,1612,3.403,1613,3.403,1614,3.403,1615,3.403]],["title/controllers/TagsController.html",[195,1.805,1616,3.058]],["body/controllers/TagsController.html",[3,0.131,4,0.103,5,0.117,7,0.223,9,0.998,11,1.096,16,1.772,18,1.141,19,0.267,20,0.012,24,1.183,25,0.258,26,0.338,27,0.131,28,0.007,37,0.007,116,0.529,132,0.008,133,0.176,140,1.754,147,1.132,149,1.357,150,2.879,172,1.935,186,1.317,195,2.148,197,2.315,199,1.203,202,1.357,203,3.024,206,1.699,260,1.528,335,2.482,356,4.129,357,4.574,358,3.943,359,3.943,360,2.873,381,2.586,383,2.618,478,2.879,512,2.073,579,3.028,581,3.77,583,2.618,607,3.959,620,4.099,622,3.024,649,4.345,757,3.197,771,2.073,989,4.389,1006,3.398,1010,3.197,1017,5.126,1033,3.024,1038,5.094,1039,3.943,1055,3.943,1060,3.943,1061,3.943,1062,3.943,1063,5.094,1065,3.943,1616,4.702,1617,4.349,1618,4.965,1619,4.965,1620,6.414,1621,3.64,1622,4.349,1623,4.129,1624,4.349,1625,4.965,1626,4.965,1627,4.965,1628,4.965,1629,4.349]],["title/modules/TagsModule.html",[209,1.682,223,2.854]],["body/modules/TagsModule.html",[3,0.157,4,0.122,5,0.139,20,0.012,25,0.25,26,0.403,27,0.157,28,0.008,37,0.008,132,0.009,133,0.21,187,1.41,197,3.337,209,3.301,211,2.989,212,3.12,213,3.423,214,2.758,215,3.12,216,4.244,217,4.244,223,5.761,225,4.141,226,3.423,227,3.263,622,4.359,1616,5.641,1623,5.583,1624,5.182,1630,5.182,1631,5.182,1632,5.182,1633,5.917,1634,5.917]],["title/injectables/TagsService.html",[419,1.119,1623,2.685]],["body/injectables/TagsService.html",[3,0.101,4,0.079,5,0.09,7,0.171,9,1.239,18,1.262,19,0.332,20,0.012,21,1.104,23,0.484,25,0.219,26,0.26,27,0.101,28,0.005,37,0.01,116,0.681,132,0.007,133,0.136,144,1.489,147,1.421,149,1.685,160,3.034,179,1.96,186,1.669,199,1.008,202,1.685,260,1.28,335,2.657,371,1.595,372,2.094,381,2.167,412,2.801,419,1.441,420,1.715,452,3.678,478,3.028,485,1.44,486,1.267,503,1.54,506,2.025,512,2.243,515,3.273,578,1.53,579,2.972,581,3.575,607,3.887,620,4.246,632,2.107,649,3.903,651,3.109,806,2.833,842,2.014,860,3.109,998,4.254,999,3.678,1000,3.678,1010,4.002,1017,4.977,1019,3.429,1023,2.614,1028,2.614,1029,2.801,1033,3.786,1034,2.801,1090,5.511,1093,4.268,1094,3.94,1095,3.94,1096,3.034,1097,4.945,1100,5.645,1102,5.211,1103,4.937,1104,3.034,1106,2.801,1108,3.034,1110,2.801,1113,3.034,1607,5.668,1621,2.801,1622,3.346,1623,3.459,1635,3.346,1636,3.82,1637,3.82,1638,3.82,1639,3.346,1640,3.346,1641,3.346,1642,3.346,1643,3.346,1644,3.346,1645,3.346,1646,3.346,1647,3.82,1648,3.346,1649,5.374,1650,5.374,1651,5.374,1652,5.374,1653,3.82,1654,3.82]],["title/injectables/TimeoutInterceptor.html",[419,1.119,1655,3.312]],["body/injectables/TimeoutInterceptor.html",[3,0.133,4,0.104,5,0.118,7,0.225,9,0.78,19,0.209,20,0.012,25,0.232,26,0.342,27,0.133,28,0.007,37,0.007,40,1.493,116,0.414,132,0.009,133,0.253,147,0.884,149,1.061,186,1.466,187,1.538,190,3.763,199,1.414,202,1.061,300,1.47,325,2.349,344,5.125,419,1.731,420,2.25,470,3.675,486,2.14,518,3.734,538,2.432,578,1.837,690,6.83,719,4.39,771,2.694,1260,3.734,1268,4.731,1269,5.125,1270,4.861,1271,5.852,1273,5.852,1274,4.154,1275,4.731,1276,4.36,1277,5.157,1278,5.157,1279,4.416,1280,4.731,1281,4.154,1282,4.749,1283,4.731,1284,4.731,1285,4.731,1286,2.9,1288,3.43,1300,4.39,1559,3.981,1563,5.125,1655,5.125,1656,4.39,1657,6.453,1658,5.652,1659,5.012,1660,6.453,1661,5.012,1662,6.453,1663,5.012,1664,5.012,1665,5.012,1666,5.012,1667,5.012,1668,5.012,1669,5.012]],["title/injectables/TransformInterceptor.html",[419,1.119,1564,3.058]],["body/injectables/TransformInterceptor.html",[0,0.317,3,0.137,4,0.107,5,0.122,7,0.232,9,0.805,11,0.928,19,0.216,20,0.012,21,1.063,25,0.235,26,0.353,27,0.174,28,0.007,37,0.007,40,1.822,116,0.427,132,0.009,133,0.257,147,0.913,149,1.095,186,1.063,187,1.569,199,1.431,202,1.095,300,1.518,325,2.377,419,1.767,420,2.323,518,3.811,538,2.482,578,1.875,771,2.75,1260,3.811,1266,5.219,1268,5.311,1269,4.11,1270,4.902,1271,5.901,1273,5.901,1274,4.664,1275,4.829,1276,4.413,1277,5.219,1278,5.219,1279,4.508,1280,4.829,1281,4.24,1282,4.796,1283,4.829,1284,4.829,1285,4.829,1286,2.994,1287,3.542,1288,3.542,1562,4.11,1563,5.231,1564,4.829,1565,4.533,1670,5.175]],["title/classes/UpdateTagsDto.html",[133,0.148,649,2.413]],["body/classes/UpdateTagsDto.html",[0,0.402,3,0.136,4,0.106,5,0.121,8,1.053,19,0.345,20,0.012,23,0.708,25,0.247,27,0.208,28,0.007,36,1.121,37,0.007,111,1.464,116,0.649,132,0.009,133,0.279,135,1.705,172,2.004,199,0.965,206,2.244,275,3.131,300,1.924,362,3.314,363,2.308,472,3.314,476,2.975,478,2.308,503,2.645,506,2.472,512,2.738,569,2.598,578,1.464,607,2.711,608,3.31,609,4.65,612,3.31,613,3.618,614,3.995,615,3.995,616,4.943,617,4.65,618,4.223,619,3.131,620,2.711,621,3.131,622,3.131,623,3.519,624,3.649,625,2.836,626,3.519,627,3.519,628,3.519,629,3.795,630,3.519,631,3.519,632,2.836,633,3.519,634,3.519,635,3.519,636,3.519,637,3.519,638,3.519,639,3.519,640,2.975,641,3.31,642,3.31,643,3.31,644,3.31,645,3.519,646,3.519,647,3.31,648,3.31,649,3.795,650,3.77]],["title/classes/UpdateUserDto.html",[133,0.148,673,2.685]],["body/classes/UpdateUserDto.html",[3,0.151,4,0.118,5,0.134,11,1.067,13,1.673,20,0.012,23,0.73,25,0.256,27,0.185,28,0.008,37,0.007,50,1.891,51,1.4,73,1.891,132,0.009,133,0.269,135,1.891,172,2.223,187,1.359,300,1.673,362,4.167,363,2.56,372,2.728,374,2.766,512,2.381,578,2.156,612,3.672,613,4.47,614,3.474,615,3.474,647,5.083,648,3.672,651,3.301,652,4.53,653,6.633,654,4.506,655,4.182,656,4.182,658,4.53,662,5.131,668,5.559,669,4.79,670,4.996,671,4.53,672,4.996,673,4.506,674,4.996]],["title/classes/User.html",[53,1.086,133,0.148]],["body/classes/User.html",[0,0.243,3,0.067,4,0.052,5,0.06,7,0.114,8,1.018,9,1.121,18,0.407,19,0.357,20,0.012,23,0.757,25,0.194,27,0.129,28,0.003,36,1.064,37,0.003,50,1.983,51,1.353,53,1.436,73,2.196,111,1.129,116,0.595,132,0.005,133,0.173,135,0.841,147,1.431,149,1.167,186,1.002,187,0.605,199,1.035,202,1.266,206,2.729,260,1.425,263,2.302,275,2.414,300,1.163,335,2.246,369,3.148,371,1.655,372,2.745,374,3.416,381,1.967,435,1.848,446,2.906,455,4.83,462,2.09,472,3.709,475,3.576,476,3.461,477,2.906,478,2.475,479,2.713,480,3.576,481,3.148,482,2.906,485,2.497,486,2.196,487,1.86,490,1.545,493,1.86,494,2.906,495,5.165,497,2.015,498,2.015,499,1.848,500,2.906,502,1.86,503,2.223,506,2.39,512,1.655,514,3.148,516,1.545,569,2.003,578,1.129,614,4.388,615,4.388,616,4.339,617,3.141,618,3.141,619,1.545,621,2.971,623,2.713,624,3.203,625,2.187,626,2.713,627,2.713,628,2.713,629,3.669,630,2.713,631,2.713,632,2.187,633,2.713,634,2.713,635,2.713,637,4.931,638,2.713,639,3.774,640,2.294,641,2.552,642,2.552,643,2.552,644,2.552,654,3.141,655,5.165,656,5.165,671,2.015,758,4.043,778,2.906,1012,3.472,1119,4.83,1519,4.83,1607,5.025,1608,2.223,1609,2.223,1610,2.223,1611,2.223,1612,2.223,1613,2.223,1614,2.223,1615,2.223,1671,2.015,1672,4.878,1673,6.855,1674,4.878,1675,3.964,1676,6.855,1677,3.472,1678,2.537,1679,2.537,1680,2.537,1681,2.537,1682,3.472,1683,2.537,1684,2.537,1685,3.964,1686,3.964,1687,3.964,1688,3.964,1689,3.964,1690,5.514,1691,3.964,1692,3.964,1693,3.964,1694,3.964,1695,3.964,1696,3.964,1697,3.964,1698,3.964,1699,3.472,1700,3.964,1701,3.964,1702,3.964,1703,3.964,1704,3.964,1705,3.964,1706,3.964,1707,2.537,1708,3.964,1709,3.964,1710,3.964,1711,3.964,1712,2.537,1713,2.906,1714,2.537,1715,2.537,1716,2.537,1717,3.964,1718,2.537,1719,2.537,1720,3.472,1721,2.537,1722,3.964,1723,3.964,1724,3.964,1725,2.223,1726,2.223,1727,2.537,1728,2.537,1729,2.537,1730,2.223,1731,2.223]],["title/classes/UserLoginDto.html",[133,0.148,353,3.058]],["body/classes/UserLoginDto.html",[3,0.121,4,0.094,5,0.107,7,0.204,8,0.973,11,0.854,16,1.258,19,0.284,20,0.012,23,0.654,24,1.085,25,0.257,26,0.31,27,0.16,28,0.006,37,0.006,53,1.186,132,0.008,133,0.242,135,1.51,140,1.608,144,1.774,147,1.069,150,2.72,172,1.774,184,2.21,186,1.491,190,3.591,195,1.97,203,2.773,206,1.558,260,1.623,267,2.189,268,2.189,277,3.116,316,2.401,325,1.889,326,2.258,327,2.746,328,3.901,329,3.901,330,3.901,333,3.116,334,3.616,335,1.889,336,3.988,338,6.004,341,4.442,342,3.988,343,5.966,344,3.616,345,3.988,347,5.966,350,3.616,351,5.543,353,5.543,356,3.901,357,2.931,358,3.616,359,3.616,360,2.634,361,3.757,362,3.441,363,2.044,364,3.616,365,3.195,366,3.338,367,3.757,368,3.116,369,4.812,370,3.988,371,3.365,372,2.829,373,3.988,374,3.521,375,3.988,376,3.988,377,3.616,378,3.338,379,3.988,380,3.988,381,1.836,382,3.988,383,2.401,384,3.988,385,2.634,386,2.931,387,3.988,388,3.988,389,3.988,390,3.988,391,3.988,392,5.308,393,3.988,394,3.988,395,3.988,1732,6.06,1733,4.553,1734,4.553,1735,4.553,1736,4.553]],["title/interfaces/UserPost.html",[0,0.255,85,1.473]],["body/interfaces/UserPost.html",[0,0.511,1,2.548,2,0.84,3,0.088,4,0.069,5,0.078,6,1.173,7,0.149,8,0.781,10,0.891,11,0.685,12,1.792,13,1.426,14,0.815,15,0.918,16,1.343,17,0.815,18,1.388,19,0.343,20,0.012,21,0.998,22,1.967,23,0.791,24,1.37,25,0.108,26,0.226,27,0.223,28,0.006,29,1.663,30,1.663,31,1.663,32,1.663,33,1.663,34,1.663,35,1.663,36,1.684,37,0.006,38,2.738,39,1.252,40,1.681,41,1.252,42,1.252,43,1.252,44,1.252,45,1.252,46,1.252,47,1.173,48,1.252,49,1.252,50,1.101,51,2.037,52,1.173,53,0.865,54,1.832,55,1.252,56,2.097,57,1.252,58,1.252,59,1.252,60,1.252,61,1.252,62,1.252,63,1.252,64,1.252,65,1.252,66,1.252,67,1.252,68,2.166,69,1.832,70,1.252,71,1.252,72,1.252,73,1.906,74,1.252,75,1.252,76,1.832,77,1.252,78,1.252,79,1.252,80,1.252,81,1.252,82,2.683,83,1.252,84,2.234,85,2.03,86,2.384,87,2.384,88,2.384,89,2.384,90,2.384,91,2.384,92,2.384,93,2.384,94,2.384,95,2.537,96,2.384,97,2.384,98,2.384,99,1.173,100,1.252,101,1.252,102,2.234,103,1.252,104,1.252,105,1.252,106,1.252,107,1.252,108,1.252,109,1.252,110,1.252,111,0.946,112,1.252,113,1.252,114,1.252,115,1.252,116,0.274,117,1.252,118,1.252,119,1.252,120,1.252,121,1.252,122,1.173,123,2.03,124,1.252,125,1.252,126,1.252,127,1.717,128,1.663,129,1.252,130,1.252,131,1.252,132,0.006]],["title/interfaces/UserPosts.html",[0,0.255,99,1.473]],["body/interfaces/UserPosts.html",[0,0.517,1,2.622,2,0.933,3,0.098,4,0.076,5,0.087,6,1.304,7,0.165,8,0.842,10,0.99,11,0.739,12,1.902,13,1.539,14,0.906,15,1.02,16,1.449,17,0.906,18,1.387,19,0.292,20,0.012,21,1.077,22,2.087,23,0.788,24,1.454,25,0.12,26,0.252,27,0.226,28,0.007,29,1.794,30,1.794,31,1.794,32,1.794,33,1.794,34,1.794,35,1.794,36,1.448,37,0.007,38,2.826,39,1.391,40,1.735,41,1.391,42,1.391,43,1.391,44,1.391,45,1.391,46,1.391,47,1.304,48,1.391,49,1.391,50,1.224,51,2.048,52,1.304,53,0.961,54,1.977,55,1.391,56,2.225,57,1.391,58,1.391,59,1.391,60,1.391,61,1.391,62,1.391,63,1.391,64,1.391,65,1.391,66,1.391,67,1.391,68,2.299,69,1.977,70,1.391,71,1.391,72,1.391,73,2.023,74,1.391,75,1.391,76,1.977,77,1.391,78,1.391,79,1.391,80,1.391,81,1.391,82,2.346,83,1.391,84,1.852,85,2.346,86,1.391,87,1.391,88,1.391,89,1.391,90,1.391,91,1.391,92,1.391,93,1.391,94,1.391,95,1.977,96,1.391,97,1.391,98,1.391,99,1.852,100,2.504,101,2.504,102,2.346,103,1.391,104,1.391,105,1.391,106,1.391,107,1.391,108,1.391,109,1.391,110,1.391,111,1.051,112,1.391,113,1.391,114,1.391,115,1.391,116,0.305,117,1.391,118,1.391,119,1.391,120,1.391,121,1.391,122,1.304,123,2.155,124,1.391,125,1.391,126,1.391,127,1.852,128,1.794,129,1.391,130,1.391,131,1.391,132,0.007]],["title/controllers/UsersController.html",[195,1.805,1737,3.058]],["body/controllers/UsersController.html",[3,0.127,4,0.099,5,0.113,7,0.216,9,0.978,11,1.085,16,1.737,18,1.124,19,0.262,20,0.012,24,1.147,25,0.256,26,0.328,27,0.127,28,0.006,37,0.006,53,2.005,116,0.519,132,0.008,133,0.171,140,1.7,147,1.109,149,1.331,150,2.822,165,3.1,172,1.876,179,2.293,186,1.291,187,1.768,195,2.083,197,2.245,199,1.18,202,1.331,203,2.932,206,1.647,260,1.498,335,2.462,356,4.048,357,4.048,365,3.315,381,2.535,383,2.539,478,3.456,516,1.876,579,3.184,581,3.901,583,2.539,625,2.656,651,4.294,673,4.778,757,3.1,771,2.01,842,3.913,989,3.295,1006,3.295,1010,3.1,1011,5.507,1017,5.084,1033,2.932,1038,4.993,1039,3.824,1040,6.132,1046,5.507,1055,3.824,1060,3.824,1061,3.824,1062,3.824,1063,3.824,1065,3.824,1621,3.53,1629,4.217,1713,5.645,1737,4.609,1738,4.217,1739,6.287,1740,4.815,1741,4.815,1742,4.815,1743,4.815,1744,4.217,1745,4.217,1746,4.217,1747,4.815,1748,4.815]],["title/modules/UsersModule.html",[209,1.682,224,2.685]],["body/modules/UsersModule.html",[3,0.157,4,0.122,5,0.139,20,0.012,25,0.25,26,0.403,27,0.157,28,0.008,37,0.008,132,0.009,133,0.21,187,1.41,197,3.337,209,3.301,211,2.989,212,3.12,213,3.423,214,2.758,215,3.12,216,4.244,217,4.244,224,5.419,225,4.141,226,3.423,227,3.263,365,4.573,1713,5.247,1737,5.641,1745,5.182,1749,5.182,1750,5.182,1751,5.182,1752,5.917,1753,5.917]],["title/injectables/UsersService.html",[365,2.199,419,1.119]],["body/injectables/UsersService.html",[3,0.092,4,0.072,5,0.082,7,0.156,9,1.254,11,1.007,18,1.283,19,0.336,20,0.012,21,1.031,23,0.712,25,0.232,26,0.237,27,0.092,28,0.005,37,0.009,53,1.86,116,0.665,132,0.007,133,0.123,144,1.354,147,1.433,149,1.706,164,2.759,179,1.832,186,1.68,188,3.681,199,0.942,202,1.706,260,1.197,267,1.117,268,1.117,326,1.152,335,2.684,365,2.648,371,1.45,372,2.783,374,1.685,381,2.378,412,2.547,419,1.347,420,1.559,446,3.681,452,3.437,457,3.043,478,3.306,485,1.309,486,1.152,503,1.401,506,1.893,512,2.096,515,3.058,578,1.43,579,2.605,581,3.133,607,2.648,632,1.916,651,4.133,673,4.159,771,1.45,806,2.648,842,1.832,860,2.906,998,4.036,999,3.437,1000,3.437,1010,2.237,1017,3.797,1019,3.253,1023,2.377,1028,2.377,1029,2.547,1033,3.592,1034,2.547,1090,5.408,1093,5.131,1094,4.736,1095,3.681,1096,2.759,1097,4.736,1100,5.443,1102,5.024,1103,4.683,1104,2.759,1106,4.323,1108,2.759,1110,2.547,1113,2.759,1124,3.043,1125,3.043,1162,2.759,1425,3.043,1607,5.529,1621,2.547,1639,3.043,1640,3.043,1641,3.043,1642,3.043,1643,3.043,1644,3.043,1645,3.043,1646,3.043,1648,3.043,1677,4.398,1720,4.398,1725,3.043,1726,3.043,1744,3.043,1746,3.043,1754,3.043,1755,3.474,1756,5.022,1757,3.474,1758,5.022,1759,3.474,1760,3.474,1761,3.474,1762,3.474,1763,5.022,1764,3.474,1765,3.474,1766,3.474,1767,3.474]],["title/classes/ValidationFailedFilter.html",[133,0.148,1768,3.312]],["body/classes/ValidationFailedFilter.html",[3,0.135,4,0.106,5,0.12,7,0.229,9,0.795,11,0.921,13,1.916,16,1.805,19,0.3,20,0.012,24,1.217,25,0.212,26,0.348,27,0.135,28,0.007,37,0.007,40,1.182,116,0.422,132,0.009,133,0.255,135,1.694,140,1.804,142,3.978,143,3.745,147,0.901,149,1.081,179,1.863,180,3.496,187,1.557,190,3.797,199,1.226,202,1.081,237,2.694,260,1.869,281,5.564,300,1.916,469,3.638,503,2.06,515,4.622,518,3.78,528,2.293,529,2.293,538,2.462,569,3.3,629,3.78,771,2.727,867,3.78,1260,3.78,1276,3.78,1496,4.057,1497,5.722,1498,7.305,1499,6.308,1500,5.722,1508,6.648,1510,5.722,1511,5.722,1512,5.722,1513,5.722,1514,4.057,1515,4.475,1516,4.475,1517,4.475,1518,4.475,1523,4.057,1524,4.475,1768,5.188,1769,5.722,1770,7.59,1771,5.109,1772,5.109,1773,6.532,1774,5.109,1775,5.109]],["title/interfaces/VerifiedTokenPayload.html",[0,0.255,1434,3.058]],["body/interfaces/VerifiedTokenPayload.html",[0,0.385,2,1.59,3,0.167,4,0.13,5,0.148,7,0.282,8,1.192,19,0.329,20,0.011,23,0.778,27,0.167,28,0.008,37,0.008,132,0.01,372,3.179,485,2.371,1434,5.791,1776,5.51,1777,8.159,1778,8.159]],["title/coverage.html",[1779,4.536]],["body/coverage.html",[0,0.509,1,0.805,5,0.055,6,2.8,19,0.098,20,0.012,28,0.003,29,0.805,30,0.805,31,0.805,32,0.805,33,0.805,34,0.805,35,0.805,37,0.005,40,0.544,47,0.831,53,0.973,82,0.831,84,0.831,85,0.831,99,0.831,102,0.831,122,0.831,123,0.831,127,0.831,128,0.805,132,0.005,133,0.284,134,1.869,136,3.664,137,2.739,138,2.967,179,0.858,184,2.891,185,1.725,195,2.657,196,1.725,198,2.061,215,1.241,228,1.869,230,1.725,254,1.725,261,1.869,333,1.611,334,2.967,353,1.725,361,1.298,362,1.189,365,1.241,367,1.298,399,1.611,400,1.611,401,1.611,419,1.992,421,2.061,472,1.189,473,2.967,474,1.725,490,1.433,536,1.141,537,3.794,556,1.141,557,1.433,563,1.433,565,1.141,594,1.616,596,1.141,607,1.241,608,3.405,609,1.515,613,1.298,620,1.241,621,2.829,649,1.362,651,1.362,652,2.967,654,1.515,662,1.725,669,1.611,673,1.515,677,1.611,678,1.611,683,2.061,687,1.725,748,5.376,802,1.433,803,3.714,804,3.714,812,1.433,813,1.433,814,1.433,815,1.433,817,1.433,837,1.362,871,1.433,893,1.433,989,1.611,990,2.061,994,1.611,1002,1.611,1014,2.405,1019,1.298,1044,1.433,1090,1.611,1091,2.061,1134,4.201,1179,4.201,1186,1.869,1190,1.869,1202,1.515,1205,1.611,1206,2.061,1211,1.869,1215,1.725,1216,2.061,1223,1.515,1237,2.061,1253,2.061,1262,1.869,1263,2.967,1264,2.967,1301,2.061,1329,2.061,1385,2.061,1395,2.739,1414,2.061,1416,1.725,1417,2.967,1430,2.061,1434,1.725,1447,2.061,1468,2.061,1469,2.061,1471,1.869,1494,1.869,1495,2.061,1496,2.967,1531,2.557,1532,1.869,1534,2.061,1562,2.967,1564,1.725,1566,1.869,1567,2.061,1616,1.725,1617,2.061,1623,1.515,1635,2.061,1655,1.869,1656,2.061,1671,1.869,1699,2.061,1737,1.725,1738,2.061,1754,2.061,1768,1.869,1769,2.061,1776,2.061,1779,1.869,1780,2.353,1781,2.353,1782,6.437,1783,8.481,1784,8.646,1785,2.353,1786,2.353,1787,7.756,1788,4.646,1789,5.77,1790,3.272,1791,2.061,1792,2.061,1793,4.646,1794,7.756,1795,2.353,1796,2.353,1797,2.353,1798,2.353,1799,2.353,1800,2.061,1801,2.061,1802,1.869,1803,2.353,1804,3.736,1805,2.353,1806,2.353,1807,2.061,1808,7.023,1809,2.061,1810,2.061,1811,2.061,1812,2.061,1813,2.061,1814,2.061,1815,2.061,1816,2.061,1817,2.061,1818,2.061,1819,2.061,1820,2.967,1821,2.061,1822,2.061,1823,2.061,1824,2.061,1825,3.272,1826,2.061,1827,2.353,1828,5.77,1829,2.061,1830,2.353,1831,2.353,1832,2.353,1833,2.353,1834,3.272,1835,2.061,1836,2.061,1837,3.689,1838,4.069,1839,4.069,1840,3.689,1841,3.689,1842,4.646,1843,2.061,1844,5.77,1845,2.061,1846,2.061,1847,3.272,1848,2.061,1849,2.061,1850,2.353,1851,2.353,1852,2.061,1853,2.061,1854,5.77,1855,3.736,1856,2.061,1857,5.054,1858,2.061,1859,2.061,1860,2.061,1861,2.353,1862,2.353,1863,2.353,1864,2.353,1865,2.353,1866,3.736,1867,3.736,1868,2.061,1869,2.353,1870,2.353,1871,2.353,1872,2.353]],["title/dependencies.html",[212,2.648,1873,3.474]],["body/dependencies.html",[4,0.102,20,0.012,26,0.337,28,0.007,37,0.006,132,0.008,133,0.227,139,3.187,172,1.929,192,3.629,206,1.693,212,2.61,241,2.73,243,4.336,245,3.387,247,3.931,249,4.336,341,3.629,360,2.864,363,2.222,364,6.168,405,3.931,446,3.629,503,3.132,509,3.629,511,3.931,525,2.73,572,3.187,594,2.142,680,3.387,810,2.864,811,3.187,831,2.864,997,3.931,1156,4.336,1180,6.214,1181,3.629,1196,3.931,1286,2.864,1287,3.387,1311,5.499,1312,4.336,1349,4.336,1437,4.336,1454,4.336,1802,5.083,1874,4.95,1875,4.95,1876,6.401,1877,7.094,1878,4.95,1879,4.95,1880,4.95,1881,4.95,1882,4.95,1883,4.95,1884,4.95,1885,6.401,1886,4.95,1887,4.95,1888,6.401,1889,4.95,1890,4.95,1891,4.95,1892,4.95,1893,4.95,1894,6.401,1895,4.95,1896,4.95,1897,6.401,1898,4.95,1899,4.95,1900,4.95,1901,4.95,1902,4.95,1903,4.95,1904,4.95,1905,4.95,1906,4.95,1907,4.95,1908,4.95,1909,4.95,1910,4.95,1911,4.95,1912,4.95,1913,4.95,1914,4.95,1915,4.95,1916,4.95,1917,4.95,1918,4.95,1919,4.95,1920,4.95,1921,4.95,1922,4.95,1923,4.95,1924,4.95,1925,4.95,1926,4.95,1927,4.95,1928,4.95,1929,4.95,1930,4.95,1931,4.95,1932,4.95,1933,4.95,1934,3.931,1935,4.95,1936,4.95,1937,4.95,1938,4.95]],["title/miscellaneous/enumerations.html",[1939,2.01,1940,4.398]],["body/miscellaneous/enumerations.html",[7,0.298,20,0.011,28,0.009,37,0.009,132,0.01,486,2.545,1395,4.882,1403,6.095,1404,6.095,1405,6.095,1939,3.853,1940,5.833,1941,6.66]],["title/miscellaneous/functions.html",[1939,2.01,1942,4.398]],["body/miscellaneous/functions.html",[7,0.2,9,1.332,19,0.322,20,0.012,21,0.916,28,0.006,36,1.303,37,0.006,51,1.654,116,0.707,132,0.008,136,2.585,137,3.268,138,4.745,140,1.574,146,2.87,149,1.813,185,4.94,202,1.737,215,3.553,229,4.94,236,3.05,316,3.796,361,3.295,362,3.018,386,3.846,486,2.617,499,3.142,537,2.459,578,1.918,584,2.87,598,2.87,599,2.87,687,4.38,1014,3.846,1134,3.54,1157,5.352,1158,3.904,1159,3.904,1181,5.881,1263,3.54,1264,4.745,1289,3.904,1290,3.904,1291,3.904,1292,3.904,1820,4.745,1829,5.233,1837,3.54,1838,6.768,1839,6.768,1840,3.54,1841,3.54,1843,5.233,1845,3.904,1846,5.233,1847,6.306,1848,3.904,1849,5.233,1856,5.233,1857,3.904,1858,5.233,1859,5.233,1860,5.233,1939,2.579,1942,3.904,1943,4.457,1944,4.745,1945,7.507,1946,5.233,1947,5.233,1948,5.233,1949,6.739,1950,4.457,1951,4.457,1952,4.457,1953,4.457,1954,4.457,1955,4.457,1956,4.457,1957,4.457,1958,6.739,1959,6.739,1960,4.457,1961,5.974]],["title/index.html",[7,0.156,1962,3.474,1963,3.474]],["body/index.html",[4,0.118,20,0.012,28,0.008,37,0.008,132,0.009,187,1.367,192,4.205,229,4.205,277,3.925,278,5.577,317,6.649,327,2.312,687,6.055,1658,5.024,1779,4.555,1934,4.555,1964,5.735,1965,5.735,1966,7.023,1967,5.735,1968,5.735,1969,5.735,1970,5.735,1971,5.735,1972,5.735,1973,5.735,1974,5.735,1975,8.364,1976,5.735,1977,5.735,1978,5.735,1979,5.735,1980,7.023,1981,5.735,1982,5.735,1983,5.735,1984,7.023,1985,5.735,1986,5.735,1987,5.735,1988,7.023,1989,7.023,1990,5.735,1991,5.735,1992,5.735,1993,5.735,1994,5.735,1995,5.735,1996,5.735,1997,5.735,1998,5.735,1999,5.735,2000,5.735,2001,5.735,2002,5.735,2003,5.735,2004,5.735,2005,5.735,2006,5.735,2007,5.735,2008,5.735,2009,5.735,2010,5.735,2011,5.735]],["title/modules.html",[211,2.885]],["body/modules.html",[20,0.01,28,0.008,37,0.008,132,0.01,210,4.64,211,3.197,220,4.331,221,4.331,222,4.331,223,4.331,224,4.074,252,4.331,1198,4.331,1934,6.775,2012,8.531,2013,8.531,2014,8.593,2015,6.329,2016,6.329]],["title/overview.html",[2017,5.002]],["body/overview.html",[2,1.285,20,0.012,28,0.007,37,0.007,132,0.009,135,1.686,197,2.37,209,2.05,210,6.233,211,2.568,212,2.681,213,2.942,214,2.37,215,2.681,216,2.804,217,2.804,218,4.453,219,4.453,220,5.846,221,4.917,222,5.575,223,5.484,224,5.245,225,3.768,226,2.942,227,2.804,252,5.484,365,4.296,367,3.963,396,4.453,398,4.453,399,4.917,400,4.917,401,4.917,420,2.282,636,3.48,675,4.453,676,4.453,677,4.917,678,4.917,1198,5.484,1199,4.453,1200,4.453,1201,4.453,1202,5.245,1223,4.626,1231,4.453,1233,4.453,1533,4.038,1623,5.245,1630,4.453,1631,4.453,1632,4.453,1682,4.453,1749,4.453,1750,4.453,1751,4.453,1868,4.453,2017,4.453,2018,5.084,2019,5.084,2020,5.084]],["title/miscellaneous/typealiases.html",[1939,2.01,2021,5.021]],["body/miscellaneous/typealiases.html",[0,0.424,6,1.976,7,0.251,8,1.111,12,1.744,19,0.288,20,0.012,22,2.366,23,0.504,28,0.01,29,1.914,30,1.914,31,1.914,32,1.914,33,1.914,34,1.914,35,1.914,36,1.22,37,0.007,56,2.522,128,1.914,132,0.009,133,0.245,136,2.992,199,1.298,503,2.788,506,2.607,537,3.086,542,3.494,548,3.601,549,2.826,550,3.601,551,3.601,552,3.601,553,3.601,554,3.601,555,2.826,608,3.601,617,4.833,618,4.833,629,4.002,640,4.002,641,4.452,642,4.452,643,4.452,644,4.452,645,4.733,646,4.733,1066,3.601,1671,4.443,1730,6.058,1731,6.058,1939,3.237,1944,4.443,2022,5.594,2023,7.507,2024,6.916,2025,5.594,2026,6.916,2027,6.916,2028,6.916,2029,5.594]],["title/miscellaneous/variables.html",[1939,2.01,2030,4.398]],["body/miscellaneous/variables.html",[7,0.125,11,0.601,18,0.447,19,0.294,20,0.012,23,0.653,28,0.004,36,0.607,37,0.004,51,2.007,53,1.347,111,1.213,132,0.006,136,2.508,184,1.016,186,1.353,190,2.247,228,2.213,254,3.124,260,1.381,261,3.384,262,2.441,263,2.749,264,4.603,265,2.441,266,2.441,267,1.37,268,0.896,269,2.441,270,2.441,271,2.213,272,2.441,273,2.441,274,2.441,275,1.697,276,2.441,277,1.907,278,2.213,279,2.441,280,2.441,281,2.043,282,2.441,283,2.441,284,5.769,285,2.441,286,2.441,287,2.441,288,2.441,289,2.441,290,1.351,293,2.213,335,1.328,363,1.251,413,2.213,485,3.243,486,2.85,499,2.413,506,1.05,526,4.011,528,1.913,529,1.913,537,1.537,562,1.697,564,1.612,570,1.251,578,1.875,594,1.844,595,1.794,596,2.066,597,1.794,600,2.066,613,2.351,620,1.469,621,4.011,622,2.595,662,3.124,669,2.916,748,3.53,812,2.595,813,2.595,814,2.595,815,2.595,837,2.466,856,1.794,857,1.794,993,3.124,994,2.916,1014,2.743,1179,2.213,1181,3.794,1185,2.441,1186,4.11,1187,2.441,1188,2.441,1189,2.441,1190,3.384,1191,2.441,1192,2.441,1193,2.441,1194,2.441,1195,2.441,1196,2.213,1197,2.441,1211,3.384,1270,1.697,1416,2.043,1417,2.213,1423,2.441,1427,3.733,1428,2.441,1429,2.441,1493,2.441,1514,2.213,1559,2.213,1713,2.043,1790,2.441,1791,3.733,1792,3.733,1800,2.441,1801,3.733,1802,3.384,1807,2.441,1808,2.441,1809,3.733,1810,3.733,1811,3.733,1812,3.733,1813,3.733,1814,3.733,1815,3.733,1816,3.733,1817,3.733,1818,3.733,1819,3.733,1820,3.384,1821,3.733,1822,3.733,1823,3.733,1824,3.733,1825,2.441,1826,3.733,1834,2.441,1835,3.733,1836,3.733,1837,2.213,1840,2.213,1841,2.213,1852,2.441,1853,3.733,1939,1.612,1944,3.384,1946,2.441,1947,2.441,1948,2.441,2030,2.441,2031,4.261,2032,2.786,2033,2.786,2034,5.796,2035,4.261,2036,2.786,2037,8.216,2038,2.786,2039,4.261,2040,2.786,2041,4.261,2042,2.786,2043,2.786,2044,4.261,2045,2.786,2046,8.562,2047,2.786,2048,2.786,2049,2.786,2050,2.786,2051,2.786,2052,2.786,2053,4.261,2054,2.786,2055,2.786,2056,2.786,2057,2.786,2058,4.261,2059,2.786,2060,2.786,2061,4.261,2062,2.786,2063,2.786,2064,2.786,2065,2.786,2066,2.786,2067,2.786,2068,2.786,2069,2.786,2070,4.261,2071,2.786,2072,2.786,2073,2.786,2074,2.786,2075,2.786,2076,4.261,2077,2.786,2078,2.786,2079,2.786,2080,2.786,2081,2.786,2082,2.786,2083,2.786,2084,2.786,2085,2.786,2086,2.786,2087,2.786,2088,2.786,2089,2.786,2090,2.786,2091,2.786,2092,2.786]]],"invertedIndex":[["",{"_index":20,"title":{},"body":{"interfaces/APIResponse.html":{},"classes/ApiException.html":{},"controllers/AppController.html":{},"interfaces/AppLaunchAction.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseModel.html":{},"interfaces/BaseRoute.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"modules/CronModule.html":{},"injectables/CronService.html":{},"classes/CrudConfigService.html":{},"classes/CrudController.html":{},"interfaces/CrudOptions.html":{},"classes/CrudRoutesFactory.html":{},"classes/CrudService.html":{},"classes/CustomQueryBuilder.html":{},"modules/DatabaseModule.html":{},"modules/EmailModule.html":{},"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"modules/EmailSchedulingModule.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/ExcludeNullUndefinedInterceptor.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"interfaces/IBaseModel.html":{},"interfaces/ICrudService.html":{},"interfaces/IPaginationResult.html":{},"interfaces/ITag.html":{},"interfaces/IUser.html":{},"classes/IsEmailExistsConstraint.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/PaginationParams.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"injectables/PersistedCronService.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"classes/QueryFailedFilter.html":{},"classes/R.html":{},"guards/RequestGuard.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Response.html":{},"guards/ResponseGuard.html":{},"interfaces/Result.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"classes/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateTagsDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/UserLoginDto.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/ValidationFailedFilter.html":{},"interfaces/VerifiedTokenPayload.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":748,"title":{},"body":{"injectables/CronService.html":{},"classes/CrudService.html":{},"classes/CustomQueryBuilder.html":{},"interfaces/IPaginationResult.html":{},"classes/PaginationParams.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["0.1.1",{"_index":1883,"title":{},"body":{"dependencies.html":{}}}],["0.1.13",{"_index":1930,"title":{},"body":{"dependencies.html":{}}}],["0.12.2",{"_index":1902,"title":{},"body":{"dependencies.html":{}}}],["0.21.15",{"_index":1914,"title":{},"body":{"dependencies.html":{}}}],["0.3.1",{"_index":1876,"title":{},"body":{"dependencies.html":{}}}],["0.4.1",{"_index":1888,"title":{},"body":{"dependencies.html":{}}}],["0.4.5",{"_index":1922,"title":{},"body":{"dependencies.html":{}}}],["0.5.19",{"_index":1935,"title":{},"body":{"dependencies.html":{}}}],["0.6.1",{"_index":1878,"title":{},"body":{"dependencies.html":{}}}],["0.8",{"_index":1372,"title":{},"body":{"controllers/HealthController.html":{}}}],["0/1",{"_index":1784,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":1803,"title":{},"body":{"coverage.html":{}}}],["0/12",{"_index":1861,"title":{},"body":{"coverage.html":{}}}],["0/14",{"_index":1804,"title":{},"body":{"coverage.html":{}}}],["0/15",{"_index":1851,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1782,"title":{},"body":{"coverage.html":{}}}],["0/23",{"_index":1850,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1787,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1793,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":1789,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":1828,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":1788,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":1827,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":1842,"title":{},"body":{"coverage.html":{}}}],["01]\\d",{"_index":2063,"title":{},"body":{"miscellaneous/variables.html":{}}}],["0})@isoptional()@min(0)@transform(undefined",{"_index":1463,"title":{},"body":{"classes/PaginationParams.html":{}}}],["1",{"_index":758,"title":{},"body":{"injectables/CronService.html":{},"classes/CustomQueryBuilder.html":{},"controllers/HealthController.html":{},"classes/User.html":{}}}],["1.0.0",{"_index":1926,"title":{},"body":{"dependencies.html":{}}}],["1.1.0",{"_index":1923,"title":{},"body":{"dependencies.html":{}}}],["1.1.2",{"_index":1920,"title":{},"body":{"dependencies.html":{}}}],["1.2.0",{"_index":1899,"title":{},"body":{"dependencies.html":{}}}],["1.8.2",{"_index":1903,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":1844,"title":{},"body":{"coverage.html":{}}}],["1/7",{"_index":1867,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":1411,"title":{},"body":{"interfaces/IPaginationResult.html":{},"classes/PaginationParams.html":{}}}],["10/10",{"_index":1797,"title":{},"body":{"coverage.html":{}}}],["10/12",{"_index":1865,"title":{},"body":{"coverage.html":{}}}],["10/19",{"_index":1831,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":1794,"title":{},"body":{"coverage.html":{}}}],["100000",{"_index":738,"title":{},"body":{"injectables/CronService.html":{}}}],["1024",{"_index":1365,"title":{},"body":{"controllers/HealthController.html":{}}}],["10_000",{"_index":1666,"title":{},"body":{"injectables/TimeoutInterceptor.html":{}}}],["12",{"_index":1726,"title":{},"body":{"classes/User.html":{},"injectables/UsersService.html":{}}}],["12345678",{"_index":373,"title":{},"body":{"controllers/AuthController.html":{},"classes/UserLoginDto.html":{}}}],["12345678'})@isnotempty",{"_index":1735,"title":{},"body":{"classes/UserLoginDto.html":{}}}],["13",{"_index":1868,"title":{},"body":{"coverage.html":{},"overview.html":{}}}],["14",{"_index":1866,"title":{},"body":{"coverage.html":{}}}],["15",{"_index":1163,"title":{},"body":{"classes/CustomQueryBuilder.html":{}}}],["15.5.0",{"_index":1909,"title":{},"body":{"dependencies.html":{}}}],["17.1.1",{"_index":1874,"title":{},"body":{"dependencies.html":{}}}],["2",{"_index":636,"title":{},"body":{"classes/CreateTagsDto.html":{},"interfaces/ITag.html":{},"classes/Tag.html":{},"classes/UpdateTagsDto.html":{},"overview.html":{}}}],["2.0.0",{"_index":1924,"title":{},"body":{"dependencies.html":{}}}],["2.0.21",{"_index":1928,"title":{},"body":{"dependencies.html":{}}}],["2.1.4",{"_index":1890,"title":{},"body":{"dependencies.html":{}}}],["2.19.2",{"_index":1896,"title":{},"body":{"dependencies.html":{}}}],["2.2.6",{"_index":1919,"title":{},"body":{"dependencies.html":{}}}],["2.29.1",{"_index":1916,"title":{},"body":{"dependencies.html":{}}}],["2/2",{"_index":1854,"title":{},"body":{"coverage.html":{}}}],["2/3",{"_index":1863,"title":{},"body":{"coverage.html":{}}}],["2/4",{"_index":1833,"title":{},"body":{"coverage.html":{}}}],["2/6",{"_index":1806,"title":{},"body":{"coverage.html":{}}}],["200",{"_index":1364,"title":{},"body":{"controllers/HealthController.html":{},"guards/ResponseGuard.html":{}}}],["20922789888000",{"_index":750,"title":{},"body":{"injectables/CronService.html":{}}}],["22",{"_index":2019,"title":{},"body":{"overview.html":{}}}],["255",{"_index":637,"title":{},"body":{"classes/CreateTagsDto.html":{},"interfaces/ITag.html":{},"classes/Tag.html":{},"classes/UpdateTagsDto.html":{},"classes/User.html":{}}}],["2]\\d(?::?[0",{"_index":2068,"title":{},"body":{"miscellaneous/variables.html":{}}}],["2]\\d:[0",{"_index":2065,"title":{},"body":{"miscellaneous/variables.html":{}}}],["3",{"_index":1119,"title":{},"body":{"classes/CrudService.html":{},"classes/User.html":{}}}],["3.0.1",{"_index":1921,"title":{},"body":{"dependencies.html":{}}}],["3.0.2",{"_index":1932,"title":{},"body":{"dependencies.html":{}}}],["3.20.0",{"_index":1901,"title":{},"body":{"dependencies.html":{}}}],["3/23",{"_index":1869,"title":{},"body":{"coverage.html":{}}}],["3/3",{"_index":1855,"title":{},"body":{"coverage.html":{}}}],["3/4",{"_index":1786,"title":{},"body":{"coverage.html":{}}}],["3000",{"_index":1367,"title":{},"body":{"controllers/HealthController.html":{}}}],["32",{"_index":2020,"title":{},"body":{"overview.html":{}}}],["33",{"_index":1805,"title":{},"body":{"coverage.html":{}}}],["3600",{"_index":2089,"title":{},"body":{"miscellaneous/variables.html":{}}}],["3]\\d(?:t[0",{"_index":2064,"title":{},"body":{"miscellaneous/variables.html":{}}}],["4.0.0",{"_index":1925,"title":{},"body":{"dependencies.html":{}}}],["4.0.2",{"_index":1918,"title":{},"body":{"dependencies.html":{}}}],["4.1.5",{"_index":1938,"title":{},"body":{"dependencies.html":{}}}],["4.17.1",{"_index":1906,"title":{},"body":{"dependencies.html":{}}}],["4.17.20",{"_index":1915,"title":{},"body":{"dependencies.html":{}}}],["4.2.0",{"_index":1913,"title":{},"body":{"dependencies.html":{}}}],["4.2.2",{"_index":1904,"title":{},"body":{"dependencies.html":{}}}],["4.7.5",{"_index":1891,"title":{},"body":{"dependencies.html":{}}}],["4/4",{"_index":1798,"title":{},"body":{"coverage.html":{}}}],["401",{"_index":1575,"title":{},"body":{"guards/ResponseGuard.html":{}}}],["5.0.0",{"_index":1897,"title":{},"body":{"dependencies.html":{}}}],["5.2.3",{"_index":1908,"title":{},"body":{"dependencies.html":{}}}],["50",{"_index":1832,"title":{},"body":{"coverage.html":{}}}],["50000",{"_index":741,"title":{},"body":{"injectables/CronService.html":{}}}],["50000000",{"_index":753,"title":{},"body":{"injectables/CronService.html":{}}}],["52",{"_index":1830,"title":{},"body":{"coverage.html":{}}}],["53",{"_index":1870,"title":{},"body":{"coverage.html":{}}}],["5]\\d(?:\\.\\d+)?(?:z",{"_index":2067,"title":{},"body":{"miscellaneous/variables.html":{}}}],["5]\\d)?)?)?$/g.test",{"_index":2069,"title":{},"body":{"miscellaneous/variables.html":{}}}],["5]\\d:[0",{"_index":2066,"title":{},"body":{"miscellaneous/variables.html":{}}}],["6",{"_index":2018,"title":{},"body":{"overview.html":{}}}],["6.6.3",{"_index":1933,"title":{},"body":{"dependencies.html":{}}}],["6/6",{"_index":1799,"title":{},"body":{"coverage.html":{}}}],["60",{"_index":764,"title":{},"body":{"injectables/CronService.html":{},"controllers/HealthController.html":{}}}],["66",{"_index":1862,"title":{},"body":{"coverage.html":{}}}],["7.0.1",{"_index":1892,"title":{},"body":{"dependencies.html":{}}}],["7.0.2",{"_index":1911,"title":{},"body":{"dependencies.html":{}}}],["7.1.5",{"_index":1884,"title":{},"body":{"dependencies.html":{}}}],["7.2.0",{"_index":1881,"title":{},"body":{"dependencies.html":{}}}],["7.5.1",{"_index":1877,"title":{},"body":{"dependencies.html":{}}}],["7.6.5",{"_index":1887,"title":{},"body":{"dependencies.html":{}}}],["7.9.8",{"_index":1880,"title":{},"body":{"dependencies.html":{}}}],["7/7",{"_index":1795,"title":{},"body":{"coverage.html":{}}}],["75",{"_index":1785,"title":{},"body":{"coverage.html":{}}}],["8",{"_index":1682,"title":{},"body":{"classes/User.html":{},"overview.html":{}}}],["8.2.0",{"_index":1894,"title":{},"body":{"dependencies.html":{}}}],["8.5.1",{"_index":1927,"title":{},"body":{"dependencies.html":{}}}],["8/15",{"_index":1871,"title":{},"body":{"coverage.html":{}}}],["8/8",{"_index":1796,"title":{},"body":{"coverage.html":{}}}],["83",{"_index":1864,"title":{},"body":{"coverage.html":{}}}],["9]*[.])?[0",{"_index":2079,"title":{},"body":{"miscellaneous/variables.html":{}}}],["9]+$/.test(val",{"_index":2080,"title":{},"body":{"miscellaneous/variables.html":{}}}],["_",{"_index":593,"title":{},"body":{"interfaces/BaseRoute.html":{},"interfaces/CrudOptions.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{}}}],["abortearly",{"_index":266,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["above",{"_index":310,"title":{},"body":{"modules/AppModule.html":{}}}],["abstract",{"_index":991,"title":{},"body":{"classes/CrudController.html":{},"classes/CrudService.html":{},"interfaces/IPaginationResult.html":{},"classes/PaginationParams.html":{}}}],["access",{"_index":1276,"title":{},"body":{"injectables/ExcludeNullUndefinedInterceptor.html":{},"classes/QueryFailedFilter.html":{},"guards/RequestGuard.html":{},"interfaces/Response.html":{},"guards/ResponseGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/ValidationFailedFilter.html":{}}}],["accessors",{"_index":1070,"title":{},"body":{"classes/CrudRoutesFactory.html":{}}}],["accesstoken",{"_index":443,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GoogleStrategy.html":{}}}],["accountstatus",{"_index":1835,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["action",{"_index":49,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["actionid",{"_index":48,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["adcorporatelogourl",{"_index":96,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["addcronjob",{"_index":695,"title":{},"body":{"injectables/CronService.html":{}}}],["addcronjob(name",{"_index":712,"title":{},"body":{"injectables/CronService.html":{}}}],["added",{"_index":777,"title":{},"body":{"injectables/CronService.html":{},"injectables/EmailSchedulingService.html":{}}}],["addinterval",{"_index":696,"title":{},"body":{"injectables/CronService.html":{}}}],["addinterval(name",{"_index":718,"title":{},"body":{"injectables/CronService.html":{}}}],["addtimeout",{"_index":697,"title":{},"body":{"injectables/CronService.html":{}}}],["addtimeout(name",{"_index":722,"title":{},"body":{"injectables/CronService.html":{}}}],["admin@demo.com",{"_index":370,"title":{},"body":{"controllers/AuthController.html":{},"classes/UserLoginDto.html":{}}}],["admin@demo.com'})@isnotempty",{"_index":1733,"title":{},"body":{"classes/UserLoginDto.html":{}}}],["against",{"_index":634,"title":{},"body":{"classes/CreateTagsDto.html":{},"interfaces/ITag.html":{},"classes/Tag.html":{},"classes/UpdateTagsDto.html":{},"classes/User.html":{}}}],["aliases",{"_index":2022,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["allowed",{"_index":1548,"title":{},"body":{"guards/RequestGuard.html":{},"guards/ResponseGuard.html":{}}}],["allowunknown",{"_index":265,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["alwayspaginate",{"_index":575,"title":{},"body":{"interfaces/BaseRoute.html":{},"classes/CrudConfigService.html":{},"interfaces/CrudOptions.html":{},"classes/CrudRoutesFactory.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["amazing",{"_index":1995,"title":{},"body":{"index.html":{}}}],["animalimageurl",{"_index":104,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["anu",{"_index":1398,"title":{},"body":{"interfaces/IPaginationResult.html":{},"classes/PaginationParams.html":{}}}],["any[]).every((o",{"_index":2054,"title":{},"body":{"miscellaneous/variables.html":{}}}],["anyof",{"_index":638,"title":{},"body":{"classes/CreateTagsDto.html":{},"interfaces/ITag.html":{},"classes/Tag.html":{},"classes/UpdateTagsDto.html":{},"classes/User.html":{}}}],["api",{"_index":39,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["api/auth/google/redirect",{"_index":1324,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["api:v1/rescue/getcomments?pageno=0&pagesize=10&postid=1230",{"_index":44,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["api:v1/rescue/getrescuelist?pageno=0&pagesize=10&status=pending|inprogress|completed|nearest",{"_index":43,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["api:v1/rescue/getuserfollowers?userid=1230",{"_index":45,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["api:v1/rescue/getuserfollowing?userid=1230",{"_index":46,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["api:v1/user/getuserposts?pageno=0&pagesize=25",{"_index":42,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["api:v1/user/getuserprofile?userid=25",{"_index":41,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["apibadrequestresponse",{"_index":166,"title":{},"body":{"classes/ApiException.html":{}}}],["apibearerauth",{"_index":1620,"title":{},"body":{"controllers/TagsController.html":{}}}],["apiconflictresponse",{"_index":171,"title":{},"body":{"classes/ApiException.html":{}}}],["apierror",{"_index":22,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/IPaginationResult.html":{},"classes/PaginationParams.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{},"miscellaneous/typealiases.html":{}}}],["apierrors",{"_index":185,"title":{},"body":{"classes/ApiException.html":{},"classes/CrudController.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["apiexception",{"_index":134,"title":{"classes/ApiException.html":{}},"body":{"classes/ApiException.html":{},"coverage.html":{}}}],["apiforbiddenresponse",{"_index":167,"title":{},"body":{"classes/ApiException.html":{}}}],["apiinternalservererrorresponse",{"_index":168,"title":{},"body":{"classes/ApiException.html":{}}}],["apinotfoundresponse",{"_index":169,"title":{},"body":{"classes/ApiException.html":{}}}],["apioperation",{"_index":1040,"title":{},"body":{"classes/CrudController.html":{},"controllers/UsersController.html":{}}}],["apioperation({summary",{"_index":1011,"title":{},"body":{"classes/CrudController.html":{},"controllers/UsersController.html":{}}}],["apiproperty",{"_index":361,"title":{},"body":{"controllers/AuthController.html":{},"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"classes/UserLoginDto.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["apiproperty(options",{"_index":598,"title":{},"body":{"interfaces/BaseRoute.html":{},"interfaces/CrudOptions.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"miscellaneous/functions.html":{}}}],["apiproperty({example",{"_index":1732,"title":{},"body":{"classes/UserLoginDto.html":{}}}],["apipropertydecorator",{"_index":603,"title":{},"body":{"interfaces/BaseRoute.html":{},"interfaces/CrudOptions.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{}}}],["apipropertydecorator(options)(target",{"_index":606,"title":{},"body":{"interfaces/BaseRoute.html":{},"interfaces/CrudOptions.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{}}}],["apipropertyoptional",{"_index":151,"title":{},"body":{"classes/ApiException.html":{},"interfaces/IPaginationResult.html":{},"classes/PaginationParams.html":{}}}],["apipropertyoptional()@isoptional",{"_index":1460,"title":{},"body":{"classes/PaginationParams.html":{}}}],["apipropertyoptional({type",{"_index":1462,"title":{},"body":{"classes/PaginationParams.html":{}}}],["apiresponse",{"_index":1,"title":{"interfaces/APIResponse.html":{}},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"classes/CrudController.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{},"coverage.html":{}}}],["apitags",{"_index":203,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/EmailSchedulingController.html":{},"controllers/HealthController.html":{},"controllers/TagsController.html":{},"classes/UserLoginDto.html":{},"controllers/UsersController.html":{}}}],["apitags(appcontroller.name",{"_index":205,"title":{},"body":{"controllers/AppController.html":{}}}],["apitags(authcontroller.name",{"_index":376,"title":{},"body":{"controllers/AuthController.html":{},"classes/UserLoginDto.html":{}}}],["apitags(emailschedulingcontroller.name",{"_index":1225,"title":{},"body":{"controllers/EmailSchedulingController.html":{}}}],["apitags(healthcontroller.name",{"_index":1350,"title":{},"body":{"controllers/HealthController.html":{}}}],["apitags(tagscontroller.name",{"_index":1626,"title":{},"body":{"controllers/TagsController.html":{}}}],["apitags(userscontroller.name",{"_index":1748,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiunauthorizedresponse",{"_index":170,"title":{},"body":{"classes/ApiException.html":{}}}],["apollo",{"_index":1895,"title":{},"body":{"dependencies.html":{}}}],["app",{"_index":229,"title":{},"body":{"modules/AppModule.html":{},"injectables/PersistedCronService.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["app.controller",{"_index":250,"title":{},"body":{"modules/AppModule.html":{}}}],["appcontroller",{"_index":196,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["applaunchaction",{"_index":47,"title":{"interfaces/AppLaunchAction.html":{}},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{},"coverage.html":{}}}],["application",{"_index":301,"title":{},"body":{"modules/AppModule.html":{}}}],["applications",{"_index":1971,"title":{},"body":{"index.html":{}}}],["applicationshutdown",{"_index":331,"title":{},"body":{"modules/AppModule.html":{},"controllers/HealthController.html":{},"injectables/PersistedCronService.html":{}}}],["applydecorators",{"_index":159,"title":{},"body":{"classes/ApiException.html":{}}}],["appmodule",{"_index":210,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["areyoufollowing",{"_index":130,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["arguments",{"_index":1512,"title":{},"body":{"classes/QueryFailedFilter.html":{},"classes/ValidationFailedFilter.html":{}}}],["argumentshost",{"_index":1508,"title":{},"body":{"classes/QueryFailedFilter.html":{},"classes/ValidationFailedFilter.html":{}}}],["arr",{"_index":2071,"title":{},"body":{"miscellaneous/variables.html":{}}}],["arr.some((o",{"_index":2072,"title":{},"body":{"miscellaneous/variables.html":{}}}],["array",{"_index":867,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/QueryFailedFilter.html":{},"classes/R.html":{},"guards/ResponseGuard.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"classes/ValidationFailedFilter.html":{}}}],["array.isarray(val",{"_index":2057,"title":{},"body":{"miscellaneous/variables.html":{}}}],["array.isarray(value",{"_index":1160,"title":{},"body":{"classes/CustomQueryBuilder.html":{},"injectables/ExcludeNullUndefinedInterceptor.html":{}}}],["arraymerge",{"_index":890,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["arrayquerybuildertype",{"_index":1135,"title":{},"body":{"classes/CustomQueryBuilder.html":{}}}],["asc",{"_index":1405,"title":{},"body":{"interfaces/IPaginationResult.html":{},"classes/PaginationParams.html":{},"miscellaneous/enumerations.html":{}}}],["async",{"_index":335,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseModel.html":{},"classes/CrudController.html":{},"classes/CrudService.html":{},"classes/CustomQueryBuilder.html":{},"modules/DatabaseModule.html":{},"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"interfaces/IBaseModel.html":{},"classes/IsEmailExistsConstraint.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/PersistedCronService.html":{},"classes/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"classes/User.html":{},"classes/UserLoginDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["asynchronous",{"_index":315,"title":{},"body":{"modules/AppModule.html":{}}}],["auth",{"_index":377,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/UserLoginDto.html":{}}}],["auth.controller",{"_index":407,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.service",{"_index":368,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/GoogleStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/UserLoginDto.html":{}}}],["auth/auth.module",{"_index":251,"title":{},"body":{"modules/AppModule.html":{}}}],["authcontroller",{"_index":333,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/UserLoginDto.html":{},"coverage.html":{}}}],["authguard",{"_index":359,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TagsController.html":{},"classes/UserLoginDto.html":{}}}],["authmodule",{"_index":220,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":2004,"title":{},"body":{"index.html":{}}}],["authservice",{"_index":367,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/GoogleStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/UserLoginDto.html":{},"coverage.html":{},"overview.html":{}}}],["available",{"_index":2016,"title":{},"body":{"modules.html":{}}}],["await",{"_index":381,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BaseModel.html":{},"classes/CrudController.html":{},"classes/CrudService.html":{},"classes/CustomQueryBuilder.html":{},"controllers/EmailSchedulingController.html":{},"injectables/GoogleStrategy.html":{},"interfaces/IBaseModel.html":{},"classes/IsEmailExistsConstraint.html":{},"injectables/PersistedCronService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"classes/User.html":{},"classes/UserLoginDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["awaits",{"_index":314,"title":{},"body":{"modules/AppModule.html":{}}}],["b",{"_index":891,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"controllers/HealthController.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["backers",{"_index":1996,"title":{},"body":{"index.html":{}}}],["bad",{"_index":189,"title":{},"body":{"classes/ApiException.html":{}}}],["badge",{"_index":74,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["badgedescription",{"_index":77,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["badgeid",{"_index":75,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["badgename",{"_index":76,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["badrequestexception",{"_index":160,"title":{},"body":{"classes/ApiException.html":{},"classes/CrudService.html":{},"injectables/TagsService.html":{}}}],["badrequestexception([`duplicate",{"_index":1651,"title":{},"body":{"injectables/TagsService.html":{}}}],["badrequestexception(e",{"_index":1131,"title":{},"body":{"classes/CrudService.html":{}}}],["banned",{"_index":2042,"title":{},"body":{"miscellaneous/variables.html":{}}}],["base",{"_index":858,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudController.html":{},"classes/CrudRoutesFactory.html":{},"classes/CrudService.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["base/crud",{"_index":1621,"title":{},"body":{"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["based",{"_index":628,"title":{},"body":{"classes/CreateTagsDto.html":{},"interfaces/ITag.html":{},"classes/Tag.html":{},"classes/UpdateTagsDto.html":{},"classes/User.html":{}}}],["basemodel",{"_index":472,"title":{"classes/BaseModel.html":{}},"body":{"classes/BaseModel.html":{},"classes/CreateTagsDto.html":{},"classes/CrudController.html":{},"classes/CrudService.html":{},"interfaces/IBaseModel.html":{},"interfaces/ITag.html":{},"classes/Tag.html":{},"classes/UpdateTagsDto.html":{},"classes/User.html":{},"coverage.html":{}}}],["basemodel:25",{"_index":1610,"title":{},"body":{"classes/Tag.html":{},"classes/User.html":{}}}],["basemodel:35",{"_index":1612,"title":{},"body":{"classes/Tag.html":{},"classes/User.html":{}}}],["basemodel:37",{"_index":1611,"title":{},"body":{"classes/Tag.html":{},"classes/User.html":{}}}],["basemodel:39",{"_index":1608,"title":{},"body":{"classes/Tag.html":{},"classes/User.html":{}}}],["basemodel:41",{"_index":1613,"title":{},"body":{"classes/Tag.html":{},"classes/User.html":{}}}],["basemodel:43",{"_index":1609,"title":{},"body":{"classes/Tag.html":{},"classes/User.html":{}}}],["basemodel:47",{"_index":1615,"title":{},"body":{"classes/Tag.html":{},"classes/User.html":{}}}],["basemodel:60",{"_index":1614,"title":{},"body":{"classes/Tag.html":{},"classes/User.html":{}}}],["basemodel})@apiresponse({status",{"_index":1030,"title":{},"body":{"classes/CrudController.html":{}}}],["basemodel})@get(':id",{"_index":1026,"title":{},"body":{"classes/CrudController.html":{}}}],["basemodel})@post(':id",{"_index":1015,"title":{},"body":{"classes/CrudController.html":{}}}],["basemodel})@put(':id",{"_index":1036,"title":{},"body":{"classes/CrudController.html":{}}}],["baseroute",{"_index":536,"title":{"interfaces/BaseRoute.html":{}},"body":{"interfaces/BaseRoute.html":{},"classes/CrudConfigService.html":{},"interfaces/CrudOptions.html":{},"classes/CrudRoutesFactory.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"coverage.html":{}}}],["baseroutename",{"_index":542,"title":{},"body":{"interfaces/BaseRoute.html":{},"classes/CrudConfigService.html":{},"interfaces/CrudOptions.html":{},"classes/CrudRoutesFactory.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"miscellaneous/typealiases.html":{}}}],["bcrypt",{"_index":446,"title":{},"body":{"injectables/AuthService.html":{},"classes/User.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["bcrypt.compare(enteredpassword",{"_index":447,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.hash(password",{"_index":1725,"title":{},"body":{"classes/User.html":{},"injectables/UsersService.html":{}}}],["beforeapplicationshutdown",{"_index":307,"title":{},"body":{"modules/AppModule.html":{}}}],["beforeinsert",{"_index":1675,"title":{},"body":{"classes/User.html":{}}}],["beforeinsert(querycontext",{"_index":1717,"title":{},"body":{"classes/User.html":{}}}],["beforeupdate",{"_index":481,"title":{},"body":{"classes/BaseModel.html":{},"classes/Tag.html":{},"classes/User.html":{}}}],["beforeupdate(opt",{"_index":493,"title":{},"body":{"classes/BaseModel.html":{},"interfaces/IBaseModel.html":{},"classes/Tag.html":{},"classes/User.html":{}}}],["being",{"_index":1510,"title":{},"body":{"classes/QueryFailedFilter.html":{},"classes/ValidationFailedFilter.html":{}}}],["bind",{"_index":1539,"title":{},"body":{"guards/RequestGuard.html":{},"guards/ResponseGuard.html":{}}}],["bindrequesthelpers",{"_index":1535,"title":{},"body":{"guards/RequestGuard.html":{}}}],["bindrequesthelpers(request",{"_index":1537,"title":{},"body":{"guards/RequestGuard.html":{}}}],["bindresponsehelpers",{"_index":1568,"title":{},"body":{"guards/ResponseGuard.html":{}}}],["bindresponsehelpers(response",{"_index":1569,"title":{},"body":{"guards/ResponseGuard.html":{}}}],["blocked",{"_index":1898,"title":{},"body":{"dependencies.html":{}}}],["body",{"_index":356,"title":{},"body":{"controllers/AuthController.html":{},"classes/CrudController.html":{},"controllers/EmailSchedulingController.html":{},"controllers/TagsController.html":{},"classes/UserLoginDto.html":{},"controllers/UsersController.html":{}}}],["boolean",{"_index":51,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/BaseRoute.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"classes/CreateUserDto.html":{},"interfaces/CrudOptions.html":{},"classes/CustomQueryBuilder.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/IUser.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"guards/RequestGuard.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"guards/ResponseGuard.html":{},"interfaces/Result.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["boot",{"_index":1954,"title":{},"body":{"miscellaneous/functions.html":{}}}],["bootstrap",{"_index":215,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CronModule.html":{},"modules/EmailModule.html":{},"modules/EmailSchedulingModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["bootstrapped",{"_index":1482,"title":{},"body":{"injectables/PersistedCronService.html":{}}}],["both",{"_index":1695,"title":{},"body":{"classes/User.html":{}}}],["browse",{"_index":2014,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":2012,"title":{},"body":{"modules.html":{}}}],["builder",{"_index":519,"title":{},"body":{"classes/BaseModel.html":{},"modules/DatabaseModule.html":{},"interfaces/IBaseModel.html":{}}}],["building",{"_index":1967,"title":{},"body":{"index.html":{}}}],["bull",{"_index":1900,"title":{},"body":{"dependencies.html":{}}}],["c",{"_index":892,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/CustomQueryBuilder.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["cache",{"_index":574,"title":{},"body":{"interfaces/BaseRoute.html":{},"interfaces/CrudOptions.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{}}}],["call",{"_index":304,"title":{},"body":{"modules/AppModule.html":{},"injectables/GoogleStrategy.html":{}}}],["callback",{"_index":350,"title":{},"body":{"controllers/AuthController.html":{},"injectables/CronService.html":{},"classes/UserLoginDto.html":{}}}],["callbackurl",{"_index":1322,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["called",{"_index":762,"title":{},"body":{"injectables/CronService.html":{}}}],["callhandler",{"_index":1271,"title":{},"body":{"injectables/ExcludeNullUndefinedInterceptor.html":{},"interfaces/Response.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["calls",{"_index":832,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["canactivate",{"_index":1536,"title":{},"body":{"guards/RequestGuard.html":{},"guards/ResponseGuard.html":{}}}],["canactivate(context",{"_index":1541,"title":{},"body":{"guards/RequestGuard.html":{},"guards/ResponseGuard.html":{}}}],["care",{"_index":345,"title":{},"body":{"controllers/AuthController.html":{},"classes/UserLoginDto.html":{}}}],["case",{"_index":857,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"miscellaneous/variables.html":{}}}],["catch",{"_index":469,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/BaseRoute.html":{},"injectables/CronService.html":{},"interfaces/CrudOptions.html":{},"classes/CrudService.html":{},"interfaces/GetManyDefaultResponse.html":{},"injectables/GoogleStrategy.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"classes/QueryFailedFilter.html":{},"classes/ValidationFailedFilter.html":{}}}],["catch(exception",{"_index":1500,"title":{},"body":{"classes/QueryFailedFilter.html":{},"classes/ValidationFailedFilter.html":{}}}],["catch(validationerror",{"_index":1772,"title":{},"body":{"classes/ValidationFailedFilter.html":{}}}],["catcherror",{"_index":1663,"title":{},"body":{"injectables/TimeoutInterceptor.html":{}}}],["catcherror((e",{"_index":1667,"title":{},"body":{"injectables/TimeoutInterceptor.html":{}}}],["cb",{"_index":1149,"title":{},"body":{"classes/CustomQueryBuilder.html":{}}}],["cb(records",{"_index":1178,"title":{},"body":{"classes/CustomQueryBuilder.html":{}}}],["check",{"_index":1157,"title":{},"body":{"classes/CustomQueryBuilder.html":{},"controllers/HealthController.html":{},"miscellaneous/functions.html":{}}}],["checked",{"_index":633,"title":{},"body":{"classes/CreateTagsDto.html":{},"interfaces/ITag.html":{},"classes/Tag.html":{},"classes/UpdateTagsDto.html":{},"classes/User.html":{}}}],["checkviolationerror",{"_index":1501,"title":{},"body":{"classes/QueryFailedFilter.html":{}}}],["child",{"_index":1007,"title":{},"body":{"classes/CrudController.html":{},"classes/CrudService.html":{}}}],["chunk",{"_index":1139,"title":{},"body":{"classes/CustomQueryBuilder.html":{}}}],["chunk(cb",{"_index":1146,"title":{},"body":{"classes/CustomQueryBuilder.html":{}}}],["class",{"_index":133,"title":{"classes/ApiException.html":{},"classes/BaseModel.html":{},"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"classes/CrudConfigService.html":{},"classes/CrudController.html":{},"classes/CrudRoutesFactory.html":{},"classes/CrudService.html":{},"classes/CustomQueryBuilder.html":{},"classes/EmailScheduleDto.html":{},"classes/IsEmailExistsConstraint.html":{},"classes/PaginationParams.html":{},"classes/QueryFailedFilter.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"classes/Tag.html":{},"classes/UpdateTagsDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/UserLoginDto.html":{},"classes/ValidationFailedFilter.html":{}},"body":{"classes/ApiException.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseModel.html":{},"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"modules/CronModule.html":{},"injectables/CronService.html":{},"classes/CrudConfigService.html":{},"classes/CrudController.html":{},"classes/CrudRoutesFactory.html":{},"classes/CrudService.html":{},"modules/DatabaseModule.html":{},"modules/EmailModule.html":{},"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"modules/EmailSchedulingModule.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/ExcludeNullUndefinedInterceptor.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"interfaces/IBaseModel.html":{},"interfaces/IPaginationResult.html":{},"interfaces/ITag.html":{},"classes/IsEmailExistsConstraint.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/PaginationParams.html":{},"injectables/PersistedCronService.html":{},"classes/QueryFailedFilter.html":{},"classes/R.html":{},"guards/RequestGuard.html":{},"interfaces/Response.html":{},"guards/ResponseGuard.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"classes/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateTagsDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/UserLoginDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/ValidationFailedFilter.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/typealiases.html":{}}}],["classes",{"_index":135,"title":{},"body":{"classes/ApiException.html":{},"classes/BaseModel.html":{},"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"classes/CrudConfigService.html":{},"classes/CrudController.html":{},"classes/CrudRoutesFactory.html":{},"classes/CrudService.html":{},"classes/CustomQueryBuilder.html":{},"classes/EmailScheduleDto.html":{},"classes/IsEmailExistsConstraint.html":{},"classes/PaginationParams.html":{},"classes/QueryFailedFilter.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"classes/Tag.html":{},"classes/UpdateTagsDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/UserLoginDto.html":{},"classes/ValidationFailedFilter.html":{},"overview.html":{}}}],["clean",{"_index":642,"title":{},"body":{"classes/CreateTagsDto.html":{},"interfaces/ITag.html":{},"classes/Tag.html":{},"classes/UpdateTagsDto.html":{},"classes/User.html":{},"miscellaneous/typealiases.html":{}}}],["client",{"_index":1195,"title":{},"body":{"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["clientid",{"_index":1318,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["clientsecret",{"_index":1320,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["clonedeep",{"_index":1155,"title":{},"body":{"classes/CustomQueryBuilder.html":{}}}],["clonedeep(this",{"_index":1174,"title":{},"body":{"classes/CustomQueryBuilder.html":{}}}],["cluster_appmodule",{"_index":218,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":219,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":396,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":397,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":398,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_cronmodule",{"_index":675,"title":{},"body":{"modules/CronModule.html":{},"overview.html":{}}}],["cluster_cronmodule_providers",{"_index":676,"title":{},"body":{"modules/CronModule.html":{},"overview.html":{}}}],["cluster_emailmodule",{"_index":1199,"title":{},"body":{"modules/EmailModule.html":{},"overview.html":{}}}],["cluster_emailmodule_exports",{"_index":1200,"title":{},"body":{"modules/EmailModule.html":{},"overview.html":{}}}],["cluster_emailmodule_providers",{"_index":1201,"title":{},"body":{"modules/EmailModule.html":{},"overview.html":{}}}],["cluster_emailschedulingmodule",{"_index":1231,"title":{},"body":{"modules/EmailSchedulingModule.html":{},"overview.html":{}}}],["cluster_emailschedulingmodule_imports",{"_index":1232,"title":{},"body":{"modules/EmailSchedulingModule.html":{}}}],["cluster_emailschedulingmodule_providers",{"_index":1233,"title":{},"body":{"modules/EmailSchedulingModule.html":{},"overview.html":{}}}],["cluster_tagsmodule",{"_index":1630,"title":{},"body":{"modules/TagsModule.html":{},"overview.html":{}}}],["cluster_tagsmodule_exports",{"_index":1632,"title":{},"body":{"modules/TagsModule.html":{},"overview.html":{}}}],["cluster_tagsmodule_providers",{"_index":1631,"title":{},"body":{"modules/TagsModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":1749,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":1751,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":1750,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["code",{"_index":1400,"title":{},"body":{"interfaces/IPaginationResult.html":{},"classes/PaginationParams.html":{},"guards/ResponseGuard.html":{}}}],["collectosmetrics",{"_index":1330,"title":{},"body":{"controllers/HealthController.html":{}}}],["collectosmetrics(metrics",{"_index":1334,"title":{},"body":{"controllers/HealthController.html":{}}}],["column",{"_index":1519,"title":{},"body":{"classes/QueryFailedFilter.html":{},"classes/User.html":{}}}],["columns",{"_index":1520,"title":{},"body":{"classes/QueryFailedFilter.html":{}}}],["comment",{"_index":123,"title":{"interfaces/Comment.html":{}},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{},"coverage.html":{}}}],["commented",{"_index":1484,"title":{},"body":{"injectables/PersistedCronService.html":{}}}],["commentedusename",{"_index":125,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["commenteduserid",{"_index":126,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["commentid",{"_index":124,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["comments",{"_index":127,"title":{"interfaces/Comments.html":{}},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{},"coverage.html":{}}}],["commentscount",{"_index":87,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["comparepassword",{"_index":422,"title":{},"body":{"injectables/AuthService.html":{}}}],["comparepassword(enteredpassword",{"_index":430,"title":{},"body":{"injectables/AuthService.html":{}}}],["config",{"_index":428,"title":{},"body":{"injectables/AuthService.html":{},"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"injectables/EmailService.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["config.get('google_client_id",{"_index":1319,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["config.get('google_secret",{"_index":1321,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["config.get('host')}:${config.get",{"_index":1323,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["config.params",{"_index":886,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["config.query",{"_index":884,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["config.serialize",{"_index":888,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["configmodule",{"_index":240,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EmailModule.html":{}}}],["configmodule.forroot(configmoduleoptions",{"_index":291,"title":{},"body":{"modules/AppModule.html":{}}}],["configmoduleoptions",{"_index":261,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["configservice",{"_index":403,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/EmailService.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"injectables/JwtStrategy.html":{}}}],["configservice.get('jwtkey",{"_index":415,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["configservice.get('token_expiration",{"_index":418,"title":{},"body":{"modules/AuthModule.html":{}}}],["conflictexception",{"_index":161,"title":{},"body":{"classes/ApiException.html":{}}}],["connection",{"_index":1192,"title":{},"body":{"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["console.error",{"_index":324,"title":{},"body":{"modules/AppModule.html":{}}}],["console.info(`moduleinit",{"_index":322,"title":{},"body":{"modules/AppModule.html":{}}}],["console.log",{"_index":898,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"injectables/EmailService.html":{},"controllers/HealthController.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["console.log(`moduleinit",{"_index":1383,"title":{},"body":{"controllers/HealthController.html":{}}}],["const",{"_index":260,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/BaseRoute.html":{},"injectables/CronService.html":{},"classes/CrudConfigService.html":{},"classes/CrudController.html":{},"interfaces/CrudOptions.html":{},"classes/CrudRoutesFactory.html":{},"classes/CrudService.html":{},"classes/CustomQueryBuilder.html":{},"modules/DatabaseModule.html":{},"injectables/EmailSchedulingService.html":{},"interfaces/GetManyDefaultResponse.html":{},"controllers/HealthController.html":{},"classes/IsEmailExistsConstraint.html":{},"injectables/JwtStrategy.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"injectables/PersistedCronService.html":{},"classes/QueryFailedFilter.html":{},"classes/R.html":{},"guards/RequestGuard.html":{},"guards/ResponseGuard.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"classes/User.html":{},"classes/UserLoginDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/ValidationFailedFilter.html":{},"miscellaneous/variables.html":{}}}],["constraint",{"_index":1521,"title":{},"body":{"classes/QueryFailedFilter.html":{}}}],["constraints",{"_index":1429,"title":{},"body":{"classes/IsEmailExistsConstraint.html":{},"miscellaneous/variables.html":{}}}],["constraintviolationerror",{"_index":1502,"title":{},"body":{"classes/QueryFailedFilter.html":{}}}],["constructor",{"_index":144,"title":{},"body":{"classes/ApiException.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CronService.html":{},"classes/CrudController.html":{},"classes/CrudRoutesFactory.html":{},"classes/CrudService.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"classes/IsEmailExistsConstraint.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/PersistedCronService.html":{},"injectables/TagsService.html":{},"classes/UserLoginDto.html":{},"injectables/UsersService.html":{}}}],["constructor(@inject(tag.name",{"_index":1647,"title":{},"body":{"injectables/TagsService.html":{}}}],["constructor(@inject(user.name",{"_index":1425,"title":{},"body":{"classes/IsEmailExistsConstraint.html":{},"injectables/UsersService.html":{}}}],["constructor(authservice",{"_index":1450,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["constructor(config",{"_index":1303,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["constructor(configservice",{"_index":1255,"title":{},"body":{"injectables/EmailService.html":{},"injectables/JwtStrategy.html":{}}}],["constructor(emailservice",{"_index":1238,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["constructor(message",{"_index":145,"title":{},"body":{"classes/ApiException.html":{}}}],["constructor(model",{"_index":1096,"title":{},"body":{"classes/CrudService.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["constructor(private",{"_index":895,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["constructor(protected",{"_index":1045,"title":{},"body":{"classes/CrudController.html":{},"classes/CrudService.html":{}}}],["constructor(readonly",{"_index":757,"title":{},"body":{"injectables/CronService.html":{},"controllers/EmailSchedulingController.html":{},"injectables/LocalStrategy.html":{},"injectables/PersistedCronService.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["constructor(schedule",{"_index":1477,"title":{},"body":{"injectables/PersistedCronService.html":{}}}],["constructor(scheduler",{"_index":708,"title":{},"body":{"injectables/CronService.html":{}}}],["constructor(service",{"_index":1001,"title":{},"body":{"classes/CrudController.html":{}}}],["constructor(target",{"_index":1071,"title":{},"body":{"classes/CrudRoutesFactory.html":{}}}],["constructor(user",{"_index":1419,"title":{},"body":{"classes/IsEmailExistsConstraint.html":{}}}],["constructor(userservice",{"_index":426,"title":{},"body":{"injectables/AuthService.html":{}}}],["contact",{"_index":115,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["content",{"_index":1207,"title":{},"body":{"classes/EmailScheduleDto.html":{}}}],["context",{"_index":1274,"title":{},"body":{"injectables/ExcludeNullUndefinedInterceptor.html":{},"guards/RequestGuard.html":{},"interfaces/Response.html":{},"guards/ResponseGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["continue",{"_index":318,"title":{},"body":{"modules/AppModule.html":{}}}],["contract",{"_index":1415,"title":{},"body":{"interfaces/IUser.html":{}}}],["controller",{"_index":195,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/EmailSchedulingController.html":{},"controllers/HealthController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/CrudController.html":{},"controllers/EmailSchedulingController.html":{},"controllers/HealthController.html":{},"controllers/TagsController.html":{},"classes/UserLoginDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller(appcontroller.path",{"_index":204,"title":{},"body":{"controllers/AppController.html":{}}}],["controller(authcontroller.path",{"_index":375,"title":{},"body":{"controllers/AuthController.html":{},"classes/UserLoginDto.html":{}}}],["controller(emailschedulingcontroller.path",{"_index":1226,"title":{},"body":{"controllers/EmailSchedulingController.html":{}}}],["controller(healthcontroller.path",{"_index":1351,"title":{},"body":{"controllers/HealthController.html":{}}}],["controller(tagscontroller.path",{"_index":1625,"title":{},"body":{"controllers/TagsController.html":{}}}],["controller(userscontroller.path",{"_index":1747,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":197,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"modules/EmailModule.html":{},"controllers/EmailSchedulingController.html":{},"modules/EmailSchedulingModule.html":{},"controllers/HealthController.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["convert",{"_index":1375,"title":{},"body":{"controllers/HealthController.html":{}}}],["corporatedescription",{"_index":97,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["corporatename",{"_index":98,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["corresponding",{"_index":311,"title":{},"body":{"modules/AppModule.html":{}}}],["count",{"_index":10,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/BaseRoute.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"injectables/CronService.html":{},"classes/CrudConfigService.html":{},"interfaces/CrudOptions.html":{},"classes/CrudRoutesFactory.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"classes/R.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["coverage",{"_index":1779,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["coverimage",{"_index":55,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["create",{"_index":579,"title":{},"body":{"interfaces/BaseRoute.html":{},"classes/CrudConfigService.html":{},"classes/CrudController.html":{},"interfaces/CrudOptions.html":{},"classes/CrudRoutesFactory.html":{},"classes/CrudService.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ICrudService.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["create(@body",{"_index":1060,"title":{},"body":{"classes/CrudController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["create(data",{"_index":1387,"title":{},"body":{"interfaces/ICrudService.html":{}}}],["create(input",{"_index":1010,"title":{},"body":{"classes/CrudController.html":{},"classes/CrudService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["create(target",{"_index":904,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["create(user",{"_index":1756,"title":{},"body":{"injectables/UsersService.html":{}}}],["created",{"_index":632,"title":{},"body":{"classes/CreateTagsDto.html":{},"classes/CrudController.html":{},"classes/CrudService.html":{},"interfaces/ITag.html":{},"classes/Tag.html":{},"injectables/TagsService.html":{},"classes/UpdateTagsDto.html":{},"classes/User.html":{},"injectables/UsersService.html":{}}}],["created_at",{"_index":475,"title":{},"body":{"classes/BaseModel.html":{},"interfaces/IBaseModel.html":{},"classes/Tag.html":{},"classes/User.html":{}}}],["creategetmanydto",{"_index":1590,"title":{},"body":{"classes/SerializeHelper.html":{}}}],["creategetmanydto(dto",{"_index":872,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["creategetoneresponsedto",{"_index":1591,"title":{},"body":{"classes/SerializeHelper.html":{}}}],["creategetoneresponsedto(resourcename",{"_index":879,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["createmany",{"_index":580,"title":{},"body":{"interfaces/BaseRoute.html":{},"interfaces/CrudOptions.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{}}}],["createmanybase",{"_index":551,"title":{},"body":{"interfaces/BaseRoute.html":{},"interfaces/CrudOptions.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"miscellaneous/typealiases.html":{}}}],["createonebase",{"_index":550,"title":{},"body":{"interfaces/BaseRoute.html":{},"interfaces/CrudOptions.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"miscellaneous/typealiases.html":{}}}],["createparamdecorator",{"_index":2049,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createresponsemeta",{"_index":854,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["createresponsemeta(name",{"_index":1598,"title":{},"body":{"classes/Swagger.html":{}}}],["createroutes",{"_index":1067,"title":{},"body":{"classes/CrudRoutesFactory.html":{}}}],["createroutes(routesschema",{"_index":981,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["creates",{"_index":1012,"title":{},"body":{"classes/CrudController.html":{},"classes/User.html":{}}}],["createtagsdto",{"_index":607,"title":{"classes/CreateTagsDto.html":{}},"body":{"classes/CreateTagsDto.html":{},"classes/CrudService.html":{},"interfaces/ITag.html":{},"classes/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"classes/UpdateTagsDto.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["createuserdto",{"_index":651,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/CrudService.html":{},"injectables/TagsService.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["credentials",{"_index":454,"title":{},"body":{"injectables/AuthService.html":{}}}],["cron",{"_index":680,"title":{},"body":{"modules/CronModule.html":{},"injectables/CronService.html":{},"injectables/EmailSchedulingService.html":{},"injectables/PersistedCronService.html":{},"dependencies.html":{}}}],["cron(cronexpression.every_minute",{"_index":734,"title":{},"body":{"injectables/CronService.html":{}}}],["cron.service",{"_index":681,"title":{},"body":{"modules/CronModule.html":{}}}],["cron.service.ts",{"_index":1469,"title":{},"body":{"injectables/PersistedCronService.html":{},"coverage.html":{}}}],["cron.service.ts:11",{"_index":1478,"title":{},"body":{"injectables/PersistedCronService.html":{}}}],["cron.service.ts:18",{"_index":1479,"title":{},"body":{"injectables/PersistedCronService.html":{}}}],["cron.start",{"_index":1492,"title":{},"body":{"injectables/PersistedCronService.html":{}}}],["cron/cron.module",{"_index":253,"title":{},"body":{"modules/AppModule.html":{}}}],["cronexpression",{"_index":755,"title":{},"body":{"injectables/CronService.html":{}}}],["cronjob",{"_index":756,"title":{},"body":{"injectables/CronService.html":{},"injectables/EmailSchedulingService.html":{}}}],["cronjob(`${seconds",{"_index":772,"title":{},"body":{"injectables/CronService.html":{}}}],["cronjob(date",{"_index":1244,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["cronjob(job.time",{"_index":1489,"title":{},"body":{"injectables/PersistedCronService.html":{}}}],["cronmodule",{"_index":252,"title":{"modules/CronModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CronModule.html":{},"modules.html":{},"overview.html":{}}}],["cronmodules",{"_index":298,"title":{},"body":{"modules/AppModule.html":{}}}],["cronservice",{"_index":677,"title":{"injectables/CronService.html":{}},"body":{"modules/CronModule.html":{},"injectables/CronService.html":{},"coverage.html":{},"overview.html":{}}}],["cronservice.count",{"_index":760,"title":{},"body":{"injectables/CronService.html":{}}}],["crud",{"_index":994,"title":{},"body":{"classes/CrudController.html":{},"classes/CrudService.html":{},"interfaces/ICrudService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["crud.service.interface",{"_index":1043,"title":{},"body":{"classes/CrudController.html":{},"classes/CrudService.html":{}}}],["crudconfigservice",{"_index":802,"title":{"classes/CrudConfigService.html":{}},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"coverage.html":{}}}],["crudconfigservice.config",{"_index":889,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["crudconfigservice.config.query",{"_index":932,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["crudconfigservice.config.serialize",{"_index":936,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["crudcontroller",{"_index":989,"title":{"classes/CrudController.html":{}},"body":{"classes/CrudController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["crudoptions",{"_index":565,"title":{"interfaces/CrudOptions.html":{}},"body":{"interfaces/BaseRoute.html":{},"classes/CrudConfigService.html":{},"interfaces/CrudOptions.html":{},"classes/CrudRoutesFactory.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"coverage.html":{}}}],["crudroutesfactory",{"_index":893,"title":{"classes/CrudRoutesFactory.html":{}},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"coverage.html":{}}}],["crudroutesfactory(target",{"_index":905,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["crudroutesfactory.create(target",{"_index":2045,"title":{},"body":{"miscellaneous/variables.html":{}}}],["crudroutesfactory.getroutesschema",{"_index":914,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["crudroutesfactory::constructor",{"_index":899,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["crudservice",{"_index":1090,"title":{"classes/CrudService.html":{}},"body":{"classes/CrudService.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["crudservice:109",{"_index":1646,"title":{},"body":{"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["crudservice:27",{"_index":1640,"title":{},"body":{"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["crudservice:36",{"_index":1644,"title":{},"body":{"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["crudservice:56",{"_index":1641,"title":{},"body":{"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["crudservice:65",{"_index":1643,"title":{},"body":{"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["crudservice:74",{"_index":1642,"title":{},"body":{"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["crudservice:83",{"_index":1645,"title":{},"body":{"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["crudservice:93",{"_index":1639,"title":{},"body":{"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["ctx",{"_index":1514,"title":{},"body":{"classes/QueryFailedFilter.html":{},"classes/ValidationFailedFilter.html":{},"miscellaneous/variables.html":{}}}],["ctx.getrequest",{"_index":1517,"title":{},"body":{"classes/QueryFailedFilter.html":{},"classes/ValidationFailedFilter.html":{}}}],["ctx.getresponse",{"_index":1516,"title":{},"body":{"classes/QueryFailedFilter.html":{},"classes/ValidationFailedFilter.html":{}}}],["ctx.switchtohttp().getrequest",{"_index":2050,"title":{},"body":{"miscellaneous/variables.html":{}}}],["current",{"_index":765,"title":{},"body":{"injectables/CronService.html":{},"interfaces/IPaginationResult.html":{},"classes/PaginationParams.html":{},"guards/RequestGuard.html":{},"guards/ResponseGuard.html":{}}}],["currentpage",{"_index":1165,"title":{},"body":{"classes/CustomQueryBuilder.html":{}}}],["custom",{"_index":518,"title":{},"body":{"classes/BaseModel.html":{},"injectables/ExcludeNullUndefinedInterceptor.html":{},"interfaces/IBaseModel.html":{},"classes/QueryFailedFilter.html":{},"interfaces/Response.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/ValidationFailedFilter.html":{}}}],["customquerybuilder",{"_index":490,"title":{"classes/CustomQueryBuilder.html":{}},"body":{"classes/BaseModel.html":{},"classes/CustomQueryBuilder.html":{},"interfaces/IBaseModel.html":{},"classes/Tag.html":{},"classes/User.html":{},"coverage.html":{}}}],["data",{"_index":11,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"controllers/AuthController.html":{},"classes/BaseModel.html":{},"interfaces/BaseRoute.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"classes/CreateUserDto.html":{},"classes/CrudConfigService.html":{},"classes/CrudController.html":{},"interfaces/CrudOptions.html":{},"classes/CrudRoutesFactory.html":{},"classes/CrudService.html":{},"classes/CustomQueryBuilder.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"controllers/HealthController.html":{},"interfaces/IBaseModel.html":{},"interfaces/ICrudService.html":{},"interfaces/IPaginationResult.html":{},"classes/PaginationParams.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"classes/QueryFailedFilter.html":{},"classes/R.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Response.html":{},"guards/ResponseGuard.html":{},"interfaces/Result.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"controllers/TagsController.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateUserDto.html":{},"classes/UserLoginDto.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/ValidationFailedFilter.html":{},"miscellaneous/variables.html":{}}}],["database",{"_index":625,"title":{},"body":{"classes/CreateTagsDto.html":{},"classes/CrudController.html":{},"modules/DatabaseModule.html":{},"interfaces/ITag.html":{},"classes/QueryFailedFilter.html":{},"classes/Tag.html":{},"classes/UpdateTagsDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{}}}],["database'})@post",{"_index":1740,"title":{},"body":{"controllers/UsersController.html":{}}}],["database/database.module",{"_index":255,"title":{},"body":{"modules/AppModule.html":{}}}],["database/models/base.model",{"_index":619,"title":{},"body":{"classes/CreateTagsDto.html":{},"classes/CrudController.html":{},"classes/CrudService.html":{},"interfaces/ITag.html":{},"classes/Tag.html":{},"classes/UpdateTagsDto.html":{},"classes/User.html":{}}}],["database_debug",{"_index":287,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["database_url",{"_index":286,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["databasemodule",{"_index":221,"title":{"modules/DatabaseModule.html":{}},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules.html":{},"overview.html":{}}}],["databaseproviders",{"_index":1190,"title":{},"body":{"modules/DatabaseModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["dataerror",{"_index":1503,"title":{},"body":{"classes/QueryFailedFilter.html":{}}}],["dataobj",{"_index":1584,"title":{},"body":{"guards/ResponseGuard.html":{}}}],["datapoints",{"_index":1357,"title":{},"body":{"controllers/HealthController.html":{}}}],["date",{"_index":111,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"classes/CreateTagsDto.html":{},"injectables/CronService.html":{},"classes/EmailScheduleDto.html":{},"injectables/EmailSchedulingService.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/ITag.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"classes/Tag.html":{},"classes/UpdateTagsDto.html":{},"classes/User.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{},"miscellaneous/variables.html":{}}}],["date().toisostring",{"_index":180,"title":{},"body":{"classes/ApiException.html":{},"classes/BaseModel.html":{},"interfaces/IBaseModel.html":{},"classes/QueryFailedFilter.html":{},"classes/ValidationFailedFilter.html":{}}}],["date(emailschedule.date",{"_index":1243,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["date.now",{"_index":1379,"title":{},"body":{"controllers/HealthController.html":{}}}],["date.tolocaledatestring",{"_index":1252,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["db",{"_index":509,"title":{},"body":{"classes/BaseModel.html":{},"interfaces/IBaseModel.html":{},"classes/QueryFailedFilter.html":{},"dependencies.html":{}}}],["dberrors",{"_index":508,"title":{},"body":{"classes/BaseModel.html":{},"interfaces/IBaseModel.html":{}}}],["dbpassword",{"_index":431,"title":{},"body":{"injectables/AuthService.html":{}}}],["debug",{"_index":293,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["declarations",{"_index":214,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CronModule.html":{},"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"modules/EmailModule.html":{},"modules/EmailSchedulingModule.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["declare",{"_index":547,"title":{},"body":{"interfaces/BaseRoute.html":{},"injectables/CronService.html":{},"interfaces/CrudOptions.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{}}}],["decorators",{"_index":150,"title":{},"body":{"classes/ApiException.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"injectables/CronService.html":{},"classes/CrudController.html":{},"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"controllers/HealthController.html":{},"classes/PaginationParams.html":{},"controllers/TagsController.html":{},"classes/UserLoginDto.html":{},"controllers/UsersController.html":{}}}],["deepmerge",{"_index":811,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"dependencies.html":{}}}],["default",{"_index":485,"title":{},"body":{"classes/BaseModel.html":{},"injectables/CronService.html":{},"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/CrudService.html":{},"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/LocalStrategy.html":{},"injectables/PersistedCronService.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"classes/Tag.html":{},"injectables/TagsService.html":{},"classes/User.html":{},"injectables/UsersService.html":{},"interfaces/VerifiedTokenPayload.html":{},"miscellaneous/variables.html":{}}}],["default('development",{"_index":280,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["defaultaccountstatus",{"_index":1836,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["define",{"_index":1490,"title":{},"body":{"injectables/PersistedCronService.html":{}}}],["defined",{"_index":147,"title":{},"body":{"classes/ApiException.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BaseModel.html":{},"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"injectables/CronService.html":{},"classes/CrudConfigService.html":{},"classes/CrudController.html":{},"classes/CrudRoutesFactory.html":{},"classes/CrudService.html":{},"classes/CustomQueryBuilder.html":{},"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/ExcludeNullUndefinedInterceptor.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"interfaces/ICrudService.html":{},"classes/IsEmailExistsConstraint.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/PaginationParams.html":{},"interfaces/ParamsOptions.html":{},"injectables/PersistedCronService.html":{},"classes/QueryFailedFilter.html":{},"classes/R.html":{},"guards/RequestGuard.html":{},"guards/ResponseGuard.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"classes/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/User.html":{},"classes/UserLoginDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/ValidationFailedFilter.html":{}}}],["delete",{"_index":583,"title":{},"body":{"interfaces/BaseRoute.html":{},"injectables/CronService.html":{},"classes/CrudController.html":{},"interfaces/CrudOptions.html":{},"classes/CrudService.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["delete(':id",{"_index":1056,"title":{},"body":{"classes/CrudController.html":{}}}],["deletecron",{"_index":698,"title":{},"body":{"injectables/CronService.html":{}}}],["deletecron(name",{"_index":724,"title":{},"body":{"injectables/CronService.html":{}}}],["deleted",{"_index":782,"title":{},"body":{"injectables/CronService.html":{},"classes/CrudController.html":{}}}],["deleted_at",{"_index":476,"title":{},"body":{"classes/BaseModel.html":{},"classes/CreateTagsDto.html":{},"classes/CrudService.html":{},"interfaces/IBaseModel.html":{},"interfaces/ITag.html":{},"classes/Tag.html":{},"classes/UpdateTagsDto.html":{},"classes/User.html":{}}}],["deleteinterval",{"_index":699,"title":{},"body":{"injectables/CronService.html":{}}}],["deleteinterval(name",{"_index":727,"title":{},"body":{"injectables/CronService.html":{}}}],["deleteonebase",{"_index":554,"title":{},"body":{"interfaces/BaseRoute.html":{},"interfaces/CrudOptions.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"miscellaneous/typealiases.html":{}}}],["deletes",{"_index":1113,"title":{},"body":{"classes/CrudService.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["deletetimeout",{"_index":700,"title":{},"body":{"injectables/CronService.html":{}}}],["deletetimeout(name",{"_index":729,"title":{},"body":{"injectables/CronService.html":{}}}],["dependencies",{"_index":212,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CronModule.html":{},"modules/EmailModule.html":{},"modules/EmailSchedulingModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["deps",{"_index":299,"title":{},"body":{"modules/AppModule.html":{}}}],["desc",{"_index":1404,"title":{},"body":{"interfaces/IPaginationResult.html":{},"classes/PaginationParams.html":{},"miscellaneous/enumerations.html":{}}}],["described",{"_index":309,"title":{},"body":{"modules/AppModule.html":{}}}],["describes",{"_index":1406,"title":{},"body":{"interfaces/IPaginationResult.html":{},"classes/PaginationParams.html":{}}}],["description",{"_index":187,"title":{},"body":{"classes/ApiException.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/CreateUserDto.html":{},"modules/CronModule.html":{},"injectables/CronService.html":{},"classes/CrudConfigService.html":{},"classes/CrudController.html":{},"classes/CrudRoutesFactory.html":{},"classes/CrudService.html":{},"modules/DatabaseModule.html":{},"modules/EmailModule.html":{},"modules/EmailSchedulingModule.html":{},"injectables/ExcludeNullUndefinedInterceptor.html":{},"interfaces/ICrudService.html":{},"interfaces/IPaginationResult.html":{},"interfaces/IUser.html":{},"classes/PaginationParams.html":{},"injectables/PersistedCronService.html":{},"classes/QueryFailedFilter.html":{},"classes/R.html":{},"guards/RequestGuard.html":{},"guards/ResponseGuard.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"modules/TagsModule.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"classes/ValidationFailedFilter.html":{},"index.html":{}}}],["details",{"_index":1544,"title":{},"body":{"guards/RequestGuard.html":{},"guards/ResponseGuard.html":{}}}],["development",{"_index":1977,"title":{},"body":{"index.html":{}}}],["disable",{"_index":268,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/BaseModel.html":{},"interfaces/BaseRoute.html":{},"injectables/CronService.html":{},"classes/CrudConfigService.html":{},"interfaces/CrudOptions.html":{},"classes/CrudRoutesFactory.html":{},"classes/CustomQueryBuilder.html":{},"controllers/EmailSchedulingController.html":{},"injectables/ExcludeNullUndefinedInterceptor.html":{},"interfaces/GetManyDefaultResponse.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"interfaces/IBaseModel.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"classes/R.html":{},"guards/RequestGuard.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"classes/UserLoginDto.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["disabled",{"_index":562,"title":{},"body":{"interfaces/BaseRoute.html":{},"interfaces/CrudOptions.html":{},"interfaces/GetManyDefaultResponse.html":{},"injectables/GoogleStrategy.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"miscellaneous/variables.html":{}}}],["disk",{"_index":1353,"title":{},"body":{"controllers/HealthController.html":{}}}],["diskhealthindicator",{"_index":1343,"title":{},"body":{"controllers/HealthController.html":{}}}],["distance",{"_index":105,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["distanceaway",{"_index":106,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["dns",{"_index":1354,"title":{},"body":{"controllers/HealthController.html":{}}}],["dnshealthindicator",{"_index":1344,"title":{},"body":{"controllers/HealthController.html":{}}}],["documentation",{"_index":1780,"title":{},"body":{"coverage.html":{}}}],["domain",{"_index":1041,"title":{},"body":{"classes/CrudController.html":{},"interfaces/IPaginationResult.html":{},"classes/PaginationParams.html":{}}}],["don't",{"_index":1700,"title":{},"body":{"classes/User.html":{}}}],["done",{"_index":1307,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["dotenv",{"_index":1905,"title":{},"body":{"dependencies.html":{}}}],["down",{"_index":1838,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["down(knex",{"_index":1958,"title":{},"body":{"miscellaneous/functions.html":{}}}],["dto",{"_index":566,"title":{},"body":{"interfaces/BaseRoute.html":{},"classes/CrudConfigService.html":{},"interfaces/CrudOptions.html":{},"classes/CrudRoutesFactory.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["dumb",{"_index":1687,"title":{},"body":{"classes/User.html":{}}}],["dynamic",{"_index":589,"title":{},"body":{"interfaces/BaseRoute.html":{},"interfaces/CrudOptions.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{}}}],["dynamically",{"_index":715,"title":{},"body":{"injectables/CronService.html":{}}}],["d{4",{"_index":2062,"title":{},"body":{"miscellaneous/variables.html":{}}}],["e",{"_index":470,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CronService.html":{},"classes/CrudService.html":{},"injectables/TimeoutInterceptor.html":{}}}],["e2e",{"_index":1985,"title":{},"body":{"index.html":{}}}],["each",{"_index":778,"title":{},"body":{"injectables/CronService.html":{},"injectables/ExcludeNullUndefinedInterceptor.html":{},"injectables/PersistedCronService.html":{},"classes/User.html":{}}}],["efficient",{"_index":1968,"title":{},"body":{"index.html":{}}}],["email",{"_index":372,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/CrudService.html":{},"modules/EmailModule.html":{},"controllers/EmailSchedulingController.html":{},"modules/EmailSchedulingModule.html":{},"injectables/GoogleStrategy.html":{},"interfaces/ICrudService.html":{},"interfaces/IUser.html":{},"classes/IsEmailExistsConstraint.html":{},"injectables/LocalStrategy.html":{},"injectables/TagsService.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/UserLoginDto.html":{},"injectables/UsersService.html":{},"interfaces/VerifiedTokenPayload.html":{}}}],["email.service",{"_index":1204,"title":{},"body":{"modules/EmailModule.html":{}}}],["email/email.module",{"_index":1235,"title":{},"body":{"modules/EmailSchedulingModule.html":{}}}],["email/email.service",{"_index":1242,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["emailmodule",{"_index":1198,"title":{"modules/EmailModule.html":{}},"body":{"modules/EmailModule.html":{},"modules/EmailSchedulingModule.html":{},"modules.html":{},"overview.html":{}}}],["emails",{"_index":463,"title":{},"body":{"injectables/AuthService.html":{}}}],["emails[0].value",{"_index":466,"title":{},"body":{"injectables/AuthService.html":{}}}],["emailschedule",{"_index":1221,"title":{},"body":{"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{}}}],["emailschedule.content",{"_index":1248,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["emailschedule.dto",{"_index":1222,"title":{},"body":{"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{}}}],["emailschedule.recipient",{"_index":1249,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["emailschedule.subject",{"_index":1246,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["emailscheduledto",{"_index":1205,"title":{"classes/EmailScheduleDto.html":{}},"body":{"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"coverage.html":{}}}],["emailscheduling.controller",{"_index":1236,"title":{},"body":{"modules/EmailSchedulingModule.html":{}}}],["emailscheduling.service",{"_index":1224,"title":{},"body":{"controllers/EmailSchedulingController.html":{},"modules/EmailSchedulingModule.html":{}}}],["emailscheduling/emailscheduling.module",{"_index":256,"title":{},"body":{"modules/AppModule.html":{}}}],["emailschedulingcontroller",{"_index":1215,"title":{"controllers/EmailSchedulingController.html":{}},"body":{"controllers/EmailSchedulingController.html":{},"modules/EmailSchedulingModule.html":{},"coverage.html":{}}}],["emailschedulingmodule",{"_index":222,"title":{"modules/EmailSchedulingModule.html":{}},"body":{"modules/AppModule.html":{},"modules/EmailSchedulingModule.html":{},"modules.html":{},"overview.html":{}}}],["emailschedulingservice",{"_index":1223,"title":{"injectables/EmailSchedulingService.html":{}},"body":{"controllers/EmailSchedulingController.html":{},"modules/EmailSchedulingModule.html":{},"injectables/EmailSchedulingService.html":{},"coverage.html":{},"overview.html":{}}}],["emailservice",{"_index":1202,"title":{"injectables/EmailService.html":{}},"body":{"modules/EmailModule.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"coverage.html":{},"overview.html":{}}}],["emergencytype",{"_index":107,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["empty",{"_index":386,"title":{},"body":{"controllers/AuthController.html":{},"classes/CustomQueryBuilder.html":{},"injectables/ExcludeNullUndefinedInterceptor.html":{},"injectables/LocalStrategy.html":{},"classes/UserLoginDto.html":{},"miscellaneous/functions.html":{}}}],["enable",{"_index":290,"title":{},"body":{"modules/AppModule.html":{},"interfaces/BaseRoute.html":{},"classes/CrudConfigService.html":{},"interfaces/CrudOptions.html":{},"classes/CrudRoutesFactory.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"miscellaneous/variables.html":{}}}],["enableroutes",{"_index":1068,"title":{},"body":{"classes/CrudRoutesFactory.html":{}}}],["enableroutes(routesschema",{"_index":975,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["end",{"_index":1665,"title":{},"body":{"injectables/TimeoutInterceptor.html":{}}}],["enforce",{"_index":1386,"title":{},"body":{"interfaces/ICrudService.html":{}}}],["enteredpassword",{"_index":433,"title":{},"body":{"injectables/AuthService.html":{}}}],["entries",{"_index":1103,"title":{},"body":{"classes/CrudService.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["entry",{"_index":1100,"title":{},"body":{"classes/CrudService.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["enum",{"_index":560,"title":{},"body":{"interfaces/BaseRoute.html":{},"interfaces/CrudOptions.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/IPaginationResult.html":{},"classes/PaginationParams.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{}}}],["enum.type",{"_index":546,"title":{},"body":{"interfaces/BaseRoute.html":{},"interfaces/CrudOptions.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{}}}],["enumerations",{"_index":1940,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["eq",{"_index":2070,"title":{},"body":{"miscellaneous/variables.html":{}}}],["err",{"_index":1327,"title":{},"body":{"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"guards/ResponseGuard.html":{}}}],["err.errors",{"_index":1580,"title":{},"body":{"guards/ResponseGuard.html":{}}}],["err.message",{"_index":1579,"title":{},"body":{"guards/ResponseGuard.html":{}}}],["error",{"_index":12,"title":{},"body":{"interfaces/APIResponse.html":{},"classes/ApiException.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"injectables/CronService.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/IPaginationResult.html":{},"classes/PaginationParams.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"guards/ResponseGuard.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{},"miscellaneous/typealiases.html":{}}}],["error(err",{"_index":1574,"title":{},"body":{"guards/ResponseGuard.html":{}}}],["errorhash",{"_index":1774,"title":{},"body":{"classes/ValidationFailedFilter.html":{}}}],["errors",{"_index":139,"title":{},"body":{"classes/ApiException.html":{},"classes/BaseModel.html":{},"interfaces/IBaseModel.html":{},"classes/QueryFailedFilter.html":{},"guards/ResponseGuard.html":{},"dependencies.html":{}}}],["errors.decorator",{"_index":1042,"title":{},"body":{"classes/CrudController.html":{}}}],["errors.decorator.ts",{"_index":138,"title":{},"body":{"classes/ApiException.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["errors.decorator.ts:22",{"_index":157,"title":{},"body":{"classes/ApiException.html":{}}}],["errors.decorator.ts:24",{"_index":154,"title":{},"body":{"classes/ApiException.html":{}}}],["errors.decorator.ts:26",{"_index":156,"title":{},"body":{"classes/ApiException.html":{}}}],["errors.decorator.ts:28",{"_index":152,"title":{},"body":{"classes/ApiException.html":{}}}],["errors.decorator.ts:30",{"_index":153,"title":{},"body":{"classes/ApiException.html":{}}}],["errors.decorator.ts:32",{"_index":158,"title":{},"body":{"classes/ApiException.html":{}}}],["errors.decorator.ts:34",{"_index":155,"title":{},"body":{"classes/ApiException.html":{}}}],["errors.decorator.ts:36",{"_index":148,"title":{},"body":{"classes/ApiException.html":{}}}],["eslint",{"_index":267,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/BaseModel.html":{},"interfaces/BaseRoute.html":{},"injectables/CronService.html":{},"classes/CrudConfigService.html":{},"interfaces/CrudOptions.html":{},"classes/CrudRoutesFactory.html":{},"classes/CustomQueryBuilder.html":{},"controllers/EmailSchedulingController.html":{},"injectables/ExcludeNullUndefinedInterceptor.html":{},"interfaces/GetManyDefaultResponse.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"interfaces/IBaseModel.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"classes/R.html":{},"guards/RequestGuard.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"classes/UserLoginDto.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["eslint/ban",{"_index":524,"title":{},"body":{"classes/BaseModel.html":{},"interfaces/BaseRoute.html":{},"interfaces/CrudOptions.html":{},"classes/CustomQueryBuilder.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/IBaseModel.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{}}}],["eslint/no",{"_index":385,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/BaseRoute.html":{},"interfaces/CrudOptions.html":{},"injectables/ExcludeNullUndefinedInterceptor.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"classes/UserLoginDto.html":{}}}],["eslint/require",{"_index":1228,"title":{},"body":{"controllers/EmailSchedulingController.html":{}}}],["eslint/restrict",{"_index":328,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/CronService.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"classes/UserLoginDto.html":{}}}],["example",{"_index":369,"title":{},"body":{"controllers/AuthController.html":{},"classes/User.html":{},"classes/UserLoginDto.html":{}}}],["exception",{"_index":1498,"title":{},"body":{"classes/QueryFailedFilter.html":{},"classes/ValidationFailedFilter.html":{}}}],["exceptionfilter",{"_index":1499,"title":{},"body":{"classes/QueryFailedFilter.html":{},"classes/ValidationFailedFilter.html":{}}}],["excludenullundefinedinterceptor",{"_index":1262,"title":{"injectables/ExcludeNullUndefinedInterceptor.html":{}},"body":{"injectables/ExcludeNullUndefinedInterceptor.html":{},"coverage.html":{}}}],["executing",{"_index":787,"title":{},"body":{"injectables/CronService.html":{}}}],["execution",{"_index":1543,"title":{},"body":{"guards/RequestGuard.html":{},"guards/ResponseGuard.html":{}}}],["executioncontext",{"_index":1270,"title":{},"body":{"injectables/ExcludeNullUndefinedInterceptor.html":{},"guards/RequestGuard.html":{},"interfaces/Response.html":{},"guards/ResponseGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"miscellaneous/variables.html":{}}}],["exists",{"_index":658,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/CustomQueryBuilder.html":{},"classes/UpdateUserDto.html":{}}}],["exp",{"_index":1777,"title":{},"body":{"interfaces/VerifiedTokenPayload.html":{}}}],["expiresin",{"_index":417,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["export",{"_index":27,"title":{},"body":{"interfaces/APIResponse.html":{},"classes/ApiException.html":{},"controllers/AppController.html":{},"interfaces/AppLaunchAction.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseModel.html":{},"interfaces/BaseRoute.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"modules/CronModule.html":{},"injectables/CronService.html":{},"classes/CrudConfigService.html":{},"classes/CrudController.html":{},"interfaces/CrudOptions.html":{},"classes/CrudRoutesFactory.html":{},"classes/CrudService.html":{},"classes/CustomQueryBuilder.html":{},"modules/DatabaseModule.html":{},"modules/EmailModule.html":{},"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"modules/EmailSchedulingModule.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/ExcludeNullUndefinedInterceptor.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"interfaces/IBaseModel.html":{},"interfaces/ICrudService.html":{},"interfaces/IPaginationResult.html":{},"interfaces/ITag.html":{},"interfaces/IUser.html":{},"classes/IsEmailExistsConstraint.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/PaginationParams.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"injectables/PersistedCronService.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"classes/QueryFailedFilter.html":{},"classes/R.html":{},"guards/RequestGuard.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Response.html":{},"guards/ResponseGuard.html":{},"interfaces/Result.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"classes/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateTagsDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/UserLoginDto.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/ValidationFailedFilter.html":{},"interfaces/VerifiedTokenPayload.html":{}}}],["exports",{"_index":217,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CronModule.html":{},"modules/DatabaseModule.html":{},"modules/EmailModule.html":{},"modules/EmailSchedulingModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":364,"title":{},"body":{"controllers/AuthController.html":{},"classes/UserLoginDto.html":{},"dependencies.html":{}}}],["express.request",{"_index":1306,"title":{},"body":{"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["expression",{"_index":502,"title":{},"body":{"classes/BaseModel.html":{},"interfaces/IBaseModel.html":{},"classes/Tag.html":{},"classes/User.html":{}}}],["expression.tostring",{"_index":527,"title":{},"body":{"classes/BaseModel.html":{},"interfaces/IBaseModel.html":{}}}],["expressions",{"_index":330,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/CronService.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"classes/UserLoginDto.html":{}}}],["extend",{"_index":992,"title":{},"body":{"classes/CrudController.html":{},"classes/CrudService.html":{}}}],["extend.ts",{"_index":1801,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["extendmoment(momentdefault",{"_index":2092,"title":{},"body":{"miscellaneous/variables.html":{}}}],["extends",{"_index":512,"title":{},"body":{"classes/BaseModel.html":{},"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"classes/CustomQueryBuilder.html":{},"injectables/GoogleStrategy.html":{},"interfaces/IBaseModel.html":{},"interfaces/ITag.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"classes/UpdateTagsDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"injectables/UsersService.html":{}}}],["extra",{"_index":830,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["extractjwt",{"_index":1436,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":1442,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["fact16",{"_index":692,"title":{},"body":{"injectables/CronService.html":{}}}],["factorial",{"_index":701,"title":{},"body":{"injectables/CronService.html":{}}}],["factorial(n",{"_index":731,"title":{},"body":{"injectables/CronService.html":{}}}],["factory",{"_index":2044,"title":{},"body":{"miscellaneous/variables.html":{}}}],["failed",{"_index":1497,"title":{},"body":{"classes/QueryFailedFilter.html":{},"classes/ValidationFailedFilter.html":{}}}],["failed.filter.ts",{"_index":1496,"title":{},"body":{"classes/QueryFailedFilter.html":{},"classes/ValidationFailedFilter.html":{},"coverage.html":{}}}],["failed.filter.ts:17",{"_index":1771,"title":{},"body":{"classes/ValidationFailedFilter.html":{}}}],["failed.filter.ts:33",{"_index":1509,"title":{},"body":{"classes/QueryFailedFilter.html":{}}}],["false",{"_index":570,"title":{},"body":{"interfaces/BaseRoute.html":{},"classes/CrudConfigService.html":{},"interfaces/CrudOptions.html":{},"classes/CrudRoutesFactory.html":{},"interfaces/GetManyDefaultResponse.html":{},"classes/IsEmailExistsConstraint.html":{},"injectables/LocalStrategy.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"classes/R.html":{},"guards/ResponseGuard.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"miscellaneous/variables.html":{}}}],["feed",{"_index":101,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["fetch",{"_index":521,"title":{},"body":{"classes/BaseModel.html":{},"interfaces/IBaseModel.html":{}}}],["fetchrelation",{"_index":482,"title":{},"body":{"classes/BaseModel.html":{},"interfaces/IBaseModel.html":{},"classes/Tag.html":{},"classes/User.html":{}}}],["fetchrelation(expression",{"_index":498,"title":{},"body":{"classes/BaseModel.html":{},"classes/Tag.html":{},"classes/User.html":{}}}],["field",{"_index":558,"title":{},"body":{"interfaces/BaseRoute.html":{},"interfaces/CrudOptions.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{}}}],["fields",{"_index":514,"title":{},"body":{"classes/BaseModel.html":{},"interfaces/IBaseModel.html":{},"classes/User.html":{}}}],["file",{"_index":5,"title":{},"body":{"interfaces/APIResponse.html":{},"classes/ApiException.html":{},"controllers/AppController.html":{},"interfaces/AppLaunchAction.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseModel.html":{},"interfaces/BaseRoute.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"modules/CronModule.html":{},"injectables/CronService.html":{},"classes/CrudConfigService.html":{},"classes/CrudController.html":{},"interfaces/CrudOptions.html":{},"classes/CrudRoutesFactory.html":{},"classes/CrudService.html":{},"classes/CustomQueryBuilder.html":{},"modules/DatabaseModule.html":{},"modules/EmailModule.html":{},"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"modules/EmailSchedulingModule.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/ExcludeNullUndefinedInterceptor.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"interfaces/IBaseModel.html":{},"interfaces/ICrudService.html":{},"interfaces/IPaginationResult.html":{},"interfaces/ITag.html":{},"interfaces/IUser.html":{},"classes/IsEmailExistsConstraint.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/PaginationParams.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"injectables/PersistedCronService.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"classes/QueryFailedFilter.html":{},"classes/R.html":{},"guards/RequestGuard.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Response.html":{},"guards/ResponseGuard.html":{},"interfaces/Result.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"classes/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateTagsDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/UserLoginDto.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/ValidationFailedFilter.html":{},"interfaces/VerifiedTokenPayload.html":{},"coverage.html":{}}}],["filter",{"_index":515,"title":{},"body":{"classes/BaseModel.html":{},"classes/CrudService.html":{},"interfaces/IBaseModel.html":{},"classes/QueryFailedFilter.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{},"classes/ValidationFailedFilter.html":{}}}],["filter((one",{"_index":841,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["find",{"_index":997,"title":{},"body":{"classes/CrudController.html":{},"classes/CrudService.html":{},"dependencies.html":{}}}],["findall",{"_index":998,"title":{},"body":{"classes/CrudController.html":{},"classes/CrudService.html":{},"interfaces/ICrudService.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["findall(paginationparams",{"_index":1018,"title":{},"body":{"classes/CrudController.html":{}}}],["findone",{"_index":1093,"title":{},"body":{"classes/CrudService.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["findone(filter",{"_index":1104,"title":{},"body":{"classes/CrudService.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["findone(id",{"_index":1758,"title":{},"body":{"injectables/UsersService.html":{}}}],["findonebyemail",{"_index":1094,"title":{},"body":{"classes/CrudService.html":{},"interfaces/ICrudService.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["findonebyemail(email",{"_index":1106,"title":{},"body":{"classes/CrudService.html":{},"interfaces/ICrudService.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["findonebyid",{"_index":999,"title":{},"body":{"classes/CrudController.html":{},"classes/CrudService.html":{},"interfaces/ICrudService.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["findonebyid(@param('id",{"_index":1052,"title":{},"body":{"classes/CrudController.html":{}}}],["findonebyid(id",{"_index":1023,"title":{},"body":{"classes/CrudController.html":{},"classes/CrudService.html":{},"interfaces/ICrudService.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["finds",{"_index":1102,"title":{},"body":{"classes/CrudService.html":{},"injectables/PersistedCronService.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["fire",{"_index":768,"title":{},"body":{"injectables/CronService.html":{}}}],["first",{"_index":312,"title":{},"body":{"modules/AppModule.html":{}}}],["firstname",{"_index":655,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/IUser.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["flight",{"_index":1513,"title":{},"body":{"classes/QueryFailedFilter.html":{},"classes/ValidationFailedFilter.html":{}}}],["flow",{"_index":1485,"title":{},"body":{"injectables/PersistedCronService.html":{}}}],["fn.now",{"_index":535,"title":{},"body":{"classes/BaseModel.html":{},"interfaces/IBaseModel.html":{}}}],["follower",{"_index":128,"title":{"interfaces/Follower.html":{}},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["following",{"_index":56,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{},"miscellaneous/typealiases.html":{}}}],["forbidden",{"_index":194,"title":{},"body":{"classes/ApiException.html":{}}}],["forbiddenexception",{"_index":162,"title":{},"body":{"classes/ApiException.html":{}}}],["foreignkeyviolationerror",{"_index":1504,"title":{},"body":{"classes/QueryFailedFilter.html":{}}}],["format",{"_index":639,"title":{},"body":{"classes/CreateTagsDto.html":{},"interfaces/ITag.html":{},"classes/Tag.html":{},"classes/UpdateTagsDto.html":{},"classes/User.html":{}}}],["found",{"_index":188,"title":{},"body":{"classes/ApiException.html":{},"injectables/CronService.html":{},"classes/CrudController.html":{},"injectables/UsersService.html":{}}}],["framework",{"_index":1966,"title":{},"body":{"index.html":{}}}],["frontend",{"_index":643,"title":{},"body":{"classes/CreateTagsDto.html":{},"interfaces/ITag.html":{},"classes/Tag.html":{},"classes/UpdateTagsDto.html":{},"classes/User.html":{},"miscellaneous/typealiases.html":{}}}],["fullname",{"_index":1676,"title":{},"body":{"classes/User.html":{}}}],["func",{"_index":824,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["function",{"_index":184,"title":{},"body":{"classes/ApiException.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"interfaces/BaseRoute.html":{},"classes/CrudConfigService.html":{},"interfaces/CrudOptions.html":{},"classes/CrudRoutesFactory.html":{},"classes/CustomQueryBuilder.html":{},"injectables/ExcludeNullUndefinedInterceptor.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"classes/R.html":{},"guards/RequestGuard.html":{},"guards/ResponseGuard.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"classes/UserLoginDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["functionality",{"_index":995,"title":{},"body":{"classes/CrudController.html":{},"classes/CrudService.html":{}}}],["functions",{"_index":1942,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["fuzzy",{"_index":1688,"title":{},"body":{"classes/User.html":{}}}],["gen/api",{"_index":137,"title":{},"body":{"classes/ApiException.html":{},"classes/CrudController.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["gen/crud",{"_index":803,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"coverage.html":{}}}],["gen/crud.decorator.ts",{"_index":1807,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["gen/utils/checks.util.ts",{"_index":1808,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["gen/utils/obj.util.ts",{"_index":1825,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["gen/utils/other.ts",{"_index":537,"title":{},"body":{"interfaces/BaseRoute.html":{},"interfaces/CrudOptions.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["gen/utils/other.ts:40",{"_index":1467,"title":{},"body":{"interfaces/ParamsOptions.html":{}}}],["gen/utils/types/object",{"_index":2029,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["gender",{"_index":57,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["generated",{"_index":627,"title":{},"body":{"classes/CreateTagsDto.html":{},"interfaces/ITag.html":{},"classes/Tag.html":{},"classes/UpdateTagsDto.html":{},"classes/User.html":{}}}],["generatetoken",{"_index":423,"title":{},"body":{"injectables/AuthService.html":{}}}],["generatetoken(user",{"_index":434,"title":{},"body":{"injectables/AuthService.html":{}}}],["generic",{"_index":640,"title":{},"body":{"classes/CreateTagsDto.html":{},"interfaces/IPaginationResult.html":{},"interfaces/ITag.html":{},"classes/PaginationParams.html":{},"classes/Tag.html":{},"classes/UpdateTagsDto.html":{},"classes/User.html":{},"miscellaneous/typealiases.html":{}}}],["get(':id",{"_index":1051,"title":{},"body":{"classes/CrudController.html":{}}}],["get('google",{"_index":384,"title":{},"body":{"controllers/AuthController.html":{},"classes/UserLoginDto.html":{}}}],["get('google')@useguards(undefined",{"_index":339,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('google/redirect",{"_index":387,"title":{},"body":{"controllers/AuthController.html":{},"classes/UserLoginDto.html":{}}}],["get('google/redirect')@useguards(undefined",{"_index":348,"title":{},"body":{"controllers/AuthController.html":{}}}],["get()@httpcode(200)@healthcheck",{"_index":1332,"title":{},"body":{"controllers/HealthController.html":{}}}],["get(key",{"_index":2087,"title":{},"body":{"miscellaneous/variables.html":{}}}],["get(metadatakey",{"_index":1526,"title":{},"body":{"classes/R.html":{}}}],["getapplaunchdata",{"_index":29,"title":{"interfaces/GetAppLaunchData.html":{}},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["getcomments",{"_index":32,"title":{"interfaces/GetComments.html":{}},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["getextramodels",{"_index":1594,"title":{},"body":{"classes/Swagger.html":{}}}],["getextramodels(target",{"_index":850,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["getfollowers",{"_index":34,"title":{"interfaces/GetFollowers.html":{}},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["getfollowing",{"_index":35,"title":{"interfaces/GetFollowing.html":{}},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["gethello",{"_index":200,"title":{},"body":{"controllers/AppController.html":{}}}],["getmany",{"_index":577,"title":{},"body":{"interfaces/BaseRoute.html":{},"classes/CrudConfigService.html":{},"interfaces/CrudOptions.html":{},"classes/CrudRoutesFactory.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["getmany${resourcename}responsedto",{"_index":878,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["getmanybase",{"_index":548,"title":{},"body":{"interfaces/BaseRoute.html":{},"interfaces/CrudOptions.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"miscellaneous/typealiases.html":{}}}],["getmanydefaultresponse",{"_index":556,"title":{"interfaces/GetManyDefaultResponse.html":{}},"body":{"interfaces/BaseRoute.html":{},"classes/CrudConfigService.html":{},"interfaces/CrudOptions.html":{},"classes/CrudRoutesFactory.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"coverage.html":{}}}],["getmanyresponsedto",{"_index":874,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["getmodelname",{"_index":1086,"title":{},"body":{"classes/CrudRoutesFactory.html":{}}}],["getmodeltype",{"_index":1088,"title":{},"body":{"classes/CrudRoutesFactory.html":{}}}],["getnotifications",{"_index":81,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["getone",{"_index":555,"title":{},"body":{"interfaces/BaseRoute.html":{},"classes/CrudConfigService.html":{},"interfaces/CrudOptions.html":{},"classes/CrudRoutesFactory.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"miscellaneous/typealiases.html":{}}}],["getone(name",{"_index":919,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["getone(req",{"_index":921,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["getonebase",{"_index":549,"title":{},"body":{"interfaces/BaseRoute.html":{},"classes/CrudConfigService.html":{},"interfaces/CrudOptions.html":{},"classes/CrudRoutesFactory.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"miscellaneous/typealiases.html":{}}}],["getonebase(name",{"_index":923,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["getonebase(req",{"_index":924,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["getoneresponsedto",{"_index":880,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["getownpropnames",{"_index":1826,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["getrescuelist",{"_index":33,"title":{"interfaces/GetRescueList.html":{}},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["getresponseok",{"_index":1595,"title":{},"body":{"classes/Swagger.html":{}}}],["getresponseok(func",{"_index":852,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["getroutesschema",{"_index":926,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["gettargetproto",{"_index":1084,"title":{},"body":{"classes/CrudRoutesFactory.html":{}}}],["getting",{"_index":1962,"title":{"index.html":{}},"body":{}}],["getuser",{"_index":1853,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["getuserposts",{"_index":31,"title":{"interfaces/GetUserPosts.html":{}},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["getuserprofile",{"_index":30,"title":{"interfaces/GetUserProfile.html":{}},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["gives",{"_index":641,"title":{},"body":{"classes/CreateTagsDto.html":{},"interfaces/ITag.html":{},"classes/Tag.html":{},"classes/UpdateTagsDto.html":{},"classes/User.html":{},"miscellaneous/typealiases.html":{}}}],["global",{"_index":585,"title":{},"body":{"interfaces/BaseRoute.html":{},"interfaces/CrudOptions.html":{},"modules/DatabaseModule.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{}}}],["google",{"_index":341,"title":{},"body":{"controllers/AuthController.html":{},"injectables/GoogleStrategy.html":{},"classes/UserLoginDto.html":{},"dependencies.html":{}}}],["google.strategy",{"_index":408,"title":{},"body":{"modules/AuthModule.html":{}}}],["google_client_id",{"_index":289,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["google_secret",{"_index":288,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["googleauth",{"_index":336,"title":{},"body":{"controllers/AuthController.html":{},"classes/UserLoginDto.html":{}}}],["googleauthredirect",{"_index":337,"title":{},"body":{"controllers/AuthController.html":{}}}],["googleauthredirect(@req",{"_index":388,"title":{},"body":{"controllers/AuthController.html":{},"classes/UserLoginDto.html":{}}}],["googleauthredirect(req",{"_index":346,"title":{},"body":{"controllers/AuthController.html":{}}}],["googlestrategy",{"_index":399,"title":{"injectables/GoogleStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/GoogleStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["gracefully",{"_index":1474,"title":{},"body":{"injectables/PersistedCronService.html":{}}}],["graph",{"_index":2015,"title":{},"body":{"modules.html":{}}}],["graphql",{"_index":1180,"title":{},"body":{"modules/DatabaseModule.html":{},"dependencies.html":{}}}],["graphqlbuilder",{"_index":1183,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["graphqlbuilder().allmodels(models).build",{"_index":1185,"title":{},"body":{"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["graphqlmodule",{"_index":242,"title":{},"body":{"modules/AppModule.html":{}}}],["graphqlmodule.forroot",{"_index":292,"title":{},"body":{"modules/AppModule.html":{}}}],["graphqlschema",{"_index":254,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["grow",{"_index":1992,"title":{},"body":{"index.html":{}}}],["guard",{"_index":1531,"title":{"guards/RequestGuard.html":{},"guards/ResponseGuard.html":{}},"body":{"guards/RequestGuard.html":{},"guards/ResponseGuard.html":{},"coverage.html":{}}}],["guards",{"_index":1533,"title":{},"body":{"guards/RequestGuard.html":{},"guards/ResponseGuard.html":{},"overview.html":{}}}],["handlecron",{"_index":702,"title":{},"body":{"injectables/CronService.html":{}}}],["handlecronfn",{"_index":735,"title":{},"body":{"injectables/CronService.html":{}}}],["handled",{"_index":1511,"title":{},"body":{"classes/QueryFailedFilter.html":{},"classes/ValidationFailedFilter.html":{}}}],["handleinterval",{"_index":703,"title":{},"body":{"injectables/CronService.html":{}}}],["handler",{"_index":1278,"title":{},"body":{"injectables/ExcludeNullUndefinedInterceptor.html":{},"injectables/PersistedCronService.html":{},"interfaces/Response.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["handletimeout",{"_index":704,"title":{},"body":{"injectables/CronService.html":{}}}],["hapi/joi",{"_index":249,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["hash",{"_index":1724,"title":{},"body":{"classes/User.html":{}}}],["hashpassword",{"_index":1677,"title":{},"body":{"classes/User.html":{},"injectables/UsersService.html":{}}}],["hashpassword(password",{"_index":1720,"title":{},"body":{"classes/User.html":{},"injectables/UsersService.html":{}}}],["haslength",{"_index":1809,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["haslength(objkeys(val",{"_index":2082,"title":{},"body":{"miscellaneous/variables.html":{}}}],["haslength(val",{"_index":2058,"title":{},"body":{"miscellaneous/variables.html":{}}}],["hasmore",{"_index":1173,"title":{},"body":{"classes/CustomQueryBuilder.html":{}}}],["hasvalue",{"_index":1810,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["health",{"_index":296,"title":{},"body":{"modules/AppModule.html":{},"controllers/HealthController.html":{}}}],["health/health.controller",{"_index":257,"title":{},"body":{"modules/AppModule.html":{}}}],["healthcheck",{"_index":1345,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthcheckservice",{"_index":1346,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthcontroller",{"_index":230,"title":{"controllers/HealthController.html":{}},"body":{"modules/AppModule.html":{},"controllers/HealthController.html":{},"coverage.html":{}}}],["hello",{"_index":207,"title":{},"body":{"controllers/AppController.html":{}}}],["helmet",{"_index":1912,"title":{},"body":{"dependencies.html":{}}}],["helpers",{"_index":1540,"title":{},"body":{"guards/RequestGuard.html":{},"guards/ResponseGuard.html":{}}}],["here",{"_index":2001,"title":{},"body":{"index.html":{}}}],["hidden",{"_index":477,"title":{},"body":{"classes/BaseModel.html":{},"interfaces/IBaseModel.html":{},"classes/Tag.html":{},"classes/User.html":{}}}],["hook",{"_index":1481,"title":{},"body":{"injectables/PersistedCronService.html":{}}}],["host",{"_index":281,"title":{},"body":{"modules/AppModule.html":{},"classes/QueryFailedFilter.html":{},"classes/ValidationFailedFilter.html":{},"miscellaneous/variables.html":{}}}],["host.switchtohttp",{"_index":1515,"title":{},"body":{"classes/QueryFailedFilter.html":{},"classes/ValidationFailedFilter.html":{}}}],["http",{"_index":1399,"title":{},"body":{"interfaces/IPaginationResult.html":{},"classes/PaginationParams.html":{}}}],["httpcode",{"_index":1341,"title":{},"body":{"controllers/HealthController.html":{}}}],["httpcode(200",{"_index":1361,"title":{},"body":{"controllers/HealthController.html":{}}}],["https://nestjs.com",{"_index":2008,"title":{},"body":{"index.html":{}}}],["https://samples.openweathermap.org",{"_index":1369,"title":{},"body":{"controllers/HealthController.html":{}}}],["httpstatus",{"_index":24,"title":{},"body":{"interfaces/APIResponse.html":{},"classes/ApiException.html":{},"interfaces/AppLaunchAction.html":{},"controllers/AuthController.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"classes/CrudConfigService.html":{},"classes/CrudController.html":{},"classes/CrudRoutesFactory.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/IPaginationResult.html":{},"classes/PaginationParams.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"classes/QueryFailedFilter.html":{},"classes/R.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"controllers/TagsController.html":{},"classes/UserLoginDto.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{},"controllers/UsersController.html":{},"classes/ValidationFailedFilter.html":{}}}],["httpstatus.created",{"_index":1062,"title":{},"body":{"classes/CrudController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["httpstatus.no_content",{"_index":1055,"title":{},"body":{"classes/CrudController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["httpstatus.ok",{"_index":383,"title":{},"body":{"controllers/AuthController.html":{},"classes/CrudConfigService.html":{},"classes/CrudController.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"controllers/TagsController.html":{},"classes/UserLoginDto.html":{},"controllers/UsersController.html":{}}}],["httpstatus.precondition_failed",{"_index":1518,"title":{},"body":{"classes/QueryFailedFilter.html":{},"classes/ValidationFailedFilter.html":{}}}],["httpstatus[statuscode",{"_index":183,"title":{},"body":{"classes/ApiException.html":{}}}],["iat",{"_index":1778,"title":{},"body":{"interfaces/VerifiedTokenPayload.html":{}}}],["ibasemodel",{"_index":474,"title":{"interfaces/IBaseModel.html":{}},"body":{"classes/BaseModel.html":{},"interfaces/IBaseModel.html":{},"coverage.html":{}}}],["icrudservice",{"_index":1002,"title":{"interfaces/ICrudService.html":{}},"body":{"classes/CrudController.html":{},"classes/CrudService.html":{},"interfaces/ICrudService.html":{},"coverage.html":{}}}],["id",{"_index":478,"title":{},"body":{"classes/BaseModel.html":{},"classes/CreateTagsDto.html":{},"classes/CrudController.html":{},"classes/CrudService.html":{},"interfaces/IBaseModel.html":{},"interfaces/ICrudService.html":{},"interfaces/ITag.html":{},"classes/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"classes/UpdateTagsDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["id'})@apiresponse({status",{"_index":1025,"title":{},"body":{"classes/CrudController.html":{}}}],["id'})@put(':id",{"_index":1742,"title":{},"body":{"controllers/UsersController.html":{}}}],["identifier",{"_index":1781,"title":{},"body":{"coverage.html":{}}}],["ignore",{"_index":529,"title":{},"body":{"classes/BaseModel.html":{},"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/CrudService.html":{},"modules/DatabaseModule.html":{},"injectables/ExcludeNullUndefinedInterceptor.html":{},"controllers/HealthController.html":{},"interfaces/IBaseModel.html":{},"classes/QueryFailedFilter.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"classes/ValidationFailedFilter.html":{},"miscellaneous/variables.html":{}}}],["ignoreexpiration",{"_index":1439,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["implement",{"_index":1260,"title":{},"body":{"injectables/EmailService.html":{},"injectables/ExcludeNullUndefinedInterceptor.html":{},"injectables/PersistedCronService.html":{},"classes/QueryFailedFilter.html":{},"interfaces/Response.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/ValidationFailedFilter.html":{}}}],["implements",{"_index":300,"title":{},"body":{"modules/AppModule.html":{},"classes/BaseModel.html":{},"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/CrudService.html":{},"injectables/ExcludeNullUndefinedInterceptor.html":{},"controllers/HealthController.html":{},"interfaces/IBaseModel.html":{},"interfaces/ITag.html":{},"classes/IsEmailExistsConstraint.html":{},"injectables/PersistedCronService.html":{},"classes/QueryFailedFilter.html":{},"classes/R.html":{},"guards/RequestGuard.html":{},"interfaces/Response.html":{},"guards/ResponseGuard.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"classes/Tag.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateTagsDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/ValidationFailedFilter.html":{}}}],["import",{"_index":25,"title":{},"body":{"interfaces/APIResponse.html":{},"classes/ApiException.html":{},"controllers/AppController.html":{},"interfaces/AppLaunchAction.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseModel.html":{},"interfaces/BaseRoute.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"modules/CronModule.html":{},"injectables/CronService.html":{},"classes/CrudConfigService.html":{},"classes/CrudController.html":{},"interfaces/CrudOptions.html":{},"classes/CrudRoutesFactory.html":{},"classes/CrudService.html":{},"classes/CustomQueryBuilder.html":{},"modules/DatabaseModule.html":{},"modules/EmailModule.html":{},"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"modules/EmailSchedulingModule.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/ExcludeNullUndefinedInterceptor.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"interfaces/IBaseModel.html":{},"interfaces/ICrudService.html":{},"interfaces/IPaginationResult.html":{},"interfaces/ITag.html":{},"classes/IsEmailExistsConstraint.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/PaginationParams.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"injectables/PersistedCronService.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"classes/QueryFailedFilter.html":{},"classes/R.html":{},"guards/RequestGuard.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Response.html":{},"guards/ResponseGuard.html":{},"interfaces/Result.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"classes/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateTagsDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/UserLoginDto.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/ValidationFailedFilter.html":{}}}],["imports",{"_index":231,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EmailModule.html":{},"modules/EmailSchedulingModule.html":{}}}],["in,no",{"_index":1555,"title":{},"body":{"guards/RequestGuard.html":{}}}],["in/success?jwt=${req.user.token",{"_index":394,"title":{},"body":{"controllers/AuthController.html":{},"classes/UserLoginDto.html":{}}}],["included",{"_index":1396,"title":{},"body":{"interfaces/IPaginationResult.html":{},"classes/PaginationParams.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"interfaces/APIResponse.html":{},"classes/ApiException.html":{},"controllers/AppController.html":{},"interfaces/AppLaunchAction.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BaseModel.html":{},"interfaces/BaseRoute.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"injectables/CronService.html":{},"classes/CrudConfigService.html":{},"classes/CrudController.html":{},"interfaces/CrudOptions.html":{},"classes/CrudRoutesFactory.html":{},"classes/CrudService.html":{},"classes/CustomQueryBuilder.html":{},"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/ExcludeNullUndefinedInterceptor.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"interfaces/IBaseModel.html":{},"interfaces/ICrudService.html":{},"interfaces/IPaginationResult.html":{},"interfaces/ITag.html":{},"interfaces/IUser.html":{},"classes/IsEmailExistsConstraint.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/PaginationParams.html":{},"interfaces/ParamOption.html":{},"injectables/PersistedCronService.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"classes/QueryFailedFilter.html":{},"classes/R.html":{},"guards/RequestGuard.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Response.html":{},"guards/ResponseGuard.html":{},"interfaces/Result.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"classes/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/User.html":{},"classes/UserLoginDto.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/ValidationFailedFilter.html":{},"interfaces/VerifiedTokenPayload.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["indexable",{"_index":1466,"title":{},"body":{"interfaces/ParamsOptions.html":{}}}],["indicating",{"_index":1546,"title":{},"body":{"guards/RequestGuard.html":{},"guards/ResponseGuard.html":{}}}],["info",{"_index":3,"title":{},"body":{"interfaces/APIResponse.html":{},"classes/ApiException.html":{},"controllers/AppController.html":{},"interfaces/AppLaunchAction.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseModel.html":{},"interfaces/BaseRoute.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"modules/CronModule.html":{},"injectables/CronService.html":{},"classes/CrudConfigService.html":{},"classes/CrudController.html":{},"interfaces/CrudOptions.html":{},"classes/CrudRoutesFactory.html":{},"classes/CrudService.html":{},"classes/CustomQueryBuilder.html":{},"modules/DatabaseModule.html":{},"modules/EmailModule.html":{},"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"modules/EmailSchedulingModule.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/ExcludeNullUndefinedInterceptor.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"interfaces/IBaseModel.html":{},"interfaces/ICrudService.html":{},"interfaces/IPaginationResult.html":{},"interfaces/ITag.html":{},"interfaces/IUser.html":{},"classes/IsEmailExistsConstraint.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/PaginationParams.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"injectables/PersistedCronService.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"classes/QueryFailedFilter.html":{},"classes/R.html":{},"guards/RequestGuard.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Response.html":{},"guards/ResponseGuard.html":{},"interfaces/Result.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"classes/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateTagsDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/UserLoginDto.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/ValidationFailedFilter.html":{},"interfaces/VerifiedTokenPayload.html":{}}}],["infra/validator/isemailexists",{"_index":670,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["inherited",{"_index":1607,"title":{},"body":{"classes/Tag.html":{},"injectables/TagsService.html":{},"classes/User.html":{},"injectables/UsersService.html":{}}}],["initialized",{"_index":323,"title":{},"body":{"modules/AppModule.html":{},"controllers/HealthController.html":{}}}],["inject",{"_index":412,"title":{},"body":{"modules/AuthModule.html":{},"classes/IsEmailExistsConstraint.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["injectable",{"_index":419,"title":{"injectables/AuthService.html":{},"injectables/CronService.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/ExcludeNullUndefinedInterceptor.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/PersistedCronService.html":{},"injectables/TagsService.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/CronService.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/ExcludeNullUndefinedInterceptor.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/PersistedCronService.html":{},"guards/RequestGuard.html":{},"interfaces/Response.html":{},"guards/ResponseGuard.html":{},"injectables/TagsService.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":420,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CronService.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/ExcludeNullUndefinedInterceptor.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/PersistedCronService.html":{},"injectables/TagsService.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injected",{"_index":1005,"title":{},"body":{"classes/CrudController.html":{},"classes/CrudService.html":{}}}],["input",{"_index":1017,"title":{},"body":{"classes/CrudController.html":{},"classes/CrudService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["input.name",{"_index":1650,"title":{},"body":{"injectables/TagsService.html":{}}}],["inputs",{"_index":1551,"title":{},"body":{"guards/RequestGuard.html":{}}}],["inputs[key",{"_index":1558,"title":{},"body":{"guards/RequestGuard.html":{}}}],["insert(input",{"_index":1128,"title":{},"body":{"classes/CrudService.html":{}}}],["installation",{"_index":1974,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":1976,"title":{},"body":{"index.html":{}}}],["instance",{"_index":631,"title":{},"body":{"classes/CreateTagsDto.html":{},"interfaces/ITag.html":{},"classes/Tag.html":{},"classes/UpdateTagsDto.html":{},"classes/User.html":{}}}],["instanceof",{"_index":1559,"title":{},"body":{"guards/RequestGuard.html":{},"injectables/TimeoutInterceptor.html":{},"miscellaneous/variables.html":{}}}],["integer",{"_index":635,"title":{},"body":{"classes/CreateTagsDto.html":{},"interfaces/ITag.html":{},"classes/Tag.html":{},"classes/UpdateTagsDto.html":{},"classes/User.html":{}}}],["intercept",{"_index":1268,"title":{},"body":{"injectables/ExcludeNullUndefinedInterceptor.html":{},"interfaces/Response.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["intercept(context",{"_index":1269,"title":{},"body":{"injectables/ExcludeNullUndefinedInterceptor.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["interceptor",{"_index":1273,"title":{},"body":{"injectables/ExcludeNullUndefinedInterceptor.html":{},"interfaces/Response.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["interceptors",{"_index":1265,"title":{},"body":{"injectables/ExcludeNullUndefinedInterceptor.html":{}}}],["interface",{"_index":0,"title":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/BaseRoute.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/CrudOptions.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/IBaseModel.html":{},"interfaces/ICrudService.html":{},"interfaces/IPaginationResult.html":{},"interfaces/ITag.html":{},"interfaces/IUser.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Response.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{},"interfaces/VerifiedTokenPayload.html":{}},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"classes/BaseModel.html":{},"interfaces/BaseRoute.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"classes/CreateTagsDto.html":{},"interfaces/CrudOptions.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/IBaseModel.html":{},"interfaces/ICrudService.html":{},"interfaces/IPaginationResult.html":{},"interfaces/ITag.html":{},"interfaces/IUser.html":{},"classes/PaginationParams.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Response.html":{},"interfaces/Result.html":{},"classes/Tag.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateTagsDto.html":{},"classes/User.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{},"interfaces/VerifiedTokenPayload.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["interfaces",{"_index":2,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/BaseRoute.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/CrudOptions.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/IBaseModel.html":{},"interfaces/ICrudService.html":{},"interfaces/IPaginationResult.html":{},"interfaces/ITag.html":{},"interfaces/IUser.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Response.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{},"interfaces/VerifiedTokenPayload.html":{},"overview.html":{}}}],["internal",{"_index":191,"title":{},"body":{"classes/ApiException.html":{}}}],["internally",{"_index":1325,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["internalservererrorexception",{"_index":163,"title":{},"body":{"classes/ApiException.html":{},"injectables/AuthService.html":{},"classes/CrudController.html":{}}}],["internalservererrorexception(e",{"_index":471,"title":{},"body":{"injectables/AuthService.html":{}}}],["interval",{"_index":686,"title":{},"body":{"injectables/CronService.html":{},"controllers/HealthController.html":{}}}],["interval('handleintervalfn",{"_index":737,"title":{},"body":{"injectables/CronService.html":{}}}],["interval(5000).pipe",{"_index":1358,"title":{},"body":{"controllers/HealthController.html":{}}}],["intervals",{"_index":745,"title":{},"body":{"injectables/CronService.html":{}}}],["intervals.foreach((key",{"_index":784,"title":{},"body":{"injectables/CronService.html":{}}}],["invoked",{"_index":1279,"title":{},"body":{"injectables/ExcludeNullUndefinedInterceptor.html":{},"injectables/PersistedCronService.html":{},"interfaces/Response.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["ipagination",{"_index":1048,"title":{},"body":{"classes/CrudController.html":{}}}],["ipaginationresult",{"_index":1044,"title":{"interfaces/IPaginationResult.html":{}},"body":{"classes/CrudController.html":{},"classes/CrudService.html":{},"interfaces/ICrudService.html":{},"interfaces/IPaginationResult.html":{},"classes/PaginationParams.html":{},"coverage.html":{}}}],["isactive",{"_index":50,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"classes/CreateUserDto.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/IUser.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["isarray",{"_index":875,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["isarrayfull",{"_index":1811,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["isarrayfull(val",{"_index":2053,"title":{},"body":{"miscellaneous/variables.html":{}}}],["isarraystrings",{"_index":1812,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["isboolean",{"_index":662,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["isboolean(val",{"_index":2085,"title":{},"body":{"miscellaneous/variables.html":{}}}],["isdate",{"_index":1813,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["isdate(val",{"_index":2086,"title":{},"body":{"miscellaneous/variables.html":{}}}],["isdatestring",{"_index":1211,"title":{},"body":{"classes/EmailScheduleDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["isemail",{"_index":668,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/EmailScheduleDto.html":{},"classes/UpdateUserDto.html":{}}}],["isemail()@isnotempty()@minlength(2)@isemailexists({message",{"_index":657,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isemailexists",{"_index":669,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/IsEmailExistsConstraint.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["isemailexistsconstraint",{"_index":1416,"title":{"classes/IsEmailExistsConstraint.html":{}},"body":{"classes/IsEmailExistsConstraint.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["isempty",{"_index":1843,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["isempty(value",{"_index":1159,"title":{},"body":{"classes/CustomQueryBuilder.html":{},"miscellaneous/functions.html":{}}}],["isequal",{"_index":1814,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["isequal(val",{"_index":2073,"title":{},"body":{"miscellaneous/variables.html":{}}}],["isfalse",{"_index":812,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["isfalse(this.options.serialize?.create",{"_index":945,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["isfalse(this.options.serialize?.delete",{"_index":954,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["isfalse(this.options.serialize?.get",{"_index":938,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["isfalse(this.options.serialize?.getmany",{"_index":941,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["isfalse(this.options.serialize?.replace",{"_index":951,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["isfalse(this.options.serialize?.update",{"_index":948,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["isfunction",{"_index":813,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["isfunction(this.modeltype",{"_index":960,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["isfunction(this.options.serialize?.create",{"_index":967,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["isfunction(this.options.serialize?.delete",{"_index":973,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["isfunction(this.options.serialize?.get",{"_index":963,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["isfunction(this.options.serialize?.replace",{"_index":971,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["isfunction(this.options.serialize?.update",{"_index":969,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["isglobal",{"_index":262,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["isin",{"_index":1815,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["isnil",{"_index":1816,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["isnotempty",{"_index":362,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"classes/EmailScheduleDto.html":{},"interfaces/ITag.html":{},"classes/Tag.html":{},"classes/UpdateTagsDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserLoginDto.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["isnotempty(records",{"_index":1177,"title":{},"body":{"classes/CustomQueryBuilder.html":{}}}],["isnotempty(value",{"_index":1960,"title":{},"body":{"miscellaneous/functions.html":{}}}],["isnull",{"_index":1817,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["isnull(val",{"_index":2076,"title":{},"body":{"miscellaneous/variables.html":{}}}],["isnumber",{"_index":1818,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["isnumber(val",{"_index":2084,"title":{},"body":{"miscellaneous/variables.html":{}}}],["isnumeric",{"_index":1819,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["isobject",{"_index":1820,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["isobject(val",{"_index":2081,"title":{},"body":{"miscellaneous/variables.html":{}}}],["isobject(value",{"_index":1158,"title":{},"body":{"classes/CustomQueryBuilder.html":{},"miscellaneous/functions.html":{}}}],["isobjectfull",{"_index":814,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["isobjectfull(config.params",{"_index":885,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["isobjectfull(config.query",{"_index":883,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["isobjectfull(config.serialize",{"_index":887,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["isobjectfull(this.options.dto",{"_index":933,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["isobjectfull(this.options.query",{"_index":930,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["isoptional",{"_index":1401,"title":{},"body":{"interfaces/IPaginationResult.html":{},"classes/PaginationParams.html":{}}}],["isownprofile",{"_index":58,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["isrecent",{"_index":100,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["isrescuer",{"_index":59,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["isstring",{"_index":613,"title":{},"body":{"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"classes/EmailScheduleDto.html":{},"interfaces/ITag.html":{},"classes/Tag.html":{},"classes/UpdateTagsDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["isstring()@isnotempty",{"_index":1209,"title":{},"body":{"classes/EmailScheduleDto.html":{}}}],["isstring()@isnotempty()@minlength(2",{"_index":660,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@isnotempty()@minlength(2)@maxlength(36",{"_index":610,"title":{},"body":{"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{}}}],["isstring()@isnotempty()@minlength(8",{"_index":665,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring(val",{"_index":2083,"title":{},"body":{"miscellaneous/variables.html":{}}}],["isstringfull",{"_index":1821,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["isstringfull(v",{"_index":2060,"title":{},"body":{"miscellaneous/variables.html":{}}}],["isstringfull(val",{"_index":2061,"title":{},"body":{"miscellaneous/variables.html":{}}}],["istenantspecific",{"_index":1672,"title":{},"body":{"classes/User.html":{}}}],["istrue",{"_index":1822,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["isundefined",{"_index":1823,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["isundefined(val",{"_index":2075,"title":{},"body":{"miscellaneous/variables.html":{}}}],["isuserreactedtopost",{"_index":88,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["isvalue",{"_index":1824,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["isvalue(o",{"_index":2055,"title":{},"body":{"miscellaneous/variables.html":{}}}],["isvalue(val",{"_index":2056,"title":{},"body":{"miscellaneous/variables.html":{}}}],["itag",{"_index":609,"title":{"interfaces/ITag.html":{}},"body":{"classes/CreateTagsDto.html":{},"interfaces/ITag.html":{},"classes/Tag.html":{},"classes/UpdateTagsDto.html":{},"coverage.html":{}}}],["items",{"_index":868,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"interfaces/IPaginationResult.html":{},"classes/PaginationParams.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["iuser",{"_index":654,"title":{"interfaces/IUser.html":{}},"body":{"classes/CreateUserDto.html":{},"interfaces/IUser.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"coverage.html":{}}}],["job",{"_index":717,"title":{},"body":{"injectables/CronService.html":{},"injectables/EmailSchedulingService.html":{},"injectables/PersistedCronService.html":{}}}],["job.find",{"_index":1486,"title":{},"body":{"injectables/PersistedCronService.html":{}}}],["job.start",{"_index":775,"title":{},"body":{"injectables/CronService.html":{},"injectables/EmailSchedulingService.html":{}}}],["jobs",{"_index":685,"title":{},"body":{"injectables/CronService.html":{},"injectables/PersistedCronService.html":{}}}],["jobs.foreach((job",{"_index":1488,"title":{},"body":{"injectables/PersistedCronService.html":{}}}],["joi",{"_index":248,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.number().default(3000",{"_index":272,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["joi.object",{"_index":270,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["joi.string",{"_index":274,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["joi.string().required",{"_index":284,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["joi.string().required().default('http://localhost:3000",{"_index":282,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["join",{"_index":1998,"title":{},"body":{"index.html":{}}}],["json",{"_index":623,"title":{},"body":{"classes/CreateTagsDto.html":{},"interfaces/ITag.html":{},"classes/Tag.html":{},"classes/UpdateTagsDto.html":{},"classes/User.html":{}}}],["jsonschema",{"_index":616,"title":{},"body":{"classes/CreateTagsDto.html":{},"interfaces/ITag.html":{},"classes/Tag.html":{},"classes/UpdateTagsDto.html":{},"classes/User.html":{}}}],["jwt",{"_index":1437,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["jwt.strategy",{"_index":409,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwt_access_token_expiration_time",{"_index":2088,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jwtfromrequest",{"_index":1441,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtkey",{"_index":283,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["jwtmodule",{"_index":404,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.registerasync",{"_index":411,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtservice",{"_index":427,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":400,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["k",{"_index":1298,"title":{},"body":{"injectables/ExcludeNullUndefinedInterceptor.html":{}}}],["kamil",{"_index":2005,"title":{},"body":{"index.html":{}}}],["keep",{"_index":1356,"title":{},"body":{"controllers/HealthController.html":{}}}],["key",{"_index":564,"title":{},"body":{"interfaces/BaseRoute.html":{},"injectables/CronService.html":{},"interfaces/CrudOptions.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"guards/RequestGuard.html":{},"miscellaneous/variables.html":{}}}],["keyof",{"_index":1413,"title":{},"body":{"interfaces/IPaginationResult.html":{},"classes/PaginationParams.html":{}}}],["knex",{"_index":1181,"title":{},"body":{"modules/DatabaseModule.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["knexconnection",{"_index":1191,"title":{},"body":{"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["knexsnakecasemappers",{"_index":1182,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["lastname",{"_index":656,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/IUser.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["latitude",{"_index":60,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["legend",{"_index":213,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CronModule.html":{},"modules/EmailModule.html":{},"modules/EmailSchedulingModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["license",{"_index":2011,"title":{},"body":{"index.html":{}}}],["licensed",{"_index":1989,"title":{},"body":{"index.html":{}}}],["limit",{"_index":572,"title":{},"body":{"interfaces/BaseRoute.html":{},"interfaces/CrudOptions.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"dependencies.html":{}}}],["line",{"_index":326,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/BaseModel.html":{},"interfaces/BaseRoute.html":{},"injectables/CronService.html":{},"classes/CrudConfigService.html":{},"interfaces/CrudOptions.html":{},"classes/CrudRoutesFactory.html":{},"classes/CustomQueryBuilder.html":{},"controllers/EmailSchedulingController.html":{},"injectables/ExcludeNullUndefinedInterceptor.html":{},"interfaces/GetManyDefaultResponse.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"interfaces/IBaseModel.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"classes/R.html":{},"guards/RequestGuard.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"classes/UserLoginDto.html":{},"injectables/UsersService.html":{}}}],["link",{"_index":38,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["listing",{"_index":1397,"title":{},"body":{"interfaces/IPaginationResult.html":{},"classes/PaginationParams.html":{}}}],["literal",{"_index":1066,"title":{},"body":{"interfaces/CrudOptions.html":{},"controllers/HealthController.html":{},"interfaces/IPaginationResult.html":{},"interfaces/Rescues.html":{},"classes/Swagger.html":{},"miscellaneous/typealiases.html":{}}}],["literal.type.ts",{"_index":2026,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["load",{"_index":805,"title":{},"body":{"classes/CrudConfigService.html":{},"controllers/HealthController.html":{}}}],["load(config",{"_index":808,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["local",{"_index":1454,"title":{},"body":{"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["local.strategy",{"_index":410,"title":{},"body":{"modules/AuthModule.html":{}}}],["localstrategy",{"_index":401,"title":{"injectables/LocalStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["localstrategy.passwordfield",{"_index":1456,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["localstrategy.usernamefield",{"_index":1455,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["lodash",{"_index":1156,"title":{},"body":{"classes/CustomQueryBuilder.html":{},"dependencies.html":{}}}],["logallcrons",{"_index":705,"title":{},"body":{"injectables/CronService.html":{}}}],["logger",{"_index":693,"title":{},"body":{"injectables/CronService.html":{},"injectables/EmailSchedulingService.html":{},"injectables/PersistedCronService.html":{}}}],["logger(cronservice.name",{"_index":751,"title":{},"body":{"injectables/CronService.html":{}}}],["logger(emailschedulingservice.name",{"_index":1241,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["logger(persistedcronservice.name",{"_index":1483,"title":{},"body":{"injectables/PersistedCronService.html":{}}}],["login",{"_index":338,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/UserLoginDto.html":{}}}],["login(req",{"_index":352,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(user",{"_index":437,"title":{},"body":{"injectables/AuthService.html":{}}}],["logintervals",{"_index":706,"title":{},"body":{"injectables/CronService.html":{}}}],["logtimeouts",{"_index":707,"title":{},"body":{"injectables/CronService.html":{}}}],["longitude",{"_index":61,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["loop",{"_index":1176,"title":{},"body":{"classes/CustomQueryBuilder.html":{}}}],["make",{"_index":1473,"title":{},"body":{"injectables/PersistedCronService.html":{}}}],["many",{"_index":862,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["map",{"_index":1287,"title":{},"body":{"injectables/ExcludeNullUndefinedInterceptor.html":{},"controllers/HealthController.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"dependencies.html":{}}}],["map((_",{"_index":1359,"title":{},"body":{"controllers/HealthController.html":{}}}],["map((name",{"_index":839,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["mapping",{"_index":523,"title":{},"body":{"classes/BaseModel.html":{},"interfaces/IBaseModel.html":{}}}],["match",{"_index":455,"title":{},"body":{"injectables/AuthService.html":{},"classes/User.html":{}}}],["matching",{"_index":132,"title":{},"body":{"interfaces/APIResponse.html":{},"classes/ApiException.html":{},"controllers/AppController.html":{},"interfaces/AppLaunchAction.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseModel.html":{},"interfaces/BaseRoute.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"modules/CronModule.html":{},"injectables/CronService.html":{},"classes/CrudConfigService.html":{},"classes/CrudController.html":{},"interfaces/CrudOptions.html":{},"classes/CrudRoutesFactory.html":{},"classes/CrudService.html":{},"classes/CustomQueryBuilder.html":{},"modules/DatabaseModule.html":{},"modules/EmailModule.html":{},"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"modules/EmailSchedulingModule.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/ExcludeNullUndefinedInterceptor.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"interfaces/IBaseModel.html":{},"interfaces/ICrudService.html":{},"interfaces/IPaginationResult.html":{},"interfaces/ITag.html":{},"interfaces/IUser.html":{},"classes/IsEmailExistsConstraint.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/PaginationParams.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"injectables/PersistedCronService.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"classes/QueryFailedFilter.html":{},"classes/R.html":{},"guards/RequestGuard.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Response.html":{},"guards/ResponseGuard.html":{},"interfaces/Result.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"classes/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateTagsDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/UserLoginDto.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/ValidationFailedFilter.html":{},"interfaces/VerifiedTokenPayload.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["math.ceil(result.total",{"_index":1166,"title":{},"body":{"classes/CustomQueryBuilder.html":{}}}],["math.ceil(total",{"_index":1122,"title":{},"body":{"classes/CrudService.html":{}}}],["maxlength",{"_index":614,"title":{},"body":{"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"interfaces/ITag.html":{},"classes/Tag.html":{},"classes/UpdateTagsDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["maxlength(36",{"_index":648,"title":{},"body":{"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"interfaces/ITag.html":{},"classes/Tag.html":{},"classes/UpdateTagsDto.html":{},"classes/UpdateUserDto.html":{}}}],["maxlimit",{"_index":573,"title":{},"body":{"interfaces/BaseRoute.html":{},"interfaces/CrudOptions.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{}}}],["mb",{"_index":1376,"title":{},"body":{"controllers/HealthController.html":{}}}],["memory",{"_index":1352,"title":{},"body":{"controllers/HealthController.html":{}}}],["memoryhealthindicator",{"_index":1347,"title":{},"body":{"controllers/HealthController.html":{}}}],["merge",{"_index":929,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["mergeoptions",{"_index":928,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["message",{"_index":13,"title":{},"body":{"interfaces/APIResponse.html":{},"classes/ApiException.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"classes/CreateUserDto.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/IPaginationResult.html":{},"classes/PaginationParams.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"classes/QueryFailedFilter.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"guards/ResponseGuard.html":{},"interfaces/Result.html":{},"classes/UpdateUserDto.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{},"classes/ValidationFailedFilter.html":{}}}],["messageevent",{"_index":1342,"title":{},"body":{"controllers/HealthController.html":{}}}],["meta",{"_index":835,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"guards/ResponseGuard.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["metadata",{"_index":831,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"interfaces/IPaginationResult.html":{},"classes/PaginationParams.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"dependencies.html":{}}}],["metadatakey",{"_index":819,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["metadatatoadd",{"_index":986,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["metadatavalue",{"_index":820,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["method",{"_index":538,"title":{},"body":{"interfaces/BaseRoute.html":{},"injectables/CronService.html":{},"classes/CrudConfigService.html":{},"interfaces/CrudOptions.html":{},"classes/CrudRoutesFactory.html":{},"injectables/ExcludeNullUndefinedInterceptor.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"classes/QueryFailedFilter.html":{},"classes/R.html":{},"guards/RequestGuard.html":{},"interfaces/Response.html":{},"guards/ResponseGuard.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/ValidationFailedFilter.html":{}}}],["methods",{"_index":199,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BaseModel.html":{},"classes/CreateTagsDto.html":{},"injectables/CronService.html":{},"classes/CrudConfigService.html":{},"classes/CrudController.html":{},"classes/CrudRoutesFactory.html":{},"classes/CrudService.html":{},"classes/CustomQueryBuilder.html":{},"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/ExcludeNullUndefinedInterceptor.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"interfaces/ICrudService.html":{},"interfaces/ITag.html":{},"classes/IsEmailExistsConstraint.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/PersistedCronService.html":{},"classes/QueryFailedFilter.html":{},"classes/R.html":{},"guards/RequestGuard.html":{},"interfaces/Response.html":{},"guards/ResponseGuard.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"classes/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateTagsDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/ValidationFailedFilter.html":{},"miscellaneous/typealiases.html":{}}}],["metrics",{"_index":1336,"title":{},"body":{"controllers/HealthController.html":{}}}],["metrics.os",{"_index":1382,"title":{},"body":{"controllers/HealthController.html":{}}}],["milliseconds",{"_index":719,"title":{},"body":{"injectables/CronService.html":{},"injectables/TimeoutInterceptor.html":{}}}],["min",{"_index":1402,"title":{},"body":{"interfaces/IPaginationResult.html":{},"classes/PaginationParams.html":{}}}],["min(0",{"_index":1408,"title":{},"body":{"interfaces/IPaginationResult.html":{},"classes/PaginationParams.html":{}}}],["minimum",{"_index":1407,"title":{},"body":{"interfaces/IPaginationResult.html":{},"classes/PaginationParams.html":{}}}],["minlength",{"_index":615,"title":{},"body":{"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"interfaces/ITag.html":{},"classes/Tag.html":{},"classes/UpdateTagsDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["minlength(2",{"_index":647,"title":{},"body":{"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"interfaces/ITag.html":{},"classes/Tag.html":{},"classes/UpdateTagsDto.html":{},"classes/UpdateUserDto.html":{}}}],["minlength(8",{"_index":672,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["minute",{"_index":779,"title":{},"body":{"injectables/CronService.html":{}}}],["miscellaneous",{"_index":1939,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":1988,"title":{},"body":{"index.html":{}}}],["mixed",{"_index":1701,"title":{},"body":{"classes/User.html":{}}}],["mixin",{"_index":505,"title":{},"body":{"classes/BaseModel.html":{},"interfaces/IBaseModel.html":{}}}],["mixin(model",{"_index":513,"title":{},"body":{"classes/BaseModel.html":{},"interfaces/IBaseModel.html":{}}}],["mockedconfigservice",{"_index":1791,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["mockedjwtservice",{"_index":1792,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["mode",{"_index":1980,"title":{},"body":{"index.html":{}}}],["model",{"_index":506,"title":{},"body":{"classes/BaseModel.html":{},"interfaces/BaseRoute.html":{},"classes/CreateTagsDto.html":{},"interfaces/CrudOptions.html":{},"classes/CrudService.html":{},"classes/CustomQueryBuilder.html":{},"modules/DatabaseModule.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/IBaseModel.html":{},"interfaces/ITag.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"classes/Tag.html":{},"injectables/TagsService.html":{},"classes/UpdateTagsDto.html":{},"classes/User.html":{},"injectables/UsersService.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["model.knex(knex",{"_index":1197,"title":{},"body":{"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["model.name",{"_index":1188,"title":{},"body":{"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["modelclass",{"_index":1097,"title":{},"body":{"classes/CrudService.html":{},"classes/IsEmailExistsConstraint.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["modelname",{"_index":908,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["modelobject",{"_index":617,"title":{},"body":{"classes/CreateTagsDto.html":{},"interfaces/ITag.html":{},"classes/Tag.html":{},"classes/UpdateTagsDto.html":{},"classes/User.html":{},"miscellaneous/typealiases.html":{}}}],["modeloptions",{"_index":494,"title":{},"body":{"classes/BaseModel.html":{},"interfaces/IBaseModel.html":{},"classes/Tag.html":{},"classes/User.html":{}}}],["modelproviders",{"_index":1186,"title":{},"body":{"modules/DatabaseModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["models",{"_index":837,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"modules/DatabaseModule.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["models.map((model",{"_index":1187,"title":{},"body":{"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["modeltype",{"_index":910,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["modifier",{"_index":1685,"title":{},"body":{"classes/User.html":{}}}],["modifiers",{"_index":1673,"title":{},"body":{"classes/User.html":{}}}],["module",{"_index":209,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CronModule.html":{},"modules/DatabaseModule.html":{},"modules/EmailModule.html":{},"modules/EmailSchedulingModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CronModule.html":{},"modules/DatabaseModule.html":{},"modules/EmailModule.html":{},"modules/EmailSchedulingModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["modules",{"_index":211,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CronModule.html":{},"modules/DatabaseModule.html":{},"modules/EmailModule.html":{},"modules/EmailSchedulingModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["moment",{"_index":1802,"title":{},"body":{"coverage.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["more",{"_index":1658,"title":{},"body":{"injectables/TimeoutInterceptor.html":{},"index.html":{}}}],["myśliwiec",{"_index":2006,"title":{},"body":{"index.html":{}}}],["n",{"_index":733,"title":{},"body":{"injectables/CronService.html":{}}}],["name",{"_index":116,"title":{},"body":{"interfaces/APIResponse.html":{},"classes/ApiException.html":{},"interfaces/AppLaunchAction.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BaseModel.html":{},"interfaces/BaseRoute.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"classes/CreateTagsDto.html":{},"injectables/CronService.html":{},"classes/CrudConfigService.html":{},"classes/CrudController.html":{},"interfaces/CrudOptions.html":{},"classes/CrudRoutesFactory.html":{},"classes/CrudService.html":{},"classes/CustomQueryBuilder.html":{},"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/ExcludeNullUndefinedInterceptor.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"interfaces/ICrudService.html":{},"interfaces/ITag.html":{},"classes/IsEmailExistsConstraint.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"injectables/PersistedCronService.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"classes/QueryFailedFilter.html":{},"classes/R.html":{},"guards/RequestGuard.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"guards/ResponseGuard.html":{},"interfaces/Result.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"classes/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateTagsDto.html":{},"classes/User.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/ValidationFailedFilter.html":{},"miscellaneous/functions.html":{}}}],["name.trim().split(/\\s",{"_index":1704,"title":{},"body":{"classes/User.html":{}}}],["named",{"_index":721,"title":{},"body":{"injectables/CronService.html":{}}}],["namepart",{"_index":1703,"title":{},"body":{"classes/User.html":{}}}],["namepart.tolowercase",{"_index":1706,"title":{},"body":{"classes/User.html":{}}}],["nativeerror",{"_index":1522,"title":{},"body":{"classes/QueryFailedFilter.html":{}}}],["nest",{"_index":317,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["nestframework",{"_index":2010,"title":{},"body":{"index.html":{}}}],["nestinterceptor",{"_index":1285,"title":{},"body":{"injectables/ExcludeNullUndefinedInterceptor.html":{},"interfaces/Response.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["nestjs",{"_index":1480,"title":{},"body":{"injectables/PersistedCronService.html":{}}}],["nestjs/bull",{"_index":1875,"title":{},"body":{"dependencies.html":{}}}],["nestjs/common",{"_index":26,"title":{},"body":{"interfaces/APIResponse.html":{},"classes/ApiException.html":{},"controllers/AppController.html":{},"interfaces/AppLaunchAction.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/BaseRoute.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"modules/CronModule.html":{},"injectables/CronService.html":{},"classes/CrudConfigService.html":{},"classes/CrudController.html":{},"interfaces/CrudOptions.html":{},"classes/CrudRoutesFactory.html":{},"classes/CrudService.html":{},"modules/DatabaseModule.html":{},"modules/EmailModule.html":{},"controllers/EmailSchedulingController.html":{},"modules/EmailSchedulingModule.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/ExcludeNullUndefinedInterceptor.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"interfaces/IPaginationResult.html":{},"classes/IsEmailExistsConstraint.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/PaginationParams.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"injectables/PersistedCronService.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"classes/QueryFailedFilter.html":{},"classes/R.html":{},"guards/RequestGuard.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Response.html":{},"guards/ResponseGuard.html":{},"interfaces/Result.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UserLoginDto.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/ValidationFailedFilter.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":241,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":1879,"title":{},"body":{"dependencies.html":{}}}],["nestjs/graphql",{"_index":243,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":405,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":1882,"title":{},"body":{"dependencies.html":{}}}],["nestjs/passport",{"_index":360,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/TagsController.html":{},"classes/UserLoginDto.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":1885,"title":{},"body":{"dependencies.html":{}}}],["nestjs/schedule",{"_index":245,"title":{},"body":{"modules/AppModule.html":{},"injectables/CronService.html":{},"injectables/EmailSchedulingService.html":{},"injectables/PersistedCronService.html":{},"dependencies.html":{}}}],["nestjs/serve",{"_index":1889,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":172,"title":{},"body":{"classes/ApiException.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"classes/CrudController.html":{},"controllers/EmailSchedulingController.html":{},"controllers/HealthController.html":{},"interfaces/IPaginationResult.html":{},"interfaces/ITag.html":{},"classes/PaginationParams.html":{},"classes/Tag.html":{},"controllers/TagsController.html":{},"classes/UpdateTagsDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserLoginDto.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["nestjs/swagger/dist/types/swagger",{"_index":545,"title":{},"body":{"interfaces/BaseRoute.html":{},"interfaces/CrudOptions.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{}}}],["nestjs/terminus",{"_index":247,"title":{},"body":{"modules/AppModule.html":{},"controllers/HealthController.html":{},"dependencies.html":{}}}],["new",{"_index":179,"title":{},"body":{"classes/ApiException.html":{},"injectables/AuthService.html":{},"classes/BaseModel.html":{},"injectables/CronService.html":{},"classes/CrudConfigService.html":{},"classes/CrudController.html":{},"classes/CrudRoutesFactory.html":{},"injectables/EmailSchedulingService.html":{},"interfaces/IBaseModel.html":{},"injectables/LocalStrategy.html":{},"injectables/PersistedCronService.html":{},"classes/QueryFailedFilter.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/ValidationFailedFilter.html":{},"coverage.html":{}}}],["next",{"_index":325,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/BaseModel.html":{},"interfaces/BaseRoute.html":{},"injectables/CronService.html":{},"classes/CrudConfigService.html":{},"interfaces/CrudOptions.html":{},"classes/CrudRoutesFactory.html":{},"classes/CustomQueryBuilder.html":{},"controllers/EmailSchedulingController.html":{},"injectables/ExcludeNullUndefinedInterceptor.html":{},"interfaces/GetManyDefaultResponse.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"interfaces/IBaseModel.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"classes/R.html":{},"guards/RequestGuard.html":{},"interfaces/Response.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UserLoginDto.html":{}}}],["next.handle().pipe",{"_index":1300,"title":{},"body":{"injectables/ExcludeNullUndefinedInterceptor.html":{},"injectables/TimeoutInterceptor.html":{}}}],["next.handle().pipe(map((data",{"_index":1565,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["nocontent",{"_index":1581,"title":{},"body":{"guards/ResponseGuard.html":{}}}],["node.js",{"_index":1965,"title":{},"body":{"index.html":{}}}],["node_env",{"_index":273,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["notfounderror",{"_index":1507,"title":{},"body":{"classes/QueryFailedFilter.html":{}}}],["notfoundexception",{"_index":164,"title":{},"body":{"classes/ApiException.html":{},"classes/CrudController.html":{},"injectables/UsersService.html":{}}}],["notfoundexception(`record",{"_index":1054,"title":{},"body":{"classes/CrudController.html":{}}}],["notfoundexception(`user",{"_index":1763,"title":{},"body":{"injectables/UsersService.html":{}}}],["nothing",{"_index":626,"title":{},"body":{"classes/CreateTagsDto.html":{},"interfaces/ITag.html":{},"classes/Tag.html":{},"classes/UpdateTagsDto.html":{},"classes/User.html":{}}}],["notnullviolationerror",{"_index":1505,"title":{},"body":{"classes/QueryFailedFilter.html":{}}}],["npm",{"_index":1975,"title":{},"body":{"index.html":{}}}],["null",{"_index":36,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"classes/BaseModel.html":{},"interfaces/BaseRoute.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"classes/CreateTagsDto.html":{},"interfaces/CrudOptions.html":{},"classes/CustomQueryBuilder.html":{},"injectables/ExcludeNullUndefinedInterceptor.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/IBaseModel.html":{},"interfaces/ITag.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"guards/ResponseGuard.html":{},"interfaces/Result.html":{},"classes/Tag.html":{},"classes/UpdateTagsDto.html":{},"classes/User.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["number",{"_index":18,"title":{},"body":{"interfaces/APIResponse.html":{},"classes/ApiException.html":{},"interfaces/AppLaunchAction.html":{},"classes/BaseModel.html":{},"interfaces/BaseRoute.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"injectables/CronService.html":{},"classes/CrudConfigService.html":{},"classes/CrudController.html":{},"interfaces/CrudOptions.html":{},"classes/CrudRoutesFactory.html":{},"classes/CrudService.html":{},"classes/CustomQueryBuilder.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"controllers/HealthController.html":{},"interfaces/IBaseModel.html":{},"interfaces/ICrudService.html":{},"interfaces/IPaginationResult.html":{},"classes/PaginationParams.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"classes/R.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"classes/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"classes/User.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["number(payload?.exp",{"_index":1444,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["number(payload?.iat",{"_index":1445,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["number(this.config.get('token_expiration",{"_index":450,"title":{},"body":{"injectables/AuthService.html":{}}}],["number.isfinite(val",{"_index":2078,"title":{},"body":{"miscellaneous/variables.html":{}}}],["number.isnan(val",{"_index":2077,"title":{},"body":{"miscellaneous/variables.html":{}}}],["numberoffollowers",{"_index":62,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["numberoffollowing",{"_index":63,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["numberofposts",{"_index":64,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["numberofrescuescompleted",{"_index":65,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["numberofrescuescreated",{"_index":66,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["numberofrescuesinprogress",{"_index":67,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["numberquerybuildertype",{"_index":1136,"title":{},"body":{"classes/CustomQueryBuilder.html":{}}}],["o",{"_index":2074,"title":{},"body":{"miscellaneous/variables.html":{}}}],["oauth20",{"_index":1312,"title":{},"body":{"injectables/GoogleStrategy.html":{},"dependencies.html":{}}}],["object",{"_index":578,"title":{},"body":{"interfaces/BaseRoute.html":{},"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"classes/CrudConfigService.html":{},"interfaces/CrudOptions.html":{},"classes/CrudRoutesFactory.html":{},"classes/CrudService.html":{},"classes/CustomQueryBuilder.html":{},"injectables/ExcludeNullUndefinedInterceptor.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ITag.html":{},"classes/IsEmailExistsConstraint.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"classes/R.html":{},"interfaces/Response.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"classes/Tag.html":{},"injectables/TagsService.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateTagsDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["object.constructor",{"_index":1428,"title":{},"body":{"classes/IsEmailExistsConstraint.html":{},"miscellaneous/variables.html":{}}}],["object.defineproperty(getmanyresponsedto",{"_index":876,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["object.defineproperty(getoneresponsedto",{"_index":881,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["object.entries(value).map(([k",{"_index":1296,"title":{},"body":{"injectables/ExcludeNullUndefinedInterceptor.html":{}}}],["object.fromentries",{"_index":1294,"title":{},"body":{"injectables/ExcludeNullUndefinedInterceptor.html":{}}}],["object.getownpropertynames(val",{"_index":2047,"title":{},"body":{"miscellaneous/variables.html":{}}}],["object.keys(val",{"_index":2048,"title":{},"body":{"miscellaneous/variables.html":{}}}],["objection",{"_index":503,"title":{},"body":{"classes/BaseModel.html":{},"classes/CreateTagsDto.html":{},"classes/CrudService.html":{},"classes/CustomQueryBuilder.html":{},"modules/DatabaseModule.html":{},"interfaces/IBaseModel.html":{},"interfaces/ITag.html":{},"classes/IsEmailExistsConstraint.html":{},"classes/QueryFailedFilter.html":{},"classes/Tag.html":{},"injectables/TagsService.html":{},"classes/UpdateTagsDto.html":{},"classes/User.html":{},"injectables/UsersService.html":{},"classes/ValidationFailedFilter.html":{},"dependencies.html":{},"miscellaneous/typealiases.html":{}}}],["objection.fetchgraphoptions",{"_index":500,"title":{},"body":{"classes/BaseModel.html":{},"interfaces/IBaseModel.html":{},"classes/Tag.html":{},"classes/User.html":{}}}],["objectliteral",{"_index":2024,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["objkeys",{"_index":815,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["objkeys(swaggermodels",{"_index":838,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["observable",{"_index":1282,"title":{},"body":{"injectables/ExcludeNullUndefinedInterceptor.html":{},"controllers/HealthController.html":{},"guards/RequestGuard.html":{},"interfaces/Response.html":{},"guards/ResponseGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["observer",{"_index":1563,"title":{},"body":{"interfaces/Response.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["occurrence",{"_index":1267,"title":{},"body":{"injectables/ExcludeNullUndefinedInterceptor.html":{}}}],["offset",{"_index":1172,"title":{},"body":{"classes/CustomQueryBuilder.html":{}}}],["ok",{"_index":766,"title":{},"body":{"injectables/CronService.html":{}}}],["onapplicationbootstrap",{"_index":1476,"title":{},"body":{"injectables/PersistedCronService.html":{}}}],["onapplicationshutdown",{"_index":232,"title":{},"body":{"modules/AppModule.html":{},"controllers/HealthController.html":{}}}],["onapplicationshutdown(signal",{"_index":233,"title":{},"body":{"modules/AppModule.html":{},"controllers/HealthController.html":{}}}],["once",{"_index":691,"title":{},"body":{"injectables/CronService.html":{}}}],["one",{"_index":842,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudController.html":{},"classes/CrudRoutesFactory.html":{},"classes/CrudService.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["one.name",{"_index":843,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["oneof",{"_index":863,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["onlycount",{"_index":1140,"title":{},"body":{"classes/CustomQueryBuilder.html":{}}}],["onmoduledestroy",{"_index":306,"title":{},"body":{"modules/AppModule.html":{}}}],["onmoduleinit",{"_index":238,"title":{},"body":{"modules/AppModule.html":{},"controllers/HealthController.html":{}}}],["onw",{"_index":1108,"title":{},"body":{"classes/CrudService.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["op",{"_index":342,"title":{},"body":{"controllers/AuthController.html":{},"classes/UserLoginDto.html":{}}}],["open",{"_index":1990,"title":{},"body":{"index.html":{}}}],["opt",{"_index":497,"title":{},"body":{"classes/BaseModel.html":{},"classes/Tag.html":{},"classes/User.html":{}}}],["optional",{"_index":9,"title":{},"body":{"interfaces/APIResponse.html":{},"classes/ApiException.html":{},"interfaces/AppLaunchAction.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BaseModel.html":{},"classes/CreateUserDto.html":{},"injectables/CronService.html":{},"classes/CrudConfigService.html":{},"classes/CrudController.html":{},"interfaces/CrudOptions.html":{},"classes/CrudRoutesFactory.html":{},"classes/CrudService.html":{},"classes/CustomQueryBuilder.html":{},"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/ExcludeNullUndefinedInterceptor.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"interfaces/IBaseModel.html":{},"interfaces/ICrudService.html":{},"interfaces/IPaginationResult.html":{},"interfaces/IUser.html":{},"classes/IsEmailExistsConstraint.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/PaginationParams.html":{},"interfaces/ParamOption.html":{},"injectables/PersistedCronService.html":{},"classes/QueryFailedFilter.html":{},"classes/R.html":{},"guards/RequestGuard.html":{},"guards/ResponseGuard.html":{},"interfaces/Result.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"classes/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/ValidationFailedFilter.html":{},"miscellaneous/functions.html":{}}}],["options",{"_index":499,"title":{},"body":{"classes/BaseModel.html":{},"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"injectables/EmailService.html":{},"interfaces/IBaseModel.html":{},"classes/IsEmailExistsConstraint.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"classes/Tag.html":{},"classes/User.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["order",{"_index":1008,"title":{},"body":{"classes/CrudController.html":{},"classes/CrudService.html":{},"interfaces/IPaginationResult.html":{},"classes/PaginationParams.html":{}}}],["ordertype",{"_index":1403,"title":{},"body":{"interfaces/IPaginationResult.html":{},"classes/PaginationParams.html":{},"miscellaneous/enumerations.html":{}}}],["os",{"_index":1348,"title":{},"body":{"controllers/HealthController.html":{}}}],["os.loadavg",{"_index":1381,"title":{},"body":{"controllers/HealthController.html":{}}}],["out",{"_index":227,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CronModule.html":{},"modules/EmailModule.html":{},"modules/EmailSchedulingModule.html":{},"injectables/PersistedCronService.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["override",{"_index":539,"title":{},"body":{"interfaces/BaseRoute.html":{},"classes/CrudConfigService.html":{},"interfaces/CrudOptions.html":{},"classes/CrudRoutesFactory.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["override.ts",{"_index":1264,"title":{},"body":{"injectables/ExcludeNullUndefinedInterceptor.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["override.ts:51",{"_index":1272,"title":{},"body":{"injectables/ExcludeNullUndefinedInterceptor.html":{}}}],["overview",{"_index":2017,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["ownpage",{"_index":89,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["p",{"_index":1412,"title":{},"body":{"interfaces/IPaginationResult.html":{},"classes/PaginationParams.html":{}}}],["pack",{"_index":591,"title":{},"body":{"interfaces/BaseRoute.html":{},"interfaces/CrudOptions.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{}}}],["package",{"_index":1873,"title":{"dependencies.html":{}},"body":{}}],["page",{"_index":14,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/BaseRoute.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"classes/CrudConfigService.html":{},"interfaces/CrudOptions.html":{},"classes/CrudRoutesFactory.html":{},"classes/CrudService.html":{},"classes/CustomQueryBuilder.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/IPaginationResult.html":{},"classes/PaginationParams.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"classes/R.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["pagecount",{"_index":15,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/BaseRoute.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"classes/CrudConfigService.html":{},"interfaces/CrudOptions.html":{},"classes/CrudRoutesFactory.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"classes/R.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["pagequerybuildertype",{"_index":1137,"title":{},"body":{"classes/CustomQueryBuilder.html":{}}}],["pagesize",{"_index":1118,"title":{},"body":{"classes/CrudService.html":{},"interfaces/IPaginationResult.html":{},"classes/PaginationParams.html":{}}}],["paginate",{"_index":1141,"title":{},"body":{"classes/CustomQueryBuilder.html":{}}}],["paginate(page",{"_index":1152,"title":{},"body":{"classes/CustomQueryBuilder.html":{}}}],["paginated",{"_index":860,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/CrudService.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["paginatedfindall",{"_index":1095,"title":{},"body":{"classes/CrudService.html":{},"interfaces/ICrudService.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["paginatedfindall(paginationparams",{"_index":1110,"title":{},"body":{"classes/CrudService.html":{},"interfaces/ICrudService.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["pagination",{"_index":520,"title":{},"body":{"classes/BaseModel.html":{},"classes/CrudController.html":{},"classes/CrudService.html":{},"classes/CustomQueryBuilder.html":{},"interfaces/IBaseModel.html":{},"interfaces/ICrudService.html":{},"interfaces/IPaginationResult.html":{},"classes/PaginationParams.html":{}}}],["paginationparams",{"_index":1019,"title":{"classes/PaginationParams.html":{}},"body":{"classes/CrudController.html":{},"classes/CrudService.html":{},"interfaces/ICrudService.html":{},"interfaces/IPaginationResult.html":{},"classes/PaginationParams.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["paging",{"_index":1049,"title":{},"body":{"classes/CrudController.html":{},"classes/CrudService.html":{},"interfaces/IPaginationResult.html":{},"classes/PaginationParams.html":{}}}],["param",{"_index":771,"title":{},"body":{"injectables/CronService.html":{},"classes/CrudController.html":{},"classes/CrudService.html":{},"classes/CustomQueryBuilder.html":{},"injectables/ExcludeNullUndefinedInterceptor.html":{},"controllers/HealthController.html":{},"classes/QueryFailedFilter.html":{},"guards/RequestGuard.html":{},"interfaces/Response.html":{},"guards/ResponseGuard.html":{},"controllers/TagsController.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/ValidationFailedFilter.html":{}}}],["param('id",{"_index":1629,"title":{},"body":{"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["parameter",{"_index":313,"title":{},"body":{"modules/AppModule.html":{}}}],["parameters",{"_index":149,"title":{},"body":{"classes/ApiException.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BaseModel.html":{},"injectables/CronService.html":{},"classes/CrudConfigService.html":{},"classes/CrudController.html":{},"classes/CrudRoutesFactory.html":{},"classes/CrudService.html":{},"classes/CustomQueryBuilder.html":{},"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/ExcludeNullUndefinedInterceptor.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"interfaces/ICrudService.html":{},"classes/IsEmailExistsConstraint.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/PersistedCronService.html":{},"classes/QueryFailedFilter.html":{},"classes/R.html":{},"guards/RequestGuard.html":{},"guards/ResponseGuard.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"classes/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/ValidationFailedFilter.html":{},"miscellaneous/functions.html":{}}}],["paramoption",{"_index":557,"title":{"interfaces/ParamOption.html":{}},"body":{"interfaces/BaseRoute.html":{},"interfaces/CrudOptions.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"coverage.html":{}}}],["params",{"_index":571,"title":{},"body":{"interfaces/BaseRoute.html":{},"classes/CrudConfigService.html":{},"interfaces/CrudOptions.html":{},"classes/CrudRoutesFactory.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/IPaginationResult.html":{},"classes/PaginationParams.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["paramsoptions",{"_index":563,"title":{"interfaces/ParamsOptions.html":{}},"body":{"interfaces/BaseRoute.html":{},"interfaces/CrudOptions.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"coverage.html":{}}}],["parentheses",{"_index":1698,"title":{},"body":{"classes/User.html":{}}}],["parseint(val",{"_index":1410,"title":{},"body":{"interfaces/IPaginationResult.html":{},"classes/PaginationParams.html":{}}}],["parseintpipe",{"_index":1038,"title":{},"body":{"classes/CrudController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["partial",{"_index":806,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudController.html":{},"classes/CrudRoutesFactory.html":{},"classes/CrudService.html":{},"interfaces/ICrudService.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["partially",{"_index":1693,"title":{},"body":{"classes/User.html":{}}}],["partialmodelobject",{"_index":618,"title":{},"body":{"classes/CreateTagsDto.html":{},"interfaces/ITag.html":{},"classes/Tag.html":{},"classes/UpdateTagsDto.html":{},"classes/User.html":{},"miscellaneous/typealiases.html":{}}}],["partialtagshape",{"_index":646,"title":{},"body":{"classes/CreateTagsDto.html":{},"interfaces/ITag.html":{},"classes/Tag.html":{},"classes/UpdateTagsDto.html":{},"miscellaneous/typealiases.html":{}}}],["partialtype",{"_index":612,"title":{},"body":{"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"interfaces/ITag.html":{},"classes/Tag.html":{},"classes/UpdateTagsDto.html":{},"classes/UpdateUserDto.html":{}}}],["partialtype(createtagsdto",{"_index":650,"title":{},"body":{"classes/CreateTagsDto.html":{},"interfaces/ITag.html":{},"classes/Tag.html":{},"classes/UpdateTagsDto.html":{}}}],["partialtype(createuserdto",{"_index":674,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["partialusershape",{"_index":1731,"title":{},"body":{"classes/User.html":{},"miscellaneous/typealiases.html":{}}}],["passport",{"_index":1311,"title":{},"body":{"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":406,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":1310,"title":{},"body":{"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passportstrategy(strategy",{"_index":1314,"title":{},"body":{"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passreqtocallback",{"_index":1316,"title":{},"body":{"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["password",{"_index":374,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BaseModel.html":{},"classes/CreateUserDto.html":{},"interfaces/IBaseModel.html":{},"interfaces/IUser.html":{},"injectables/LocalStrategy.html":{},"classes/Tag.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/UserLoginDto.html":{},"injectables/UsersService.html":{}}}],["passwordfield",{"_index":1448,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["past",{"_index":769,"title":{},"body":{"injectables/CronService.html":{}}}],["patch(input",{"_index":1132,"title":{},"body":{"classes/CrudService.html":{}}}],["path",{"_index":140,"title":{},"body":{"classes/ApiException.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"interfaces/BaseRoute.html":{},"classes/CrudConfigService.html":{},"interfaces/CrudOptions.html":{},"classes/CrudRoutesFactory.html":{},"controllers/EmailSchedulingController.html":{},"interfaces/GetManyDefaultResponse.html":{},"controllers/HealthController.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"classes/QueryFailedFilter.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"controllers/TagsController.html":{},"classes/UserLoginDto.html":{},"controllers/UsersController.html":{},"classes/ValidationFailedFilter.html":{},"miscellaneous/functions.html":{}}}],["payload",{"_index":1433,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload?.email",{"_index":1446,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["perpage",{"_index":1153,"title":{},"body":{"classes/CustomQueryBuilder.html":{}}}],["persisted",{"_index":682,"title":{},"body":{"modules/CronModule.html":{}}}],["persistedcronservice",{"_index":678,"title":{"injectables/PersistedCronService.html":{}},"body":{"modules/CronModule.html":{},"injectables/PersistedCronService.html":{},"coverage.html":{},"overview.html":{}}}],["pg",{"_index":1196,"title":{},"body":{"modules/DatabaseModule.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["photos",{"_index":464,"title":{},"body":{"injectables/AuthService.html":{}}}],["pidusage",{"_index":1349,"title":{},"body":{"controllers/HealthController.html":{},"dependencies.html":{}}}],["pieces",{"_index":1690,"title":{},"body":{"classes/User.html":{}}}],["pipeline",{"_index":1545,"title":{},"body":{"guards/RequestGuard.html":{},"guards/ResponseGuard.html":{}}}],["places",{"_index":1711,"title":{},"body":{"classes/User.html":{}}}],["playground",{"_index":294,"title":{},"body":{"modules/AppModule.html":{}}}],["please",{"_index":1999,"title":{},"body":{"index.html":{}}}],["port",{"_index":271,"title":{},"body":{"modules/AppModule.html":{},"injectables/GoogleStrategy.html":{},"miscellaneous/variables.html":{}}}],["post",{"_index":357,"title":{},"body":{"controllers/AuthController.html":{},"classes/CrudController.html":{},"controllers/EmailSchedulingController.html":{},"controllers/TagsController.html":{},"classes/UserLoginDto.html":{},"controllers/UsersController.html":{}}}],["post(':id",{"_index":1059,"title":{},"body":{"classes/CrudController.html":{}}}],["post('login",{"_index":380,"title":{},"body":{"controllers/AuthController.html":{},"classes/UserLoginDto.html":{}}}],["post('schedule",{"_index":1219,"title":{},"body":{"controllers/EmailSchedulingController.html":{}}}],["postby",{"_index":90,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["postedby",{"_index":108,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["postedbyuser",{"_index":84,"title":{"interfaces/PostedByUser.html":{}},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{},"coverage.html":{}}}],["postedminago",{"_index":109,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["postid",{"_index":86,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["postimage",{"_index":91,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["posttime",{"_index":92,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["posttype",{"_index":82,"title":{"interfaces/PostType.html":{}},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{},"coverage.html":{}}}],["posttypeid",{"_index":83,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["postvideo",{"_index":93,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["primary",{"_index":561,"title":{},"body":{"interfaces/BaseRoute.html":{},"interfaces/CrudOptions.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{}}}],["primaryemail",{"_index":465,"title":{},"body":{"injectables/AuthService.html":{}}}],["private",{"_index":912,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"injectables/EmailService.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["proceed",{"_index":1549,"title":{},"body":{"guards/RequestGuard.html":{},"guards/ResponseGuard.html":{}}}],["process.env.database_url",{"_index":1193,"title":{},"body":{"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["process.env.host}:${process.env.port}/#/auth/register",{"_index":395,"title":{},"body":{"controllers/AuthController.html":{},"classes/UserLoginDto.html":{}}}],["process.env.host}:${process.env.port}/#/sign",{"_index":393,"title":{},"body":{"controllers/AuthController.html":{},"classes/UserLoginDto.html":{}}}],["process.env.node_env",{"_index":389,"title":{},"body":{"controllers/AuthController.html":{},"classes/UserLoginDto.html":{}}}],["process.pid",{"_index":1373,"title":{},"body":{"controllers/HealthController.html":{}}}],["production",{"_index":277,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/UserLoginDto.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["profile",{"_index":441,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GoogleStrategy.html":{}}}],["profileid",{"_index":117,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["profileimage",{"_index":68,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["profileimageurl",{"_index":118,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["progressive",{"_index":1964,"title":{},"body":{"index.html":{}}}],["project",{"_index":1991,"title":{},"body":{"index.html":{}}}],["promise",{"_index":316,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/CrudController.html":{},"classes/CrudService.html":{},"classes/CustomQueryBuilder.html":{},"interfaces/ICrudService.html":{},"guards/RequestGuard.html":{},"guards/ResponseGuard.html":{},"classes/UserLoginDto.html":{},"miscellaneous/functions.html":{}}}],["promise.reject",{"_index":452,"title":{},"body":{"injectables/AuthService.html":{},"classes/CrudController.html":{},"injectables/LocalStrategy.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["promise.reject(new",{"_index":458,"title":{},"body":{"injectables/AuthService.html":{},"classes/CrudService.html":{},"injectables/GoogleStrategy.html":{}}}],["promise.resolve",{"_index":1493,"title":{},"body":{"injectables/PersistedCronService.html":{},"miscellaneous/variables.html":{}}}],["proper",{"_index":1009,"title":{},"body":{"classes/CrudController.html":{},"classes/CrudService.html":{}}}],["properties",{"_index":8,"title":{},"body":{"interfaces/APIResponse.html":{},"classes/ApiException.html":{},"interfaces/AppLaunchAction.html":{},"classes/BaseModel.html":{},"interfaces/BaseRoute.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"injectables/CronService.html":{},"classes/CrudConfigService.html":{},"interfaces/CrudOptions.html":{},"classes/CrudRoutesFactory.html":{},"classes/CustomQueryBuilder.html":{},"classes/EmailScheduleDto.html":{},"injectables/EmailSchedulingService.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/IBaseModel.html":{},"interfaces/IPaginationResult.html":{},"interfaces/ITag.html":{},"interfaces/IUser.html":{},"injectables/LocalStrategy.html":{},"classes/PaginationParams.html":{},"interfaces/ParamOption.html":{},"injectables/PersistedCronService.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Response.html":{},"interfaces/Result.html":{},"classes/Tag.html":{},"classes/UpdateTagsDto.html":{},"classes/User.html":{},"classes/UserLoginDto.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{},"interfaces/VerifiedTokenPayload.html":{},"miscellaneous/typealiases.html":{}}}],["propertydecorator",{"_index":599,"title":{},"body":{"interfaces/BaseRoute.html":{},"interfaces/CrudOptions.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"miscellaneous/functions.html":{}}}],["propertykey",{"_index":601,"title":{},"body":{"interfaces/BaseRoute.html":{},"classes/CrudConfigService.html":{},"interfaces/CrudOptions.html":{},"classes/CrudRoutesFactory.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["propertyname",{"_index":1427,"title":{},"body":{"classes/IsEmailExistsConstraint.html":{},"miscellaneous/variables.html":{}}}],["protected",{"_index":894,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudController.html":{},"classes/CrudRoutesFactory.html":{},"classes/CrudService.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["provide",{"_index":993,"title":{},"body":{"classes/CrudController.html":{},"classes/CrudService.html":{},"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["provided",{"_index":1024,"title":{},"body":{"classes/CrudController.html":{}}}],["providers",{"_index":216,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CronModule.html":{},"modules/DatabaseModule.html":{},"modules/EmailModule.html":{},"modules/EmailSchedulingModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["provides",{"_index":1281,"title":{},"body":{"injectables/ExcludeNullUndefinedInterceptor.html":{},"guards/RequestGuard.html":{},"interfaces/Response.html":{},"guards/ResponseGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["providing",{"_index":1275,"title":{},"body":{"injectables/ExcludeNullUndefinedInterceptor.html":{},"interfaces/Response.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["provision",{"_index":279,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["put",{"_index":1039,"title":{},"body":{"classes/CrudController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["put(':id",{"_index":1063,"title":{},"body":{"classes/CrudController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["q.orwhereraw('lower",{"_index":1705,"title":{},"body":{"classes/User.html":{}}}],["query",{"_index":516,"title":{},"body":{"classes/BaseModel.html":{},"interfaces/BaseRoute.html":{},"classes/CrudConfigService.html":{},"classes/CrudController.html":{},"interfaces/CrudOptions.html":{},"classes/CrudRoutesFactory.html":{},"classes/CrudService.html":{},"classes/CustomQueryBuilder.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/IBaseModel.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"classes/QueryFailedFilter.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"classes/User.html":{},"controllers/UsersController.html":{}}}],["query.offset(offset).limit(size",{"_index":1175,"title":{},"body":{"classes/CustomQueryBuilder.html":{}}}],["query.where((q",{"_index":1702,"title":{},"body":{"classes/User.html":{}}}],["query?.alwayspaginate",{"_index":859,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["querybuilder",{"_index":479,"title":{},"body":{"classes/BaseModel.html":{},"classes/CustomQueryBuilder.html":{},"interfaces/IBaseModel.html":{},"classes/Tag.html":{},"classes/User.html":{}}}],["querybuildertype",{"_index":517,"title":{},"body":{"classes/BaseModel.html":{},"interfaces/IBaseModel.html":{}}}],["querycontext",{"_index":495,"title":{},"body":{"classes/BaseModel.html":{},"interfaces/IBaseModel.html":{},"classes/Tag.html":{},"classes/User.html":{}}}],["queryfailedfilter",{"_index":1494,"title":{"classes/QueryFailedFilter.html":{}},"body":{"classes/QueryFailedFilter.html":{},"coverage.html":{}}}],["r",{"_index":817,"title":{"classes/R.html":{}},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"coverage.html":{}}}],["r.get(swaggerconst.api_extra_models",{"_index":851,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["r.get(swaggerconst.decorators.api_response",{"_index":853,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["r.set",{"_index":845,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["r.set('crud_options_metadata",{"_index":957,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["r.set('method",{"_index":827,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["r.set('path",{"_index":825,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["r.set(swaggerconst.decorators.api_response",{"_index":849,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["r.setroute(route",{"_index":979,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["range",{"_index":1917,"title":{},"body":{"dependencies.html":{}}}],["rate",{"_index":1907,"title":{},"body":{"dependencies.html":{}}}],["raw",{"_index":504,"title":{},"body":{"classes/BaseModel.html":{},"classes/CrudService.html":{},"interfaces/IBaseModel.html":{}}}],["raw('current_timestamp",{"_index":534,"title":{},"body":{"classes/BaseModel.html":{},"classes/CrudService.html":{},"interfaces/IBaseModel.html":{}}}],["reactionscount",{"_index":94,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["read",{"_index":2000,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":371,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CrudController.html":{},"classes/CrudService.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"interfaces/IPaginationResult.html":{},"classes/IsEmailExistsConstraint.html":{},"injectables/JwtStrategy.html":{},"classes/PaginationParams.html":{},"injectables/TagsService.html":{},"classes/User.html":{},"classes/UserLoginDto.html":{},"injectables/UsersService.html":{}}}],["reassign",{"_index":1162,"title":{},"body":{"classes/CustomQueryBuilder.html":{},"controllers/HealthController.html":{},"injectables/UsersService.html":{}}}],["receive",{"_index":1004,"title":{},"body":{"classes/CrudController.html":{},"classes/CrudService.html":{}}}],["receives",{"_index":302,"title":{},"body":{"modules/AppModule.html":{}}}],["recipient",{"_index":1208,"title":{},"body":{"classes/EmailScheduleDto.html":{}}}],["record",{"_index":435,"title":{},"body":{"injectables/AuthService.html":{},"classes/BaseModel.html":{},"classes/CrudConfigService.html":{},"classes/CrudController.html":{},"classes/CrudRoutesFactory.html":{},"interfaces/IBaseModel.html":{},"classes/R.html":{},"guards/RequestGuard.html":{},"guards/ResponseGuard.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"classes/Tag.html":{},"classes/User.html":{}}}],["record'})@apiresponse({status",{"_index":1013,"title":{},"body":{"classes/CrudController.html":{}}}],["record'})@delete(':id",{"_index":1031,"title":{},"body":{"classes/CrudController.html":{}}}],["records",{"_index":1047,"title":{},"body":{"classes/CrudController.html":{},"classes/CustomQueryBuilder.html":{}}}],["records'})@apiresponse({status",{"_index":1020,"title":{},"body":{"classes/CrudController.html":{}}}],["records'})@get",{"_index":1021,"title":{},"body":{"classes/CrudController.html":{}}}],["recuescompletionneeded",{"_index":78,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["recurring",{"_index":688,"title":{},"body":{"injectables/CronService.html":{}}}],["recursively",{"_index":1289,"title":{},"body":{"injectables/ExcludeNullUndefinedInterceptor.html":{},"miscellaneous/functions.html":{}}}],["recursivelystripnullvalues",{"_index":1856,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["recursivelystripnullvalues(v",{"_index":1299,"title":{},"body":{"injectables/ExcludeNullUndefinedInterceptor.html":{}}}],["recursivelystripnullvalues(value",{"_index":1292,"title":{},"body":{"injectables/ExcludeNullUndefinedInterceptor.html":{},"miscellaneous/functions.html":{}}}],["ref",{"_index":864,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["reference",{"_index":1280,"title":{},"body":{"injectables/ExcludeNullUndefinedInterceptor.html":{},"interfaces/Response.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["reflect",{"_index":1929,"title":{},"body":{"dependencies.html":{}}}],["reflect.definemetadata(metadatakey",{"_index":821,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["reflect.getmetadata(metadatakey",{"_index":822,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["refreshtoken",{"_index":440,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GoogleStrategy.html":{}}}],["registerdecorator",{"_index":1423,"title":{},"body":{"classes/IsEmailExistsConstraint.html":{},"miscellaneous/variables.html":{}}}],["registered",{"_index":305,"title":{},"body":{"modules/AppModule.html":{}}}],["regular",{"_index":684,"title":{},"body":{"injectables/CronService.html":{}}}],["rejected",{"_index":321,"title":{},"body":{"modules/AppModule.html":{}}}],["relation",{"_index":522,"title":{},"body":{"classes/BaseModel.html":{},"interfaces/IBaseModel.html":{}}}],["relationexpression",{"_index":507,"title":{},"body":{"classes/BaseModel.html":{},"interfaces/IBaseModel.html":{}}}],["remove",{"_index":1000,"title":{},"body":{"classes/CrudController.html":{},"classes/CrudService.html":{},"interfaces/ICrudService.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["remove(@param('id",{"_index":1057,"title":{},"body":{"classes/CrudController.html":{}}}],["remove(id",{"_index":1028,"title":{},"body":{"classes/CrudController.html":{},"classes/CrudService.html":{},"interfaces/ICrudService.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["replace",{"_index":582,"title":{},"body":{"interfaces/BaseRoute.html":{},"interfaces/CrudOptions.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{}}}],["replaceonebase",{"_index":553,"title":{},"body":{"interfaces/BaseRoute.html":{},"interfaces/CrudOptions.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"miscellaneous/typealiases.html":{}}}],["repository",{"_index":1973,"title":{},"body":{"index.html":{}}}],["representing",{"_index":1283,"title":{},"body":{"injectables/ExcludeNullUndefinedInterceptor.html":{},"interfaces/Response.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["req",{"_index":351,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/UserLoginDto.html":{}}}],["req.user",{"_index":390,"title":{},"body":{"controllers/AuthController.html":{},"classes/UserLoginDto.html":{}}}],["req.user.token",{"_index":391,"title":{},"body":{"controllers/AuthController.html":{},"classes/UserLoginDto.html":{}}}],["request",{"_index":190,"title":{},"body":{"classes/ApiException.html":{},"controllers/AuthController.html":{},"injectables/GoogleStrategy.html":{},"classes/QueryFailedFilter.html":{},"guards/RequestGuard.html":{},"guards/ResponseGuard.html":{},"injectables/TimeoutInterceptor.html":{},"classes/UserLoginDto.html":{},"classes/ValidationFailedFilter.html":{},"miscellaneous/variables.html":{}}}],["request.all",{"_index":1561,"title":{},"body":{"guards/RequestGuard.html":{}}}],["request.body",{"_index":1553,"title":{},"body":{"guards/RequestGuard.html":{}}}],["request.params",{"_index":1554,"title":{},"body":{"guards/RequestGuard.html":{}}}],["request.query",{"_index":1552,"title":{},"body":{"guards/RequestGuard.html":{}}}],["request.url",{"_index":1524,"title":{},"body":{"classes/QueryFailedFilter.html":{},"classes/ValidationFailedFilter.html":{}}}],["requestguard",{"_index":1532,"title":{"guards/RequestGuard.html":{}},"body":{"guards/RequestGuard.html":{},"coverage.html":{}}}],["requestmethod",{"_index":541,"title":{},"body":{"interfaces/BaseRoute.html":{},"classes/CrudConfigService.html":{},"interfaces/CrudOptions.html":{},"classes/CrudRoutesFactory.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["requestmethod.get",{"_index":927,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["requesttimeoutexception",{"_index":1660,"title":{},"body":{"injectables/TimeoutInterceptor.html":{}}}],["require",{"_index":590,"title":{},"body":{"interfaces/BaseRoute.html":{},"interfaces/CrudOptions.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{}}}],["require(path",{"_index":592,"title":{},"body":{"interfaces/BaseRoute.html":{},"interfaces/CrudOptions.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{}}}],["require,@typescript",{"_index":586,"title":{},"body":{"interfaces/BaseRoute.html":{},"interfaces/CrudOptions.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{}}}],["required",{"_index":275,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateTagsDto.html":{},"interfaces/ITag.html":{},"classes/Tag.html":{},"classes/UpdateTagsDto.html":{},"classes/User.html":{},"miscellaneous/variables.html":{}}}],["requires,import/no",{"_index":588,"title":{},"body":{"interfaces/BaseRoute.html":{},"interfaces/CrudOptions.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{}}}],["res",{"_index":347,"title":{},"body":{"controllers/AuthController.html":{},"classes/UserLoginDto.html":{}}}],["res.redirect",{"_index":392,"title":{},"body":{"controllers/AuthController.html":{},"classes/UserLoginDto.html":{}}}],["rescuedate",{"_index":110,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["rescuedpetname",{"_index":112,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["rescueid",{"_index":103,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["rescuelists",{"_index":122,"title":{"interfaces/RescueLists.html":{}},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{},"coverage.html":{}}}],["rescuelocality",{"_index":113,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["rescuer",{"_index":69,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["rescuers",{"_index":114,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["rescues",{"_index":102,"title":{"interfaces/Rescues.html":{}},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{},"coverage.html":{}}}],["rescuestatus",{"_index":120,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["reset",{"_index":226,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CronModule.html":{},"modules/EmailModule.html":{},"modules/EmailSchedulingModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["resolved",{"_index":320,"title":{},"body":{"modules/AppModule.html":{}}}],["resourcename",{"_index":873,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["resourcename}responsedto",{"_index":882,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["response",{"_index":40,"title":{"interfaces/Response.html":{}},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"injectables/ExcludeNullUndefinedInterceptor.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/IPaginationResult.html":{},"classes/PaginationParams.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"classes/QueryFailedFilter.html":{},"classes/R.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Response.html":{},"guards/ResponseGuard.html":{},"interfaces/Result.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{},"classes/ValidationFailedFilter.html":{},"coverage.html":{}}}],["response.error",{"_index":1585,"title":{},"body":{"guards/ResponseGuard.html":{}}}],["response.nocontent",{"_index":1589,"title":{},"body":{"guards/ResponseGuard.html":{}}}],["response.status(204).end",{"_index":1582,"title":{},"body":{"guards/ResponseGuard.html":{}}}],["response.status(status).json",{"_index":1523,"title":{},"body":{"classes/QueryFailedFilter.html":{},"guards/ResponseGuard.html":{},"classes/ValidationFailedFilter.html":{}}}],["response.success",{"_index":1586,"title":{},"body":{"guards/ResponseGuard.html":{}}}],["response.withmeta",{"_index":1587,"title":{},"body":{"guards/ResponseGuard.html":{}}}],["responseguard",{"_index":1566,"title":{"guards/ResponseGuard.html":{}},"body":{"guards/ResponseGuard.html":{},"coverage.html":{}}}],["restarts",{"_index":1470,"title":{},"body":{"injectables/PersistedCronService.html":{}}}],["restored",{"_index":1472,"title":{},"body":{"injectables/PersistedCronService.html":{}}}],["restricted",{"_index":1556,"title":{},"body":{"guards/RequestGuard.html":{}}}],["result",{"_index":37,"title":{"interfaces/Result.html":{}},"body":{"interfaces/APIResponse.html":{},"classes/ApiException.html":{},"controllers/AppController.html":{},"interfaces/AppLaunchAction.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseModel.html":{},"interfaces/BaseRoute.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"modules/CronModule.html":{},"injectables/CronService.html":{},"classes/CrudConfigService.html":{},"classes/CrudController.html":{},"interfaces/CrudOptions.html":{},"classes/CrudRoutesFactory.html":{},"classes/CrudService.html":{},"classes/CustomQueryBuilder.html":{},"modules/DatabaseModule.html":{},"modules/EmailModule.html":{},"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"modules/EmailSchedulingModule.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/ExcludeNullUndefinedInterceptor.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"interfaces/IBaseModel.html":{},"interfaces/ICrudService.html":{},"interfaces/IPaginationResult.html":{},"interfaces/ITag.html":{},"interfaces/IUser.html":{},"classes/IsEmailExistsConstraint.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/PaginationParams.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"injectables/PersistedCronService.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"classes/QueryFailedFilter.html":{},"classes/R.html":{},"guards/RequestGuard.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Response.html":{},"guards/ResponseGuard.html":{},"interfaces/Result.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"classes/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateTagsDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/UserLoginDto.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/ValidationFailedFilter.html":{},"interfaces/VerifiedTokenPayload.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["result.results",{"_index":1168,"title":{},"body":{"classes/CustomQueryBuilder.html":{}}}],["result.total",{"_index":1167,"title":{},"body":{"classes/CustomQueryBuilder.html":{}}}],["result[0].c",{"_index":1170,"title":{},"body":{"classes/CustomQueryBuilder.html":{}}}],["results",{"_index":28,"title":{},"body":{"interfaces/APIResponse.html":{},"classes/ApiException.html":{},"controllers/AppController.html":{},"interfaces/AppLaunchAction.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseModel.html":{},"interfaces/BaseRoute.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"modules/CronModule.html":{},"injectables/CronService.html":{},"classes/CrudConfigService.html":{},"classes/CrudController.html":{},"interfaces/CrudOptions.html":{},"classes/CrudRoutesFactory.html":{},"classes/CrudService.html":{},"classes/CustomQueryBuilder.html":{},"modules/DatabaseModule.html":{},"modules/EmailModule.html":{},"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"modules/EmailSchedulingModule.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/ExcludeNullUndefinedInterceptor.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"interfaces/IBaseModel.html":{},"interfaces/ICrudService.html":{},"interfaces/IPaginationResult.html":{},"interfaces/ITag.html":{},"interfaces/IUser.html":{},"classes/IsEmailExistsConstraint.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/PaginationParams.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"injectables/PersistedCronService.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"classes/QueryFailedFilter.html":{},"classes/R.html":{},"guards/RequestGuard.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Response.html":{},"guards/ResponseGuard.html":{},"interfaces/Result.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"classes/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateTagsDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/UserLoginDto.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/ValidationFailedFilter.html":{},"interfaces/VerifiedTokenPayload.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["retention",{"_index":1355,"title":{},"body":{"controllers/HealthController.html":{}}}],["return",{"_index":186,"title":{},"body":{"classes/ApiException.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BaseModel.html":{},"interfaces/BaseRoute.html":{},"injectables/CronService.html":{},"classes/CrudConfigService.html":{},"classes/CrudController.html":{},"interfaces/CrudOptions.html":{},"classes/CrudRoutesFactory.html":{},"classes/CrudService.html":{},"classes/CustomQueryBuilder.html":{},"modules/DatabaseModule.html":{},"injectables/ExcludeNullUndefinedInterceptor.html":{},"interfaces/GetManyDefaultResponse.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"interfaces/IBaseModel.html":{},"classes/IsEmailExistsConstraint.html":{},"injectables/LocalStrategy.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"injectables/PersistedCronService.html":{},"classes/R.html":{},"guards/RequestGuard.html":{},"interfaces/Response.html":{},"guards/ResponseGuard.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/User.html":{},"classes/UserLoginDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["returndeleted",{"_index":568,"title":{},"body":{"interfaces/BaseRoute.html":{},"interfaces/CrudOptions.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{}}}],["returning",{"_index":1129,"title":{},"body":{"classes/CrudService.html":{}}}],["returns",{"_index":202,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BaseModel.html":{},"injectables/CronService.html":{},"classes/CrudConfigService.html":{},"classes/CrudController.html":{},"classes/CrudRoutesFactory.html":{},"classes/CrudService.html":{},"classes/CustomQueryBuilder.html":{},"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/ExcludeNullUndefinedInterceptor.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"interfaces/ICrudService.html":{},"classes/IsEmailExistsConstraint.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/PersistedCronService.html":{},"classes/QueryFailedFilter.html":{},"classes/R.html":{},"guards/RequestGuard.html":{},"guards/ResponseGuard.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"classes/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/ValidationFailedFilter.html":{},"miscellaneous/functions.html":{}}}],["reusable",{"_index":1708,"title":{},"body":{"classes/User.html":{}}}],["rimraf",{"_index":1931,"title":{},"body":{"dependencies.html":{}}}],["route",{"_index":1277,"title":{},"body":{"injectables/ExcludeNullUndefinedInterceptor.html":{},"classes/R.html":{},"interfaces/Response.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["route.enable",{"_index":978,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["route.method",{"_index":828,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["route.override",{"_index":977,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["route.path",{"_index":826,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["routes",{"_index":567,"title":{},"body":{"interfaces/BaseRoute.html":{},"interfaces/CrudOptions.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{}}}],["routes.factory.ts",{"_index":804,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"coverage.html":{}}}],["routes.factory.ts:161",{"_index":1592,"title":{},"body":{"classes/SerializeHelper.html":{}}}],["routes.factory.ts:188",{"_index":1593,"title":{},"body":{"classes/SerializeHelper.html":{}}}],["routes.factory.ts:20",{"_index":1529,"title":{},"body":{"classes/R.html":{}}}],["routes.factory.ts:201",{"_index":807,"title":{},"body":{"classes/CrudConfigService.html":{}}}],["routes.factory.ts:207",{"_index":809,"title":{},"body":{"classes/CrudConfigService.html":{}}}],["routes.factory.ts:221",{"_index":1073,"title":{},"body":{"classes/CrudRoutesFactory.html":{}}}],["routes.factory.ts:223",{"_index":1072,"title":{},"body":{"classes/CrudRoutesFactory.html":{}}}],["routes.factory.ts:239",{"_index":1074,"title":{},"body":{"classes/CrudRoutesFactory.html":{}}}],["routes.factory.ts:243",{"_index":1085,"title":{},"body":{"classes/CrudRoutesFactory.html":{}}}],["routes.factory.ts:248",{"_index":1087,"title":{},"body":{"classes/CrudRoutesFactory.html":{}}}],["routes.factory.ts:252",{"_index":1089,"title":{},"body":{"classes/CrudRoutesFactory.html":{}}}],["routes.factory.ts:256",{"_index":1075,"title":{},"body":{"classes/CrudRoutesFactory.html":{}}}],["routes.factory.ts:264",{"_index":1078,"title":{},"body":{"classes/CrudRoutesFactory.html":{}}}],["routes.factory.ts:270",{"_index":1079,"title":{},"body":{"classes/CrudRoutesFactory.html":{}}}],["routes.factory.ts:276",{"_index":1080,"title":{},"body":{"classes/CrudRoutesFactory.html":{}}}],["routes.factory.ts:297",{"_index":1081,"title":{},"body":{"classes/CrudRoutesFactory.html":{}}}],["routes.factory.ts:33",{"_index":1527,"title":{},"body":{"classes/R.html":{}}}],["routes.factory.ts:349",{"_index":1082,"title":{},"body":{"classes/CrudRoutesFactory.html":{}}}],["routes.factory.ts:381",{"_index":1077,"title":{},"body":{"classes/CrudRoutesFactory.html":{}}}],["routes.factory.ts:389",{"_index":1076,"title":{},"body":{"classes/CrudRoutesFactory.html":{}}}],["routes.factory.ts:400",{"_index":1083,"title":{},"body":{"classes/CrudRoutesFactory.html":{}}}],["routes.factory.ts:43",{"_index":1530,"title":{},"body":{"classes/R.html":{}}}],["routes.factory.ts:53",{"_index":1602,"title":{},"body":{"classes/Swagger.html":{}}}],["routes.factory.ts:77",{"_index":1603,"title":{},"body":{"classes/Swagger.html":{}}}],["routes.factory.ts:83",{"_index":1600,"title":{},"body":{"classes/Swagger.html":{}}}],["routes.factory.ts:89",{"_index":1601,"title":{},"body":{"classes/Swagger.html":{}}}],["routes.factory.ts:95",{"_index":1599,"title":{},"body":{"classes/Swagger.html":{}}}],["routesschema",{"_index":913,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["routesschema.foreach((route",{"_index":976,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["run",{"_index":687,"title":{},"body":{"injectables/CronService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["run(boot",{"_index":1953,"title":{},"body":{"miscellaneous/functions.html":{}}}],["rxjs",{"_index":1286,"title":{},"body":{"injectables/ExcludeNullUndefinedInterceptor.html":{},"controllers/HealthController.html":{},"guards/RequestGuard.html":{},"interfaces/Response.html":{},"guards/ResponseGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":1288,"title":{},"body":{"injectables/ExcludeNullUndefinedInterceptor.html":{},"controllers/HealthController.html":{},"interfaces/Response.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["saferequire",{"_index":1829,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["saferequire('@nestjs/swagger",{"_index":595,"title":{},"body":{"interfaces/BaseRoute.html":{},"interfaces/CrudOptions.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"miscellaneous/variables.html":{}}}],["saferequire('@nestjs/swagger/dist/constants",{"_index":597,"title":{},"body":{"interfaces/BaseRoute.html":{},"interfaces/CrudOptions.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"miscellaneous/variables.html":{}}}],["saferequire(path",{"_index":584,"title":{},"body":{"interfaces/BaseRoute.html":{},"interfaces/CrudOptions.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"miscellaneous/functions.html":{}}}],["salt",{"_index":487,"title":{},"body":{"classes/BaseModel.html":{},"interfaces/IBaseModel.html":{},"classes/Tag.html":{},"classes/User.html":{}}}],["saved",{"_index":1487,"title":{},"body":{"injectables/PersistedCronService.html":{}}}],["scalable",{"_index":1969,"title":{},"body":{"index.html":{}}}],["schedule",{"_index":716,"title":{},"body":{"injectables/CronService.html":{},"injectables/PersistedCronService.html":{}}}],["scheduled",{"_index":726,"title":{},"body":{"injectables/CronService.html":{}}}],["scheduleemail",{"_index":1217,"title":{},"body":{"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{}}}],["scheduleemail(@body",{"_index":1229,"title":{},"body":{"controllers/EmailSchedulingController.html":{}}}],["scheduleemail(emailschedule",{"_index":1218,"title":{},"body":{"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{}}}],["schedulemodule",{"_index":244,"title":{},"body":{"modules/AppModule.html":{}}}],["schedulemodule.forroot",{"_index":297,"title":{},"body":{"modules/AppModule.html":{}}}],["scheduler",{"_index":711,"title":{},"body":{"injectables/CronService.html":{},"injectables/EmailSchedulingService.html":{}}}],["schedulerregistry",{"_index":709,"title":{},"body":{"injectables/CronService.html":{},"injectables/EmailSchedulingService.html":{},"injectables/PersistedCronService.html":{}}}],["scheduling",{"_index":1227,"title":{},"body":{"controllers/EmailSchedulingController.html":{},"modules/EmailSchedulingModule.html":{}}}],["schema",{"_index":624,"title":{},"body":{"classes/CreateTagsDto.html":{},"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"interfaces/ITag.html":{},"classes/QueryFailedFilter.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"classes/Tag.html":{},"classes/UpdateTagsDto.html":{},"classes/User.html":{}}}],["scope",{"_index":1317,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["searchbyname(query",{"_index":1696,"title":{},"body":{"classes/User.html":{}}}],["second",{"_index":763,"title":{},"body":{"injectables/CronService.html":{},"controllers/HealthController.html":{}}}],["seconds",{"_index":713,"title":{},"body":{"injectables/CronService.html":{}}}],["secret",{"_index":414,"title":{},"body":{"modules/AuthModule.html":{}}}],["secretorkey",{"_index":1440,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["seed",{"_index":1847,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["seed(knex",{"_index":1961,"title":{},"body":{"miscellaneous/functions.html":{}}}],["semi",{"_index":1686,"title":{},"body":{"classes/User.html":{}}}],["sendmail",{"_index":1254,"title":{},"body":{"injectables/EmailService.html":{}}}],["sendmail(options",{"_index":1257,"title":{},"body":{"injectables/EmailService.html":{}}}],["sequence",{"_index":308,"title":{},"body":{"modules/AppModule.html":{}}}],["serialize",{"_index":576,"title":{},"body":{"interfaces/BaseRoute.html":{},"classes/CrudConfigService.html":{},"interfaces/CrudOptions.html":{},"classes/CrudRoutesFactory.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["serializehelper",{"_index":871,"title":{"classes/SerializeHelper.html":{}},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"coverage.html":{}}}],["serializehelper.creategetmanydto",{"_index":943,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["serializehelper.creategetmanydto(this.swaggermodels.get",{"_index":965,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["serializehelper.creategetoneresponsedto(this.modelname",{"_index":961,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["server",{"_index":192,"title":{},"body":{"classes/ApiException.html":{},"injectables/PersistedCronService.html":{},"dependencies.html":{},"index.html":{}}}],["service",{"_index":1006,"title":{},"body":{"classes/CrudController.html":{},"classes/CrudService.html":{},"injectables/PersistedCronService.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["services",{"_index":1092,"title":{},"body":{"classes/CrudService.html":{},"interfaces/ICrudService.html":{}}}],["session",{"_index":1457,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["set",{"_index":818,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["set(metadatakey",{"_index":1528,"title":{},"body":{"classes/R.html":{}}}],["setextramodels",{"_index":1596,"title":{},"body":{"classes/Swagger.html":{}}}],["setextramodels(swaggermodels",{"_index":833,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["setinterval(callback",{"_index":789,"title":{},"body":{"injectables/CronService.html":{}}}],["setresponsemodels",{"_index":959,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["setresponseok",{"_index":1597,"title":{},"body":{"classes/Swagger.html":{}}}],["setresponseok(metadata",{"_index":848,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["setroute",{"_index":1525,"title":{},"body":{"classes/R.html":{}}}],["setroute(route",{"_index":823,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["sets",{"_index":829,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["setswaggerresponseok",{"_index":1069,"title":{},"body":{"classes/CrudRoutesFactory.html":{}}}],["setswaggerresponseok(name",{"_index":984,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["settimeout(callback",{"_index":798,"title":{},"body":{"injectables/CronService.html":{}}}],["setting",{"_index":79,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["setupinfra",{"_index":1858,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["setupinfra(app",{"_index":1955,"title":{},"body":{"miscellaneous/functions.html":{}}}],["setupmiddlewares",{"_index":1859,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["setupmiddlewares(app",{"_index":1956,"title":{},"body":{"miscellaneous/functions.html":{}}}],["setupswaggerdocs",{"_index":1860,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["setupswaggerdocs(app",{"_index":1957,"title":{},"body":{"miscellaneous/functions.html":{}}}],["shadow",{"_index":1295,"title":{},"body":{"injectables/ExcludeNullUndefinedInterceptor.html":{}}}],["showmycontacts",{"_index":80,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["showmynumber",{"_index":119,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["showremoveoption",{"_index":131,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["shutdown",{"_index":332,"title":{},"body":{"modules/AppModule.html":{},"controllers/HealthController.html":{}}}],["side",{"_index":1970,"title":{},"body":{"index.html":{}}}],["sign",{"_index":2090,"title":{},"body":{"miscellaneous/variables.html":{}}}],["signal",{"_index":235,"title":{},"body":{"modules/AppModule.html":{},"controllers/HealthController.html":{}}}],["signasync",{"_index":2091,"title":{},"body":{"miscellaneous/variables.html":{}}}],["signoptions",{"_index":416,"title":{},"body":{"modules/AuthModule.html":{}}}],["simply",{"_index":1697,"title":{},"body":{"classes/User.html":{}}}],["singlequerybuildertype",{"_index":1138,"title":{},"body":{"classes/CustomQueryBuilder.html":{}}}],["size",{"_index":1147,"title":{},"body":{"classes/CustomQueryBuilder.html":{},"interfaces/IPaginationResult.html":{},"classes/PaginationParams.html":{}}}],["snippets",{"_index":1709,"title":{},"body":{"classes/User.html":{}}}],["socket.io",{"_index":1886,"title":{},"body":{"dependencies.html":{}}}],["soft",{"_index":1029,"title":{},"body":{"classes/CrudController.html":{},"classes/CrudService.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["something",{"_index":1576,"title":{},"body":{"guards/ResponseGuard.html":{}}}],["source",{"_index":4,"title":{},"body":{"interfaces/APIResponse.html":{},"classes/ApiException.html":{},"controllers/AppController.html":{},"interfaces/AppLaunchAction.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseModel.html":{},"interfaces/BaseRoute.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"modules/CronModule.html":{},"injectables/CronService.html":{},"classes/CrudConfigService.html":{},"classes/CrudController.html":{},"interfaces/CrudOptions.html":{},"classes/CrudRoutesFactory.html":{},"classes/CrudService.html":{},"classes/CustomQueryBuilder.html":{},"modules/DatabaseModule.html":{},"modules/EmailModule.html":{},"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"modules/EmailSchedulingModule.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/ExcludeNullUndefinedInterceptor.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"interfaces/IBaseModel.html":{},"interfaces/ICrudService.html":{},"interfaces/IPaginationResult.html":{},"interfaces/ITag.html":{},"interfaces/IUser.html":{},"classes/IsEmailExistsConstraint.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/PaginationParams.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"injectables/PersistedCronService.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"classes/QueryFailedFilter.html":{},"classes/R.html":{},"guards/RequestGuard.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Response.html":{},"guards/ResponseGuard.html":{},"interfaces/Result.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"classes/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateTagsDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/UserLoginDto.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/ValidationFailedFilter.html":{},"interfaces/VerifiedTokenPayload.html":{},"dependencies.html":{},"index.html":{}}}],["specified",{"_index":689,"title":{},"body":{"injectables/CronService.html":{}}}],["split",{"_index":1689,"title":{},"body":{"classes/User.html":{}}}],["sponsors",{"_index":1994,"title":{},"body":{"index.html":{}}}],["sqlite3",{"_index":1936,"title":{},"body":{"dependencies.html":{}}}],["src/.../01",{"_index":1951,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../02",{"_index":1952,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../20190609143930_createuser.ts",{"_index":1946,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../20190609143931_createtag.ts",{"_index":1947,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../20210128233543_updatetagmodel.ts",{"_index":1948,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../api",{"_index":1943,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../app.module.ts",{"_index":2032,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../checks.util.ts",{"_index":2037,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../crud.decorator.ts",{"_index":2033,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../customquerybuilder.ts",{"_index":1949,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../database.module.ts",{"_index":2034,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../domain.ts",{"_index":2023,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../helper.ts",{"_index":2031,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../isemailexists.ts",{"_index":2038,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":1945,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../mocks.ts",{"_index":2039,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../moment",{"_index":2040,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../null",{"_index":1950,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../obj.util.ts",{"_index":2035,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../object",{"_index":2025,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../other.ts",{"_index":1944,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../pagination.ts",{"_index":1941,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../tag.model.ts",{"_index":2027,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../user.decorator.ts",{"_index":2036,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../user.model.ts",{"_index":2028,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/app.controller.ts",{"_index":198,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:9",{"_index":201,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":228,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app.module.ts:78",{"_index":239,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.module.ts:82",{"_index":234,"title":{},"body":{"modules/AppModule.html":{}}}],["src/auth/auth.controller.ts",{"_index":334,"title":{},"body":{"controllers/AuthController.html":{},"classes/UserLoginDto.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:23",{"_index":1734,"title":{},"body":{"classes/UserLoginDto.html":{}}}],["src/auth/auth.controller.ts:27",{"_index":1736,"title":{},"body":{"classes/UserLoginDto.html":{}}}],["src/auth/auth.controller.ts:45",{"_index":355,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:70",{"_index":340,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:77",{"_index":349,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module.ts",{"_index":402,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":421,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:14",{"_index":429,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:21",{"_index":432,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:25",{"_index":436,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:35",{"_index":445,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:51",{"_index":438,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:55",{"_index":442,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/google.strategy.ts",{"_index":1301,"title":{},"body":{"injectables/GoogleStrategy.html":{},"coverage.html":{}}}],["src/auth/google.strategy.ts:11",{"_index":1304,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["src/auth/google.strategy.ts:28",{"_index":1309,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["src/auth/jwt.strategy.ts",{"_index":1430,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/auth/jwt.strategy.ts:11",{"_index":1431,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/jwt.strategy.ts:24",{"_index":1435,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/local.strategy.ts",{"_index":1447,"title":{},"body":{"injectables/LocalStrategy.html":{},"coverage.html":{}}}],["src/auth/local.strategy.ts:10",{"_index":1453,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/auth/local.strategy.ts:12",{"_index":1451,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/auth/local.strategy.ts:23",{"_index":1452,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/auth/spec/mocks.ts",{"_index":1790,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/tokenpayload.interface.ts",{"_index":1776,"title":{},"body":{"interfaces/VerifiedTokenPayload.html":{},"coverage.html":{}}}],["src/base/crud/crud.controller.ts",{"_index":990,"title":{},"body":{"classes/CrudController.html":{},"coverage.html":{}}}],["src/base/crud/crud.controller.ts:104",{"_index":1032,"title":{},"body":{"classes/CrudController.html":{}}}],["src/base/crud/crud.controller.ts:131",{"_index":1016,"title":{},"body":{"classes/CrudController.html":{}}}],["src/base/crud/crud.controller.ts:153",{"_index":1037,"title":{},"body":{"classes/CrudController.html":{}}}],["src/base/crud/crud.controller.ts:27",{"_index":1003,"title":{},"body":{"classes/CrudController.html":{}}}],["src/base/crud/crud.controller.ts:46",{"_index":1022,"title":{},"body":{"classes/CrudController.html":{}}}],["src/base/crud/crud.controller.ts:73",{"_index":1027,"title":{},"body":{"classes/CrudController.html":{}}}],["src/base/crud/crud.service.interface.ts",{"_index":1385,"title":{},"body":{"interfaces/ICrudService.html":{},"coverage.html":{}}}],["src/base/crud/crud.service.interface.ts:10",{"_index":1389,"title":{},"body":{"interfaces/ICrudService.html":{}}}],["src/base/crud/crud.service.interface.ts:15",{"_index":1391,"title":{},"body":{"interfaces/ICrudService.html":{}}}],["src/base/crud/crud.service.interface.ts:20",{"_index":1390,"title":{},"body":{"interfaces/ICrudService.html":{}}}],["src/base/crud/crud.service.interface.ts:25",{"_index":1392,"title":{},"body":{"interfaces/ICrudService.html":{}}}],["src/base/crud/crud.service.interface.ts:32",{"_index":1393,"title":{},"body":{"interfaces/ICrudService.html":{}}}],["src/base/crud/crud.service.interface.ts:37",{"_index":1388,"title":{},"body":{"interfaces/ICrudService.html":{}}}],["src/base/crud/crud.service.interface.ts:42",{"_index":1394,"title":{},"body":{"interfaces/ICrudService.html":{}}}],["src/base/crud/crud.service.ts",{"_index":1091,"title":{},"body":{"classes/CrudService.html":{},"coverage.html":{}}}],["src/base/crud/crud.service.ts:109",{"_index":1114,"title":{},"body":{"classes/CrudService.html":{}}}],["src/base/crud/crud.service.ts:15",{"_index":1098,"title":{},"body":{"classes/CrudService.html":{}}}],["src/base/crud/crud.service.ts:27",{"_index":1101,"title":{},"body":{"classes/CrudService.html":{}}}],["src/base/crud/crud.service.ts:36",{"_index":1111,"title":{},"body":{"classes/CrudService.html":{}}}],["src/base/crud/crud.service.ts:56",{"_index":1105,"title":{},"body":{"classes/CrudService.html":{}}}],["src/base/crud/crud.service.ts:65",{"_index":1109,"title":{},"body":{"classes/CrudService.html":{}}}],["src/base/crud/crud.service.ts:74",{"_index":1107,"title":{},"body":{"classes/CrudService.html":{}}}],["src/base/crud/crud.service.ts:83",{"_index":1112,"title":{},"body":{"classes/CrudService.html":{}}}],["src/base/crud/crud.service.ts:93",{"_index":1099,"title":{},"body":{"classes/CrudService.html":{}}}],["src/base/crud/pagination.ts",{"_index":1395,"title":{},"body":{"interfaces/IPaginationResult.html":{},"classes/PaginationParams.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/base/crud/pagination.ts:25",{"_index":1464,"title":{},"body":{"classes/PaginationParams.html":{}}}],["src/base/crud/pagination.ts:34",{"_index":1465,"title":{},"body":{"classes/PaginationParams.html":{}}}],["src/base/crud/pagination.ts:41",{"_index":1461,"title":{},"body":{"classes/PaginationParams.html":{}}}],["src/base/moment",{"_index":1800,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/base/swagger",{"_index":136,"title":{},"body":{"classes/ApiException.html":{},"interfaces/BaseRoute.html":{},"classes/CrudConfigService.html":{},"interfaces/CrudOptions.html":{},"classes/CrudRoutesFactory.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/cron/cron.module.ts",{"_index":679,"title":{},"body":{"modules/CronModule.html":{}}}],["src/cron/cron.service.ts",{"_index":683,"title":{},"body":{"injectables/CronService.html":{},"coverage.html":{}}}],["src/cron/cron.service.ts:112",{"_index":725,"title":{},"body":{"injectables/CronService.html":{}}}],["src/cron/cron.service.ts:126",{"_index":744,"title":{},"body":{"injectables/CronService.html":{}}}],["src/cron/cron.service.ts:136",{"_index":720,"title":{},"body":{"injectables/CronService.html":{}}}],["src/cron/cron.service.ts:151",{"_index":728,"title":{},"body":{"injectables/CronService.html":{}}}],["src/cron/cron.service.ts:164",{"_index":746,"title":{},"body":{"injectables/CronService.html":{}}}],["src/cron/cron.service.ts:174",{"_index":723,"title":{},"body":{"injectables/CronService.html":{}}}],["src/cron/cron.service.ts:187",{"_index":730,"title":{},"body":{"injectables/CronService.html":{}}}],["src/cron/cron.service.ts:22",{"_index":749,"title":{},"body":{"injectables/CronService.html":{}}}],["src/cron/cron.service.ts:24",{"_index":752,"title":{},"body":{"injectables/CronService.html":{}}}],["src/cron/cron.service.ts:26",{"_index":754,"title":{},"body":{"injectables/CronService.html":{}}}],["src/cron/cron.service.ts:28",{"_index":710,"title":{},"body":{"injectables/CronService.html":{}}}],["src/cron/cron.service.ts:32",{"_index":732,"title":{},"body":{"injectables/CronService.html":{}}}],["src/cron/cron.service.ts:38",{"_index":736,"title":{},"body":{"injectables/CronService.html":{}}}],["src/cron/cron.service.ts:52",{"_index":739,"title":{},"body":{"injectables/CronService.html":{}}}],["src/cron/cron.service.ts:63",{"_index":742,"title":{},"body":{"injectables/CronService.html":{}}}],["src/cron/cron.service.ts:76",{"_index":743,"title":{},"body":{"injectables/CronService.html":{}}}],["src/cron/cron.service.ts:97",{"_index":714,"title":{},"body":{"injectables/CronService.html":{}}}],["src/cron/persisted",{"_index":1468,"title":{},"body":{"injectables/PersistedCronService.html":{},"coverage.html":{}}}],["src/database/database.module.ts",{"_index":1179,"title":{},"body":{"modules/DatabaseModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/database/helper.ts",{"_index":1834,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/database/migrations/20190609143930_createuser.ts",{"_index":1837,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/database/migrations/20190609143931_createtag.ts",{"_index":1840,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/database/migrations/20210128233543_updatetagmodel.ts",{"_index":1841,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/database/models/base.model.ts",{"_index":473,"title":{},"body":{"classes/BaseModel.html":{},"interfaces/IBaseModel.html":{},"coverage.html":{}}}],["src/database/models/base.model.ts:25",{"_index":488,"title":{},"body":{"classes/BaseModel.html":{}}}],["src/database/models/base.model.ts:35",{"_index":491,"title":{},"body":{"classes/BaseModel.html":{}}}],["src/database/models/base.model.ts:37",{"_index":489,"title":{},"body":{"classes/BaseModel.html":{}}}],["src/database/models/base.model.ts:39",{"_index":483,"title":{},"body":{"classes/BaseModel.html":{}}}],["src/database/models/base.model.ts:41",{"_index":492,"title":{},"body":{"classes/BaseModel.html":{}}}],["src/database/models/base.model.ts:43",{"_index":484,"title":{},"body":{"classes/BaseModel.html":{}}}],["src/database/models/base.model.ts:47",{"_index":501,"title":{},"body":{"classes/BaseModel.html":{}}}],["src/database/models/base.model.ts:60",{"_index":496,"title":{},"body":{"classes/BaseModel.html":{}}}],["src/database/models/customquerybuilder.ts",{"_index":1134,"title":{},"body":{"classes/CustomQueryBuilder.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/database/models/customquerybuilder.ts:37",{"_index":1142,"title":{},"body":{"classes/CustomQueryBuilder.html":{}}}],["src/database/models/customquerybuilder.ts:39",{"_index":1145,"title":{},"body":{"classes/CustomQueryBuilder.html":{}}}],["src/database/models/customquerybuilder.ts:41",{"_index":1143,"title":{},"body":{"classes/CustomQueryBuilder.html":{}}}],["src/database/models/customquerybuilder.ts:43",{"_index":1144,"title":{},"body":{"classes/CustomQueryBuilder.html":{}}}],["src/database/models/customquerybuilder.ts:45",{"_index":1154,"title":{},"body":{"classes/CustomQueryBuilder.html":{}}}],["src/database/models/customquerybuilder.ts:61",{"_index":1151,"title":{},"body":{"classes/CustomQueryBuilder.html":{}}}],["src/database/models/customquerybuilder.ts:70",{"_index":1150,"title":{},"body":{"classes/CustomQueryBuilder.html":{}}}],["src/database/models/customquerybuilder.ts:75",{"_index":1148,"title":{},"body":{"classes/CustomQueryBuilder.html":{}}}],["src/database/seeds/01",{"_index":1845,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/database/seeds/02",{"_index":1848,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/domain.ts",{"_index":6,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/email/email.module.ts",{"_index":1203,"title":{},"body":{"modules/EmailModule.html":{}}}],["src/email/email.service.ts",{"_index":1253,"title":{},"body":{"injectables/EmailService.html":{},"coverage.html":{}}}],["src/email/email.service.ts:11",{"_index":1258,"title":{},"body":{"injectables/EmailService.html":{}}}],["src/email/email.service.ts:5",{"_index":1256,"title":{},"body":{"injectables/EmailService.html":{}}}],["src/emailscheduling/emailschedule.dto.ts",{"_index":1206,"title":{},"body":{"classes/EmailScheduleDto.html":{},"coverage.html":{}}}],["src/emailscheduling/emailschedule.dto.ts:13",{"_index":1210,"title":{},"body":{"classes/EmailScheduleDto.html":{}}}],["src/emailscheduling/emailschedule.dto.ts:16",{"_index":1212,"title":{},"body":{"classes/EmailScheduleDto.html":{}}}],["src/emailscheduling/emailschedule.dto.ts:5",{"_index":1213,"title":{},"body":{"classes/EmailScheduleDto.html":{}}}],["src/emailscheduling/emailschedule.dto.ts:9",{"_index":1214,"title":{},"body":{"classes/EmailScheduleDto.html":{}}}],["src/emailscheduling/emailscheduling.controller.ts",{"_index":1216,"title":{},"body":{"controllers/EmailSchedulingController.html":{},"coverage.html":{}}}],["src/emailscheduling/emailscheduling.controller.ts:16",{"_index":1220,"title":{},"body":{"controllers/EmailSchedulingController.html":{}}}],["src/emailscheduling/emailscheduling.module.ts",{"_index":1234,"title":{},"body":{"modules/EmailSchedulingModule.html":{}}}],["src/emailscheduling/emailscheduling.service.ts",{"_index":1237,"title":{},"body":{"injectables/EmailSchedulingService.html":{},"coverage.html":{}}}],["src/emailscheduling/emailscheduling.service.ts:11",{"_index":1239,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["src/emailscheduling/emailscheduling.service.ts:18",{"_index":1240,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["src/health/health.controller.ts",{"_index":1329,"title":{},"body":{"controllers/HealthController.html":{},"coverage.html":{}}}],["src/health/health.controller.ts:40",{"_index":1340,"title":{},"body":{"controllers/HealthController.html":{}}}],["src/health/health.controller.ts:59",{"_index":1333,"title":{},"body":{"controllers/HealthController.html":{}}}],["src/health/health.controller.ts:73",{"_index":1335,"title":{},"body":{"controllers/HealthController.html":{}}}],["src/health/health.controller.ts:92",{"_index":1338,"title":{},"body":{"controllers/HealthController.html":{}}}],["src/health/health.controller.ts:98",{"_index":1337,"title":{},"body":{"controllers/HealthController.html":{}}}],["src/infra/decorators/user.decorator.ts",{"_index":1852,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/infra/filters/query",{"_index":1495,"title":{},"body":{"classes/QueryFailedFilter.html":{},"coverage.html":{}}}],["src/infra/filters/validation",{"_index":1769,"title":{},"body":{"classes/ValidationFailedFilter.html":{},"coverage.html":{}}}],["src/infra/guards/req.ts",{"_index":1534,"title":{},"body":{"guards/RequestGuard.html":{},"coverage.html":{}}}],["src/infra/guards/req.ts:20",{"_index":1542,"title":{},"body":{"guards/RequestGuard.html":{}}}],["src/infra/guards/req.ts:33",{"_index":1538,"title":{},"body":{"guards/RequestGuard.html":{}}}],["src/infra/guards/res.ts",{"_index":1567,"title":{},"body":{"guards/ResponseGuard.html":{},"coverage.html":{}}}],["src/infra/guards/res.ts:19",{"_index":1571,"title":{},"body":{"guards/ResponseGuard.html":{}}}],["src/infra/guards/res.ts:32",{"_index":1570,"title":{},"body":{"guards/ResponseGuard.html":{}}}],["src/infra/interceptors/null",{"_index":1263,"title":{},"body":{"injectables/ExcludeNullUndefinedInterceptor.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/infra/interceptors/timeout.ts",{"_index":1656,"title":{},"body":{"injectables/TimeoutInterceptor.html":{},"coverage.html":{}}}],["src/infra/interceptors/timeout.ts:25",{"_index":1659,"title":{},"body":{"injectables/TimeoutInterceptor.html":{}}}],["src/infra/interceptors/transform.ts",{"_index":1562,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"coverage.html":{}}}],["src/infra/interceptors/transform.ts:28",{"_index":1670,"title":{},"body":{"injectables/TransformInterceptor.html":{}}}],["src/infra/validator/isemailexists.ts",{"_index":1417,"title":{},"body":{"classes/IsEmailExistsConstraint.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/infra/validator/isemailexists.ts:14",{"_index":1420,"title":{},"body":{"classes/IsEmailExistsConstraint.html":{}}}],["src/infra/validator/isemailexists.ts:17",{"_index":1422,"title":{},"body":{"classes/IsEmailExistsConstraint.html":{}}}],["src/main.ts",{"_index":1857,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/tags/tag.model.ts",{"_index":608,"title":{},"body":{"classes/CreateTagsDto.html":{},"interfaces/ITag.html":{},"classes/Tag.html":{},"classes/UpdateTagsDto.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/tags/tag.model.ts:13",{"_index":1606,"title":{},"body":{"classes/Tag.html":{}}}],["src/tags/tag.model.ts:15",{"_index":1605,"title":{},"body":{"classes/Tag.html":{}}}],["src/tags/tag.model.ts:19",{"_index":1604,"title":{},"body":{"classes/Tag.html":{}}}],["src/tags/tag.model.ts:41",{"_index":611,"title":{},"body":{"classes/CreateTagsDto.html":{}}}],["src/tags/tags.controller.ts",{"_index":1617,"title":{},"body":{"controllers/TagsController.html":{},"coverage.html":{}}}],["src/tags/tags.controller.ts:35",{"_index":1618,"title":{},"body":{"controllers/TagsController.html":{}}}],["src/tags/tags.controller.ts:48",{"_index":1619,"title":{},"body":{"controllers/TagsController.html":{}}}],["src/tags/tags.module.ts",{"_index":1633,"title":{},"body":{"modules/TagsModule.html":{}}}],["src/tags/tags.service.ts",{"_index":1635,"title":{},"body":{"injectables/TagsService.html":{},"coverage.html":{}}}],["src/tags/tags.service.ts:17",{"_index":1637,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/tags.service.ts:31",{"_index":1638,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/tags.service.ts:9",{"_index":1636,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/users/user.dto.ts",{"_index":652,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["src/users/user.dto.ts:23",{"_index":667,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["src/users/user.dto.ts:29",{"_index":659,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["src/users/user.dto.ts:34",{"_index":666,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["src/users/user.dto.ts:39",{"_index":661,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["src/users/user.dto.ts:44",{"_index":664,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["src/users/user.dto.ts:47",{"_index":663,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["src/users/user.interface.ts",{"_index":1414,"title":{},"body":{"interfaces/IUser.html":{},"coverage.html":{}}}],["src/users/user.model.ts",{"_index":1671,"title":{},"body":{"classes/User.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/users/user.model.ts:13",{"_index":1714,"title":{},"body":{"classes/User.html":{}}}],["src/users/user.model.ts:15",{"_index":1715,"title":{},"body":{"classes/User.html":{}}}],["src/users/user.model.ts:17",{"_index":1678,"title":{},"body":{"classes/User.html":{}}}],["src/users/user.model.ts:19",{"_index":1679,"title":{},"body":{"classes/User.html":{}}}],["src/users/user.model.ts:21",{"_index":1684,"title":{},"body":{"classes/User.html":{}}}],["src/users/user.model.ts:23",{"_index":1680,"title":{},"body":{"classes/User.html":{}}}],["src/users/user.model.ts:25",{"_index":1712,"title":{},"body":{"classes/User.html":{}}}],["src/users/user.model.ts:27",{"_index":1681,"title":{},"body":{"classes/User.html":{}}}],["src/users/user.model.ts:29",{"_index":1716,"title":{},"body":{"classes/User.html":{}}}],["src/users/user.model.ts:31",{"_index":1719,"title":{},"body":{"classes/User.html":{}}}],["src/users/user.model.ts:42",{"_index":1683,"title":{},"body":{"classes/User.html":{}}}],["src/users/user.model.ts:68",{"_index":1707,"title":{},"body":{"classes/User.html":{}}}],["src/users/user.model.ts:88",{"_index":1721,"title":{},"body":{"classes/User.html":{}}}],["src/users/user.model.ts:93",{"_index":1718,"title":{},"body":{"classes/User.html":{}}}],["src/users/users.controller.ts",{"_index":1738,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:33",{"_index":1741,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:47",{"_index":1743,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module.ts",{"_index":1752,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/users/users.service.ts",{"_index":1754,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/users.service.ts:11",{"_index":1755,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:16",{"_index":1761,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:20",{"_index":1759,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:31",{"_index":1760,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:42",{"_index":1757,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:46",{"_index":1762,"title":{},"body":{"injectables/UsersService.html":{}}}],["sse",{"_index":1331,"title":{},"body":{"controllers/HealthController.html":{}}}],["sse('sse",{"_index":1339,"title":{},"body":{"controllers/HealthController.html":{}}}],["stack",{"_index":141,"title":{},"body":{"classes/ApiException.html":{}}}],["start",{"_index":1978,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":1981,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":1982,"title":{},"body":{"index.html":{}}}],["started",{"_index":1963,"title":{"index.html":{}},"body":{}}],["starter",{"_index":1972,"title":{},"body":{"index.html":{}}}],["stat",{"_index":1374,"title":{},"body":{"controllers/HealthController.html":{}}}],["stat.load",{"_index":1380,"title":{},"body":{"controllers/HealthController.html":{}}}],["stat.memory",{"_index":1377,"title":{},"body":{"controllers/HealthController.html":{}}}],["stat.timestamp",{"_index":1378,"title":{},"body":{"controllers/HealthController.html":{}}}],["statements",{"_index":1699,"title":{},"body":{"classes/User.html":{},"coverage.html":{}}}],["static",{"_index":206,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/BaseModel.html":{},"classes/CreateTagsDto.html":{},"injectables/CronService.html":{},"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"controllers/EmailSchedulingController.html":{},"controllers/HealthController.html":{},"interfaces/IBaseModel.html":{},"interfaces/ITag.html":{},"injectables/LocalStrategy.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"classes/Tag.html":{},"controllers/TagsController.html":{},"classes/UpdateTagsDto.html":{},"classes/User.html":{},"classes/UserLoginDto.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["status",{"_index":142,"title":{},"body":{"classes/ApiException.html":{},"classes/CrudController.html":{},"interfaces/IPaginationResult.html":{},"classes/PaginationParams.html":{},"classes/QueryFailedFilter.html":{},"guards/ResponseGuard.html":{},"classes/ValidationFailedFilter.html":{}}}],["statuscode",{"_index":16,"title":{},"body":{"interfaces/APIResponse.html":{},"classes/ApiException.html":{},"interfaces/AppLaunchAction.html":{},"controllers/AuthController.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"classes/CrudController.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/IPaginationResult.html":{},"classes/PaginationParams.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"classes/QueryFailedFilter.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"controllers/TagsController.html":{},"classes/UserLoginDto.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{},"controllers/UsersController.html":{},"classes/ValidationFailedFilter.html":{}}}],["stay",{"_index":2002,"title":{},"body":{"index.html":{}}}],["stop",{"_index":1475,"title":{},"body":{"injectables/PersistedCronService.html":{}}}],["store",{"_index":1739,"title":{},"body":{"controllers/UsersController.html":{}}}],["strategy",{"_index":1313,"title":{},"body":{"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["stream",{"_index":1284,"title":{},"body":{"injectables/ExcludeNullUndefinedInterceptor.html":{},"interfaces/Response.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["string",{"_index":23,"title":{},"body":{"interfaces/APIResponse.html":{},"classes/ApiException.html":{},"controllers/AppController.html":{},"interfaces/AppLaunchAction.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BaseModel.html":{},"interfaces/BaseRoute.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"injectables/CronService.html":{},"classes/CrudConfigService.html":{},"interfaces/CrudOptions.html":{},"classes/CrudRoutesFactory.html":{},"classes/CrudService.html":{},"classes/EmailScheduleDto.html":{},"injectables/ExcludeNullUndefinedInterceptor.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"interfaces/IBaseModel.html":{},"interfaces/ICrudService.html":{},"interfaces/IPaginationResult.html":{},"interfaces/ITag.html":{},"interfaces/IUser.html":{},"classes/IsEmailExistsConstraint.html":{},"injectables/LocalStrategy.html":{},"classes/PaginationParams.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"classes/R.html":{},"guards/RequestGuard.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"guards/ResponseGuard.html":{},"interfaces/Result.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"classes/Tag.html":{},"injectables/TagsService.html":{},"classes/UpdateTagsDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/UserLoginDto.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{},"injectables/UsersService.html":{},"interfaces/VerifiedTokenPayload.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["string[]).every((v",{"_index":2059,"title":{},"body":{"miscellaneous/variables.html":{}}}],["strip",{"_index":1290,"title":{},"body":{"injectables/ExcludeNullUndefinedInterceptor.html":{},"miscellaneous/functions.html":{}}}],["subject",{"_index":52,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"classes/EmailScheduleDto.html":{},"injectables/EmailSchedulingService.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["success",{"_index":1573,"title":{},"body":{"guards/ResponseGuard.html":{}}}],["such",{"_index":996,"title":{},"body":{"classes/CrudController.html":{},"classes/CrudService.html":{}}}],["summary",{"_index":1046,"title":{},"body":{"classes/CrudController.html":{},"controllers/UsersController.html":{}}}],["super",{"_index":1315,"title":{},"body":{"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["super(model",{"_index":1648,"title":{},"body":{"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["super(service",{"_index":1628,"title":{},"body":{"controllers/TagsController.html":{}}}],["super.$beforeinsert(querycontext",{"_index":1727,"title":{},"body":{"classes/User.html":{}}}],["super.$beforeupdate(opt",{"_index":532,"title":{},"body":{"classes/BaseModel.html":{},"interfaces/IBaseModel.html":{}}}],["super.create(input",{"_index":1653,"title":{},"body":{"injectables/TagsService.html":{}}}],["super.update(id",{"_index":1654,"title":{},"body":{"injectables/TagsService.html":{}}}],["support",{"_index":1934,"title":{},"body":{"dependencies.html":{},"index.html":{},"modules.html":{}}}],["svg",{"_index":2013,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":594,"title":{"classes/Swagger.html":{}},"body":{"interfaces/BaseRoute.html":{},"classes/CrudConfigService.html":{},"classes/CrudController.html":{},"interfaces/CrudOptions.html":{},"classes/CrudRoutesFactory.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["swagger.apimodelproperty",{"_index":605,"title":{},"body":{"interfaces/BaseRoute.html":{},"interfaces/CrudOptions.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{}}}],["swagger.apiproperty",{"_index":604,"title":{},"body":{"interfaces/BaseRoute.html":{},"interfaces/CrudOptions.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{}}}],["swagger.createresponsemeta(name",{"_index":987,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["swagger.getextramodels(swaggermodels.get",{"_index":836,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["swagger.getresponseok(this.targetproto[name",{"_index":985,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["swagger.getschemapath",{"_index":865,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["swagger.getschemapath(dto.name",{"_index":870,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["swagger.setextramodels(this.swaggermodels",{"_index":974,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["swagger.setresponseok",{"_index":988,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["swaggerconst",{"_index":596,"title":{},"body":{"interfaces/BaseRoute.html":{},"classes/CrudConfigService.html":{},"interfaces/CrudOptions.html":{},"classes/CrudRoutesFactory.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["swaggerconst.decorators.api_extra_models",{"_index":846,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["swaggerenumtype",{"_index":544,"title":{},"body":{"interfaces/BaseRoute.html":{},"interfaces/CrudOptions.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{}}}],["swaggermodels",{"_index":855,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["swaggermodels.get",{"_index":847,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["swaggermodels.get.name",{"_index":844,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["swaggermodels.getmany",{"_index":861,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["swaggermodels.getmany.name",{"_index":866,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["swaggermodels[name",{"_index":840,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["swaggermodels[name.split('onebase')[0",{"_index":869,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["switch",{"_index":856,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"miscellaneous/variables.html":{}}}],["symbol",{"_index":602,"title":{},"body":{"interfaces/BaseRoute.html":{},"classes/CrudConfigService.html":{},"interfaces/CrudOptions.html":{},"classes/CrudRoutesFactory.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["syntax",{"_index":1557,"title":{},"body":{"guards/RequestGuard.html":{}}}],["t",{"_index":21,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/BaseRoute.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"classes/CrudConfigService.html":{},"classes/CrudController.html":{},"interfaces/CrudOptions.html":{},"classes/CrudRoutesFactory.html":{},"classes/CrudService.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/ICrudService.html":{},"interfaces/IPaginationResult.html":{},"classes/PaginationParams.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"classes/R.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Response.html":{},"interfaces/Result.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"injectables/TagsService.html":{},"injectables/TransformInterceptor.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["table",{"_index":1471,"title":{},"body":{"injectables/PersistedCronService.html":{},"classes/QueryFailedFilter.html":{},"coverage.html":{}}}],["tablename",{"_index":621,"title":{},"body":{"classes/CreateTagsDto.html":{},"interfaces/ITag.html":{},"classes/Tag.html":{},"classes/UpdateTagsDto.html":{},"classes/User.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1872,"title":{},"body":{"coverage.html":{}}}],["tag",{"_index":620,"title":{"classes/Tag.html":{}},"body":{"classes/CreateTagsDto.html":{},"modules/DatabaseModule.html":{},"interfaces/ITag.html":{},"classes/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"classes/UpdateTagsDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["tag.model",{"_index":1622,"title":{},"body":{"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["tag.name",{"_index":1652,"title":{},"body":{"injectables/TagsService.html":{}}}],["tag.ts",{"_index":1849,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["tags",{"_index":622,"title":{},"body":{"classes/CreateTagsDto.html":{},"interfaces/ITag.html":{},"classes/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"classes/UpdateTagsDto.html":{},"miscellaneous/variables.html":{}}}],["tags.controller",{"_index":1634,"title":{},"body":{"modules/TagsModule.html":{}}}],["tags.service",{"_index":1624,"title":{},"body":{"controllers/TagsController.html":{},"modules/TagsModule.html":{}}}],["tags/tag.model",{"_index":1115,"title":{},"body":{"classes/CrudService.html":{},"modules/DatabaseModule.html":{}}}],["tags/tags.module",{"_index":258,"title":{},"body":{"modules/AppModule.html":{}}}],["tagscontroller",{"_index":1616,"title":{"controllers/TagsController.html":{}},"body":{"controllers/TagsController.html":{},"modules/TagsModule.html":{},"coverage.html":{}}}],["tagshape",{"_index":645,"title":{},"body":{"classes/CreateTagsDto.html":{},"interfaces/ITag.html":{},"classes/Tag.html":{},"classes/UpdateTagsDto.html":{},"miscellaneous/typealiases.html":{}}}],["tagsmodule",{"_index":223,"title":{"modules/TagsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/TagsModule.html":{},"modules.html":{},"overview.html":{}}}],["tagsservice",{"_index":1623,"title":{"injectables/TagsService.html":{}},"body":{"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"coverage.html":{},"overview.html":{}}}],["takes",{"_index":344,"title":{},"body":{"controllers/AuthController.html":{},"injectables/TimeoutInterceptor.html":{},"classes/UserLoginDto.html":{}}}],["target",{"_index":600,"title":{},"body":{"interfaces/BaseRoute.html":{},"classes/CrudConfigService.html":{},"interfaces/CrudOptions.html":{},"classes/CrudRoutesFactory.html":{},"interfaces/GetManyDefaultResponse.html":{},"classes/IsEmailExistsConstraint.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"miscellaneous/variables.html":{}}}],["targetproto",{"_index":906,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["template",{"_index":329,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/CronService.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"classes/UserLoginDto.html":{}}}],["terminate",{"_index":1657,"title":{},"body":{"injectables/TimeoutInterceptor.html":{}}}],["termination",{"_index":303,"title":{},"body":{"modules/AppModule.html":{}}}],["terminusmodule",{"_index":246,"title":{},"body":{"modules/AppModule.html":{}}}],["test",{"_index":278,"title":{},"body":{"modules/AppModule.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["test:covsupport",{"_index":1987,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":1986,"title":{},"body":{"index.html":{}}}],["tests",{"_index":1984,"title":{},"body":{"index.html":{}}}],["text",{"_index":1247,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["thanks",{"_index":1993,"title":{},"body":{"index.html":{}}}],["this.$fetchgraph(expression",{"_index":531,"title":{},"body":{"classes/BaseModel.html":{},"interfaces/IBaseModel.html":{}}}],["this.authservice.login(user",{"_index":382,"title":{},"body":{"controllers/AuthController.html":{},"classes/UserLoginDto.html":{}}}],["this.authservice.validateoauthloginemail",{"_index":1326,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["this.authservice.validateuser(email",{"_index":1459,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["this.bindrequesthelpers(context.switchtohttp().getrequest",{"_index":1550,"title":{},"body":{"guards/RequestGuard.html":{}}}],["this.bindresponsehelpers(context.switchtohttp().getresponse",{"_index":1572,"title":{},"body":{"guards/ResponseGuard.html":{}}}],["this.collectosmetrics(metrics",{"_index":1360,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.comparepassword(password",{"_index":456,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.config.get('node_env",{"_index":1384,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.configservice.get('node_env",{"_index":1261,"title":{},"body":{"injectables/EmailService.html":{}}}],["this.count",{"_index":1169,"title":{},"body":{"classes/CustomQueryBuilder.html":{}}}],["this.create",{"_index":897,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["this.createroutes(routesschema",{"_index":917,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["this.disk.checkstorage('storage",{"_index":1370,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.dns.pingcheck('weather",{"_index":1368,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.emailschedulingservice.scheduleemail(emailschedule",{"_index":1230,"title":{},"body":{"controllers/EmailSchedulingController.html":{}}}],["this.emailservice.sendmail",{"_index":1245,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["this.enableroutes(routesschema",{"_index":918,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["this.error",{"_index":174,"title":{},"body":{"classes/ApiException.html":{}}}],["this.errors",{"_index":176,"title":{},"body":{"classes/ApiException.html":{}}}],["this.factorial(n",{"_index":759,"title":{},"body":{"injectables/CronService.html":{}}}],["this.findone",{"_index":1649,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.firstname",{"_index":1722,"title":{},"body":{"classes/User.html":{}}}],["this.generatetoken(user",{"_index":461,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.hashpassword(this.password",{"_index":1729,"title":{},"body":{"classes/User.html":{}}}],["this.hashpassword(user.password",{"_index":1766,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.health.check",{"_index":1362,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.jwtservice.signasync(user",{"_index":449,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.lastname",{"_index":1723,"title":{},"body":{"classes/User.html":{}}}],["this.logger.debug",{"_index":761,"title":{},"body":{"injectables/CronService.html":{}}}],["this.logger.log(`email",{"_index":1251,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["this.logger.log(`interval",{"_index":785,"title":{},"body":{"injectables/CronService.html":{}}}],["this.logger.log(`job",{"_index":770,"title":{},"body":{"injectables/CronService.html":{}}}],["this.logger.log(`timeout",{"_index":796,"title":{},"body":{"injectables/CronService.html":{}}}],["this.logger.warn",{"_index":786,"title":{},"body":{"injectables/CronService.html":{}}}],["this.logger.warn(`interval",{"_index":793,"title":{},"body":{"injectables/CronService.html":{}}}],["this.logger.warn(`job",{"_index":776,"title":{},"body":{"injectables/CronService.html":{}}}],["this.logger.warn(`time",{"_index":773,"title":{},"body":{"injectables/CronService.html":{}}}],["this.logger.warn(`timeout",{"_index":797,"title":{},"body":{"injectables/CronService.html":{}}}],["this.memory.checkheap('memory_heap",{"_index":1363,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.memory.checkrss('memory_rss",{"_index":1366,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.mergeoptions",{"_index":915,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["this.message",{"_index":173,"title":{},"body":{"classes/ApiException.html":{}}}],["this.model",{"_index":1127,"title":{},"body":{"classes/CrudService.html":{}}}],["this.model.query",{"_index":1117,"title":{},"body":{"classes/CrudService.html":{}}}],["this.model.query().findbyid(id).first",{"_index":1124,"title":{},"body":{"classes/CrudService.html":{},"injectables/UsersService.html":{}}}],["this.model.query().findone",{"_index":1125,"title":{},"body":{"classes/CrudService.html":{},"injectables/UsersService.html":{}}}],["this.model.query().findone(filter",{"_index":1123,"title":{},"body":{"classes/CrudService.html":{}}}],["this.model.query().insertandfetch(user",{"_index":1764,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.model.query().page(page",{"_index":1120,"title":{},"body":{"classes/CrudService.html":{}}}],["this.model.query().patchandfetchbyid(id",{"_index":1767,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.modelname",{"_index":902,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["this.modeltype",{"_index":901,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["this.onlycount",{"_index":1171,"title":{},"body":{"classes/CustomQueryBuilder.html":{}}}],["this.options",{"_index":896,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["this.options.dto",{"_index":934,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["this.options.model.type",{"_index":911,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["this.options.model.type?.name",{"_index":909,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["this.options.query",{"_index":931,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["this.options.routes?.deleteonebase?.returndeleted",{"_index":955,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["this.options.serialize",{"_index":935,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["this.options.serialize.create",{"_index":944,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["this.options.serialize.delete",{"_index":953,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["this.options.serialize.get",{"_index":937,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["this.options.serialize.getmany",{"_index":940,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["this.options.serialize.replace",{"_index":950,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["this.options.serialize.update",{"_index":947,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["this.options.serialize?.create",{"_index":946,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["this.options.serialize?.delete",{"_index":956,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["this.options.serialize?.get",{"_index":939,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["this.options.serialize?.getmany",{"_index":942,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["this.options.serialize?.replace",{"_index":952,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["this.options.serialize?.update",{"_index":949,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["this.page(page",{"_index":1164,"title":{},"body":{"classes/CustomQueryBuilder.html":{}}}],["this.password",{"_index":1728,"title":{},"body":{"classes/User.html":{}}}],["this.path",{"_index":177,"title":{},"body":{"classes/ApiException.html":{}}}],["this.schedule.addcronjob(job.name",{"_index":1491,"title":{},"body":{"injectables/PersistedCronService.html":{}}}],["this.scheduler.addcronjob(`${date.now",{"_index":1250,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["this.scheduler.addcronjob(name",{"_index":774,"title":{},"body":{"injectables/CronService.html":{}}}],["this.scheduler.addinterval(name",{"_index":790,"title":{},"body":{"injectables/CronService.html":{}}}],["this.scheduler.addtimeout(name",{"_index":799,"title":{},"body":{"injectables/CronService.html":{}}}],["this.scheduler.deletecronjob(name",{"_index":781,"title":{},"body":{"injectables/CronService.html":{}}}],["this.scheduler.deleteinterval(name",{"_index":792,"title":{},"body":{"injectables/CronService.html":{}}}],["this.scheduler.deletetimeout(name",{"_index":801,"title":{},"body":{"injectables/CronService.html":{}}}],["this.scheduler.getcronjob(name",{"_index":780,"title":{},"body":{"injectables/CronService.html":{}}}],["this.scheduler.getinterval(name",{"_index":791,"title":{},"body":{"injectables/CronService.html":{}}}],["this.scheduler.getintervals",{"_index":783,"title":{},"body":{"injectables/CronService.html":{}}}],["this.scheduler.gettimeout(name",{"_index":800,"title":{},"body":{"injectables/CronService.html":{}}}],["this.scheduler.gettimeouts",{"_index":794,"title":{},"body":{"injectables/CronService.html":{}}}],["this.service.create(input",{"_index":1061,"title":{},"body":{"classes/CrudController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["this.service.findonebyid(id",{"_index":1053,"title":{},"body":{"classes/CrudController.html":{}}}],["this.service.getone(req",{"_index":922,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["this.service.getonebase(req",{"_index":925,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["this.service.paginatedfindall",{"_index":1050,"title":{},"body":{"classes/CrudController.html":{}}}],["this.service.remove(id",{"_index":1058,"title":{},"body":{"classes/CrudController.html":{}}}],["this.service.update(id",{"_index":1065,"title":{},"body":{"classes/CrudController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["this.setresponsemodels",{"_index":916,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["this.setswaggerresponseok(route.name",{"_index":983,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["this.stack",{"_index":175,"title":{},"body":{"classes/ApiException.html":{}}}],["this.status",{"_index":182,"title":{},"body":{"classes/ApiException.html":{}}}],["this.statuscode",{"_index":181,"title":{},"body":{"classes/ApiException.html":{}}}],["this.swaggermodels",{"_index":903,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["this.swaggermodels.create",{"_index":966,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["this.swaggermodels.delete",{"_index":972,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["this.swaggermodels.get",{"_index":962,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["this.swaggermodels.getmany",{"_index":964,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["this.swaggermodels.replace",{"_index":970,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["this.swaggermodels.update",{"_index":968,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["this.target",{"_index":958,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["this.target.prototype",{"_index":907,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["this.targetproto",{"_index":900,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["this.targetproto[name",{"_index":920,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["this.targetproto[route.name",{"_index":980,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["this.timestamp",{"_index":178,"title":{},"body":{"classes/ApiException.html":{}}}],["this.update(id",{"_index":1126,"title":{},"body":{"classes/CrudService.html":{}}}],["this.updated_at",{"_index":533,"title":{},"body":{"classes/BaseModel.html":{},"interfaces/IBaseModel.html":{}}}],["this.user.query().findone",{"_index":1426,"title":{},"body":{"classes/IsEmailExistsConstraint.html":{}}}],["this.userservice.findonebyemail(email",{"_index":451,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservice.findonebyemail(primaryemail",{"_index":467,"title":{},"body":{"injectables/AuthService.html":{}}}],["this[expression.tostring",{"_index":530,"title":{},"body":{"classes/BaseModel.html":{},"interfaces/IBaseModel.html":{}}}],["this[route.name](route.name",{"_index":982,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["those",{"_index":1694,"title":{},"body":{"classes/User.html":{}}}],["thresholdpercent",{"_index":1371,"title":{},"body":{"controllers/HealthController.html":{}}}],["throwerror",{"_index":1661,"title":{},"body":{"injectables/TimeoutInterceptor.html":{}}}],["throwerror(e",{"_index":1669,"title":{},"body":{"injectables/TimeoutInterceptor.html":{}}}],["throwerror(new",{"_index":1668,"title":{},"body":{"injectables/TimeoutInterceptor.html":{}}}],["time",{"_index":788,"title":{},"body":{"injectables/CronService.html":{},"injectables/PersistedCronService.html":{}}}],["timeago",{"_index":95,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["timediff",{"_index":1443,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["timeout",{"_index":690,"title":{},"body":{"injectables/CronService.html":{},"injectables/TimeoutInterceptor.html":{}}}],["timeout('handletimeoutfn",{"_index":740,"title":{},"body":{"injectables/CronService.html":{}}}],["timeout(10000",{"_index":1664,"title":{},"body":{"injectables/TimeoutInterceptor.html":{}}}],["timeouterror",{"_index":1662,"title":{},"body":{"injectables/TimeoutInterceptor.html":{}}}],["timeoutinterceptor",{"_index":1655,"title":{"injectables/TimeoutInterceptor.html":{}},"body":{"injectables/TimeoutInterceptor.html":{},"coverage.html":{}}}],["timeouts",{"_index":747,"title":{},"body":{"injectables/CronService.html":{}}}],["timeouts.foreach((key",{"_index":795,"title":{},"body":{"injectables/CronService.html":{}}}],["times",{"_index":694,"title":{},"body":{"injectables/CronService.html":{}}}],["timestamp",{"_index":143,"title":{},"body":{"classes/ApiException.html":{},"controllers/HealthController.html":{},"classes/QueryFailedFilter.html":{},"classes/ValidationFailedFilter.html":{}}}],["todo",{"_index":1259,"title":{},"body":{"injectables/EmailService.html":{},"injectables/PersistedCronService.html":{}}}],["tojson",{"_index":468,"title":{},"body":{"injectables/AuthService.html":{}}}],["token",{"_index":448,"title":{},"body":{"injectables/AuthService.html":{}}}],["token_expiration",{"_index":285,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["tokenpayload.interface",{"_index":1438,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["tools",{"_index":1910,"title":{},"body":{"dependencies.html":{}}}],["total",{"_index":17,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/BaseRoute.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"classes/CrudConfigService.html":{},"interfaces/CrudOptions.html":{},"classes/CrudRoutesFactory.html":{},"classes/CrudService.html":{},"classes/CustomQueryBuilder.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/IPaginationResult.html":{},"classes/PaginationParams.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"classes/R.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["totalpages",{"_index":1121,"title":{},"body":{"classes/CrudService.html":{},"classes/CustomQueryBuilder.html":{},"interfaces/IPaginationResult.html":{},"classes/PaginationParams.html":{}}}],["touch",{"_index":2003,"title":{},"body":{"index.html":{}}}],["transfer",{"_index":653,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["transform",{"_index":1266,"title":{},"body":{"injectables/ExcludeNullUndefinedInterceptor.html":{},"interfaces/IPaginationResult.html":{},"classes/PaginationParams.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["transform((val",{"_index":1409,"title":{},"body":{"interfaces/IPaginationResult.html":{},"classes/PaginationParams.html":{}}}],["transformer",{"_index":810,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"interfaces/IPaginationResult.html":{},"classes/PaginationParams.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"dependencies.html":{}}}],["transforminterceptor",{"_index":1564,"title":{"injectables/TransformInterceptor.html":{}},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"coverage.html":{}}}],["transformschema",{"_index":295,"title":{},"body":{"modules/AppModule.html":{}}}],["true",{"_index":263,"title":{},"body":{"modules/AppModule.html":{},"injectables/CronService.html":{},"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/CustomQueryBuilder.html":{},"modules/DatabaseModule.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/R.html":{},"guards/RequestGuard.html":{},"guards/ResponseGuard.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"classes/User.html":{},"miscellaneous/variables.html":{}}}],["try",{"_index":462,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/BaseRoute.html":{},"injectables/CronService.html":{},"interfaces/CrudOptions.html":{},"classes/CrudService.html":{},"interfaces/GetManyDefaultResponse.html":{},"injectables/GoogleStrategy.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"classes/User.html":{}}}],["ts",{"_index":528,"title":{},"body":{"classes/BaseModel.html":{},"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/CrudService.html":{},"modules/DatabaseModule.html":{},"injectables/ExcludeNullUndefinedInterceptor.html":{},"controllers/HealthController.html":{},"interfaces/IBaseModel.html":{},"classes/QueryFailedFilter.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"classes/ValidationFailedFilter.html":{},"miscellaneous/variables.html":{}}}],["twitter",{"_index":2009,"title":{},"body":{"index.html":{}}}],["type",{"_index":19,"title":{},"body":{"interfaces/APIResponse.html":{},"classes/ApiException.html":{},"interfaces/AppLaunchAction.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BaseModel.html":{},"interfaces/BaseRoute.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"injectables/CronService.html":{},"classes/CrudConfigService.html":{},"classes/CrudController.html":{},"interfaces/CrudOptions.html":{},"classes/CrudRoutesFactory.html":{},"classes/CrudService.html":{},"classes/CustomQueryBuilder.html":{},"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/ExcludeNullUndefinedInterceptor.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"interfaces/IBaseModel.html":{},"interfaces/ICrudService.html":{},"interfaces/IPaginationResult.html":{},"interfaces/ITag.html":{},"interfaces/IUser.html":{},"classes/IsEmailExistsConstraint.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/PaginationParams.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"injectables/PersistedCronService.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"classes/QueryFailedFilter.html":{},"classes/R.html":{},"guards/RequestGuard.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Response.html":{},"guards/ResponseGuard.html":{},"interfaces/Result.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"classes/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateTagsDto.html":{},"classes/User.html":{},"classes/UserLoginDto.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/ValidationFailedFilter.html":{},"interfaces/VerifiedTokenPayload.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":2021,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeof",{"_index":526,"title":{},"body":{"classes/BaseModel.html":{},"classes/CustomQueryBuilder.html":{},"injectables/ExcludeNullUndefinedInterceptor.html":{},"interfaces/IBaseModel.html":{},"guards/RequestGuard.html":{},"guards/ResponseGuard.html":{},"miscellaneous/variables.html":{}}}],["types",{"_index":525,"title":{},"body":{"classes/BaseModel.html":{},"interfaces/BaseRoute.html":{},"interfaces/CrudOptions.html":{},"classes/CustomQueryBuilder.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/IBaseModel.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"dependencies.html":{}}}],["types/dotenv",{"_index":1893,"title":{},"body":{"dependencies.html":{}}}],["typescript",{"_index":327,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/BaseModel.html":{},"interfaces/BaseRoute.html":{},"injectables/CronService.html":{},"interfaces/CrudOptions.html":{},"classes/CustomQueryBuilder.html":{},"controllers/EmailSchedulingController.html":{},"injectables/ExcludeNullUndefinedInterceptor.html":{},"interfaces/GetManyDefaultResponse.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"interfaces/IBaseModel.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"classes/UserLoginDto.html":{},"index.html":{}}}],["ui",{"_index":1937,"title":{},"body":{"dependencies.html":{}}}],["unauthorized",{"_index":193,"title":{},"body":{"classes/ApiException.html":{}}}],["unauthorizedexception",{"_index":165,"title":{},"body":{"classes/ApiException.html":{},"injectables/AuthService.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/UsersController.html":{}}}],["unauthorizedexception('credentials",{"_index":1458,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["unauthorizedexception('invalid",{"_index":459,"title":{},"body":{"injectables/AuthService.html":{}}}],["unauthorizedexception('unknown",{"_index":453,"title":{},"body":{"injectables/AuthService.html":{}}}],["unauthorizedexception(err",{"_index":1328,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["undefined",{"_index":1014,"title":{},"body":{"classes/CrudController.html":{},"interfaces/CrudOptions.html":{},"injectables/ExcludeNullUndefinedInterceptor.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["uniqueviolationerror",{"_index":1506,"title":{},"body":{"classes/QueryFailedFilter.html":{}}}],["unit",{"_index":1983,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":146,"title":{},"body":{"classes/ApiException.html":{},"classes/CrudController.html":{},"classes/CrudService.html":{},"classes/CustomQueryBuilder.html":{},"injectables/ExcludeNullUndefinedInterceptor.html":{},"miscellaneous/functions.html":{}}}],["until",{"_index":319,"title":{},"body":{"modules/AppModule.html":{}}}],["unverified",{"_index":2041,"title":{},"body":{"miscellaneous/variables.html":{}}}],["up",{"_index":1839,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["up(knex",{"_index":1959,"title":{},"body":{"miscellaneous/functions.html":{}}}],["update",{"_index":581,"title":{},"body":{"interfaces/BaseRoute.html":{},"classes/CrudController.html":{},"interfaces/CrudOptions.html":{},"classes/CrudService.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ICrudService.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["update(@param('id",{"_index":1064,"title":{},"body":{"classes/CrudController.html":{}}}],["update(id",{"_index":1033,"title":{},"body":{"classes/CrudController.html":{},"classes/CrudService.html":{},"interfaces/ICrudService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["updated",{"_index":1035,"title":{},"body":{"classes/CrudController.html":{}}}],["updated_at",{"_index":480,"title":{},"body":{"classes/BaseModel.html":{},"interfaces/IBaseModel.html":{},"classes/Tag.html":{},"classes/User.html":{}}}],["updateonebase",{"_index":552,"title":{},"body":{"interfaces/BaseRoute.html":{},"interfaces/CrudOptions.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"miscellaneous/typealiases.html":{}}}],["updates",{"_index":1034,"title":{},"body":{"classes/CrudController.html":{},"classes/CrudService.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["updatetagsdto",{"_index":649,"title":{"classes/UpdateTagsDto.html":{}},"body":{"classes/CreateTagsDto.html":{},"interfaces/ITag.html":{},"classes/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"classes/UpdateTagsDto.html":{},"coverage.html":{}}}],["updateuserdto",{"_index":673,"title":{"classes/UpdateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["used",{"_index":629,"title":{},"body":{"classes/CreateTagsDto.html":{},"interfaces/ITag.html":{},"classes/QueryFailedFilter.html":{},"classes/Tag.html":{},"classes/UpdateTagsDto.html":{},"classes/User.html":{},"classes/ValidationFailedFilter.html":{},"miscellaneous/typealiases.html":{}}}],["usefactory",{"_index":413,"title":{},"body":{"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["useguards",{"_index":358,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TagsController.html":{},"classes/UserLoginDto.html":{}}}],["useguards(authguard('google",{"_index":343,"title":{},"body":{"controllers/AuthController.html":{},"classes/UserLoginDto.html":{}}}],["useguards(authguard('jwt",{"_index":1627,"title":{},"body":{"controllers/TagsController.html":{}}}],["useguards(authguard('local",{"_index":379,"title":{},"body":{"controllers/AuthController.html":{},"classes/UserLoginDto.html":{}}}],["useguards(undefined)@post('login",{"_index":354,"title":{},"body":{"controllers/AuthController.html":{}}}],["usenullasdefault",{"_index":1194,"title":{},"body":{"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["user",{"_index":53,"title":{"classes/User.html":{}},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"modules/DatabaseModule.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/IUser.html":{},"classes/IsEmailExistsConstraint.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"classes/User.html":{},"classes/UserLoginDto.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["user.dto",{"_index":1746,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["user.interface",{"_index":671,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["user.model",{"_index":1744,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["user.password",{"_index":457,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["user.tojson",{"_index":460,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.ts",{"_index":1846,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["user?.[data",{"_index":2051,"title":{},"body":{"miscellaneous/variables.html":{}}}],["user?.password",{"_index":1765,"title":{},"body":{"injectables/UsersService.html":{}}}],["useraddress",{"_index":70,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["usercontacts",{"_index":71,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["useremail",{"_index":72,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["userid",{"_index":129,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["userlogindto",{"_index":353,"title":{"classes/UserLoginDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/UserLoginDto.html":{},"coverage.html":{}}}],["username",{"_index":73,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"classes/CreateUserDto.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/IUser.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["usernamefield",{"_index":1449,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["userpost",{"_index":85,"title":{"interfaces/UserPost.html":{}},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{},"coverage.html":{}}}],["userposts",{"_index":99,"title":{"interfaces/UserPosts.html":{}},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{},"coverage.html":{}}}],["users",{"_index":1713,"title":{},"body":{"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"miscellaneous/variables.html":{}}}],["users.controller",{"_index":1753,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.service",{"_index":1745,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users/user.dto",{"_index":1116,"title":{},"body":{"classes/CrudService.html":{}}}],["users/user.model",{"_index":1184,"title":{},"body":{"modules/DatabaseModule.html":{},"classes/IsEmailExistsConstraint.html":{}}}],["users/users.module",{"_index":259,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["users/users.service",{"_index":366,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/UserLoginDto.html":{}}}],["userscontroller",{"_index":1737,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["userservice",{"_index":378,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/UserLoginDto.html":{}}}],["usershape",{"_index":1730,"title":{},"body":{"classes/User.html":{},"miscellaneous/typealiases.html":{}}}],["usersmodule",{"_index":224,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersservice",{"_index":365,"title":{"injectables/UsersService.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/UserLoginDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["usesid",{"_index":54,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["usevalue",{"_index":1189,"title":{},"body":{"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["using",{"_index":1691,"title":{},"body":{"classes/User.html":{}}}],["utils",{"_index":816,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["uuid",{"_index":559,"title":{},"body":{"interfaces/BaseRoute.html":{},"interfaces/CrudOptions.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{}}}],["v",{"_index":1297,"title":{},"body":{"injectables/ExcludeNullUndefinedInterceptor.html":{}}}],["val",{"_index":2046,"title":{},"body":{"miscellaneous/variables.html":{}}}],["val.length",{"_index":2052,"title":{},"body":{"miscellaneous/variables.html":{}}}],["valid('development",{"_index":276,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["validate",{"_index":1302,"title":{},"body":{"injectables/GoogleStrategy.html":{},"classes/IsEmailExistsConstraint.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["validate(email",{"_index":1421,"title":{},"body":{"classes/IsEmailExistsConstraint.html":{}}}],["validate(req",{"_index":1432,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["validate(request",{"_index":1305,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["validateoauthloginemail",{"_index":424,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateoauthloginemail(accesstoken",{"_index":439,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser",{"_index":425,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser(email",{"_index":444,"title":{},"body":{"injectables/AuthService.html":{}}}],["validation",{"_index":569,"title":{},"body":{"interfaces/BaseRoute.html":{},"classes/CreateTagsDto.html":{},"interfaces/CrudOptions.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ITag.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"classes/Tag.html":{},"classes/UpdateTagsDto.html":{},"classes/User.html":{},"classes/ValidationFailedFilter.html":{}}}],["validationerror",{"_index":1770,"title":{},"body":{"classes/ValidationFailedFilter.html":{}}}],["validationerrorcode",{"_index":1773,"title":{},"body":{"classes/ValidationFailedFilter.html":{}}}],["validationerrortype",{"_index":1775,"title":{},"body":{"classes/ValidationFailedFilter.html":{}}}],["validationfailedfilter",{"_index":1768,"title":{"classes/ValidationFailedFilter.html":{}},"body":{"classes/ValidationFailedFilter.html":{},"coverage.html":{}}}],["validationoptions",{"_index":264,"title":{},"body":{"modules/AppModule.html":{},"classes/IsEmailExistsConstraint.html":{},"miscellaneous/variables.html":{}}}],["validationpipeoptions",{"_index":543,"title":{},"body":{"interfaces/BaseRoute.html":{},"interfaces/CrudOptions.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{}}}],["validationschema",{"_index":269,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["validator",{"_index":363,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"classes/EmailScheduleDto.html":{},"interfaces/IPaginationResult.html":{},"interfaces/ITag.html":{},"classes/IsEmailExistsConstraint.html":{},"classes/PaginationParams.html":{},"classes/Tag.html":{},"classes/UpdateTagsDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserLoginDto.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["validatorconstraint",{"_index":1424,"title":{},"body":{"classes/IsEmailExistsConstraint.html":{}}}],["validatorconstraintinterface",{"_index":1418,"title":{},"body":{"classes/IsEmailExistsConstraint.html":{}}}],["value",{"_index":486,"title":{},"body":{"classes/BaseModel.html":{},"injectables/CronService.html":{},"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/CrudService.html":{},"classes/CustomQueryBuilder.html":{},"injectables/EmailSchedulingService.html":{},"injectables/ExcludeNullUndefinedInterceptor.html":{},"injectables/LocalStrategy.html":{},"injectables/PersistedCronService.html":{},"classes/R.html":{},"guards/RequestGuard.html":{},"guards/ResponseGuard.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"classes/Tag.html":{},"injectables/TagsService.html":{},"injectables/TimeoutInterceptor.html":{},"classes/User.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["value.length",{"_index":1161,"title":{},"body":{"classes/CustomQueryBuilder.html":{}}}],["value.map(recursivelystripnullvalues",{"_index":1293,"title":{},"body":{"injectables/ExcludeNullUndefinedInterceptor.html":{}}}],["value.nextdates().todate",{"_index":767,"title":{},"body":{"injectables/CronService.html":{}}}],["value.trim",{"_index":1560,"title":{},"body":{"guards/RequestGuard.html":{}}}],["values",{"_index":1291,"title":{},"body":{"injectables/ExcludeNullUndefinedInterceptor.html":{},"miscellaneous/functions.html":{}}}],["var",{"_index":587,"title":{},"body":{"interfaces/BaseRoute.html":{},"interfaces/CrudOptions.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{}}}],["variable",{"_index":1783,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":2030,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["various",{"_index":1710,"title":{},"body":{"classes/User.html":{}}}],["verified",{"_index":2043,"title":{},"body":{"miscellaneous/variables.html":{}}}],["verifiedtokenpayload",{"_index":1434,"title":{"interfaces/VerifiedTokenPayload.html":{}},"body":{"injectables/JwtStrategy.html":{},"interfaces/VerifiedTokenPayload.html":{},"coverage.html":{}}}],["verifycallback",{"_index":1308,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["viewscont",{"_index":121,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["virtualattributes",{"_index":1674,"title":{},"body":{"classes/User.html":{}}}],["visibility",{"_index":511,"title":{},"body":{"classes/BaseModel.html":{},"interfaces/IBaseModel.html":{},"dependencies.html":{}}}],["visibilityplugin",{"_index":510,"title":{},"body":{"classes/BaseModel.html":{},"interfaces/IBaseModel.html":{}}}],["void",{"_index":237,"title":{},"body":{"modules/AppModule.html":{},"injectables/CronService.html":{},"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"injectables/EmailService.html":{},"controllers/HealthController.html":{},"classes/QueryFailedFilter.html":{},"classes/R.html":{},"classes/Swagger.html":{},"classes/ValidationFailedFilter.html":{}}}],["watch",{"_index":1979,"title":{},"body":{"index.html":{}}}],["website",{"_index":2007,"title":{},"body":{"index.html":{}}}],["went",{"_index":1577,"title":{},"body":{"guards/ResponseGuard.html":{}}}],["whenever",{"_index":630,"title":{},"body":{"classes/CreateTagsDto.html":{},"interfaces/ITag.html":{},"classes/Tag.html":{},"classes/UpdateTagsDto.html":{},"classes/User.html":{}}}],["where('id",{"_index":1133,"title":{},"body":{"classes/CrudService.html":{}}}],["whether",{"_index":1547,"title":{},"body":{"guards/RequestGuard.html":{},"guards/ResponseGuard.html":{}}}],["whitespace",{"_index":1692,"title":{},"body":{"classes/User.html":{}}}],["withmeta",{"_index":1588,"title":{},"body":{"guards/ResponseGuard.html":{}}}],["withmeta(data",{"_index":1583,"title":{},"body":{"guards/ResponseGuard.html":{}}}],["without",{"_index":644,"title":{},"body":{"classes/CreateTagsDto.html":{},"interfaces/ITag.html":{},"classes/Tag.html":{},"classes/UpdateTagsDto.html":{},"classes/User.html":{},"miscellaneous/typealiases.html":{}}}],["withparams",{"_index":540,"title":{},"body":{"interfaces/BaseRoute.html":{},"classes/CrudConfigService.html":{},"interfaces/CrudOptions.html":{},"classes/CrudRoutesFactory.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["world",{"_index":208,"title":{},"body":{"controllers/AppController.html":{}}}],["writable",{"_index":877,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["writeerror",{"_index":1130,"title":{},"body":{"classes/CrudService.html":{}}}],["wrong",{"_index":1578,"title":{},"body":{"guards/ResponseGuard.html":{}}}],["x",{"_index":834,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["yes",{"_index":236,"title":{},"body":{"modules/AppModule.html":{},"controllers/HealthController.html":{},"interfaces/ICrudService.html":{},"classes/R.html":{},"miscellaneous/functions.html":{}}}],["you'd",{"_index":1997,"title":{},"body":{"index.html":{}}}],["zoom",{"_index":225,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CronModule.html":{},"modules/EmailModule.html":{},"modules/EmailSchedulingModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"interfaces/APIResponse.html":{"url":"interfaces/APIResponse.html","title":"interface - APIResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  APIResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/domain.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        count\n                                \n                                \n                                        data\n                                \n                                \n                                            Optional\n                                        error\n                                \n                                \n                                            Optional\n                                        message\n                                \n                                \n                                            Optional\n                                        page\n                                \n                                \n                                            Optional\n                                        pageCount\n                                \n                                \n                                        statusCode\n                                \n                                \n                                            Optional\n                                        total\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        count\n                                    \n                                \n                                \n                                    \n                                        count:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                    \n                                \n                                \n                                    \n                                        data:     T\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        error\n                                    \n                                \n                                \n                                    \n                                        error:         APIError\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         APIError\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                    \n                                \n                                \n                                    \n                                        message:     string | string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string | string[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        page\n                                    \n                                \n                                \n                                    \n                                        page:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        pageCount\n                                    \n                                \n                                \n                                    \n                                        pageCount:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        statusCode\n                                    \n                                \n                                \n                                    \n                                        statusCode:     HttpStatus\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     HttpStatus\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        total\n                                    \n                                \n                                \n                                    \n                                        total:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { HttpStatus } from '@nestjs/common'\n\nexport type Results =\n    | GetAppLaunchData\n    | GetUserProfile\n    | GetUserPosts\n    | GetComments\n    | GetRescueList\n    | GetFollowers\n    | GetFollowing\n\nexport type APIError = Error | string | null\n\nexport interface Result {\n    data: T\n    error?: APIError\n    message?: string | string[]\n    statusCode: HttpStatus\n}\n\nexport interface APIResponse {\n    data: T\n    error?: APIError\n    message?: string | string[]\n    statusCode: HttpStatus\n\n    count?: number\n    page?: number\n    pageCount?: number\n    total?: number\n}\n\nexport interface GetAppLaunchData {\n    link: 'api:/'\n    response: APIResponse\n}\n\nexport interface GetUserProfile {\n    link: 'api:v1/user/getUserProfile?userId=25'\n    response: APIResponse\n}\n\nexport interface GetUserPosts {\n    link: 'api:v1/user/getUserPosts?pageNo=0&pageSize=25'\n    response: APIResponse\n}\n\nexport interface GetRescueList {\n    link: 'api:v1/rescue/getRescueList?pageNo=0&pageSize=10&status=pending|inProgress|completed|nearest'\n    response: APIResponse\n}\n\nexport interface GetComments {\n    link: 'api:v1/rescue/getComments?pageNo=0&pageSize=10&postId=1230'\n    response: APIResponse\n}\n\nexport interface GetFollowers {\n    link: 'api:v1/rescue/getUserFollowers?userId=1230'\n    response: APIResponse\n}\n\nexport interface GetFollowing {\n    link: 'api:v1/rescue/getUserFollowing?userId=1230'\n    response: APIResponse\n}\n\nexport interface AppLaunchAction {\n    actionId: number\n    action: string\n    isActive: boolean\n    subject?: string\n}\n\nexport interface User {\n    usesId: number\n\n    coverImage: string\n    following: boolean\n    gender: string\n    isOwnProfile: number\n    isRescuer: boolean\n    latitude: number\n    longitude: number\n    numberOfFollowers: number\n    numberOfFollowing: number\n    numberOfPosts: number\n    numberOfRescuesCompleted: number\n    numberOfRescuesCreated: number\n    numberOfRescuesInProgress: number\n    profileImage: string\n    rescuer: boolean\n    userAddress: string\n    userContacts: string\n    userEmail: string\n    userName: string\n    badge: {\n        badgeId: number\n        badgeName: string\n        badgeDescription: string\n        recuesCompletionNeeded: number\n    }\n    setting: {\n        showMyContacts: boolean\n        getNotifications: boolean\n    }\n}\n\nexport interface PostType {\n    postTypeId: number\n    postType: string\n}\n\nexport interface PostedByUser {\n    usesId: number\n    badgeName: string\n    following: boolean\n    profileImage: string\n    rescuer: boolean\n    userName: string\n}\n\nexport interface UserPost {\n    postId: number\n    commentsCount: number\n    isUserReactedToPost: boolean\n    ownPage: boolean\n    postBy: PostedByUser\n    postImage: string\n    postTime: string\n    postType: PostType\n    postVideo: string\n    reactionsCount: number\n    timeAgo: string\n\n    adCorporateLogoUrl: string | null\n    corporateDescription: string | null\n    corporateName: string | null\n}\n\nexport interface UserPosts {\n    isRecent: boolean\n    feed: UserPost[]\n}\n\nexport interface Rescues {\n    rescueId: number\n    animalImageUrl: string\n    distance: number\n    distanceAway: string\n    emergencyType: string\n    postedBy: string\n    postedMinAgo: string\n    rescueDate: Date\n    rescuedPetName: string\n    rescueLocality: string\n    rescuers: {\n        contact: number\n        name: string\n        profileId: number\n        profileImageUrl: string\n        rescues: boolean\n        showMyNumber: boolean\n    }\n    rescueStatus: string\n    viewsCont: number\n}\n\nexport interface RescueLists {\n    rescues: Rescues[]\n}\n\nexport interface Comment {\n    commentId: number\n    comment: string\n    commentedUseName: string\n    commentedUserId: number\n    timeAgo: string\n}\n\nexport interface Comments {\n    comments: Comment[]\n}\n\nexport interface Follower {\n    userId: number\n    userName: string\n    profileImage: string\n    areYouFollowing: boolean\n    showRemoveOption: boolean\n}\n\nexport type Following = Follower\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ApiException.html":{"url":"classes/ApiException.html","title":"class - ApiException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ApiException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/base/swagger-gen/api-errors.decorator.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                error\n                            \n                            \n                                    Optional\n                                errors\n                            \n                            \n                                    Optional\n                                message\n                            \n                            \n                                    Optional\n                                path\n                            \n                            \n                                    Optional\n                                stack\n                            \n                            \n                                    Optional\n                                status\n                            \n                            \n                                    Optional\n                                statusCode\n                            \n                            \n                                    Optional\n                                timestamp\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(message: string, error: string, stack: string, errors: unknown, path: string, statusCode: number)\n                    \n                \n                        \n                            \n                                Defined in src/base/swagger-gen/api-errors.decorator.ts:36\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        message\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        error\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        stack\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        errors\n                                                  \n                                                        \n                                                                    unknown\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        path\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        statusCode\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            error\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiPropertyOptional()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/base/swagger-gen/api-errors.decorator.ts:28\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            errors\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     unknown\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiPropertyOptional()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/base/swagger-gen/api-errors.decorator.ts:30\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            message\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiPropertyOptional()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/base/swagger-gen/api-errors.decorator.ts:24\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            path\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiPropertyOptional()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/base/swagger-gen/api-errors.decorator.ts:34\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            stack\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiPropertyOptional()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/base/swagger-gen/api-errors.decorator.ts:36\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            status\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiPropertyOptional()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/base/swagger-gen/api-errors.decorator.ts:26\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            statusCode\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiPropertyOptional()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/base/swagger-gen/api-errors.decorator.ts:22\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            timestamp\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiPropertyOptional()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/base/swagger-gen/api-errors.decorator.ts:32\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n    applyDecorators,\n    BadRequestException,\n    ConflictException,\n    ForbiddenException,\n    HttpStatus,\n    InternalServerErrorException,\n    NotFoundException,\n    UnauthorizedException,\n} from '@nestjs/common'\nimport {\n    ApiBadRequestResponse,\n    ApiForbiddenResponse,\n    ApiInternalServerErrorResponse,\n    ApiNotFoundResponse,\n    ApiUnauthorizedResponse,\n    ApiConflictResponse,\n    ApiPropertyOptional,\n} from '@nestjs/swagger'\n\nexport class ApiException {\n    @ApiPropertyOptional() statusCode?: number\n\n    @ApiPropertyOptional() message?: string\n\n    @ApiPropertyOptional() status?: string\n\n    @ApiPropertyOptional() error?: string\n\n    @ApiPropertyOptional() errors?: unknown\n\n    @ApiPropertyOptional() timestamp?: string\n\n    @ApiPropertyOptional() path?: string\n\n    @ApiPropertyOptional() stack?: string\n\n    constructor(\n        message: string,\n        error: string,\n        stack: string,\n        errors: unknown,\n        path: string,\n        statusCode: number,\n    ) {\n        this.message = message\n        this.error = error\n        this.stack = stack\n        this.errors = errors\n        this.path = path\n        this.timestamp = new Date().toISOString()\n        this.statusCode = statusCode\n        this.status = HttpStatus[statusCode]\n    }\n}\n\nexport function ApiErrors() {\n    return applyDecorators(\n        ApiBadRequestResponse({\n            type: BadRequestException,\n            description: 'BadRequestException',\n        }),\n        ApiInternalServerErrorResponse({\n            type: InternalServerErrorException,\n        }),\n        ApiUnauthorizedResponse({\n            type: UnauthorizedException,\n        }),\n        ApiForbiddenResponse({\n            type: ForbiddenException,\n        }),\n        ApiConflictResponse({\n            type: ConflictException,\n        }),\n        ApiNotFoundResponse({ type: NotFoundException, description: 'Not found' }),\n    )\n\n    return applyDecorators(\n        ApiNotFoundResponse({ type: ApiException, description: 'Not found' }),\n        ApiBadRequestResponse({ type: ApiException, description: 'Bad Request' }),\n        ApiInternalServerErrorResponse({\n            type: ApiException,\n            description: 'Internal Server Error',\n        }),\n        ApiUnauthorizedResponse({\n            type: ApiException,\n            description: 'Unauthorized',\n        }),\n        ApiForbiddenResponse({ type: ApiException, description: 'Forbidden' }),\n    )\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getHello\n                        \n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common'\nimport { ApiTags } from '@nestjs/swagger'\n\n@Controller(AppController.path)\n@ApiTags(AppController.name)\nexport class AppController {\n    static path = '/'\n\n    @Get() getHello() {\n        return 'Hello World!'\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/AppLaunchAction.html":{"url":"interfaces/AppLaunchAction.html","title":"interface - AppLaunchAction","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  AppLaunchAction\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/domain.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        action\n                                \n                                \n                                        actionId\n                                \n                                \n                                        isActive\n                                \n                                \n                                            Optional\n                                        subject\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        action\n                                    \n                                \n                                \n                                    \n                                        action:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        actionId\n                                    \n                                \n                                \n                                    \n                                        actionId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        isActive\n                                    \n                                \n                                \n                                    \n                                        isActive:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        subject\n                                    \n                                \n                                \n                                    \n                                        subject:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { HttpStatus } from '@nestjs/common'\n\nexport type Results =\n    | GetAppLaunchData\n    | GetUserProfile\n    | GetUserPosts\n    | GetComments\n    | GetRescueList\n    | GetFollowers\n    | GetFollowing\n\nexport type APIError = Error | string | null\n\nexport interface Result {\n    data: T\n    error?: APIError\n    message?: string | string[]\n    statusCode: HttpStatus\n}\n\nexport interface APIResponse {\n    data: T\n    error?: APIError\n    message?: string | string[]\n    statusCode: HttpStatus\n\n    count?: number\n    page?: number\n    pageCount?: number\n    total?: number\n}\n\nexport interface GetAppLaunchData {\n    link: 'api:/'\n    response: APIResponse\n}\n\nexport interface GetUserProfile {\n    link: 'api:v1/user/getUserProfile?userId=25'\n    response: APIResponse\n}\n\nexport interface GetUserPosts {\n    link: 'api:v1/user/getUserPosts?pageNo=0&pageSize=25'\n    response: APIResponse\n}\n\nexport interface GetRescueList {\n    link: 'api:v1/rescue/getRescueList?pageNo=0&pageSize=10&status=pending|inProgress|completed|nearest'\n    response: APIResponse\n}\n\nexport interface GetComments {\n    link: 'api:v1/rescue/getComments?pageNo=0&pageSize=10&postId=1230'\n    response: APIResponse\n}\n\nexport interface GetFollowers {\n    link: 'api:v1/rescue/getUserFollowers?userId=1230'\n    response: APIResponse\n}\n\nexport interface GetFollowing {\n    link: 'api:v1/rescue/getUserFollowing?userId=1230'\n    response: APIResponse\n}\n\nexport interface AppLaunchAction {\n    actionId: number\n    action: string\n    isActive: boolean\n    subject?: string\n}\n\nexport interface User {\n    usesId: number\n\n    coverImage: string\n    following: boolean\n    gender: string\n    isOwnProfile: number\n    isRescuer: boolean\n    latitude: number\n    longitude: number\n    numberOfFollowers: number\n    numberOfFollowing: number\n    numberOfPosts: number\n    numberOfRescuesCompleted: number\n    numberOfRescuesCreated: number\n    numberOfRescuesInProgress: number\n    profileImage: string\n    rescuer: boolean\n    userAddress: string\n    userContacts: string\n    userEmail: string\n    userName: string\n    badge: {\n        badgeId: number\n        badgeName: string\n        badgeDescription: string\n        recuesCompletionNeeded: number\n    }\n    setting: {\n        showMyContacts: boolean\n        getNotifications: boolean\n    }\n}\n\nexport interface PostType {\n    postTypeId: number\n    postType: string\n}\n\nexport interface PostedByUser {\n    usesId: number\n    badgeName: string\n    following: boolean\n    profileImage: string\n    rescuer: boolean\n    userName: string\n}\n\nexport interface UserPost {\n    postId: number\n    commentsCount: number\n    isUserReactedToPost: boolean\n    ownPage: boolean\n    postBy: PostedByUser\n    postImage: string\n    postTime: string\n    postType: PostType\n    postVideo: string\n    reactionsCount: number\n    timeAgo: string\n\n    adCorporateLogoUrl: string | null\n    corporateDescription: string | null\n    corporateName: string | null\n}\n\nexport interface UserPosts {\n    isRecent: boolean\n    feed: UserPost[]\n}\n\nexport interface Rescues {\n    rescueId: number\n    animalImageUrl: string\n    distance: number\n    distanceAway: string\n    emergencyType: string\n    postedBy: string\n    postedMinAgo: string\n    rescueDate: Date\n    rescuedPetName: string\n    rescueLocality: string\n    rescuers: {\n        contact: number\n        name: string\n        profileId: number\n        profileImageUrl: string\n        rescues: boolean\n        showMyNumber: boolean\n    }\n    rescueStatus: string\n    viewsCont: number\n}\n\nexport interface RescueLists {\n    rescues: Rescues[]\n}\n\nexport interface Comment {\n    commentId: number\n    comment: string\n    commentedUseName: string\n    commentedUserId: number\n    timeAgo: string\n}\n\nexport interface Comments {\n    comments: Comment[]\n}\n\nexport interface Follower {\n    userId: number\n    userName: string\n    profileImage: string\n    areYouFollowing: boolean\n    showRemoveOption: boolean\n}\n\nexport type Following = Follower\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\n\n\nEmailSchedulingModule\n\nEmailSchedulingModule\n\nAppModule -->\n\nEmailSchedulingModule->AppModule\n\n\n\n\n\nTagsModule\n\nTagsModule\n\nAppModule -->\n\nTagsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n        \n            Description\n        \n        \n            App module\n\n        \n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                        \n                            HealthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            DatabaseModule\n                        \n                        \n                            EmailSchedulingModule\n                        \n                        \n                            TagsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onApplicationShutdown\n                        \n                        \n                    \n                \n            \n            \n                \nonApplicationShutdown(signal?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app.module.ts:82\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    signal\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onModuleInit\n                        \n                        \n                    \n                \n            \n            \n                \nonModuleInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app.module.ts:78\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import { Module, OnApplicationShutdown, OnModuleInit } from '@nestjs/common'\nimport { ConfigModule } from '@nestjs/config'\nimport { GraphQLModule } from '@nestjs/graphql'\nimport { ScheduleModule } from '@nestjs/schedule'\nimport { TerminusModule } from '@nestjs/terminus'\n\nimport * as Joi from '@hapi/joi'\n\nimport { AppController } from './app.controller'\nimport { AuthModule } from './auth/auth.module'\nimport { CronModule } from './cron/cron.module'\nimport { DatabaseModule, graphQlSchema } from './database/database.module'\nimport { EmailSchedulingModule } from './emailScheduling/emailScheduling.module'\nimport { HealthController } from './health/health.controller'\nimport { TagsModule } from './tags/tags.module'\nimport { UsersModule } from './users/users.module'\n\nconst ConfigModuleOptions = {\n    isGlobal: true,\n    validationOptions: {\n        allowUnknown: true,\n        abortEarly: true,\n    },\n    /* eslint-disable */\n    validationSchema: Joi.object({\n        PORT: Joi.number().default(3000),\n        NODE_ENV: Joi.string()\n            .required()\n            .valid('development', 'production', 'test', 'provision')\n            .default('development'),\n\n        HOST: Joi.string().required().default('http://localhost:3000'),\n\n        JWTKEY: Joi.string().required(),\n        TOKEN_EXPIRATION: Joi.string().required(),\n\n        DATABASE_URL: Joi.string().required(),\n        DATABASE_DEBUG: Joi.string().required(),\n\n        GOOGLE_SECRET: Joi.string().required(),\n        GOOGLE_CLIENT_ID: Joi.string().required(),\n    }),\n    /* eslint-enable */\n}\n\n/**\n * App module\n */\n@Module({\n    controllers: [AppController, HealthController],\n    imports: [\n        ConfigModule.forRoot(ConfigModuleOptions),\n        DatabaseModule,\n        GraphQLModule.forRoot({\n            debug: true,\n            playground: true,\n            transformSchema: () => graphQlSchema,\n        }),\n        TerminusModule, // Health module\n        ScheduleModule.forRoot(), // CronModules deps\n        // CronModule,\n        EmailSchedulingModule,\n        AuthModule,\n        TagsModule,\n        UsersModule,\n    ],\n    providers: [],\n})\nexport class AppModule implements OnModuleInit, OnApplicationShutdown {\n    /*\n     * When the application receives a termination signal it will call any registered\n     * onModuleDestroy(), beforeApplicationShutdown(), then onApplicationShutdown() methods\n     * (in the sequence described above) with the corresponding signal as the first parameter.\n     * If a registered function awaits an asynchronous call (returns a promise), Nest will not\n     * continue in the sequence until the promise is resolved or rejected.\n     */\n\n    onModuleInit(): void {\n        console.info(`ModuleInit - AppModule has been initialized.`)\n    }\n\n    onApplicationShutdown(signal?: string): void {\n        console.error(\n            // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n            `ApplicationShutdown - AppModule has been shutdown with ${signal} signal`,\n        )\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                googleAuth\n                            \n                            \n                                googleAuthRedirect\n                            \n                            \n                                    Async\n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            googleAuth\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    googleAuth()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('google')@UseGuards(undefined)\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:70\n                \n            \n\n\n            \n                \n                    Google Login\nNo-op function as @UseGuards(AuthGuard('google')) takes care of login\n\n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            googleAuthRedirect\n                        \n                        \n                    \n                \n            \n            \n                \ngoogleAuthRedirect(req: Request, res)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('google/redirect')@UseGuards(undefined)\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:77\n                \n            \n\n\n            \n                \n                    Google Login Callback\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            login\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    login(req: Request, userLoginDto: UserLoginDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Post('login')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:45\n                \n            \n\n\n            \n                \n                    Login\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userLoginDto\n                                    \n                                                UserLoginDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Body,\n    Controller,\n    Get,\n    HttpStatus,\n    Post,\n    Req,\n    Res,\n    UseGuards,\n} from '@nestjs/common'\nimport { AuthGuard } from '@nestjs/passport'\nimport { ApiProperty, ApiTags } from '@nestjs/swagger'\n\nimport { IsNotEmpty } from 'class-validator'\nimport type { Request } from 'express'\n\nimport { UsersService } from '../users/users.service'\nimport { AuthService } from './auth.service'\n\nexport class UserLoginDto {\n    @ApiProperty({ example: 'admin@demo.com' })\n    @IsNotEmpty()\n    readonly email!: string\n\n    @ApiProperty({ example: '12345678' })\n    @IsNotEmpty()\n    readonly password!: string\n}\n\n@Controller(AuthController.path)\n@ApiTags(AuthController.name)\nexport class AuthController {\n    static path = 'auth'\n\n    constructor(\n        readonly authService: AuthService,\n        readonly userService: UsersService,\n    ) {}\n\n    /**\n     * Login\n     */\n    @UseGuards(AuthGuard('local'))\n    @Post('login')\n    async login(\n        @Req() req: Request,\n        @Body() userLoginDto: UserLoginDto,\n    ): Promise {\n        const { user } = req\n        const { email, password } = userLoginDto\n\n        const data = await this.authService.login(user)\n\n        return {\n            data,\n            statusCode: HttpStatus.OK,\n        }\n    }\n\n    /**\n     * Google Login\n     *\n     * No-op function as `@UseGuards(AuthGuard('google'))` takes care of login\n     */\n    @Get('google')\n    @UseGuards(AuthGuard('google'))\n    async googleAuth() {} // eslint-disable-line @typescript-eslint/no-empty-function\n\n    /**\n     * Google Login Callback\n     */\n    @Get('google/redirect')\n    @UseGuards(AuthGuard('google'))\n    googleAuthRedirect(@Req() req: Request, @Res() res) {\n        if (process.env.NODE_ENV !== 'production') return req.user\n\n        if (req.user.token)\n            return res.redirect(\n                // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n                `${process.env.HOST}:${process.env.PORT}/#/sign-in/success?jwt=${req.user.token}`,\n            )\n\n        return res.redirect(\n            // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n            `${process.env.host}:${process.env.port}/#/auth/register`,\n        )\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nGoogleStrategy\n\nGoogleStrategy\n\nAuthModule -->\n\nGoogleStrategy->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n        \n            Description\n        \n        \n            Auth module\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            GoogleStrategy\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            LocalStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common'\nimport { ConfigModule, ConfigService } from '@nestjs/config'\nimport { JwtModule } from '@nestjs/jwt'\nimport { PassportModule } from '@nestjs/passport'\n\nimport { UsersModule } from '../users/users.module'\nimport { AuthController } from './auth.controller'\nimport { AuthService } from './auth.service'\nimport { GoogleStrategy } from './google.strategy'\nimport { JwtStrategy } from './jwt.strategy'\nimport { LocalStrategy } from './local.strategy'\n\n/**\n * Auth module\n */\n@Module({\n    imports: [\n        ConfigModule,\n        UsersModule,\n        PassportModule,\n        JwtModule.registerAsync({\n            imports: [ConfigModule],\n            inject: [ConfigService],\n            useFactory: async (\n                configService: ConfigService,\n            ) => ({\n                secret: configService.get('JWTKEY'),\n                signOptions: {\n                    expiresIn: configService.get('TOKEN_EXPIRATION'),\n                },\n            }),\n        }),\n    ],\n    providers: [AuthService, LocalStrategy, JwtStrategy, GoogleStrategy],\n    controllers: [AuthController],\n    exports: [PassportModule, JwtModule],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                comparePassword\n                            \n                            \n                                    Async\n                                generateToken\n                            \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                validateOAuthLoginEmail\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UsersService, jwtService: JwtService, config: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            comparePassword\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    comparePassword(enteredPassword: string, dbPassword: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    enteredPassword\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dbPassword\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            generateToken\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    generateToken(user: Record)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                Record\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            login\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    login(user: Record)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:51\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                Record\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validateOAuthLoginEmail\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validateOAuthLoginEmail(accessToken, refreshToken, profile)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:55\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    accessToken\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    refreshToken\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    profile\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validateUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validateUser(email: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n    Injectable,\n    InternalServerErrorException,\n    UnauthorizedException,\n} from '@nestjs/common'\nimport { ConfigService } from '@nestjs/config'\nimport { JwtService } from '@nestjs/jwt'\n\nimport * as bcrypt from 'bcrypt'\n\nimport { UsersService } from '../users/users.service'\n\n@Injectable()\nexport class AuthService {\n    constructor(\n        readonly userService: UsersService,\n        readonly jwtService: JwtService,\n        readonly config: ConfigService,\n    ) {}\n\n    async comparePassword(enteredPassword: string, dbPassword: string) {\n        return bcrypt.compare(enteredPassword, dbPassword)\n    }\n\n    async generateToken(user: Record) {\n        const token = await this.jwtService.signAsync(user)\n        const expiresIn = Number(this.config.get('TOKEN_EXPIRATION'))\n\n        return {\n            token,\n            expiresIn,\n        }\n    }\n\n    async validateUser(email: string, password: string) {\n        const user = await this.userService.findOneByEmail(email)\n\n        if (!user)\n            return Promise.reject(\n                new UnauthorizedException('Unknown User Credentials'),\n            )\n\n        const match = await this.comparePassword(password, user.password)\n\n        if (!match)\n            return Promise.reject(new UnauthorizedException('Invalid Credentials'))\n\n        return user.toJSON()\n    }\n\n    async login(user: Record) {\n        return this.generateToken(user)\n    }\n\n    async validateOAuthLoginEmail(accessToken, refreshToken, profile) {\n        try {\n            const { name, emails, photos } = profile\n\n            const primaryEmail = emails[0].value\n\n            const user = (\n                await this.userService.findOneByEmail(primaryEmail)\n            ).toJSON()\n\n            return await this.generateToken(user)\n        } catch (e) {\n            return Promise.reject(\n                new InternalServerErrorException(e, 'validateOAuthLoginEmail'),\n            )\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BaseModel.html":{"url":"classes/BaseModel.html","title":"class - BaseModel","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BaseModel\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/models/base.model.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                            IBaseModel\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                created_at\n                            \n                            \n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Static\n                                hidden\n                            \n                            \n                                id\n                            \n                            \n                                    Static\n                                QueryBuilder\n                            \n                            \n                                updated_at\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                $beforeUpdate\n                            \n                            \n                                    Async\n                                fetchRelation\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            created_at\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                        \n                            \n                                    Defined in src/database/models/base.model.ts:39\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            deleted_at\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     any | null\n\n                        \n                    \n                        \n                            \n                                    Defined in src/database/models/base.model.ts:43\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            hidden\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : [\n        'salt',\n        'password',\n        'created_at',\n        'updated_at',\n        // 'deleted_at'\n    ]\n                        \n                    \n                        \n                            \n                                    Defined in src/database/models/base.model.ts:25\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/database/models/base.model.ts:37\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            QueryBuilder\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : CustomQueryBuilder\n                        \n                    \n                        \n                            \n                                    Defined in src/database/models/base.model.ts:35\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updated_at\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                        \n                            \n                                    Defined in src/database/models/base.model.ts:41\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            $beforeUpdate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    $beforeUpdate(opt: ModelOptions, queryContext: QueryContext)\n                \n            \n\n\n            \n                \n                    Defined in src/database/models/base.model.ts:60\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    opt\n                                    \n                                            ModelOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    queryContext\n                                    \n                                            QueryContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            fetchRelation\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    fetchRelation(expression: string | Record, options: Objection.FetchGraphOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/database/models/base.model.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    expression\n                                    \n                                                string | Record\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                            Objection.FetchGraphOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import Objection, {\n    raw,\n    mixin,\n    Model,\n    ModelOptions,\n    QueryContext,\n    RelationExpression,\n} from 'objection'\nimport { DBErrors } from 'objection-db-errors'\nimport visibilityPlugin from 'objection-visibility'\n\nimport { CustomQueryBuilder } from './customQueryBuilder'\n\nexport interface IBaseModel {\n    id: number\n    created_at: any\n    updated_at: any\n    deleted_at?: any\n}\n\nexport class BaseModel\n    extends mixin(Model, [visibilityPlugin, DBErrors])\n    implements IBaseModel {\n    // hidden fields to filter from query result\n    static hidden = [\n        'salt',\n        'password',\n        'created_at',\n        'updated_at',\n        // 'deleted_at'\n    ]\n\n    // QueryBuilderType!: CustomQueryBuilder // custom query builder for pagination\n\n    static QueryBuilder = CustomQueryBuilder\n\n    id!: number\n\n    created_at: any\n\n    updated_at: any\n\n    deleted_at?: any | null\n\n    // fetch data with relation mapping\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    async fetchRelation(\n        expression: string | Record,\n        options: Objection.FetchGraphOptions,\n    ) {\n        if (typeof expression === 'string' && expression.toString() in this) {\n            // @ts-ignore\n            if (this[expression.toString()]) return this\n        }\n\n        await this.$fetchGraph(expression, options)\n        return this\n    }\n\n    async $beforeUpdate(opt: ModelOptions, queryContext: QueryContext) {\n        await super.$beforeUpdate(opt, queryContext)\n\n        this.updated_at = raw('CURRENT_TIMESTAMP') // new Date().toISOString() // fn.now()\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/BaseRoute.html":{"url":"interfaces/BaseRoute.html","title":"interface - BaseRoute","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  BaseRoute\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/base/swagger-gen/utils/other.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        enable\n                                \n                                \n                                        method\n                                \n                                \n                                        name\n                                \n                                \n                                        override\n                                \n                                \n                                        path\n                                \n                                \n                                        withParams\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        enable\n                                    \n                                \n                                \n                                    \n                                        enable:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        method\n                                    \n                                \n                                \n                                    \n                                        method:         RequestMethod\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         RequestMethod\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                    \n                                \n                                \n                                    \n                                        name:         BaseRouteName\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         BaseRouteName\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        override\n                                    \n                                \n                                \n                                    \n                                        override:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        path\n                                    \n                                \n                                \n                                    \n                                        path:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        withParams\n                                    \n                                \n                                \n                                    \n                                        withParams:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { RequestMethod, ValidationPipeOptions } from '@nestjs/common'\nimport { SwaggerEnumType } from '@nestjs/swagger/dist/types/swagger-enum.type'\n\nexport declare type BaseRouteName =\n    | 'getManyBase'\n    | 'getOneBase'\n    | 'createOneBase'\n    | 'createManyBase'\n    | 'updateOneBase'\n    | 'replaceOneBase'\n    | 'deleteOneBase'\n    | 'getOne'\n\nexport interface BaseRoute {\n    name: BaseRouteName\n    path: string\n    method: RequestMethod\n    enable: boolean\n    override: boolean\n    withParams: boolean\n}\n\nexport interface GetManyDefaultResponse {\n    data: T[]\n    count: number\n    total: number\n    page: number\n    pageCount: number\n}\n\nexport interface ParamOption {\n    field?: string\n    type?: 'number' | 'string' | 'uuid'\n    enum?: SwaggerEnumType\n    primary?: boolean\n    disabled?: boolean\n}\n\nexport interface ParamsOptions {\n    [key: string]: ParamOption\n}\n\nexport interface CrudOptions {\n    model: {\n        type: { name: string }\n    }\n    dto?: {}\n    routes?: {\n        deleteOneBase?: { returnDeleted?: boolean }\n    }\n    validation?: ValidationPipeOptions | false\n    params?: ParamsOptions\n    query?: {\n        limit?: number\n        maxLimit?: number\n        cache?: number | false\n        alwaysPaginate?: boolean\n    }\n    serialize?: {\n        getMany?: false | object\n        get?: false | object\n        create?: false | object\n        createMany?: false | object\n        update?: false | object\n        replace?: false | object\n        delete?: false | object\n    }\n}\n\nexport function safeRequire(path: string): T | null {\n    try {\n        // eslint-disable-next-line global-require,@typescript-eslint/no-var-requires,import/no-dynamic-require\n        const pack = require(path)\n        return pack\n    } catch (_) {\n        return null\n    }\n}\n\nexport const swagger = safeRequire('@nestjs/swagger')\nexport const swaggerConst = safeRequire('@nestjs/swagger/dist/constants')\n\nexport function ApiProperty(options?: any): PropertyDecorator {\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    return (target: object, propertyKey: string | symbol) => {\n        if (swagger) {\n            const ApiPropertyDecorator =\n                swagger.ApiProperty || swagger.ApiModelProperty\n            ApiPropertyDecorator(options)(target, propertyKey)\n        }\n    }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Comment.html":{"url":"interfaces/Comment.html","title":"interface - Comment","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Comment\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/domain.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        comment\n                                \n                                \n                                        commentedUseName\n                                \n                                \n                                        commentedUserId\n                                \n                                \n                                        commentId\n                                \n                                \n                                        timeAgo\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        comment\n                                    \n                                \n                                \n                                    \n                                        comment:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        commentedUseName\n                                    \n                                \n                                \n                                    \n                                        commentedUseName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        commentedUserId\n                                    \n                                \n                                \n                                    \n                                        commentedUserId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        commentId\n                                    \n                                \n                                \n                                    \n                                        commentId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        timeAgo\n                                    \n                                \n                                \n                                    \n                                        timeAgo:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { HttpStatus } from '@nestjs/common'\n\nexport type Results =\n    | GetAppLaunchData\n    | GetUserProfile\n    | GetUserPosts\n    | GetComments\n    | GetRescueList\n    | GetFollowers\n    | GetFollowing\n\nexport type APIError = Error | string | null\n\nexport interface Result {\n    data: T\n    error?: APIError\n    message?: string | string[]\n    statusCode: HttpStatus\n}\n\nexport interface APIResponse {\n    data: T\n    error?: APIError\n    message?: string | string[]\n    statusCode: HttpStatus\n\n    count?: number\n    page?: number\n    pageCount?: number\n    total?: number\n}\n\nexport interface GetAppLaunchData {\n    link: 'api:/'\n    response: APIResponse\n}\n\nexport interface GetUserProfile {\n    link: 'api:v1/user/getUserProfile?userId=25'\n    response: APIResponse\n}\n\nexport interface GetUserPosts {\n    link: 'api:v1/user/getUserPosts?pageNo=0&pageSize=25'\n    response: APIResponse\n}\n\nexport interface GetRescueList {\n    link: 'api:v1/rescue/getRescueList?pageNo=0&pageSize=10&status=pending|inProgress|completed|nearest'\n    response: APIResponse\n}\n\nexport interface GetComments {\n    link: 'api:v1/rescue/getComments?pageNo=0&pageSize=10&postId=1230'\n    response: APIResponse\n}\n\nexport interface GetFollowers {\n    link: 'api:v1/rescue/getUserFollowers?userId=1230'\n    response: APIResponse\n}\n\nexport interface GetFollowing {\n    link: 'api:v1/rescue/getUserFollowing?userId=1230'\n    response: APIResponse\n}\n\nexport interface AppLaunchAction {\n    actionId: number\n    action: string\n    isActive: boolean\n    subject?: string\n}\n\nexport interface User {\n    usesId: number\n\n    coverImage: string\n    following: boolean\n    gender: string\n    isOwnProfile: number\n    isRescuer: boolean\n    latitude: number\n    longitude: number\n    numberOfFollowers: number\n    numberOfFollowing: number\n    numberOfPosts: number\n    numberOfRescuesCompleted: number\n    numberOfRescuesCreated: number\n    numberOfRescuesInProgress: number\n    profileImage: string\n    rescuer: boolean\n    userAddress: string\n    userContacts: string\n    userEmail: string\n    userName: string\n    badge: {\n        badgeId: number\n        badgeName: string\n        badgeDescription: string\n        recuesCompletionNeeded: number\n    }\n    setting: {\n        showMyContacts: boolean\n        getNotifications: boolean\n    }\n}\n\nexport interface PostType {\n    postTypeId: number\n    postType: string\n}\n\nexport interface PostedByUser {\n    usesId: number\n    badgeName: string\n    following: boolean\n    profileImage: string\n    rescuer: boolean\n    userName: string\n}\n\nexport interface UserPost {\n    postId: number\n    commentsCount: number\n    isUserReactedToPost: boolean\n    ownPage: boolean\n    postBy: PostedByUser\n    postImage: string\n    postTime: string\n    postType: PostType\n    postVideo: string\n    reactionsCount: number\n    timeAgo: string\n\n    adCorporateLogoUrl: string | null\n    corporateDescription: string | null\n    corporateName: string | null\n}\n\nexport interface UserPosts {\n    isRecent: boolean\n    feed: UserPost[]\n}\n\nexport interface Rescues {\n    rescueId: number\n    animalImageUrl: string\n    distance: number\n    distanceAway: string\n    emergencyType: string\n    postedBy: string\n    postedMinAgo: string\n    rescueDate: Date\n    rescuedPetName: string\n    rescueLocality: string\n    rescuers: {\n        contact: number\n        name: string\n        profileId: number\n        profileImageUrl: string\n        rescues: boolean\n        showMyNumber: boolean\n    }\n    rescueStatus: string\n    viewsCont: number\n}\n\nexport interface RescueLists {\n    rescues: Rescues[]\n}\n\nexport interface Comment {\n    commentId: number\n    comment: string\n    commentedUseName: string\n    commentedUserId: number\n    timeAgo: string\n}\n\nexport interface Comments {\n    comments: Comment[]\n}\n\nexport interface Follower {\n    userId: number\n    userName: string\n    profileImage: string\n    areYouFollowing: boolean\n    showRemoveOption: boolean\n}\n\nexport type Following = Follower\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Comments.html":{"url":"interfaces/Comments.html","title":"interface - Comments","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Comments\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/domain.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        comments\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        comments\n                                    \n                                \n                                \n                                    \n                                        comments:         Comment[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Comment[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { HttpStatus } from '@nestjs/common'\n\nexport type Results =\n    | GetAppLaunchData\n    | GetUserProfile\n    | GetUserPosts\n    | GetComments\n    | GetRescueList\n    | GetFollowers\n    | GetFollowing\n\nexport type APIError = Error | string | null\n\nexport interface Result {\n    data: T\n    error?: APIError\n    message?: string | string[]\n    statusCode: HttpStatus\n}\n\nexport interface APIResponse {\n    data: T\n    error?: APIError\n    message?: string | string[]\n    statusCode: HttpStatus\n\n    count?: number\n    page?: number\n    pageCount?: number\n    total?: number\n}\n\nexport interface GetAppLaunchData {\n    link: 'api:/'\n    response: APIResponse\n}\n\nexport interface GetUserProfile {\n    link: 'api:v1/user/getUserProfile?userId=25'\n    response: APIResponse\n}\n\nexport interface GetUserPosts {\n    link: 'api:v1/user/getUserPosts?pageNo=0&pageSize=25'\n    response: APIResponse\n}\n\nexport interface GetRescueList {\n    link: 'api:v1/rescue/getRescueList?pageNo=0&pageSize=10&status=pending|inProgress|completed|nearest'\n    response: APIResponse\n}\n\nexport interface GetComments {\n    link: 'api:v1/rescue/getComments?pageNo=0&pageSize=10&postId=1230'\n    response: APIResponse\n}\n\nexport interface GetFollowers {\n    link: 'api:v1/rescue/getUserFollowers?userId=1230'\n    response: APIResponse\n}\n\nexport interface GetFollowing {\n    link: 'api:v1/rescue/getUserFollowing?userId=1230'\n    response: APIResponse\n}\n\nexport interface AppLaunchAction {\n    actionId: number\n    action: string\n    isActive: boolean\n    subject?: string\n}\n\nexport interface User {\n    usesId: number\n\n    coverImage: string\n    following: boolean\n    gender: string\n    isOwnProfile: number\n    isRescuer: boolean\n    latitude: number\n    longitude: number\n    numberOfFollowers: number\n    numberOfFollowing: number\n    numberOfPosts: number\n    numberOfRescuesCompleted: number\n    numberOfRescuesCreated: number\n    numberOfRescuesInProgress: number\n    profileImage: string\n    rescuer: boolean\n    userAddress: string\n    userContacts: string\n    userEmail: string\n    userName: string\n    badge: {\n        badgeId: number\n        badgeName: string\n        badgeDescription: string\n        recuesCompletionNeeded: number\n    }\n    setting: {\n        showMyContacts: boolean\n        getNotifications: boolean\n    }\n}\n\nexport interface PostType {\n    postTypeId: number\n    postType: string\n}\n\nexport interface PostedByUser {\n    usesId: number\n    badgeName: string\n    following: boolean\n    profileImage: string\n    rescuer: boolean\n    userName: string\n}\n\nexport interface UserPost {\n    postId: number\n    commentsCount: number\n    isUserReactedToPost: boolean\n    ownPage: boolean\n    postBy: PostedByUser\n    postImage: string\n    postTime: string\n    postType: PostType\n    postVideo: string\n    reactionsCount: number\n    timeAgo: string\n\n    adCorporateLogoUrl: string | null\n    corporateDescription: string | null\n    corporateName: string | null\n}\n\nexport interface UserPosts {\n    isRecent: boolean\n    feed: UserPost[]\n}\n\nexport interface Rescues {\n    rescueId: number\n    animalImageUrl: string\n    distance: number\n    distanceAway: string\n    emergencyType: string\n    postedBy: string\n    postedMinAgo: string\n    rescueDate: Date\n    rescuedPetName: string\n    rescueLocality: string\n    rescuers: {\n        contact: number\n        name: string\n        profileId: number\n        profileImageUrl: string\n        rescues: boolean\n        showMyNumber: boolean\n    }\n    rescueStatus: string\n    viewsCont: number\n}\n\nexport interface RescueLists {\n    rescues: Rescues[]\n}\n\nexport interface Comment {\n    commentId: number\n    comment: string\n    commentedUseName: string\n    commentedUserId: number\n    timeAgo: string\n}\n\nexport interface Comments {\n    comments: Comment[]\n}\n\nexport interface Follower {\n    userId: number\n    userName: string\n    profileImage: string\n    areYouFollowing: boolean\n    showRemoveOption: boolean\n}\n\nexport type Following = Follower\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateTagsDto.html":{"url":"classes/CreateTagsDto.html","title":"class - CreateTagsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateTagsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/tag.model.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                            ITag\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@IsNotEmpty()@MinLength(2)@MaxLength(36)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tags/tag.model.ts:41\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger'\n\nimport { IsNotEmpty, IsString, MaxLength, MinLength } from 'class-validator'\nimport type { JSONSchema, ModelObject, PartialModelObject } from 'objection'\n\nimport { BaseModel } from '../database/models/base.model'\n\ninterface ITag {\n    name: string\n}\n\nexport class Tag extends BaseModel implements ITag {\n    static tableName = 'tags'\n\n    name!: string\n\n    // JSON schema is not the database schema! Nothing is generated based on this.\n    // This is only used for validation. Whenever a model instance is created it is checked against this schema.\n    static jsonSchema: JSONSchema = {\n        type: 'object',\n        required: ['name'],\n        properties: {\n            id: { type: 'integer' },\n            name: { type: 'string', minLength: 2, maxLength: 255 },\n            deleted_at: {\n                anyOf: [{ type: 'string', format: 'date' }, { type: 'null' }],\n            },\n        },\n    }\n}\n\n// The `ModelObject` generic gives you a clean interface that can be used on the frontend, without any of the objection Model class properties or methods.\nexport type TagShape = ModelObject\nexport type PartialTagShape = PartialModelObject\n\nexport class CreateTagsDto implements ITag {\n    @IsString()\n    @IsNotEmpty()\n    @MinLength(2)\n    @MaxLength(36)\n    name!: string\n}\n\nexport class UpdateTagsDto extends PartialType(CreateTagsDto) {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/user.dto.ts\n        \n\n            \n                Description\n            \n            \n                Data Transfer Object\n\n            \n\n\n            \n                Implements\n            \n            \n                            IUser\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                    Optional\n                                firstName\n                            \n                            \n                                isActive\n                            \n                            \n                                    Optional\n                                lastName\n                            \n                            \n                                password\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            email\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsEmail()@IsNotEmpty()@MinLength(2)@IsEmailExists({message: 'Email exists'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/user.dto.ts:29\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            firstName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@IsNotEmpty()@MinLength(2)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/user.dto.ts:39\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isActive\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsBoolean()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/user.dto.ts:47\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            lastName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@IsNotEmpty()@MinLength(2)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/user.dto.ts:44\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@IsNotEmpty()@MinLength(8)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/user.dto.ts:34\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            username\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@IsNotEmpty()@MinLength(2)@MaxLength(36)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/user.dto.ts:23\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger'\n\nimport {\n    IsBoolean,\n    IsEmail,\n    IsNotEmpty,\n    IsString,\n    MaxLength,\n    MinLength,\n} from 'class-validator'\n\nimport { IsEmailExists } from '../infra/validator/isEmailExists'\nimport { IUser } from './user.interface'\n\n/**\n * Data Transfer Object\n */\nexport class CreateUserDto implements IUser {\n    @IsString()\n    @IsNotEmpty()\n    @MinLength(2)\n    @MaxLength(36)\n    username!: string\n\n    @IsEmail()\n    @IsNotEmpty()\n    @MinLength(2)\n    @IsEmailExists({ message: 'Email exists' })\n    email!: string\n\n    @IsString()\n    @IsNotEmpty()\n    @MinLength(8)\n    password!: string\n\n    @IsString()\n    @IsNotEmpty()\n    @MinLength(2)\n    firstName?: string\n\n    @IsString()\n    @IsNotEmpty()\n    @MinLength(2)\n    lastName?: string\n\n    @IsBoolean()\n    isActive!: boolean\n}\n\n/**\n * Data Transfer Object\n */\nexport class UpdateUserDto extends PartialType(CreateUserDto) {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CronModule.html":{"url":"modules/CronModule.html","title":"module - CronModule","body":"\n                   \n\n\n\n\n    Modules\n    CronModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_CronModule\n\n\n\ncluster_CronModule_providers\n\n\n\n\nCronService\n\nCronService\n\n\n\nCronModule\n\nCronModule\n\nCronModule -->\n\nCronService->CronModule\n\n\n\n\n\nPersistedCronService\n\nPersistedCronService\n\nCronModule -->\n\nPersistedCronService->CronModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/cron/cron.module.ts\n        \n\n\n        \n            Description\n        \n        \n            Cron module\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CronService\n                        \n                        \n                            PersistedCronService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common'\n\nimport { CronService } from './cron.service'\nimport { PersistedCronService } from './persisted-cron.service'\n\n/**\n * Cron module\n */\n@Module({\n    providers: [CronService, PersistedCronService],\n})\nexport class CronModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CronService.html":{"url":"injectables/CronService.html","title":"injectable - CronService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  CronService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/cron/cron.service.ts\n        \n\n            \n                Description\n            \n            \n                @Cron are regular cron jobs\n@Interval To declare that a method should run at a (recurring) specified interval\n@Timeout To declare that a method should run (once) at a specified timeout\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                count\n                            \n                            \n                                fact16\n                            \n                            \n                                logger\n                            \n                            \n                                times\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addCronJob\n                            \n                            \n                                addInterval\n                            \n                            \n                                addTimeout\n                            \n                            \n                                deleteCron\n                            \n                            \n                                deleteInterval\n                            \n                            \n                                deleteTimeout\n                            \n                            \n                                factorial\n                            \n                            \n                                handleCron\n                            \n                            \n                                handleInterval\n                            \n                            \n                                handleTimeout\n                            \n                            \n                                logAllCrons\n                            \n                            \n                                logIntervals\n                            \n                            \n                                logTimeouts\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(scheduler: SchedulerRegistry)\n                    \n                \n                        \n                            \n                                Defined in src/cron/cron.service.ts:28\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        scheduler\n                                                  \n                                                        \n                                                                        SchedulerRegistry\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            addCronJob\n                        \n                        \n                    \n                \n            \n            \n                \naddCronJob(name: string, seconds: string)\n                \n            \n\n\n            \n                \n                    Defined in src/cron/cron.service.ts:97\n                \n            \n\n\n            \n                \n                    Dynamically schedule a name CRON job\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Job Name\n\n                                    \n                                \n                                \n                                    seconds\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Seconds\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            addInterval\n                        \n                        \n                    \n                \n            \n            \n                \naddInterval(name: string, milliseconds: number)\n                \n            \n\n\n            \n                \n                    Defined in src/cron/cron.service.ts:136\n                \n            \n\n\n            \n                \n                    Dynamically schedule a named Interval\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Interval Name\n\n                                    \n                                \n                                \n                                    milliseconds\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Milliseconds\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            addTimeout\n                        \n                        \n                    \n                \n            \n            \n                \naddTimeout(name: string, milliseconds: number)\n                \n            \n\n\n            \n                \n                    Defined in src/cron/cron.service.ts:174\n                \n            \n\n\n            \n                \n                    Dynamically schedule a named Timeout\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Timeout Name\n\n                                    \n                                \n                                \n                                    milliseconds\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Milliseconds\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            deleteCron\n                        \n                        \n                    \n                \n            \n            \n                \ndeleteCron(name: string)\n                \n            \n\n\n            \n                \n                    Defined in src/cron/cron.service.ts:112\n                \n            \n\n\n            \n                \n                    Dynamically delete a named scheduled CRON job\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Job Name\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            deleteInterval\n                        \n                        \n                    \n                \n            \n            \n                \ndeleteInterval(name: string)\n                \n            \n\n\n            \n                \n                    Defined in src/cron/cron.service.ts:151\n                \n            \n\n\n            \n                \n                    Dynamically delete a named Interval\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Interval Name\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            deleteTimeout\n                        \n                        \n                    \n                \n            \n            \n                \ndeleteTimeout(name: string)\n                \n            \n\n\n            \n                \n                    Defined in src/cron/cron.service.ts:187\n                \n            \n\n\n            \n                \n                    Dynamically delete a named Timeout\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Timeout Name\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            factorial\n                        \n                        \n                    \n                \n            \n            \n                \nfactorial(n: number)\n                \n            \n\n\n            \n                \n                    Defined in src/cron/cron.service.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    n\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            handleCron\n                        \n                        \n                    \n                \n            \n            \n                \nhandleCron()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Cron(CronExpression.EVERY_MINUTE, {name: 'handleCronFn'})\n                \n            \n\n            \n                \n                    Defined in src/cron/cron.service.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            handleInterval\n                        \n                        \n                    \n                \n            \n            \n                \nhandleInterval()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Interval('handleIntervalFn', 100000)\n                \n            \n\n            \n                \n                    Defined in src/cron/cron.service.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            handleTimeout\n                        \n                        \n                    \n                \n            \n            \n                \nhandleTimeout()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Timeout('handleTimeoutFn', 50000)\n                \n            \n\n            \n                \n                    Defined in src/cron/cron.service.ts:63\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            logAllCrons\n                        \n                        \n                    \n                \n            \n            \n                \nlogAllCrons()\n                \n            \n\n\n            \n                \n                    Defined in src/cron/cron.service.ts:76\n                \n            \n\n\n            \n                \n                    Get all of the CRON jobs\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            logIntervals\n                        \n                        \n                    \n                \n            \n            \n                \nlogIntervals()\n                \n            \n\n\n            \n                \n                    Defined in src/cron/cron.service.ts:126\n                \n            \n\n\n            \n                \n                    Get all of the Intervals\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            logTimeouts\n                        \n                        \n                    \n                \n            \n            \n                \nlogTimeouts()\n                \n            \n\n\n            \n                \n                    Defined in src/cron/cron.service.ts:164\n                \n            \n\n\n            \n                \n                    Get all of the Timeouts\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            count\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 0\n                        \n                    \n                        \n                            \n                                    Defined in src/cron/cron.service.ts:22\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            fact16\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 20922789888000\n                        \n                    \n                        \n                            \n                                    Defined in src/cron/cron.service.ts:28\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            logger\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Logger(CronService.name)\n                        \n                    \n                        \n                            \n                                    Defined in src/cron/cron.service.ts:24\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            times\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 50000000\n                        \n                    \n                        \n                            \n                                    Defined in src/cron/cron.service.ts:26\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable, Logger } from '@nestjs/common'\nimport {\n    Cron,\n    CronExpression,\n    Interval,\n    SchedulerRegistry,\n    Timeout,\n} from '@nestjs/schedule'\n\nimport { CronJob } from 'cron'\n\n/**\n * `@Cron` are regular cron jobs\n *\n * `@Interval` To declare that a method should run at a (recurring) specified interval\n *\n * `@Timeout` To declare that a method should run (once) at a specified timeout\n */\n@Injectable()\nexport class CronService {\n    static count = 0\n\n    logger = new Logger(CronService.name)\n\n    times = 50000000\n\n    fact16 = 20922789888000\n\n    constructor(readonly scheduler: SchedulerRegistry) {}\n\n    factorial(n: number): number {\n        if (n === 1) return 1\n        return n * this.factorial(n - 1)\n    }\n\n    @Cron(CronExpression.EVERY_MINUTE, { name: 'handleCronFn' })\n    handleCron() {\n        CronService.count += 1\n        this.logger.debug(\n            `Called when the second is 60, current count is ${CronService.count}`,\n        )\n\n        let ok = true\n        for (let i = 0; i  {\n            let next\n\n            try {\n                next = value.nextDates().toDate()\n            } catch (e) {\n                next = 'error: next fire date is in the past!'\n            }\n            // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n            this.logger.log(`job: ${key} -> next: ${next}`)\n        })\n    }\n\n    /**\n     * Dynamically schedule a name CRON job\n     * @param {string} name Job Name\n     * @param {Number} seconds Seconds\n     */\n    addCronJob(name: string, seconds: string) {\n        const job = new CronJob(`${seconds} * * * * *`, () => {\n            this.logger.warn(`time (${seconds}) for job ${name} to run!`)\n        })\n\n        this.scheduler.addCronJob(name, job)\n        job.start()\n\n        this.logger.warn(`job ${name} added for each minute at ${seconds} seconds!`)\n    }\n\n    /**\n     * Dynamically delete a named scheduled CRON job\n     * @param {string} name Job Name\n     */\n    deleteCron(name: string) {\n        const job = this.scheduler.getCronJob(name)\n\n        if (job) {\n            this.scheduler.deleteCronJob(name)\n            this.logger.warn(`job ${name} deleted!`)\n        } else {\n            this.logger.warn(`job ${name} not found!`)\n        }\n    }\n\n    /**\n     * Get all of the Intervals\n     */\n    logIntervals() {\n        const intervals = this.scheduler.getIntervals()\n        intervals.forEach((key) => this.logger.log(`Interval: ${key}`))\n    }\n\n    /**\n     * Dynamically schedule a named Interval\n     * @param {string} name Interval Name\n     * @param {Number} milliseconds Milliseconds\n     */\n    addInterval(name: string, milliseconds: number) {\n        const callback = () => {\n            this.logger.warn(\n                `Interval ${name} executing at time (${milliseconds})!`,\n            )\n        }\n\n        const interval = setInterval(callback, milliseconds)\n        this.scheduler.addInterval(name, interval)\n    }\n\n    /**\n     * Dynamically delete a named Interval\n     * @param {string} name Interval Name\n     */\n    deleteInterval(name: string) {\n        const interval = this.scheduler.getInterval(name)\n        if (interval) {\n            this.scheduler.deleteInterval(name)\n            this.logger.warn(`Interval ${name} deleted!`)\n        } else {\n            this.logger.warn(`Interval ${name} not found!`)\n        }\n    }\n\n    /**\n     * Get all of the Timeouts\n     */\n    logTimeouts() {\n        const timeouts = this.scheduler.getTimeouts()\n        timeouts.forEach((key) => this.logger.log(`Timeout: ${key}`))\n    }\n\n    /**\n     * Dynamically schedule a named Timeout\n     * @param {string} name Timeout Name\n     * @param {Number} milliseconds Milliseconds\n     */\n    addTimeout(name: string, milliseconds: number) {\n        const callback = () => {\n            this.logger.warn(`Timeout ${name} executing after (${milliseconds})!`)\n        }\n\n        const timeout = setTimeout(callback, milliseconds)\n        this.scheduler.addTimeout(name, timeout)\n    }\n\n    /**\n     * Dynamically delete a named Timeout\n     * @param {string} name Timeout Name\n     */\n    deleteTimeout(name: string) {\n        const timeout = this.scheduler.getTimeout(name)\n\n        if (timeout) {\n            this.scheduler.deleteTimeout(name)\n            this.logger.warn(`Timeout ${name} deleted!`)\n        } else {\n            this.logger.warn(`Timeout ${name} not found!`)\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CrudConfigService.html":{"url":"classes/CrudConfigService.html","title":"class - CrudConfigService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CrudConfigService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/base/swagger-gen/crud-routes.factory.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                config\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                load\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            config\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Partial\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        query: {\n            alwaysPaginate: false,\n        },\n    }\n                        \n                    \n                        \n                            \n                                    Defined in src/base/swagger-gen/crud-routes.factory.ts:201\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            load\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    load(config: Record)\n                \n            \n\n\n            \n                \n                    Defined in src/base/swagger-gen/crud-routes.factory.ts:207\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    config\n                                    \n                                                Record\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { HttpStatus, RequestMethod } from '@nestjs/common'\n\nimport { Type } from 'class-transformer'\nimport * as deepmerge from 'deepmerge'\n\nimport {\n    ApiProperty,\n    BaseRoute,\n    isFalse,\n    isFunction,\n    isObjectFull,\n    objKeys,\n    swagger,\n    swaggerConst,\n} from './utils'\nimport type { CrudOptions, GetManyDefaultResponse, BaseRouteName } from './utils'\n\nexport class R {\n    static set(\n        metadataKey: string,\n        metadataValue: any,\n        target: Object,\n        propertyKey?: string | symbol,\n    ) {\n        if (!propertyKey) {\n            Reflect.defineMetadata(metadataKey, metadataValue, target)\n        } else {\n            Reflect.defineMetadata(metadataKey, metadataValue, target, propertyKey)\n        }\n    }\n\n    static get(\n        metadataKey: any,\n        target: Object,\n        propertyKey?: string | symbol,\n    ): T {\n        if (!propertyKey) return Reflect.getMetadata(metadataKey, target)\n\n        return Reflect.getMetadata(metadataKey, target, propertyKey)\n    }\n\n    static setRoute(route: BaseRoute, func: Function) {\n        R.set('path', route.path, func)\n        R.set('method', route.method, func)\n    }\n}\n\nexport class Swagger {\n    /**\n     * Sets extra swagger metadata for GET Calls\n     */\n    static setExtraModels(swaggerModels: {\n        [x: string]: any\n        get: Record\n    }) {\n        if (swaggerConst) {\n            const meta = Swagger.getExtraModels(swaggerModels.get)\n            const models = [\n                ...meta,\n                ...objKeys(swaggerModels)\n                    .map((name) => swaggerModels[name])\n                    .filter((one) => one && one.name !== swaggerModels.get.name),\n            ]\n\n            R.set(\n                swaggerConst.DECORATORS.API_EXTRA_MODELS,\n                models,\n                swaggerModels.get,\n            )\n        }\n    }\n\n    /**\n     * Sets swagger metadata for response of GET Calls\n     */\n    static setResponseOk(metadata: any[], func: Function) {\n        if (swaggerConst) {\n            R.set(swaggerConst.DECORATORS.API_RESPONSE, metadata, func)\n        }\n    }\n\n    static getExtraModels(target: Record): any[] {\n        return swaggerConst\n            ? R.get(swaggerConst.API_EXTRA_MODELS, target) || []\n            : []\n    }\n\n    static getResponseOk(func: Function) {\n        return swaggerConst\n            ? R.get(swaggerConst.DECORATORS.API_RESPONSE, func) || {}\n            : {}\n    }\n\n    static createResponseMeta(\n        name: BaseRouteName,\n        options: CrudOptions,\n        swaggerModels: {\n            [x: string]: any\n            get: { name: any }\n            getMany: { name: any }\n        },\n    ) {\n        if (swagger) {\n            const { query } = options\n\n            switch (name) {\n                case 'getOneBase':\n                    return {\n                        [HttpStatus.OK]: {\n                            description: 'Get one base response',\n                            type: swaggerModels.get,\n                        },\n                    }\n                case 'getOne':\n                    return {\n                        [HttpStatus.OK]: query?.alwaysPaginate\n                            ? {\n                                  description: 'Get paginated response',\n                                  type: swaggerModels.getMany,\n                              }\n                            : {\n                                  description: 'Get many base response',\n                                  schema: {\n                                      oneOf: [\n                                          {\n                                              $ref: swagger.getSchemaPath(\n                                                  swaggerModels.getMany.name,\n                                              ),\n                                          },\n                                          {\n                                              type: 'array',\n                                              items: {\n                                                  $ref: swagger.getSchemaPath(\n                                                      swaggerModels.get.name,\n                                                  ),\n                                              },\n                                          },\n                                      ],\n                                  },\n                              },\n                    }\n                default:\n                    // eslint-disable-next-line no-case-declarations\n                    const dto = swaggerModels[name.split('OneBase')[0]]\n\n                    return {\n                        [HttpStatus.OK]: {\n                            description: 'Response',\n                            schema: { $ref: swagger.getSchemaPath(dto.name) },\n                        },\n                    }\n            }\n        } else {\n            return {}\n        }\n    }\n}\n\nexport class SerializeHelper {\n    static createGetManyDto(dto: any, resourceName: string): any {\n        class GetManyResponseDto implements GetManyDefaultResponse {\n            @ApiProperty({ type: dto, isArray: true })\n            @Type(() => dto)\n            data!: any[]\n\n            @ApiProperty({ type: 'number' })\n            count!: number\n\n            @ApiProperty({ type: 'number' })\n            total!: number\n\n            @ApiProperty({ type: 'number' })\n            page!: number\n\n            @ApiProperty({ type: 'number' })\n            pageCount!: number\n        }\n\n        Object.defineProperty(GetManyResponseDto, 'name', {\n            writable: false,\n            value: `GetMany${resourceName}ResponseDto`,\n        })\n\n        return GetManyResponseDto\n    }\n\n    static createGetOneResponseDto(resourceName: string): any {\n        class GetOneResponseDto {}\n\n        Object.defineProperty(GetOneResponseDto, 'name', {\n            writable: false,\n            value: `${resourceName}ResponseDto`,\n        })\n\n        return GetOneResponseDto\n    }\n}\n\nexport class CrudConfigService {\n    static config: Partial = {\n        query: {\n            alwaysPaginate: false,\n        },\n    }\n\n    static load(config: Record) {\n        const query = isObjectFull(config.query) ? config.query : {}\n        const params = isObjectFull(config.params) ? config.params : {}\n        const serialize = isObjectFull(config.serialize) ? config.serialize : {}\n\n        CrudConfigService.config = deepmerge(\n            CrudConfigService.config,\n            { query, params, serialize },\n            { arrayMerge: (a, b, c) => b },\n        )\n    }\n}\n\nexport class CrudRoutesFactory {\n    protected options\n\n    protected swaggerModels: any = {}\n\n    constructor(private target: Object, options: CrudOptions) {\n        this.options = options\n        this.create()\n\n        console.log(\n            'CrudRoutesFactory::constructor',\n            // { ...options },\n            // this.targetProto,\n            // this.modelType,\n            // this.modelName,\n            // this.swaggerModels,\n        )\n    }\n\n    static create(target: Object, options: CrudOptions): CrudRoutesFactory {\n        return new CrudRoutesFactory(target, options)\n    }\n\n    get targetProto() {\n        // @ts-ignore\n        return this.target.prototype\n    }\n\n    get modelName() {\n        return this.options.model.type?.name\n    }\n\n    get modelType() {\n        return this.options.model.type\n    }\n\n    private create() {\n        const routesSchema = CrudRoutesFactory.getRoutesSchema()\n        this.mergeOptions()\n        this.setResponseModels()\n        this.createRoutes(routesSchema)\n        this.enableRoutes(routesSchema)\n    }\n\n    getOne(name: BaseRouteName) {\n        this.targetProto[name] = function getOne(req: any) {\n            return this.service.getOne(req)\n        }\n    }\n\n    getOneBase(name: BaseRouteName) {\n        this.targetProto[name] = function getOneBase(req: any) {\n            return this.service.getOneBase(req)\n        }\n    }\n\n    static getRoutesSchema(): BaseRoute[] {\n        return [\n            {\n                name: 'getOneBase',\n                path: '/',\n                method: RequestMethod.GET,\n                enable: false,\n                override: false,\n                withParams: true,\n            },\n            {\n                name: 'getOne',\n                path: '/',\n                method: RequestMethod.GET,\n                enable: false,\n                override: false,\n                withParams: false,\n            },\n        ]\n    }\n\n    mergeOptions() {\n        // merge query config\n        const query = isObjectFull(this.options.query) ? this.options.query : {}\n        this.options.query = { ...CrudConfigService.config.query, ...query }\n\n        // set dto\n        if (!isObjectFull(this.options.dto)) {\n            this.options.dto = {}\n        }\n\n        // set serialize\n        this.options.serialize = {\n            ...CrudConfigService.config.serialize,\n            ...this.options.serialize,\n        }\n\n        this.options.serialize.get = isFalse(this.options.serialize?.get)\n            ? false\n            : this.options.serialize?.get || this.modelType\n\n        this.options.serialize.getMany = isFalse(this.options.serialize?.getMany)\n            ? false\n            : this.options.serialize?.getMany\n            ? this.options.serialize?.getMany\n            : isFalse(this.options.serialize?.get)\n            ? false\n            : SerializeHelper.createGetManyDto(\n                  this.options.serialize?.get,\n                  this.modelName,\n              )\n\n        this.options.serialize.create = isFalse(this.options.serialize?.create)\n            ? false\n            : this.options.serialize?.create || this.modelType\n\n        this.options.serialize.update = isFalse(this.options.serialize?.update)\n            ? false\n            : this.options.serialize?.update || this.modelType\n\n        this.options.serialize.replace = isFalse(this.options.serialize?.replace)\n            ? false\n            : this.options.serialize?.replace || this.modelType\n\n        this.options.serialize.delete =\n            isFalse(this.options.serialize?.delete) ||\n            !this.options.routes?.deleteOneBase?.returnDeleted\n                ? false\n                : this.options.serialize?.delete || this.modelType\n\n        R.set('CRUD_OPTIONS_METADATA', this.options, this.target)\n    }\n\n    setResponseModels() {\n        const modelType = isFunction(this.modelType)\n            ? this.modelType\n            : SerializeHelper.createGetOneResponseDto(this.modelName)\n\n        this.swaggerModels.get = isFunction(this.options.serialize?.get)\n            ? this.options.serialize?.get\n            : modelType\n\n        this.swaggerModels.getMany =\n            this.options.serialize?.getMany ||\n            SerializeHelper.createGetManyDto(this.swaggerModels.get, this.modelName)\n\n        this.swaggerModels.create = isFunction(this.options.serialize?.create)\n            ? this.options.serialize?.create\n            : modelType\n\n        this.swaggerModels.update = isFunction(this.options.serialize?.update)\n            ? this.options.serialize?.update\n            : modelType\n\n        this.swaggerModels.replace = isFunction(this.options.serialize?.replace)\n            ? this.options.serialize?.replace\n            : modelType\n\n        this.swaggerModels.delete = isFunction(this.options.serialize?.delete)\n            ? this.options.serialize?.delete\n            : modelType\n\n        Swagger.setExtraModels(this.swaggerModels)\n    }\n\n    enableRoutes(routesSchema: BaseRoute[]) {\n        routesSchema.forEach((route) => {\n            if (!route.override && route.enable) {\n                R.setRoute(route, this.targetProto[route.name])\n            }\n        })\n    }\n\n    createRoutes(routesSchema: BaseRoute[]) {\n        routesSchema.forEach((route) => {\n            // create base method\n            /* this[route.name](route.name) */\n            route.enable = true\n\n            // set metadata\n            this.setSwaggerResponseOk(route.name)\n        })\n    }\n\n    setSwaggerResponseOk(name: BaseRouteName) {\n        const metadata = Swagger.getResponseOk(this.targetProto[name]) || {}\n        const metadataToAdd =\n            Swagger.createResponseMeta(name, this.options, this.swaggerModels) || {}\n\n        Swagger.setResponseOk(\n            // @ts-ignore\n            { ...metadata, ...metadataToAdd },\n            this.targetProto[name],\n        )\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CrudController.html":{"url":"classes/CrudController.html","title":"class - CrudController","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CrudController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/base/crud/crud.controller.ts\n        \n\n            \n                Description\n            \n            \n                Abstract base controller of BaseModel that other controller can extend to\nprovide base CRUD functionality such as to create, find, update and delete data.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOneById\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Protected\n                        constructor(service: ICrudService)\n                    \n                \n                        \n                            \n                                Defined in src/base/crud/crud.controller.ts:27\n                            \n                        \n\n                \n                    \n                            The constructor must receive the injected service from the child controller\nin order to provide all the proper base functionality.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        service\n                                                  \n                                                        \n                                                                        ICrudService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe injected service.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            create\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    create(input: T)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Create one record', description: 'Creates one record'})@ApiResponse({status: undefined, description: 'Created one record', type: BaseModel})@Post(':id')\n                \n            \n\n            \n                \n                    Defined in src/base/crud/crud.controller.ts:131\n                \n            \n\n\n            \n                \n                    create\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    input\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(paginationParams: PaginationParams)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'find all', description: 'Get all of the records'})@ApiResponse({status: undefined, description: 'Found all records'})@Get()\n                \n            \n\n            \n                \n                    Defined in src/base/crud/crud.controller.ts:46\n                \n            \n\n\n            \n                \n                    findAll\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    paginationParams\n                                    \n                                                PaginationParams\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOneById\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneById(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Get one record by id', description: 'Get one record from database with provided by id'})@ApiResponse({status: undefined, description: 'Found one record', type: BaseModel})@Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/base/crud/crud.controller.ts:73\n                \n            \n\n\n            \n                \n                    findOneById\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            remove\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Soft-delete one record by id', description: 'Soft-delete one record from database with provided by id'})@ApiResponse({status: undefined, description: 'Deleted one record', type: BaseModel})@ApiResponse({status: undefined, description: 'Deleted one record'})@Delete(':id')\n                \n            \n\n            \n                \n                    Defined in src/base/crud/crud.controller.ts:104\n                \n            \n\n\n            \n                \n                    remove\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: number, input: Partial)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Update one record', description: 'Updates one record'})@ApiResponse({status: undefined, description: 'Updated one record', type: BaseModel})@Put(':id')\n                \n            \n\n            \n                \n                    Defined in src/base/crud/crud.controller.ts:153\n                \n            \n\n\n            \n                \n                    update\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    input\n                                    \n                                            Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n    Get,\n    Delete,\n    Param,\n    ParseIntPipe,\n    HttpStatus,\n    Query,\n    Body,\n    Put,\n    Post,\n    NotFoundException,\n    InternalServerErrorException,\n} from '@nestjs/common'\nimport { ApiOperation, ApiResponse } from '@nestjs/swagger'\n\nimport { BaseModel } from '../../database/models/base.model'\nimport { Result } from '../../domain'\nimport { ApiErrors } from '../swagger-gen/api-errors.decorator'\nimport { ICrudService } from './crud.service.interface'\nimport { IPaginationResult, PaginationParams } from './pagination'\n\n/**\n * Abstract base controller of BaseModel that other controller can extend to\n * provide base CRUD functionality such as to create, find, update and delete data.\n */\n// @ApiErrors()\nexport abstract class CrudController {\n    /**\n     * The constructor must receive the injected service from the child controller\n     * in order to provide all the proper base functionality.\n     *\n     * @param {ICrudService} service - The injected service.\n     */\n    protected constructor(protected readonly service: ICrudService) {}\n\n    /**\n     * findAll\n     */\n    @ApiOperation({ summary: 'find all', description: 'Get all of the records' })\n    @ApiResponse({\n        status: HttpStatus.OK,\n        description: 'Found all records',\n        // type: IPagination | BaseModel[]\n    })\n    @Get()\n    async findAll(\n        @Query() paginationParams: PaginationParams,\n    ): Promise> {\n        const { data, paging } = await this.service.paginatedFindAll(\n            paginationParams,\n        )\n\n        return ({\n            data,\n            paging,\n            statusCode: HttpStatus.OK,\n        } as unknown) as IPaginationResult\n    }\n\n    /**\n     * findOneById\n     */\n    @ApiOperation({\n        summary: 'Get one record by id',\n        description: 'Get one record from database with provided by id',\n    })\n    @ApiResponse({\n        status: HttpStatus.OK,\n        description: 'Found one record',\n        type: BaseModel, // type: T,\n    })\n    @Get(':id')\n    async findOneById(@Param('id', ParseIntPipe) id: number): Promise> {\n        const data = await this.service.findOneById(id)\n\n        if (!data)\n            return Promise.reject(\n                new NotFoundException(`Record with id ${id} not found`),\n            )\n\n        return {\n            data,\n            statusCode: HttpStatus.OK,\n        }\n    }\n\n    /**\n     * remove\n     */\n    @ApiOperation({\n        summary: 'Soft-delete one record by id',\n        description: 'Soft-delete one record from database with provided by id',\n    })\n    @ApiResponse({\n        status: HttpStatus.OK,\n        description: 'Deleted one record',\n        type: BaseModel, // type: T,\n    })\n    @ApiResponse({\n        status: HttpStatus.NO_CONTENT,\n        description: 'Deleted one record',\n    })\n    @Delete(':id')\n    async remove(@Param('id', ParseIntPipe) id: number) {\n        const data = await this.service.remove(id)\n\n        if (!data)\n            return Promise.reject(\n                new NotFoundException(`Record with id ${id} not found`),\n            )\n\n        return {\n            data,\n            statusCode: !data ? HttpStatus.NO_CONTENT : HttpStatus.OK,\n        }\n    }\n\n    /**\n     * create\n     */\n    @ApiOperation({\n        summary: 'Create one record',\n        description: 'Creates one record',\n    })\n    @ApiResponse({\n        status: HttpStatus.OK,\n        description: 'Created one record',\n        type: BaseModel, // type: T,\n    })\n    @Post(':id')\n    async create(@Body() input: T) {\n        const data = await this.service.create(input)\n\n        return {\n            data,\n            statusCode: HttpStatus.CREATED,\n        }\n    }\n\n    /**\n     * update\n     */\n    @ApiOperation({\n        summary: 'Update one record',\n        description: 'Updates one record',\n    })\n    @ApiResponse({\n        status: HttpStatus.OK,\n        description: 'Updated one record',\n        type: BaseModel, // type: T,\n    })\n    @Put(':id')\n    async update(@Param('id', ParseIntPipe) id: number, @Body() input: Partial) {\n        const data = await this.service.update(id, input)\n\n        return {\n            data,\n            statusCode: !data ? HttpStatus.NO_CONTENT : HttpStatus.OK,\n        }\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CrudOptions.html":{"url":"interfaces/CrudOptions.html","title":"interface - CrudOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  CrudOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/base/swagger-gen/utils/other.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        dto\n                                \n                                \n                                        model\n                                \n                                \n                                            Optional\n                                        params\n                                \n                                \n                                            Optional\n                                        query\n                                \n                                \n                                            Optional\n                                        routes\n                                \n                                \n                                            Optional\n                                        serialize\n                                \n                                \n                                            Optional\n                                        validation\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        dto\n                                    \n                                \n                                \n                                    \n                                        dto:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        model\n                                    \n                                \n                                \n                                    \n                                        model:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        params\n                                    \n                                \n                                \n                                    \n                                        params:         ParamsOptions\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ParamsOptions\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        query\n                                    \n                                \n                                \n                                    \n                                        query:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        routes\n                                    \n                                \n                                \n                                    \n                                        routes:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        serialize\n                                    \n                                \n                                \n                                    \n                                        serialize:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        validation\n                                    \n                                \n                                \n                                    \n                                        validation:     ValidationPipeOptions | \"undefined\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     ValidationPipeOptions | \"undefined\"\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { RequestMethod, ValidationPipeOptions } from '@nestjs/common'\nimport { SwaggerEnumType } from '@nestjs/swagger/dist/types/swagger-enum.type'\n\nexport declare type BaseRouteName =\n    | 'getManyBase'\n    | 'getOneBase'\n    | 'createOneBase'\n    | 'createManyBase'\n    | 'updateOneBase'\n    | 'replaceOneBase'\n    | 'deleteOneBase'\n    | 'getOne'\n\nexport interface BaseRoute {\n    name: BaseRouteName\n    path: string\n    method: RequestMethod\n    enable: boolean\n    override: boolean\n    withParams: boolean\n}\n\nexport interface GetManyDefaultResponse {\n    data: T[]\n    count: number\n    total: number\n    page: number\n    pageCount: number\n}\n\nexport interface ParamOption {\n    field?: string\n    type?: 'number' | 'string' | 'uuid'\n    enum?: SwaggerEnumType\n    primary?: boolean\n    disabled?: boolean\n}\n\nexport interface ParamsOptions {\n    [key: string]: ParamOption\n}\n\nexport interface CrudOptions {\n    model: {\n        type: { name: string }\n    }\n    dto?: {}\n    routes?: {\n        deleteOneBase?: { returnDeleted?: boolean }\n    }\n    validation?: ValidationPipeOptions | false\n    params?: ParamsOptions\n    query?: {\n        limit?: number\n        maxLimit?: number\n        cache?: number | false\n        alwaysPaginate?: boolean\n    }\n    serialize?: {\n        getMany?: false | object\n        get?: false | object\n        create?: false | object\n        createMany?: false | object\n        update?: false | object\n        replace?: false | object\n        delete?: false | object\n    }\n}\n\nexport function safeRequire(path: string): T | null {\n    try {\n        // eslint-disable-next-line global-require,@typescript-eslint/no-var-requires,import/no-dynamic-require\n        const pack = require(path)\n        return pack\n    } catch (_) {\n        return null\n    }\n}\n\nexport const swagger = safeRequire('@nestjs/swagger')\nexport const swaggerConst = safeRequire('@nestjs/swagger/dist/constants')\n\nexport function ApiProperty(options?: any): PropertyDecorator {\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    return (target: object, propertyKey: string | symbol) => {\n        if (swagger) {\n            const ApiPropertyDecorator =\n                swagger.ApiProperty || swagger.ApiModelProperty\n            ApiPropertyDecorator(options)(target, propertyKey)\n        }\n    }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CrudRoutesFactory.html":{"url":"classes/CrudRoutesFactory.html","title":"class - CrudRoutesFactory","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CrudRoutesFactory\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/base/swagger-gen/crud-routes.factory.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                options\n                            \n                            \n                                    Protected\n                                swaggerModels\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                create\n                            \n                            \n                                    Private\n                                create\n                            \n                            \n                                createRoutes\n                            \n                            \n                                enableRoutes\n                            \n                            \n                                getOne\n                            \n                            \n                                getOneBase\n                            \n                            \n                                    Static\n                                getRoutesSchema\n                            \n                            \n                                mergeOptions\n                            \n                            \n                                setResponseModels\n                            \n                            \n                                setSwaggerResponseOk\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    targetProto\n                                \n                                \n                                    modelName\n                                \n                                \n                                    modelType\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(target: Object, options: CrudOptions)\n                    \n                \n                        \n                            \n                                Defined in src/base/swagger-gen/crud-routes.factory.ts:223\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        target\n                                                  \n                                                        \n                                                                        Object\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        options\n                                                  \n                                                        \n                                                                        CrudOptions\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            options\n                            \n                        \n                    \n                \n                        \n                            \n                                    Defined in src/base/swagger-gen/crud-routes.factory.ts:221\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            swaggerModels\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                    \n                        \n                            Default value : {}\n                        \n                    \n                        \n                            \n                                    Defined in src/base/swagger-gen/crud-routes.factory.ts:223\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            create\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    create(target: Object, options: CrudOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/base/swagger-gen/crud-routes.factory.ts:239\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    target\n                                    \n                                                Object\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                CrudOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         CrudRoutesFactory\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            create\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    create()\n                \n            \n\n\n            \n                \n                    Defined in src/base/swagger-gen/crud-routes.factory.ts:256\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            createRoutes\n                        \n                        \n                    \n                \n            \n            \n                \ncreateRoutes(routesSchema: BaseRoute[])\n                \n            \n\n\n            \n                \n                    Defined in src/base/swagger-gen/crud-routes.factory.ts:389\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    routesSchema\n                                    \n                                                BaseRoute[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            enableRoutes\n                        \n                        \n                    \n                \n            \n            \n                \nenableRoutes(routesSchema: BaseRoute[])\n                \n            \n\n\n            \n                \n                    Defined in src/base/swagger-gen/crud-routes.factory.ts:381\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    routesSchema\n                                    \n                                                BaseRoute[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getOne\n                        \n                        \n                    \n                \n            \n            \n                \ngetOne(name: BaseRouteName)\n                \n            \n\n\n            \n                \n                    Defined in src/base/swagger-gen/crud-routes.factory.ts:264\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                BaseRouteName\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getOneBase\n                        \n                        \n                    \n                \n            \n            \n                \ngetOneBase(name: BaseRouteName)\n                \n            \n\n\n            \n                \n                    Defined in src/base/swagger-gen/crud-routes.factory.ts:270\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                BaseRouteName\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            getRoutesSchema\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getRoutesSchema()\n                \n            \n\n\n            \n                \n                    Defined in src/base/swagger-gen/crud-routes.factory.ts:276\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         BaseRoute[]\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            mergeOptions\n                        \n                        \n                    \n                \n            \n            \n                \nmergeOptions()\n                \n            \n\n\n            \n                \n                    Defined in src/base/swagger-gen/crud-routes.factory.ts:297\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setResponseModels\n                        \n                        \n                    \n                \n            \n            \n                \nsetResponseModels()\n                \n            \n\n\n            \n                \n                    Defined in src/base/swagger-gen/crud-routes.factory.ts:349\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setSwaggerResponseOk\n                        \n                        \n                    \n                \n            \n            \n                \nsetSwaggerResponseOk(name: BaseRouteName)\n                \n            \n\n\n            \n                \n                    Defined in src/base/swagger-gen/crud-routes.factory.ts:400\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                BaseRouteName\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        targetProto\n                    \n                \n\n                \n                    \n                        gettargetProto()\n                    \n                \n                            \n                                \n                                    Defined in src/base/swagger-gen/crud-routes.factory.ts:243\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        modelName\n                    \n                \n\n                \n                    \n                        getmodelName()\n                    \n                \n                            \n                                \n                                    Defined in src/base/swagger-gen/crud-routes.factory.ts:248\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        modelType\n                    \n                \n\n                \n                    \n                        getmodelType()\n                    \n                \n                            \n                                \n                                    Defined in src/base/swagger-gen/crud-routes.factory.ts:252\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { HttpStatus, RequestMethod } from '@nestjs/common'\n\nimport { Type } from 'class-transformer'\nimport * as deepmerge from 'deepmerge'\n\nimport {\n    ApiProperty,\n    BaseRoute,\n    isFalse,\n    isFunction,\n    isObjectFull,\n    objKeys,\n    swagger,\n    swaggerConst,\n} from './utils'\nimport type { CrudOptions, GetManyDefaultResponse, BaseRouteName } from './utils'\n\nexport class R {\n    static set(\n        metadataKey: string,\n        metadataValue: any,\n        target: Object,\n        propertyKey?: string | symbol,\n    ) {\n        if (!propertyKey) {\n            Reflect.defineMetadata(metadataKey, metadataValue, target)\n        } else {\n            Reflect.defineMetadata(metadataKey, metadataValue, target, propertyKey)\n        }\n    }\n\n    static get(\n        metadataKey: any,\n        target: Object,\n        propertyKey?: string | symbol,\n    ): T {\n        if (!propertyKey) return Reflect.getMetadata(metadataKey, target)\n\n        return Reflect.getMetadata(metadataKey, target, propertyKey)\n    }\n\n    static setRoute(route: BaseRoute, func: Function) {\n        R.set('path', route.path, func)\n        R.set('method', route.method, func)\n    }\n}\n\nexport class Swagger {\n    /**\n     * Sets extra swagger metadata for GET Calls\n     */\n    static setExtraModels(swaggerModels: {\n        [x: string]: any\n        get: Record\n    }) {\n        if (swaggerConst) {\n            const meta = Swagger.getExtraModels(swaggerModels.get)\n            const models = [\n                ...meta,\n                ...objKeys(swaggerModels)\n                    .map((name) => swaggerModels[name])\n                    .filter((one) => one && one.name !== swaggerModels.get.name),\n            ]\n\n            R.set(\n                swaggerConst.DECORATORS.API_EXTRA_MODELS,\n                models,\n                swaggerModels.get,\n            )\n        }\n    }\n\n    /**\n     * Sets swagger metadata for response of GET Calls\n     */\n    static setResponseOk(metadata: any[], func: Function) {\n        if (swaggerConst) {\n            R.set(swaggerConst.DECORATORS.API_RESPONSE, metadata, func)\n        }\n    }\n\n    static getExtraModels(target: Record): any[] {\n        return swaggerConst\n            ? R.get(swaggerConst.API_EXTRA_MODELS, target) || []\n            : []\n    }\n\n    static getResponseOk(func: Function) {\n        return swaggerConst\n            ? R.get(swaggerConst.DECORATORS.API_RESPONSE, func) || {}\n            : {}\n    }\n\n    static createResponseMeta(\n        name: BaseRouteName,\n        options: CrudOptions,\n        swaggerModels: {\n            [x: string]: any\n            get: { name: any }\n            getMany: { name: any }\n        },\n    ) {\n        if (swagger) {\n            const { query } = options\n\n            switch (name) {\n                case 'getOneBase':\n                    return {\n                        [HttpStatus.OK]: {\n                            description: 'Get one base response',\n                            type: swaggerModels.get,\n                        },\n                    }\n                case 'getOne':\n                    return {\n                        [HttpStatus.OK]: query?.alwaysPaginate\n                            ? {\n                                  description: 'Get paginated response',\n                                  type: swaggerModels.getMany,\n                              }\n                            : {\n                                  description: 'Get many base response',\n                                  schema: {\n                                      oneOf: [\n                                          {\n                                              $ref: swagger.getSchemaPath(\n                                                  swaggerModels.getMany.name,\n                                              ),\n                                          },\n                                          {\n                                              type: 'array',\n                                              items: {\n                                                  $ref: swagger.getSchemaPath(\n                                                      swaggerModels.get.name,\n                                                  ),\n                                              },\n                                          },\n                                      ],\n                                  },\n                              },\n                    }\n                default:\n                    // eslint-disable-next-line no-case-declarations\n                    const dto = swaggerModels[name.split('OneBase')[0]]\n\n                    return {\n                        [HttpStatus.OK]: {\n                            description: 'Response',\n                            schema: { $ref: swagger.getSchemaPath(dto.name) },\n                        },\n                    }\n            }\n        } else {\n            return {}\n        }\n    }\n}\n\nexport class SerializeHelper {\n    static createGetManyDto(dto: any, resourceName: string): any {\n        class GetManyResponseDto implements GetManyDefaultResponse {\n            @ApiProperty({ type: dto, isArray: true })\n            @Type(() => dto)\n            data!: any[]\n\n            @ApiProperty({ type: 'number' })\n            count!: number\n\n            @ApiProperty({ type: 'number' })\n            total!: number\n\n            @ApiProperty({ type: 'number' })\n            page!: number\n\n            @ApiProperty({ type: 'number' })\n            pageCount!: number\n        }\n\n        Object.defineProperty(GetManyResponseDto, 'name', {\n            writable: false,\n            value: `GetMany${resourceName}ResponseDto`,\n        })\n\n        return GetManyResponseDto\n    }\n\n    static createGetOneResponseDto(resourceName: string): any {\n        class GetOneResponseDto {}\n\n        Object.defineProperty(GetOneResponseDto, 'name', {\n            writable: false,\n            value: `${resourceName}ResponseDto`,\n        })\n\n        return GetOneResponseDto\n    }\n}\n\nexport class CrudConfigService {\n    static config: Partial = {\n        query: {\n            alwaysPaginate: false,\n        },\n    }\n\n    static load(config: Record) {\n        const query = isObjectFull(config.query) ? config.query : {}\n        const params = isObjectFull(config.params) ? config.params : {}\n        const serialize = isObjectFull(config.serialize) ? config.serialize : {}\n\n        CrudConfigService.config = deepmerge(\n            CrudConfigService.config,\n            { query, params, serialize },\n            { arrayMerge: (a, b, c) => b },\n        )\n    }\n}\n\nexport class CrudRoutesFactory {\n    protected options\n\n    protected swaggerModels: any = {}\n\n    constructor(private target: Object, options: CrudOptions) {\n        this.options = options\n        this.create()\n\n        console.log(\n            'CrudRoutesFactory::constructor',\n            // { ...options },\n            // this.targetProto,\n            // this.modelType,\n            // this.modelName,\n            // this.swaggerModels,\n        )\n    }\n\n    static create(target: Object, options: CrudOptions): CrudRoutesFactory {\n        return new CrudRoutesFactory(target, options)\n    }\n\n    get targetProto() {\n        // @ts-ignore\n        return this.target.prototype\n    }\n\n    get modelName() {\n        return this.options.model.type?.name\n    }\n\n    get modelType() {\n        return this.options.model.type\n    }\n\n    private create() {\n        const routesSchema = CrudRoutesFactory.getRoutesSchema()\n        this.mergeOptions()\n        this.setResponseModels()\n        this.createRoutes(routesSchema)\n        this.enableRoutes(routesSchema)\n    }\n\n    getOne(name: BaseRouteName) {\n        this.targetProto[name] = function getOne(req: any) {\n            return this.service.getOne(req)\n        }\n    }\n\n    getOneBase(name: BaseRouteName) {\n        this.targetProto[name] = function getOneBase(req: any) {\n            return this.service.getOneBase(req)\n        }\n    }\n\n    static getRoutesSchema(): BaseRoute[] {\n        return [\n            {\n                name: 'getOneBase',\n                path: '/',\n                method: RequestMethod.GET,\n                enable: false,\n                override: false,\n                withParams: true,\n            },\n            {\n                name: 'getOne',\n                path: '/',\n                method: RequestMethod.GET,\n                enable: false,\n                override: false,\n                withParams: false,\n            },\n        ]\n    }\n\n    mergeOptions() {\n        // merge query config\n        const query = isObjectFull(this.options.query) ? this.options.query : {}\n        this.options.query = { ...CrudConfigService.config.query, ...query }\n\n        // set dto\n        if (!isObjectFull(this.options.dto)) {\n            this.options.dto = {}\n        }\n\n        // set serialize\n        this.options.serialize = {\n            ...CrudConfigService.config.serialize,\n            ...this.options.serialize,\n        }\n\n        this.options.serialize.get = isFalse(this.options.serialize?.get)\n            ? false\n            : this.options.serialize?.get || this.modelType\n\n        this.options.serialize.getMany = isFalse(this.options.serialize?.getMany)\n            ? false\n            : this.options.serialize?.getMany\n            ? this.options.serialize?.getMany\n            : isFalse(this.options.serialize?.get)\n            ? false\n            : SerializeHelper.createGetManyDto(\n                  this.options.serialize?.get,\n                  this.modelName,\n              )\n\n        this.options.serialize.create = isFalse(this.options.serialize?.create)\n            ? false\n            : this.options.serialize?.create || this.modelType\n\n        this.options.serialize.update = isFalse(this.options.serialize?.update)\n            ? false\n            : this.options.serialize?.update || this.modelType\n\n        this.options.serialize.replace = isFalse(this.options.serialize?.replace)\n            ? false\n            : this.options.serialize?.replace || this.modelType\n\n        this.options.serialize.delete =\n            isFalse(this.options.serialize?.delete) ||\n            !this.options.routes?.deleteOneBase?.returnDeleted\n                ? false\n                : this.options.serialize?.delete || this.modelType\n\n        R.set('CRUD_OPTIONS_METADATA', this.options, this.target)\n    }\n\n    setResponseModels() {\n        const modelType = isFunction(this.modelType)\n            ? this.modelType\n            : SerializeHelper.createGetOneResponseDto(this.modelName)\n\n        this.swaggerModels.get = isFunction(this.options.serialize?.get)\n            ? this.options.serialize?.get\n            : modelType\n\n        this.swaggerModels.getMany =\n            this.options.serialize?.getMany ||\n            SerializeHelper.createGetManyDto(this.swaggerModels.get, this.modelName)\n\n        this.swaggerModels.create = isFunction(this.options.serialize?.create)\n            ? this.options.serialize?.create\n            : modelType\n\n        this.swaggerModels.update = isFunction(this.options.serialize?.update)\n            ? this.options.serialize?.update\n            : modelType\n\n        this.swaggerModels.replace = isFunction(this.options.serialize?.replace)\n            ? this.options.serialize?.replace\n            : modelType\n\n        this.swaggerModels.delete = isFunction(this.options.serialize?.delete)\n            ? this.options.serialize?.delete\n            : modelType\n\n        Swagger.setExtraModels(this.swaggerModels)\n    }\n\n    enableRoutes(routesSchema: BaseRoute[]) {\n        routesSchema.forEach((route) => {\n            if (!route.override && route.enable) {\n                R.setRoute(route, this.targetProto[route.name])\n            }\n        })\n    }\n\n    createRoutes(routesSchema: BaseRoute[]) {\n        routesSchema.forEach((route) => {\n            // create base method\n            /* this[route.name](route.name) */\n            route.enable = true\n\n            // set metadata\n            this.setSwaggerResponseOk(route.name)\n        })\n    }\n\n    setSwaggerResponseOk(name: BaseRouteName) {\n        const metadata = Swagger.getResponseOk(this.targetProto[name]) || {}\n        const metadataToAdd =\n            Swagger.createResponseMeta(name, this.options, this.swaggerModels) || {}\n\n        Swagger.setResponseOk(\n            // @ts-ignore\n            { ...metadata, ...metadataToAdd },\n            this.targetProto[name],\n        )\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CrudService.html":{"url":"classes/CrudService.html","title":"class - CrudService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CrudService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/base/crud/crud.service.ts\n        \n\n            \n                Description\n            \n            \n                Abstract base service that other services can extend to provide base CRUD\nfunctionality such as to create, find, update and delete data.\n\n            \n\n\n            \n                Implements\n            \n            \n                            ICrudService\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                findOneByEmail\n                            \n                            \n                                    Async\n                                findOneById\n                            \n                            \n                                    Async\n                                paginatedFindAll\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Protected\n                        constructor(model: ModelClass)\n                    \n                \n                        \n                            \n                                Defined in src/base/crud/crud.service.ts:15\n                            \n                        \n\n                \n                    \n                            The constructor must receive the injected model from the child service in\norder to provide all the proper base functionality.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        model\n                                                  \n                                                        \n                                                                    ModelClass\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe injected model.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            create\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    create(input: CreateUserDto | CreateTagsDto | T)\n                \n            \n\n\n            \n                \n                    Defined in src/base/crud/crud.service.ts:93\n                \n            \n\n\n            \n                \n                    Created a entry and return it\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    input\n                                    \n                                                CreateUserDto | CreateTagsDto | T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n\n            \n                \n                    Defined in src/base/crud/crud.service.ts:27\n                \n            \n\n\n            \n                \n                    Finds all entries and return the result\n\n\n                    \n                        Returns :     {}\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(filter: object)\n                \n            \n\n\n            \n                \n                    Defined in src/base/crud/crud.service.ts:56\n                \n            \n\n\n            \n                \n                    Finds one entry with where filter and return the result\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    filter\n                                    \n                                                object\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOneByEmail\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneByEmail(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/base/crud/crud.service.ts:74\n                \n            \n\n\n            \n                \n                    Finds onw entry by email and return the result\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOneById\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/base/crud/crud.service.ts:65\n                \n            \n\n\n            \n                \n                    Finds paginated entries and return the result\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            paginatedFindAll\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    paginatedFindAll(paginationParams: PaginationParams)\n                \n            \n\n\n            \n                \n                    Defined in src/base/crud/crud.service.ts:36\n                \n            \n\n\n            \n                \n                    Finds paginated entries and return the result\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    paginationParams\n                                    \n                                                PaginationParams\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            remove\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/base/crud/crud.service.ts:83\n                \n            \n\n\n            \n                \n                    Soft-deletes a entry and return it\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: number, input: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/base/crud/crud.service.ts:109\n                \n            \n\n\n            \n                \n                    Updates a entry and return it\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    input\n                                    \n                                            Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { BadRequestException } from '@nestjs/common'\n\nimport { ModelClass, raw } from 'objection'\n\nimport { BaseModel } from '../../database/models/base.model'\nimport { CreateTagsDto } from '../../tags/tag.model'\nimport { ICrudService } from './crud.service.interface'\nimport { IPaginationResult, PaginationParams } from './pagination'\nimport { CreateUserDto } from '../../users/user.dto'\n\n/**\n * Abstract base service that other services can extend to provide base CRUD\n * functionality such as to create, find, update and delete data.\n */\nexport abstract class CrudService implements ICrudService {\n    /**\n     * The constructor must receive the injected model from the child service in\n     * order to provide all the proper base functionality.\n     *\n     * @param {Model} model - The injected model.\n     */\n    protected constructor(protected readonly model: ModelClass) {}\n\n    /**\n     * Finds all entries and return the result\n     */\n    async findAll() {\n        const data = await this.model.query()\n\n        return (data as unknown) as Promise\n    }\n\n    /**\n     * Finds paginated entries and return the result\n     */\n    async paginatedFindAll(paginationParams: PaginationParams) {\n        const { page = 0, pageSize = 3, order } = paginationParams\n        const { results, total } = await this.model.query().page(page, pageSize)\n\n        const data = {\n            data: results,\n            paging: {\n                pageSize,\n                page,\n                total,\n                totalPages: Math.ceil(total / pageSize),\n            },\n        }\n\n        return (data as unknown) as Promise>\n    }\n\n    /**\n     * Finds one entry with where filter and return the result\n     */\n    async findOne(filter = {}) {\n        const data = await this.model.query().findOne(filter)\n\n        return (data as unknown) as Promise\n    }\n\n    /**\n     * Finds paginated entries and return the result\n     */\n    async findOneById(id: number) {\n        const data = await this.model.query().findById(id).first()\n\n        return (data as unknown) as Promise\n    }\n\n    /**\n     * Finds onw entry by email and return the result\n     */\n    async findOneByEmail(email: string) {\n        const data = await this.model.query().findOne({ email })\n\n        return (data as unknown) as Promise\n    }\n\n    /**\n     * Soft-deletes a entry and return it\n     */\n    async remove(id: number) {\n        // @ts-ignore\n        return this.update(id, {\n            deleted_at: raw('CURRENT_TIMESTAMP'),\n        })\n    }\n\n    /**\n     * Created a entry and return it\n     */\n    async create(input: CreateUserDto | CreateTagsDto | T) {\n        try {\n            const data = await this.model\n                .query()\n                .insert(input as T)\n                .returning('*')\n\n            return (data as unknown) as Promise\n        } catch (e /*: WriteError */) {\n            return Promise.reject(new BadRequestException(e))\n        }\n    }\n\n    /**\n     * Updates a entry and return it\n     */\n    async update(id: number, input: Partial) {\n        try {\n            const data = await this.model\n                .query()\n                .patch(input)\n                .where('id', id)\n                .returning('*')\n\n            return (data as unknown) as Promise\n        } catch (e /*: WriteError */) {\n            return Promise.reject(new BadRequestException(e))\n        }\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CustomQueryBuilder.html":{"url":"classes/CustomQueryBuilder.html","title":"class - CustomQueryBuilder","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CustomQueryBuilder\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/models/customQueryBuilder.ts\n        \n\n\n            \n                Extends\n            \n            \n                    QueryBuilder\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                ArrayQueryBuilderType\n                            \n                            \n                                NumberQueryBuilderType\n                            \n                            \n                                PageQueryBuilderType\n                            \n                            \n                                SingleQueryBuilderType\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                chunk\n                            \n                            \n                                    Async\n                                exists\n                            \n                            \n                                    Async\n                                onlyCount\n                            \n                            \n                                    Async\n                                paginate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ArrayQueryBuilderType\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         CustomQueryBuilder\n\n                        \n                    \n                        \n                            \n                                    Defined in src/database/models/customQueryBuilder.ts:37\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            NumberQueryBuilderType\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         CustomQueryBuilder\n\n                        \n                    \n                        \n                            \n                                    Defined in src/database/models/customQueryBuilder.ts:41\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            PageQueryBuilderType\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         CustomQueryBuilder>\n\n                        \n                    \n                        \n                            \n                                    Defined in src/database/models/customQueryBuilder.ts:43\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            SingleQueryBuilderType\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         CustomQueryBuilder\n\n                        \n                    \n                        \n                            \n                                    Defined in src/database/models/customQueryBuilder.ts:39\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            chunk\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    chunk(cb: Function, size: number)\n                \n            \n\n\n            \n                \n                    Defined in src/database/models/customQueryBuilder.ts:75\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    cb\n                                    \n                                                Function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    size\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            exists\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    exists()\n                \n            \n\n\n            \n                \n                    Defined in src/database/models/customQueryBuilder.ts:70\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     {}\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            onlyCount\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    onlyCount()\n                \n            \n\n\n            \n                \n                    Defined in src/database/models/customQueryBuilder.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     {}\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            paginate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    paginate(page: number, perPage: number)\n                \n            \n\n\n            \n                \n                    Defined in src/database/models/customQueryBuilder.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    page\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    perPage\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { cloneDeep } from 'lodash'\nimport { Model, Page, QueryBuilder } from 'objection'\n\n/**\n * Check if value is of type object.\n *\n * @param value\n */\nexport function isObject(value: any): boolean {\n    return typeof value === 'object' && value !== null\n}\n\n/**\n * Check if value is empty\n *\n * @param value\n */\nexport function isEmpty(value: any): boolean {\n    if (Array.isArray(value) && value.length  extends QueryBuilder {\n    ArrayQueryBuilderType!: CustomQueryBuilder\n\n    SingleQueryBuilderType!: CustomQueryBuilder\n\n    NumberQueryBuilderType!: CustomQueryBuilder\n\n    PageQueryBuilderType!: CustomQueryBuilder>\n\n    async paginate(page: number, perPage: number) {\n        page = +page ? +page : 1 // eslint-disable-line no-param-reassign\n        perPage = +perPage ? +perPage : 15 // eslint-disable-line no-param-reassign\n\n        const result = await this.page(page - 1, perPage)\n        return {\n            pagination: {\n                currentPage: page,\n                totalPages: Math.ceil(result.total / perPage),\n                perPage,\n                total: result.total,\n            },\n            data: result.results,\n        }\n    }\n\n    async onlyCount() {\n        const result: { c: unknown }[] = ((await this.count({\n            c: '*',\n        })) as unknown) as {\n            c: unknown\n        }[]\n        return result[0].c\n    }\n\n    async exists() {\n        return !!(await this.onlyCount())\n    }\n\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    async chunk(cb: Function, size: number): Promise {\n        let offset = 0\n        let hasMore = true\n\n        while (!offset || hasMore) {\n            const query = cloneDeep(this)\n            const records = await query.offset(offset).limit(size) // eslint-disable-line no-await-in-loop\n\n            hasMore = isNotEmpty(records)\n\n            if (!hasMore) return\n\n            await cb(records) // eslint-disable-line no-await-in-loop\n\n            offset += size\n        }\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/DatabaseModule.html":{"url":"modules/DatabaseModule.html","title":"module - DatabaseModule","body":"\n                   \n\n\n\n\n    Modules\n    DatabaseModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/database/database.module.ts\n        \n\n\n        \n            Description\n        \n        \n            Database module\n\n        \n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Global, Module } from '@nestjs/common'\n\nimport { graphql } from 'graphql'\nimport * as Knex from 'knex'\nimport { knexSnakeCaseMappers, Model } from 'objection'\nimport { builder as graphQlBuilder } from 'objection-graphql'\n\nimport { Tag } from '../tags/tag.model'\nimport { User } from '../users/user.model'\n\nconst models = [Tag, User]\n\nexport const graphQlSchema = graphQlBuilder().allModels(models).build()\n\nexport const modelProviders = models.map((model) => {\n    return {\n        provide: model.name,\n        useValue: model,\n    }\n})\n\nexport const databaseProviders = [\n    ...modelProviders,\n    {\n        provide: 'KnexConnection',\n        useFactory: async () => {\n            const knex = Knex({\n                // @ts-ignore\n                debug: true,\n                connection: process.env.DATABASE_URL,\n                useNullAsDefault: true,\n                client: 'pg',\n            })\n\n            Model.knex(knex)\n            return knex\n        },\n    },\n]\n\n/**\n * Database module\n */\n@Global()\n@Module({\n    providers: [...databaseProviders],\n    exports: [...databaseProviders],\n})\nexport class DatabaseModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/EmailModule.html":{"url":"modules/EmailModule.html","title":"module - EmailModule","body":"\n                   \n\n\n\n\n    Modules\n    EmailModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_EmailModule\n\n\n\ncluster_EmailModule_exports\n\n\n\ncluster_EmailModule_providers\n\n\n\n\nEmailService \n\nEmailService \n\n\n\nEmailModule\n\nEmailModule\n\nEmailService  -->\n\nEmailModule->EmailService \n\n\n\n\n\nEmailService\n\nEmailService\n\nEmailModule -->\n\nEmailService->EmailModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/email/email.module.ts\n        \n\n\n        \n            Description\n        \n        \n            Email module\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            EmailService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            EmailService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common'\nimport { ConfigModule } from '@nestjs/config'\n\nimport EmailService from './email.service'\n\n/**\n * Email module\n */\n@Module({\n    imports: [ConfigModule],\n    controllers: [],\n    providers: [EmailService],\n    exports: [EmailService],\n})\nexport class EmailModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EmailScheduleDto.html":{"url":"classes/EmailScheduleDto.html","title":"class - EmailScheduleDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EmailScheduleDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/emailScheduling/emailSchedule.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                content\n                            \n                            \n                                date\n                            \n                            \n                                recipient\n                            \n                            \n                                subject\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            content\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/emailScheduling/emailSchedule.dto.ts:13\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            date\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsDateString()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/emailScheduling/emailSchedule.dto.ts:16\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            recipient\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsEmail()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/emailScheduling/emailSchedule.dto.ts:5\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            subject\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/emailScheduling/emailSchedule.dto.ts:9\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsNotEmpty, IsDateString, IsEmail } from 'class-validator'\n\nexport class EmailScheduleDto {\n    @IsEmail()\n    recipient!: string\n\n    @IsString()\n    @IsNotEmpty()\n    subject!: string\n\n    @IsString()\n    @IsNotEmpty()\n    content!: string\n\n    @IsDateString()\n    date!: string\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/EmailSchedulingController.html":{"url":"controllers/EmailSchedulingController.html","title":"controller - EmailSchedulingController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  EmailSchedulingController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/emailScheduling/emailScheduling.controller.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                scheduleEmail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            scheduleEmail\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    scheduleEmail(emailSchedule: EmailScheduleDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('schedule')\n                \n            \n\n            \n                \n                    Defined in src/emailScheduling/emailScheduling.controller.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    emailSchedule\n                                    \n                                                EmailScheduleDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post } from '@nestjs/common'\nimport { ApiTags } from '@nestjs/swagger'\n\nimport { EmailScheduleDto } from './emailSchedule.dto'\nimport EmailSchedulingService from './emailScheduling.service'\n\n@ApiTags(EmailSchedulingController.name)\n@Controller(EmailSchedulingController.path)\nexport default class EmailSchedulingController {\n    static path = 'email-scheduling'\n\n    constructor(readonly emailSchedulingService: EmailSchedulingService) {}\n\n    // eslint-disable-next-line @typescript-eslint/require-await\n    @Post('schedule')\n    async scheduleEmail(@Body() emailSchedule: EmailScheduleDto) {\n        await this.emailSchedulingService.scheduleEmail(emailSchedule)\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/EmailSchedulingModule.html":{"url":"modules/EmailSchedulingModule.html","title":"module - EmailSchedulingModule","body":"\n                   \n\n\n\n\n    Modules\n    EmailSchedulingModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_EmailSchedulingModule\n\n\n\ncluster_EmailSchedulingModule_imports\n\n\n\ncluster_EmailSchedulingModule_providers\n\n\n\n\nEmailModule\n\nEmailModule\n\n\n\nEmailSchedulingModule\n\nEmailSchedulingModule\n\nEmailSchedulingModule -->\n\nEmailModule->EmailSchedulingModule\n\n\n\n\n\nEmailSchedulingService\n\nEmailSchedulingService\n\nEmailSchedulingModule -->\n\nEmailSchedulingService->EmailSchedulingModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/emailScheduling/emailScheduling.module.ts\n        \n\n\n        \n            Description\n        \n        \n            Email scheduling module\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            EmailSchedulingService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            EmailSchedulingController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            EmailModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common'\n\nimport { EmailModule } from '../email/email.module'\nimport EmailSchedulingController from './emailScheduling.controller'\nimport EmailSchedulingService from './emailScheduling.service'\n\n/**\n * Email scheduling module\n */\n@Module({\n    imports: [EmailModule],\n    controllers: [EmailSchedulingController],\n    providers: [EmailSchedulingService],\n})\nexport class EmailSchedulingModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/EmailSchedulingService.html":{"url":"injectables/EmailSchedulingService.html","title":"injectable - EmailSchedulingService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  EmailSchedulingService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/emailScheduling/emailScheduling.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                scheduleEmail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(emailService: EmailService, scheduler: SchedulerRegistry)\n                    \n                \n                        \n                            \n                                Defined in src/emailScheduling/emailScheduling.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        emailService\n                                                  \n                                                        \n                                                                        EmailService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        scheduler\n                                                  \n                                                        \n                                                                        SchedulerRegistry\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            scheduleEmail\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    scheduleEmail(emailSchedule: EmailScheduleDto)\n                \n            \n\n\n            \n                \n                    Defined in src/emailScheduling/emailScheduling.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    emailSchedule\n                                    \n                                                EmailScheduleDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            logger\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Logger(EmailSchedulingService.name)\n                        \n                    \n                        \n                            \n                                    Defined in src/emailScheduling/emailScheduling.service.ts:11\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable, Logger } from '@nestjs/common'\nimport { SchedulerRegistry } from '@nestjs/schedule'\n\nimport { CronJob } from 'cron'\n\nimport EmailService from '../email/email.service'\nimport { EmailScheduleDto } from './emailSchedule.dto'\n\n@Injectable()\nexport default class EmailSchedulingService {\n    logger = new Logger(EmailSchedulingService.name)\n\n    constructor(\n        readonly emailService: EmailService,\n        readonly scheduler: SchedulerRegistry,\n    ) {}\n\n    async scheduleEmail(emailSchedule: EmailScheduleDto) {\n        const date = new Date(emailSchedule.date)\n\n        const job = new CronJob(date, () => {\n            this.emailService.sendMail({\n                subject: emailSchedule.subject,\n                text: emailSchedule.content,\n                to: emailSchedule.recipient,\n            })\n        })\n\n        this.scheduler.addCronJob(`${Date.now()}-${emailSchedule.subject}`, job)\n\n        job.start()\n        this.logger.log(`email job added at ${date.toLocaleDateString()}!`)\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/EmailService.html":{"url":"injectables/EmailService.html","title":"injectable - EmailService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  EmailService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/email/email.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                sendMail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/email/email.service.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            sendMail\n                        \n                        \n                    \n                \n            \n            \n                \nsendMail(options)\n                \n            \n\n\n            \n                \n                    Defined in src/email/email.service.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common'\nimport { ConfigService } from '@nestjs/config'\n\n@Injectable()\nexport default class EmailService {\n    constructor(\n        private readonly configService: ConfigService,\n    ) {}\n\n    // TODO: Implement this\n    sendMail(options) {\n        console.log({ options, config: this.configService.get('NODE_ENV') })\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ExcludeNullUndefinedInterceptor.html":{"url":"injectables/ExcludeNullUndefinedInterceptor.html","title":"injectable - ExcludeNullUndefinedInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ExcludeNullUndefinedInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infra/interceptors/null-undefined-override.ts\n        \n\n            \n                Description\n            \n            \n                Interceptors to transform each occurrence of a null value to an empty string ''\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            intercept\n                        \n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n            \n                \n                    Defined in src/infra/interceptors/null-undefined-override.ts:51\n                \n            \n\n\n            \n                \n                    Interceptor Method to implement a custom interceptor.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        an ExecutionContext object providing methods to access the\nroute handler and class about to be invoked.\n\n                                    \n                                \n                                \n                                    next\n                                    \n                                            CallHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        a reference to the CallHandler, which provides access to an\nObservable representing the response stream from the route handler.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n    Injectable,\n    NestInterceptor,\n    ExecutionContext,\n    CallHandler,\n} from '@nestjs/common'\n\nimport { Observable } from 'rxjs'\nimport { map } from 'rxjs/operators'\n\n/**\n * Recursively Strip Null Values\n */\nfunction recursivelyStripNullValues(value: unknown): unknown {\n    if (Array.isArray(value)) {\n        return value.map(recursivelyStripNullValues)\n    }\n\n    if (value !== null && typeof value === 'object') {\n        // @ts-ignore\n        return Object.fromEntries(\n            // @ts-ignore\n            // eslint-disable-next-line @typescript-eslint/no-shadow\n            Object.entries(value).map(([k, v]) => [\n                k,\n                recursivelyStripNullValues(v),\n            ]),\n        )\n    }\n\n    if (value !== null) {\n        return value\n    }\n\n    return ''\n}\n\n/**\n * Interceptors to transform each occurrence of a null value to an empty string ''\n */\n@Injectable()\nexport class ExcludeNullUndefinedInterceptor implements NestInterceptor {\n    /**\n     * Interceptor Method to implement a custom interceptor.\n     *\n     * @param context an `ExecutionContext` object providing methods to access the\n     * route handler and class about to be invoked.\n     * @param next a reference to the `CallHandler`, which provides access to an\n     * `Observable` representing the response stream from the route handler.\n     */\n    intercept(context: ExecutionContext, next: CallHandler): Observable {\n        return next.handle().pipe(\n            map(\n                (value) => value ?? '', // recursivelyStripNullValues(value),\n            ),\n        )\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Follower.html":{"url":"interfaces/Follower.html","title":"interface - Follower","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Follower\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/domain.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        areYouFollowing\n                                \n                                \n                                        profileImage\n                                \n                                \n                                        showRemoveOption\n                                \n                                \n                                        userId\n                                \n                                \n                                        userName\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        areYouFollowing\n                                    \n                                \n                                \n                                    \n                                        areYouFollowing:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        profileImage\n                                    \n                                \n                                \n                                    \n                                        profileImage:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        showRemoveOption\n                                    \n                                \n                                \n                                    \n                                        showRemoveOption:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        userId\n                                    \n                                \n                                \n                                    \n                                        userId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        userName\n                                    \n                                \n                                \n                                    \n                                        userName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { HttpStatus } from '@nestjs/common'\n\nexport type Results =\n    | GetAppLaunchData\n    | GetUserProfile\n    | GetUserPosts\n    | GetComments\n    | GetRescueList\n    | GetFollowers\n    | GetFollowing\n\nexport type APIError = Error | string | null\n\nexport interface Result {\n    data: T\n    error?: APIError\n    message?: string | string[]\n    statusCode: HttpStatus\n}\n\nexport interface APIResponse {\n    data: T\n    error?: APIError\n    message?: string | string[]\n    statusCode: HttpStatus\n\n    count?: number\n    page?: number\n    pageCount?: number\n    total?: number\n}\n\nexport interface GetAppLaunchData {\n    link: 'api:/'\n    response: APIResponse\n}\n\nexport interface GetUserProfile {\n    link: 'api:v1/user/getUserProfile?userId=25'\n    response: APIResponse\n}\n\nexport interface GetUserPosts {\n    link: 'api:v1/user/getUserPosts?pageNo=0&pageSize=25'\n    response: APIResponse\n}\n\nexport interface GetRescueList {\n    link: 'api:v1/rescue/getRescueList?pageNo=0&pageSize=10&status=pending|inProgress|completed|nearest'\n    response: APIResponse\n}\n\nexport interface GetComments {\n    link: 'api:v1/rescue/getComments?pageNo=0&pageSize=10&postId=1230'\n    response: APIResponse\n}\n\nexport interface GetFollowers {\n    link: 'api:v1/rescue/getUserFollowers?userId=1230'\n    response: APIResponse\n}\n\nexport interface GetFollowing {\n    link: 'api:v1/rescue/getUserFollowing?userId=1230'\n    response: APIResponse\n}\n\nexport interface AppLaunchAction {\n    actionId: number\n    action: string\n    isActive: boolean\n    subject?: string\n}\n\nexport interface User {\n    usesId: number\n\n    coverImage: string\n    following: boolean\n    gender: string\n    isOwnProfile: number\n    isRescuer: boolean\n    latitude: number\n    longitude: number\n    numberOfFollowers: number\n    numberOfFollowing: number\n    numberOfPosts: number\n    numberOfRescuesCompleted: number\n    numberOfRescuesCreated: number\n    numberOfRescuesInProgress: number\n    profileImage: string\n    rescuer: boolean\n    userAddress: string\n    userContacts: string\n    userEmail: string\n    userName: string\n    badge: {\n        badgeId: number\n        badgeName: string\n        badgeDescription: string\n        recuesCompletionNeeded: number\n    }\n    setting: {\n        showMyContacts: boolean\n        getNotifications: boolean\n    }\n}\n\nexport interface PostType {\n    postTypeId: number\n    postType: string\n}\n\nexport interface PostedByUser {\n    usesId: number\n    badgeName: string\n    following: boolean\n    profileImage: string\n    rescuer: boolean\n    userName: string\n}\n\nexport interface UserPost {\n    postId: number\n    commentsCount: number\n    isUserReactedToPost: boolean\n    ownPage: boolean\n    postBy: PostedByUser\n    postImage: string\n    postTime: string\n    postType: PostType\n    postVideo: string\n    reactionsCount: number\n    timeAgo: string\n\n    adCorporateLogoUrl: string | null\n    corporateDescription: string | null\n    corporateName: string | null\n}\n\nexport interface UserPosts {\n    isRecent: boolean\n    feed: UserPost[]\n}\n\nexport interface Rescues {\n    rescueId: number\n    animalImageUrl: string\n    distance: number\n    distanceAway: string\n    emergencyType: string\n    postedBy: string\n    postedMinAgo: string\n    rescueDate: Date\n    rescuedPetName: string\n    rescueLocality: string\n    rescuers: {\n        contact: number\n        name: string\n        profileId: number\n        profileImageUrl: string\n        rescues: boolean\n        showMyNumber: boolean\n    }\n    rescueStatus: string\n    viewsCont: number\n}\n\nexport interface RescueLists {\n    rescues: Rescues[]\n}\n\nexport interface Comment {\n    commentId: number\n    comment: string\n    commentedUseName: string\n    commentedUserId: number\n    timeAgo: string\n}\n\nexport interface Comments {\n    comments: Comment[]\n}\n\nexport interface Follower {\n    userId: number\n    userName: string\n    profileImage: string\n    areYouFollowing: boolean\n    showRemoveOption: boolean\n}\n\nexport type Following = Follower\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/GetAppLaunchData.html":{"url":"interfaces/GetAppLaunchData.html","title":"interface - GetAppLaunchData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  GetAppLaunchData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/domain.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        link\n                                \n                                \n                                        response\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        link\n                                    \n                                \n                                \n                                    \n                                        link:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        response\n                                    \n                                \n                                \n                                    \n                                        response:         APIResponse\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         APIResponse\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { HttpStatus } from '@nestjs/common'\n\nexport type Results =\n    | GetAppLaunchData\n    | GetUserProfile\n    | GetUserPosts\n    | GetComments\n    | GetRescueList\n    | GetFollowers\n    | GetFollowing\n\nexport type APIError = Error | string | null\n\nexport interface Result {\n    data: T\n    error?: APIError\n    message?: string | string[]\n    statusCode: HttpStatus\n}\n\nexport interface APIResponse {\n    data: T\n    error?: APIError\n    message?: string | string[]\n    statusCode: HttpStatus\n\n    count?: number\n    page?: number\n    pageCount?: number\n    total?: number\n}\n\nexport interface GetAppLaunchData {\n    link: 'api:/'\n    response: APIResponse\n}\n\nexport interface GetUserProfile {\n    link: 'api:v1/user/getUserProfile?userId=25'\n    response: APIResponse\n}\n\nexport interface GetUserPosts {\n    link: 'api:v1/user/getUserPosts?pageNo=0&pageSize=25'\n    response: APIResponse\n}\n\nexport interface GetRescueList {\n    link: 'api:v1/rescue/getRescueList?pageNo=0&pageSize=10&status=pending|inProgress|completed|nearest'\n    response: APIResponse\n}\n\nexport interface GetComments {\n    link: 'api:v1/rescue/getComments?pageNo=0&pageSize=10&postId=1230'\n    response: APIResponse\n}\n\nexport interface GetFollowers {\n    link: 'api:v1/rescue/getUserFollowers?userId=1230'\n    response: APIResponse\n}\n\nexport interface GetFollowing {\n    link: 'api:v1/rescue/getUserFollowing?userId=1230'\n    response: APIResponse\n}\n\nexport interface AppLaunchAction {\n    actionId: number\n    action: string\n    isActive: boolean\n    subject?: string\n}\n\nexport interface User {\n    usesId: number\n\n    coverImage: string\n    following: boolean\n    gender: string\n    isOwnProfile: number\n    isRescuer: boolean\n    latitude: number\n    longitude: number\n    numberOfFollowers: number\n    numberOfFollowing: number\n    numberOfPosts: number\n    numberOfRescuesCompleted: number\n    numberOfRescuesCreated: number\n    numberOfRescuesInProgress: number\n    profileImage: string\n    rescuer: boolean\n    userAddress: string\n    userContacts: string\n    userEmail: string\n    userName: string\n    badge: {\n        badgeId: number\n        badgeName: string\n        badgeDescription: string\n        recuesCompletionNeeded: number\n    }\n    setting: {\n        showMyContacts: boolean\n        getNotifications: boolean\n    }\n}\n\nexport interface PostType {\n    postTypeId: number\n    postType: string\n}\n\nexport interface PostedByUser {\n    usesId: number\n    badgeName: string\n    following: boolean\n    profileImage: string\n    rescuer: boolean\n    userName: string\n}\n\nexport interface UserPost {\n    postId: number\n    commentsCount: number\n    isUserReactedToPost: boolean\n    ownPage: boolean\n    postBy: PostedByUser\n    postImage: string\n    postTime: string\n    postType: PostType\n    postVideo: string\n    reactionsCount: number\n    timeAgo: string\n\n    adCorporateLogoUrl: string | null\n    corporateDescription: string | null\n    corporateName: string | null\n}\n\nexport interface UserPosts {\n    isRecent: boolean\n    feed: UserPost[]\n}\n\nexport interface Rescues {\n    rescueId: number\n    animalImageUrl: string\n    distance: number\n    distanceAway: string\n    emergencyType: string\n    postedBy: string\n    postedMinAgo: string\n    rescueDate: Date\n    rescuedPetName: string\n    rescueLocality: string\n    rescuers: {\n        contact: number\n        name: string\n        profileId: number\n        profileImageUrl: string\n        rescues: boolean\n        showMyNumber: boolean\n    }\n    rescueStatus: string\n    viewsCont: number\n}\n\nexport interface RescueLists {\n    rescues: Rescues[]\n}\n\nexport interface Comment {\n    commentId: number\n    comment: string\n    commentedUseName: string\n    commentedUserId: number\n    timeAgo: string\n}\n\nexport interface Comments {\n    comments: Comment[]\n}\n\nexport interface Follower {\n    userId: number\n    userName: string\n    profileImage: string\n    areYouFollowing: boolean\n    showRemoveOption: boolean\n}\n\nexport type Following = Follower\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/GetComments.html":{"url":"interfaces/GetComments.html","title":"interface - GetComments","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  GetComments\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/domain.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        link\n                                \n                                \n                                        response\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        link\n                                    \n                                \n                                \n                                    \n                                        link:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        response\n                                    \n                                \n                                \n                                    \n                                        response:         APIResponse\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         APIResponse\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { HttpStatus } from '@nestjs/common'\n\nexport type Results =\n    | GetAppLaunchData\n    | GetUserProfile\n    | GetUserPosts\n    | GetComments\n    | GetRescueList\n    | GetFollowers\n    | GetFollowing\n\nexport type APIError = Error | string | null\n\nexport interface Result {\n    data: T\n    error?: APIError\n    message?: string | string[]\n    statusCode: HttpStatus\n}\n\nexport interface APIResponse {\n    data: T\n    error?: APIError\n    message?: string | string[]\n    statusCode: HttpStatus\n\n    count?: number\n    page?: number\n    pageCount?: number\n    total?: number\n}\n\nexport interface GetAppLaunchData {\n    link: 'api:/'\n    response: APIResponse\n}\n\nexport interface GetUserProfile {\n    link: 'api:v1/user/getUserProfile?userId=25'\n    response: APIResponse\n}\n\nexport interface GetUserPosts {\n    link: 'api:v1/user/getUserPosts?pageNo=0&pageSize=25'\n    response: APIResponse\n}\n\nexport interface GetRescueList {\n    link: 'api:v1/rescue/getRescueList?pageNo=0&pageSize=10&status=pending|inProgress|completed|nearest'\n    response: APIResponse\n}\n\nexport interface GetComments {\n    link: 'api:v1/rescue/getComments?pageNo=0&pageSize=10&postId=1230'\n    response: APIResponse\n}\n\nexport interface GetFollowers {\n    link: 'api:v1/rescue/getUserFollowers?userId=1230'\n    response: APIResponse\n}\n\nexport interface GetFollowing {\n    link: 'api:v1/rescue/getUserFollowing?userId=1230'\n    response: APIResponse\n}\n\nexport interface AppLaunchAction {\n    actionId: number\n    action: string\n    isActive: boolean\n    subject?: string\n}\n\nexport interface User {\n    usesId: number\n\n    coverImage: string\n    following: boolean\n    gender: string\n    isOwnProfile: number\n    isRescuer: boolean\n    latitude: number\n    longitude: number\n    numberOfFollowers: number\n    numberOfFollowing: number\n    numberOfPosts: number\n    numberOfRescuesCompleted: number\n    numberOfRescuesCreated: number\n    numberOfRescuesInProgress: number\n    profileImage: string\n    rescuer: boolean\n    userAddress: string\n    userContacts: string\n    userEmail: string\n    userName: string\n    badge: {\n        badgeId: number\n        badgeName: string\n        badgeDescription: string\n        recuesCompletionNeeded: number\n    }\n    setting: {\n        showMyContacts: boolean\n        getNotifications: boolean\n    }\n}\n\nexport interface PostType {\n    postTypeId: number\n    postType: string\n}\n\nexport interface PostedByUser {\n    usesId: number\n    badgeName: string\n    following: boolean\n    profileImage: string\n    rescuer: boolean\n    userName: string\n}\n\nexport interface UserPost {\n    postId: number\n    commentsCount: number\n    isUserReactedToPost: boolean\n    ownPage: boolean\n    postBy: PostedByUser\n    postImage: string\n    postTime: string\n    postType: PostType\n    postVideo: string\n    reactionsCount: number\n    timeAgo: string\n\n    adCorporateLogoUrl: string | null\n    corporateDescription: string | null\n    corporateName: string | null\n}\n\nexport interface UserPosts {\n    isRecent: boolean\n    feed: UserPost[]\n}\n\nexport interface Rescues {\n    rescueId: number\n    animalImageUrl: string\n    distance: number\n    distanceAway: string\n    emergencyType: string\n    postedBy: string\n    postedMinAgo: string\n    rescueDate: Date\n    rescuedPetName: string\n    rescueLocality: string\n    rescuers: {\n        contact: number\n        name: string\n        profileId: number\n        profileImageUrl: string\n        rescues: boolean\n        showMyNumber: boolean\n    }\n    rescueStatus: string\n    viewsCont: number\n}\n\nexport interface RescueLists {\n    rescues: Rescues[]\n}\n\nexport interface Comment {\n    commentId: number\n    comment: string\n    commentedUseName: string\n    commentedUserId: number\n    timeAgo: string\n}\n\nexport interface Comments {\n    comments: Comment[]\n}\n\nexport interface Follower {\n    userId: number\n    userName: string\n    profileImage: string\n    areYouFollowing: boolean\n    showRemoveOption: boolean\n}\n\nexport type Following = Follower\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/GetFollowers.html":{"url":"interfaces/GetFollowers.html","title":"interface - GetFollowers","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  GetFollowers\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/domain.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        link\n                                \n                                \n                                        response\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        link\n                                    \n                                \n                                \n                                    \n                                        link:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        response\n                                    \n                                \n                                \n                                    \n                                        response:         APIResponse\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         APIResponse\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { HttpStatus } from '@nestjs/common'\n\nexport type Results =\n    | GetAppLaunchData\n    | GetUserProfile\n    | GetUserPosts\n    | GetComments\n    | GetRescueList\n    | GetFollowers\n    | GetFollowing\n\nexport type APIError = Error | string | null\n\nexport interface Result {\n    data: T\n    error?: APIError\n    message?: string | string[]\n    statusCode: HttpStatus\n}\n\nexport interface APIResponse {\n    data: T\n    error?: APIError\n    message?: string | string[]\n    statusCode: HttpStatus\n\n    count?: number\n    page?: number\n    pageCount?: number\n    total?: number\n}\n\nexport interface GetAppLaunchData {\n    link: 'api:/'\n    response: APIResponse\n}\n\nexport interface GetUserProfile {\n    link: 'api:v1/user/getUserProfile?userId=25'\n    response: APIResponse\n}\n\nexport interface GetUserPosts {\n    link: 'api:v1/user/getUserPosts?pageNo=0&pageSize=25'\n    response: APIResponse\n}\n\nexport interface GetRescueList {\n    link: 'api:v1/rescue/getRescueList?pageNo=0&pageSize=10&status=pending|inProgress|completed|nearest'\n    response: APIResponse\n}\n\nexport interface GetComments {\n    link: 'api:v1/rescue/getComments?pageNo=0&pageSize=10&postId=1230'\n    response: APIResponse\n}\n\nexport interface GetFollowers {\n    link: 'api:v1/rescue/getUserFollowers?userId=1230'\n    response: APIResponse\n}\n\nexport interface GetFollowing {\n    link: 'api:v1/rescue/getUserFollowing?userId=1230'\n    response: APIResponse\n}\n\nexport interface AppLaunchAction {\n    actionId: number\n    action: string\n    isActive: boolean\n    subject?: string\n}\n\nexport interface User {\n    usesId: number\n\n    coverImage: string\n    following: boolean\n    gender: string\n    isOwnProfile: number\n    isRescuer: boolean\n    latitude: number\n    longitude: number\n    numberOfFollowers: number\n    numberOfFollowing: number\n    numberOfPosts: number\n    numberOfRescuesCompleted: number\n    numberOfRescuesCreated: number\n    numberOfRescuesInProgress: number\n    profileImage: string\n    rescuer: boolean\n    userAddress: string\n    userContacts: string\n    userEmail: string\n    userName: string\n    badge: {\n        badgeId: number\n        badgeName: string\n        badgeDescription: string\n        recuesCompletionNeeded: number\n    }\n    setting: {\n        showMyContacts: boolean\n        getNotifications: boolean\n    }\n}\n\nexport interface PostType {\n    postTypeId: number\n    postType: string\n}\n\nexport interface PostedByUser {\n    usesId: number\n    badgeName: string\n    following: boolean\n    profileImage: string\n    rescuer: boolean\n    userName: string\n}\n\nexport interface UserPost {\n    postId: number\n    commentsCount: number\n    isUserReactedToPost: boolean\n    ownPage: boolean\n    postBy: PostedByUser\n    postImage: string\n    postTime: string\n    postType: PostType\n    postVideo: string\n    reactionsCount: number\n    timeAgo: string\n\n    adCorporateLogoUrl: string | null\n    corporateDescription: string | null\n    corporateName: string | null\n}\n\nexport interface UserPosts {\n    isRecent: boolean\n    feed: UserPost[]\n}\n\nexport interface Rescues {\n    rescueId: number\n    animalImageUrl: string\n    distance: number\n    distanceAway: string\n    emergencyType: string\n    postedBy: string\n    postedMinAgo: string\n    rescueDate: Date\n    rescuedPetName: string\n    rescueLocality: string\n    rescuers: {\n        contact: number\n        name: string\n        profileId: number\n        profileImageUrl: string\n        rescues: boolean\n        showMyNumber: boolean\n    }\n    rescueStatus: string\n    viewsCont: number\n}\n\nexport interface RescueLists {\n    rescues: Rescues[]\n}\n\nexport interface Comment {\n    commentId: number\n    comment: string\n    commentedUseName: string\n    commentedUserId: number\n    timeAgo: string\n}\n\nexport interface Comments {\n    comments: Comment[]\n}\n\nexport interface Follower {\n    userId: number\n    userName: string\n    profileImage: string\n    areYouFollowing: boolean\n    showRemoveOption: boolean\n}\n\nexport type Following = Follower\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/GetFollowing.html":{"url":"interfaces/GetFollowing.html","title":"interface - GetFollowing","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  GetFollowing\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/domain.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        link\n                                \n                                \n                                        response\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        link\n                                    \n                                \n                                \n                                    \n                                        link:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        response\n                                    \n                                \n                                \n                                    \n                                        response:         APIResponse\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         APIResponse\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { HttpStatus } from '@nestjs/common'\n\nexport type Results =\n    | GetAppLaunchData\n    | GetUserProfile\n    | GetUserPosts\n    | GetComments\n    | GetRescueList\n    | GetFollowers\n    | GetFollowing\n\nexport type APIError = Error | string | null\n\nexport interface Result {\n    data: T\n    error?: APIError\n    message?: string | string[]\n    statusCode: HttpStatus\n}\n\nexport interface APIResponse {\n    data: T\n    error?: APIError\n    message?: string | string[]\n    statusCode: HttpStatus\n\n    count?: number\n    page?: number\n    pageCount?: number\n    total?: number\n}\n\nexport interface GetAppLaunchData {\n    link: 'api:/'\n    response: APIResponse\n}\n\nexport interface GetUserProfile {\n    link: 'api:v1/user/getUserProfile?userId=25'\n    response: APIResponse\n}\n\nexport interface GetUserPosts {\n    link: 'api:v1/user/getUserPosts?pageNo=0&pageSize=25'\n    response: APIResponse\n}\n\nexport interface GetRescueList {\n    link: 'api:v1/rescue/getRescueList?pageNo=0&pageSize=10&status=pending|inProgress|completed|nearest'\n    response: APIResponse\n}\n\nexport interface GetComments {\n    link: 'api:v1/rescue/getComments?pageNo=0&pageSize=10&postId=1230'\n    response: APIResponse\n}\n\nexport interface GetFollowers {\n    link: 'api:v1/rescue/getUserFollowers?userId=1230'\n    response: APIResponse\n}\n\nexport interface GetFollowing {\n    link: 'api:v1/rescue/getUserFollowing?userId=1230'\n    response: APIResponse\n}\n\nexport interface AppLaunchAction {\n    actionId: number\n    action: string\n    isActive: boolean\n    subject?: string\n}\n\nexport interface User {\n    usesId: number\n\n    coverImage: string\n    following: boolean\n    gender: string\n    isOwnProfile: number\n    isRescuer: boolean\n    latitude: number\n    longitude: number\n    numberOfFollowers: number\n    numberOfFollowing: number\n    numberOfPosts: number\n    numberOfRescuesCompleted: number\n    numberOfRescuesCreated: number\n    numberOfRescuesInProgress: number\n    profileImage: string\n    rescuer: boolean\n    userAddress: string\n    userContacts: string\n    userEmail: string\n    userName: string\n    badge: {\n        badgeId: number\n        badgeName: string\n        badgeDescription: string\n        recuesCompletionNeeded: number\n    }\n    setting: {\n        showMyContacts: boolean\n        getNotifications: boolean\n    }\n}\n\nexport interface PostType {\n    postTypeId: number\n    postType: string\n}\n\nexport interface PostedByUser {\n    usesId: number\n    badgeName: string\n    following: boolean\n    profileImage: string\n    rescuer: boolean\n    userName: string\n}\n\nexport interface UserPost {\n    postId: number\n    commentsCount: number\n    isUserReactedToPost: boolean\n    ownPage: boolean\n    postBy: PostedByUser\n    postImage: string\n    postTime: string\n    postType: PostType\n    postVideo: string\n    reactionsCount: number\n    timeAgo: string\n\n    adCorporateLogoUrl: string | null\n    corporateDescription: string | null\n    corporateName: string | null\n}\n\nexport interface UserPosts {\n    isRecent: boolean\n    feed: UserPost[]\n}\n\nexport interface Rescues {\n    rescueId: number\n    animalImageUrl: string\n    distance: number\n    distanceAway: string\n    emergencyType: string\n    postedBy: string\n    postedMinAgo: string\n    rescueDate: Date\n    rescuedPetName: string\n    rescueLocality: string\n    rescuers: {\n        contact: number\n        name: string\n        profileId: number\n        profileImageUrl: string\n        rescues: boolean\n        showMyNumber: boolean\n    }\n    rescueStatus: string\n    viewsCont: number\n}\n\nexport interface RescueLists {\n    rescues: Rescues[]\n}\n\nexport interface Comment {\n    commentId: number\n    comment: string\n    commentedUseName: string\n    commentedUserId: number\n    timeAgo: string\n}\n\nexport interface Comments {\n    comments: Comment[]\n}\n\nexport interface Follower {\n    userId: number\n    userName: string\n    profileImage: string\n    areYouFollowing: boolean\n    showRemoveOption: boolean\n}\n\nexport type Following = Follower\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/GetManyDefaultResponse.html":{"url":"interfaces/GetManyDefaultResponse.html","title":"interface - GetManyDefaultResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  GetManyDefaultResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/base/swagger-gen/utils/other.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        count\n                                \n                                \n                                        data\n                                \n                                \n                                        page\n                                \n                                \n                                        pageCount\n                                \n                                \n                                        total\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        count\n                                    \n                                \n                                \n                                    \n                                        count:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                    \n                                \n                                \n                                    \n                                        data:     T[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        page\n                                    \n                                \n                                \n                                    \n                                        page:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        pageCount\n                                    \n                                \n                                \n                                    \n                                        pageCount:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        total\n                                    \n                                \n                                \n                                    \n                                        total:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { RequestMethod, ValidationPipeOptions } from '@nestjs/common'\nimport { SwaggerEnumType } from '@nestjs/swagger/dist/types/swagger-enum.type'\n\nexport declare type BaseRouteName =\n    | 'getManyBase'\n    | 'getOneBase'\n    | 'createOneBase'\n    | 'createManyBase'\n    | 'updateOneBase'\n    | 'replaceOneBase'\n    | 'deleteOneBase'\n    | 'getOne'\n\nexport interface BaseRoute {\n    name: BaseRouteName\n    path: string\n    method: RequestMethod\n    enable: boolean\n    override: boolean\n    withParams: boolean\n}\n\nexport interface GetManyDefaultResponse {\n    data: T[]\n    count: number\n    total: number\n    page: number\n    pageCount: number\n}\n\nexport interface ParamOption {\n    field?: string\n    type?: 'number' | 'string' | 'uuid'\n    enum?: SwaggerEnumType\n    primary?: boolean\n    disabled?: boolean\n}\n\nexport interface ParamsOptions {\n    [key: string]: ParamOption\n}\n\nexport interface CrudOptions {\n    model: {\n        type: { name: string }\n    }\n    dto?: {}\n    routes?: {\n        deleteOneBase?: { returnDeleted?: boolean }\n    }\n    validation?: ValidationPipeOptions | false\n    params?: ParamsOptions\n    query?: {\n        limit?: number\n        maxLimit?: number\n        cache?: number | false\n        alwaysPaginate?: boolean\n    }\n    serialize?: {\n        getMany?: false | object\n        get?: false | object\n        create?: false | object\n        createMany?: false | object\n        update?: false | object\n        replace?: false | object\n        delete?: false | object\n    }\n}\n\nexport function safeRequire(path: string): T | null {\n    try {\n        // eslint-disable-next-line global-require,@typescript-eslint/no-var-requires,import/no-dynamic-require\n        const pack = require(path)\n        return pack\n    } catch (_) {\n        return null\n    }\n}\n\nexport const swagger = safeRequire('@nestjs/swagger')\nexport const swaggerConst = safeRequire('@nestjs/swagger/dist/constants')\n\nexport function ApiProperty(options?: any): PropertyDecorator {\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    return (target: object, propertyKey: string | symbol) => {\n        if (swagger) {\n            const ApiPropertyDecorator =\n                swagger.ApiProperty || swagger.ApiModelProperty\n            ApiPropertyDecorator(options)(target, propertyKey)\n        }\n    }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/GetRescueList.html":{"url":"interfaces/GetRescueList.html","title":"interface - GetRescueList","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  GetRescueList\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/domain.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        link\n                                \n                                \n                                        response\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        link\n                                    \n                                \n                                \n                                    \n                                        link:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        response\n                                    \n                                \n                                \n                                    \n                                        response:         APIResponse\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         APIResponse\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { HttpStatus } from '@nestjs/common'\n\nexport type Results =\n    | GetAppLaunchData\n    | GetUserProfile\n    | GetUserPosts\n    | GetComments\n    | GetRescueList\n    | GetFollowers\n    | GetFollowing\n\nexport type APIError = Error | string | null\n\nexport interface Result {\n    data: T\n    error?: APIError\n    message?: string | string[]\n    statusCode: HttpStatus\n}\n\nexport interface APIResponse {\n    data: T\n    error?: APIError\n    message?: string | string[]\n    statusCode: HttpStatus\n\n    count?: number\n    page?: number\n    pageCount?: number\n    total?: number\n}\n\nexport interface GetAppLaunchData {\n    link: 'api:/'\n    response: APIResponse\n}\n\nexport interface GetUserProfile {\n    link: 'api:v1/user/getUserProfile?userId=25'\n    response: APIResponse\n}\n\nexport interface GetUserPosts {\n    link: 'api:v1/user/getUserPosts?pageNo=0&pageSize=25'\n    response: APIResponse\n}\n\nexport interface GetRescueList {\n    link: 'api:v1/rescue/getRescueList?pageNo=0&pageSize=10&status=pending|inProgress|completed|nearest'\n    response: APIResponse\n}\n\nexport interface GetComments {\n    link: 'api:v1/rescue/getComments?pageNo=0&pageSize=10&postId=1230'\n    response: APIResponse\n}\n\nexport interface GetFollowers {\n    link: 'api:v1/rescue/getUserFollowers?userId=1230'\n    response: APIResponse\n}\n\nexport interface GetFollowing {\n    link: 'api:v1/rescue/getUserFollowing?userId=1230'\n    response: APIResponse\n}\n\nexport interface AppLaunchAction {\n    actionId: number\n    action: string\n    isActive: boolean\n    subject?: string\n}\n\nexport interface User {\n    usesId: number\n\n    coverImage: string\n    following: boolean\n    gender: string\n    isOwnProfile: number\n    isRescuer: boolean\n    latitude: number\n    longitude: number\n    numberOfFollowers: number\n    numberOfFollowing: number\n    numberOfPosts: number\n    numberOfRescuesCompleted: number\n    numberOfRescuesCreated: number\n    numberOfRescuesInProgress: number\n    profileImage: string\n    rescuer: boolean\n    userAddress: string\n    userContacts: string\n    userEmail: string\n    userName: string\n    badge: {\n        badgeId: number\n        badgeName: string\n        badgeDescription: string\n        recuesCompletionNeeded: number\n    }\n    setting: {\n        showMyContacts: boolean\n        getNotifications: boolean\n    }\n}\n\nexport interface PostType {\n    postTypeId: number\n    postType: string\n}\n\nexport interface PostedByUser {\n    usesId: number\n    badgeName: string\n    following: boolean\n    profileImage: string\n    rescuer: boolean\n    userName: string\n}\n\nexport interface UserPost {\n    postId: number\n    commentsCount: number\n    isUserReactedToPost: boolean\n    ownPage: boolean\n    postBy: PostedByUser\n    postImage: string\n    postTime: string\n    postType: PostType\n    postVideo: string\n    reactionsCount: number\n    timeAgo: string\n\n    adCorporateLogoUrl: string | null\n    corporateDescription: string | null\n    corporateName: string | null\n}\n\nexport interface UserPosts {\n    isRecent: boolean\n    feed: UserPost[]\n}\n\nexport interface Rescues {\n    rescueId: number\n    animalImageUrl: string\n    distance: number\n    distanceAway: string\n    emergencyType: string\n    postedBy: string\n    postedMinAgo: string\n    rescueDate: Date\n    rescuedPetName: string\n    rescueLocality: string\n    rescuers: {\n        contact: number\n        name: string\n        profileId: number\n        profileImageUrl: string\n        rescues: boolean\n        showMyNumber: boolean\n    }\n    rescueStatus: string\n    viewsCont: number\n}\n\nexport interface RescueLists {\n    rescues: Rescues[]\n}\n\nexport interface Comment {\n    commentId: number\n    comment: string\n    commentedUseName: string\n    commentedUserId: number\n    timeAgo: string\n}\n\nexport interface Comments {\n    comments: Comment[]\n}\n\nexport interface Follower {\n    userId: number\n    userName: string\n    profileImage: string\n    areYouFollowing: boolean\n    showRemoveOption: boolean\n}\n\nexport type Following = Follower\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/GetUserPosts.html":{"url":"interfaces/GetUserPosts.html","title":"interface - GetUserPosts","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  GetUserPosts\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/domain.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        link\n                                \n                                \n                                        response\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        link\n                                    \n                                \n                                \n                                    \n                                        link:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        response\n                                    \n                                \n                                \n                                    \n                                        response:     APIResponse\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     APIResponse\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { HttpStatus } from '@nestjs/common'\n\nexport type Results =\n    | GetAppLaunchData\n    | GetUserProfile\n    | GetUserPosts\n    | GetComments\n    | GetRescueList\n    | GetFollowers\n    | GetFollowing\n\nexport type APIError = Error | string | null\n\nexport interface Result {\n    data: T\n    error?: APIError\n    message?: string | string[]\n    statusCode: HttpStatus\n}\n\nexport interface APIResponse {\n    data: T\n    error?: APIError\n    message?: string | string[]\n    statusCode: HttpStatus\n\n    count?: number\n    page?: number\n    pageCount?: number\n    total?: number\n}\n\nexport interface GetAppLaunchData {\n    link: 'api:/'\n    response: APIResponse\n}\n\nexport interface GetUserProfile {\n    link: 'api:v1/user/getUserProfile?userId=25'\n    response: APIResponse\n}\n\nexport interface GetUserPosts {\n    link: 'api:v1/user/getUserPosts?pageNo=0&pageSize=25'\n    response: APIResponse\n}\n\nexport interface GetRescueList {\n    link: 'api:v1/rescue/getRescueList?pageNo=0&pageSize=10&status=pending|inProgress|completed|nearest'\n    response: APIResponse\n}\n\nexport interface GetComments {\n    link: 'api:v1/rescue/getComments?pageNo=0&pageSize=10&postId=1230'\n    response: APIResponse\n}\n\nexport interface GetFollowers {\n    link: 'api:v1/rescue/getUserFollowers?userId=1230'\n    response: APIResponse\n}\n\nexport interface GetFollowing {\n    link: 'api:v1/rescue/getUserFollowing?userId=1230'\n    response: APIResponse\n}\n\nexport interface AppLaunchAction {\n    actionId: number\n    action: string\n    isActive: boolean\n    subject?: string\n}\n\nexport interface User {\n    usesId: number\n\n    coverImage: string\n    following: boolean\n    gender: string\n    isOwnProfile: number\n    isRescuer: boolean\n    latitude: number\n    longitude: number\n    numberOfFollowers: number\n    numberOfFollowing: number\n    numberOfPosts: number\n    numberOfRescuesCompleted: number\n    numberOfRescuesCreated: number\n    numberOfRescuesInProgress: number\n    profileImage: string\n    rescuer: boolean\n    userAddress: string\n    userContacts: string\n    userEmail: string\n    userName: string\n    badge: {\n        badgeId: number\n        badgeName: string\n        badgeDescription: string\n        recuesCompletionNeeded: number\n    }\n    setting: {\n        showMyContacts: boolean\n        getNotifications: boolean\n    }\n}\n\nexport interface PostType {\n    postTypeId: number\n    postType: string\n}\n\nexport interface PostedByUser {\n    usesId: number\n    badgeName: string\n    following: boolean\n    profileImage: string\n    rescuer: boolean\n    userName: string\n}\n\nexport interface UserPost {\n    postId: number\n    commentsCount: number\n    isUserReactedToPost: boolean\n    ownPage: boolean\n    postBy: PostedByUser\n    postImage: string\n    postTime: string\n    postType: PostType\n    postVideo: string\n    reactionsCount: number\n    timeAgo: string\n\n    adCorporateLogoUrl: string | null\n    corporateDescription: string | null\n    corporateName: string | null\n}\n\nexport interface UserPosts {\n    isRecent: boolean\n    feed: UserPost[]\n}\n\nexport interface Rescues {\n    rescueId: number\n    animalImageUrl: string\n    distance: number\n    distanceAway: string\n    emergencyType: string\n    postedBy: string\n    postedMinAgo: string\n    rescueDate: Date\n    rescuedPetName: string\n    rescueLocality: string\n    rescuers: {\n        contact: number\n        name: string\n        profileId: number\n        profileImageUrl: string\n        rescues: boolean\n        showMyNumber: boolean\n    }\n    rescueStatus: string\n    viewsCont: number\n}\n\nexport interface RescueLists {\n    rescues: Rescues[]\n}\n\nexport interface Comment {\n    commentId: number\n    comment: string\n    commentedUseName: string\n    commentedUserId: number\n    timeAgo: string\n}\n\nexport interface Comments {\n    comments: Comment[]\n}\n\nexport interface Follower {\n    userId: number\n    userName: string\n    profileImage: string\n    areYouFollowing: boolean\n    showRemoveOption: boolean\n}\n\nexport type Following = Follower\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/GetUserProfile.html":{"url":"interfaces/GetUserProfile.html","title":"interface - GetUserProfile","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  GetUserProfile\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/domain.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        link\n                                \n                                \n                                        response\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        link\n                                    \n                                \n                                \n                                    \n                                        link:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        response\n                                    \n                                \n                                \n                                    \n                                        response:     APIResponse\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     APIResponse\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { HttpStatus } from '@nestjs/common'\n\nexport type Results =\n    | GetAppLaunchData\n    | GetUserProfile\n    | GetUserPosts\n    | GetComments\n    | GetRescueList\n    | GetFollowers\n    | GetFollowing\n\nexport type APIError = Error | string | null\n\nexport interface Result {\n    data: T\n    error?: APIError\n    message?: string | string[]\n    statusCode: HttpStatus\n}\n\nexport interface APIResponse {\n    data: T\n    error?: APIError\n    message?: string | string[]\n    statusCode: HttpStatus\n\n    count?: number\n    page?: number\n    pageCount?: number\n    total?: number\n}\n\nexport interface GetAppLaunchData {\n    link: 'api:/'\n    response: APIResponse\n}\n\nexport interface GetUserProfile {\n    link: 'api:v1/user/getUserProfile?userId=25'\n    response: APIResponse\n}\n\nexport interface GetUserPosts {\n    link: 'api:v1/user/getUserPosts?pageNo=0&pageSize=25'\n    response: APIResponse\n}\n\nexport interface GetRescueList {\n    link: 'api:v1/rescue/getRescueList?pageNo=0&pageSize=10&status=pending|inProgress|completed|nearest'\n    response: APIResponse\n}\n\nexport interface GetComments {\n    link: 'api:v1/rescue/getComments?pageNo=0&pageSize=10&postId=1230'\n    response: APIResponse\n}\n\nexport interface GetFollowers {\n    link: 'api:v1/rescue/getUserFollowers?userId=1230'\n    response: APIResponse\n}\n\nexport interface GetFollowing {\n    link: 'api:v1/rescue/getUserFollowing?userId=1230'\n    response: APIResponse\n}\n\nexport interface AppLaunchAction {\n    actionId: number\n    action: string\n    isActive: boolean\n    subject?: string\n}\n\nexport interface User {\n    usesId: number\n\n    coverImage: string\n    following: boolean\n    gender: string\n    isOwnProfile: number\n    isRescuer: boolean\n    latitude: number\n    longitude: number\n    numberOfFollowers: number\n    numberOfFollowing: number\n    numberOfPosts: number\n    numberOfRescuesCompleted: number\n    numberOfRescuesCreated: number\n    numberOfRescuesInProgress: number\n    profileImage: string\n    rescuer: boolean\n    userAddress: string\n    userContacts: string\n    userEmail: string\n    userName: string\n    badge: {\n        badgeId: number\n        badgeName: string\n        badgeDescription: string\n        recuesCompletionNeeded: number\n    }\n    setting: {\n        showMyContacts: boolean\n        getNotifications: boolean\n    }\n}\n\nexport interface PostType {\n    postTypeId: number\n    postType: string\n}\n\nexport interface PostedByUser {\n    usesId: number\n    badgeName: string\n    following: boolean\n    profileImage: string\n    rescuer: boolean\n    userName: string\n}\n\nexport interface UserPost {\n    postId: number\n    commentsCount: number\n    isUserReactedToPost: boolean\n    ownPage: boolean\n    postBy: PostedByUser\n    postImage: string\n    postTime: string\n    postType: PostType\n    postVideo: string\n    reactionsCount: number\n    timeAgo: string\n\n    adCorporateLogoUrl: string | null\n    corporateDescription: string | null\n    corporateName: string | null\n}\n\nexport interface UserPosts {\n    isRecent: boolean\n    feed: UserPost[]\n}\n\nexport interface Rescues {\n    rescueId: number\n    animalImageUrl: string\n    distance: number\n    distanceAway: string\n    emergencyType: string\n    postedBy: string\n    postedMinAgo: string\n    rescueDate: Date\n    rescuedPetName: string\n    rescueLocality: string\n    rescuers: {\n        contact: number\n        name: string\n        profileId: number\n        profileImageUrl: string\n        rescues: boolean\n        showMyNumber: boolean\n    }\n    rescueStatus: string\n    viewsCont: number\n}\n\nexport interface RescueLists {\n    rescues: Rescues[]\n}\n\nexport interface Comment {\n    commentId: number\n    comment: string\n    commentedUseName: string\n    commentedUserId: number\n    timeAgo: string\n}\n\nexport interface Comments {\n    comments: Comment[]\n}\n\nexport interface Follower {\n    userId: number\n    userName: string\n    profileImage: string\n    areYouFollowing: boolean\n    showRemoveOption: boolean\n}\n\nexport type Following = Follower\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GoogleStrategy.html":{"url":"injectables/GoogleStrategy.html","title":"injectable - GoogleStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  GoogleStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/google.strategy.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: ConfigService, authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/google.strategy.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(request: Express.Request, accessToken: string, refreshToken: string, profile: Profile, done: VerifyCallback)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/google.strategy.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                Express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    accessToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    refreshToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    profile\n                                    \n                                            Profile\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    done\n                                    \n                                            VerifyCallback\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common'\nimport { ConfigService } from '@nestjs/config'\nimport { PassportStrategy } from '@nestjs/passport'\n\nimport type { Profile, VerifyCallback } from 'passport-google-oauth20'\nimport { Strategy } from 'passport-google-oauth20'\n\nimport { AuthService } from './auth.service'\n\n@Injectable()\nexport class GoogleStrategy extends PassportStrategy(Strategy, 'google') {\n    constructor(\n        readonly config: ConfigService,\n        readonly authService: AuthService,\n    ) {\n        super({\n            passReqToCallback: true,\n            scope: ['profile', 'email'],\n            clientID: config.get('GOOGLE_CLIENT_ID') || 'disabled',\n            clientSecret: config.get('GOOGLE_SECRET') || 'disabled',\n            // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n            callbackURL: `${config.get('HOST')}:${config.get(\n                'PORT',\n            )}/api/auth/google/redirect`,\n        })\n    }\n\n    async validate(\n        request: Express.Request,\n        accessToken: string,\n        refreshToken: string,\n        profile: Profile,\n        done: VerifyCallback, // `@nestjs/passport` internally call this, do not call\n    ) {\n        try {\n            return await this.authService.validateOAuthLoginEmail(\n                accessToken,\n                refreshToken,\n                profile,\n            )\n        } catch (err) {\n            return Promise.reject(new UnauthorizedException(err, 'Google Strategy'))\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/HealthController.html":{"url":"controllers/HealthController.html","title":"controller - HealthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  HealthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/health/health.controller.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                check\n                            \n                            \n                                collectOsMetrics\n                            \n                            \n                                onApplicationShutdown\n                            \n                            \n                                onModuleInit\n                            \n                            \n                                sse\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            check\n                        \n                        \n                    \n                \n            \n            \n                \ncheck()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@HttpCode(200)@HealthCheck()\n                \n            \n\n            \n                \n                    Defined in src/health/health.controller.ts:59\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            collectOsMetrics\n                        \n                        \n                    \n                \n            \n            \n                \ncollectOsMetrics(metrics: literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/health/health.controller.ts:73\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    metrics\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onApplicationShutdown\n                        \n                        \n                    \n                \n            \n            \n                \nonApplicationShutdown(signal?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/health/health.controller.ts:98\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    signal\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onModuleInit\n                        \n                        \n                    \n                \n            \n            \n                \nonModuleInit()\n                \n            \n\n\n            \n                \n                    Defined in src/health/health.controller.ts:92\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            sse\n                        \n                        \n                    \n                \n            \n            \n                \nsse()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Sse('sse')\n                \n            \n\n            \n                \n                    Defined in src/health/health.controller.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Observable\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Controller,\n    Get,\n    HttpCode,\n    OnApplicationShutdown,\n    OnModuleInit,\n    MessageEvent,\n    Sse,\n} from '@nestjs/common'\nimport { ConfigService } from '@nestjs/config'\nimport { ApiTags } from '@nestjs/swagger'\nimport {\n    DiskHealthIndicator,\n    DNSHealthIndicator,\n    HealthCheck,\n    HealthCheckService,\n    MemoryHealthIndicator,\n} from '@nestjs/terminus'\n\nimport * as os from 'os'\n// @ts-ignore\nimport * as pidusage from 'pidusage'\nimport { interval, Observable } from 'rxjs'\nimport { map } from 'rxjs/operators'\n\n@ApiTags(HealthController.name)\n@Controller(HealthController.path)\nexport class HealthController implements OnModuleInit, OnApplicationShutdown {\n    static path = 'health'\n\n    constructor(\n        readonly config: ConfigService,\n        readonly memory: MemoryHealthIndicator,\n        readonly health: HealthCheckService,\n        readonly disk: DiskHealthIndicator,\n        readonly dns: DNSHealthIndicator,\n    ) {}\n\n    @Sse('sse')\n    sse(): Observable {\n        const metrics = {\n            os: {},\n            interval: 1, // Every 1 second\n            retention: 60, // Keep 60 datapoints in memory\n        }\n\n        return interval(5000).pipe(\n            map((_) => {\n                this.collectOsMetrics(metrics)\n\n                return { data: metrics }\n            }),\n        )\n    }\n\n    @Get()\n    @HttpCode(200)\n    @HealthCheck()\n    check() {\n        return this.health.check([\n            async () => this.memory.checkHeap('memory_heap', 200 * 1024 * 1024),\n            async () => this.memory.checkRSS('memory_rss', 3000 * 1024 * 1024),\n            async () =>\n                this.dns.pingCheck('weather', 'https://samples.openweathermap.org'),\n            async () =>\n                this.disk.checkStorage('storage', {\n                    thresholdPercent: 0.8,\n                    path: '/',\n                }),\n        ])\n    }\n\n    collectOsMetrics(metrics: { os: any; interval?: number; retention?: number }) {\n        pidusage(\n            process.pid,\n            (\n                err: any,\n                stat: { memory: number; timestamp: number; load: number[] },\n            ) => {\n                if (err) return\n\n                // Convert from B to MB\n                stat.memory = stat.memory / 1024 / 1024 // eslint-disable-line no-param-reassign\n                stat.timestamp = Date.now() // eslint-disable-line no-param-reassign\n                stat.load = os.loadavg() // eslint-disable-line no-param-reassign\n\n                metrics.os = stat // eslint-disable-line no-param-reassign\n            },\n        )\n    }\n\n    onModuleInit() {\n        console.log(`ModuleInit - HealthController has been initialized.`, {\n            config: this.config.get('NODE_ENV'),\n        })\n    }\n\n    onApplicationShutdown(signal?: string) {\n        console.log(\n            // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n            `ApplicationShutdown - HealthController has been shutdown with ${signal} signal`,\n        )\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IBaseModel.html":{"url":"interfaces/IBaseModel.html","title":"interface - IBaseModel","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IBaseModel\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/models/base.model.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        created_at\n                                \n                                \n                                            Optional\n                                        deleted_at\n                                \n                                \n                                        id\n                                \n                                \n                                        updated_at\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        created_at\n                                    \n                                \n                                \n                                    \n                                        created_at:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        deleted_at\n                                    \n                                \n                                \n                                    \n                                        deleted_at:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                    \n                                \n                                \n                                    \n                                        id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        updated_at\n                                    \n                                \n                                \n                                    \n                                        updated_at:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import Objection, {\n    raw,\n    mixin,\n    Model,\n    ModelOptions,\n    QueryContext,\n    RelationExpression,\n} from 'objection'\nimport { DBErrors } from 'objection-db-errors'\nimport visibilityPlugin from 'objection-visibility'\n\nimport { CustomQueryBuilder } from './customQueryBuilder'\n\nexport interface IBaseModel {\n    id: number\n    created_at: any\n    updated_at: any\n    deleted_at?: any\n}\n\nexport class BaseModel\n    extends mixin(Model, [visibilityPlugin, DBErrors])\n    implements IBaseModel {\n    // hidden fields to filter from query result\n    static hidden = [\n        'salt',\n        'password',\n        'created_at',\n        'updated_at',\n        // 'deleted_at'\n    ]\n\n    // QueryBuilderType!: CustomQueryBuilder // custom query builder for pagination\n\n    static QueryBuilder = CustomQueryBuilder\n\n    id!: number\n\n    created_at: any\n\n    updated_at: any\n\n    deleted_at?: any | null\n\n    // fetch data with relation mapping\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    async fetchRelation(\n        expression: string | Record,\n        options: Objection.FetchGraphOptions,\n    ) {\n        if (typeof expression === 'string' && expression.toString() in this) {\n            // @ts-ignore\n            if (this[expression.toString()]) return this\n        }\n\n        await this.$fetchGraph(expression, options)\n        return this\n    }\n\n    async $beforeUpdate(opt: ModelOptions, queryContext: QueryContext) {\n        await super.$beforeUpdate(opt, queryContext)\n\n        this.updated_at = raw('CURRENT_TIMESTAMP') // new Date().toISOString() // fn.now()\n    }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ICrudService.html":{"url":"interfaces/ICrudService.html","title":"interface - ICrudService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ICrudService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/base/crud/crud.service.interface.ts\n        \n\n            \n                Description\n            \n            \n                Interface to enforce on the CRUD services\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    create\n                                \n                                \n                                    findAll\n                                \n                                \n                                    findOneByEmail\n                                \n                                \n                                    findOneById\n                                \n                                \n                                    paginatedFindAll\n                                \n                                \n                                    remove\n                                \n                                \n                                    update\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            create\n                        \n                        \n                    \n                \n            \n            \n                \ncreate(data: T)\n                \n            \n\n\n            \n                \n                    Defined in src/base/crud/crud.service.interface.ts:37\n                \n            \n\n\n            \n                \n                    create\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n            \n                \n                    Defined in src/base/crud/crud.service.interface.ts:10\n                \n            \n\n\n            \n                \n                    findAll\n\n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findOneByEmail\n                        \n                        \n                    \n                \n            \n            \n                \nfindOneByEmail(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/base/crud/crud.service.interface.ts:20\n                \n            \n\n\n            \n                \n                    findOneByEmail\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findOneById\n                        \n                        \n                    \n                \n            \n            \n                \nfindOneById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/base/crud/crud.service.interface.ts:15\n                \n            \n\n\n            \n                \n                    findOneById\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            paginatedFindAll\n                        \n                        \n                    \n                \n            \n            \n                \npaginatedFindAll(paginationParams?: PaginationParams)\n                \n            \n\n\n            \n                \n                    Defined in src/base/crud/crud.service.interface.ts:25\n                \n            \n\n\n            \n                \n                    paginatedFindAll\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    paginationParams\n                                    \n                                                PaginationParams\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            remove\n                        \n                        \n                    \n                \n            \n            \n                \nremove(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/base/crud/crud.service.interface.ts:32\n                \n            \n\n\n            \n                \n                    remove\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            update\n                        \n                        \n                    \n                \n            \n            \n                \nupdate(id: number, data: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/base/crud/crud.service.interface.ts:42\n                \n            \n\n\n            \n                \n                    update\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n                                    \n                                            Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { IPaginationResult, PaginationParams } from './pagination'\n\n/**\n * Interface to enforce on the CRUD services\n */\nexport interface ICrudService {\n    /**\n     * findAll\n     */\n    findAll(): Promise\n\n    /**\n     * findOneById\n     */\n    findOneById(id: number): Promise\n\n    /**\n     * findOneByEmail\n     */\n    findOneByEmail(email: string): Promise\n\n    /**\n     * paginatedFindAll\n     */\n    paginatedFindAll(\n        paginationParams?: PaginationParams,\n    ): Promise>\n\n    /**\n     * remove\n     */\n    remove(id: number): Promise\n\n    /**\n     * create\n     */\n    create(data: T): Promise\n\n    /**\n     * update\n     */\n    update(id: number, data: Partial): Promise\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IPaginationResult.html":{"url":"interfaces/IPaginationResult.html","title":"interface - IPaginationResult","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IPaginationResult\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/base/crud/pagination.ts\n        \n\n            \n                Description\n            \n            \n                Generic pagination response interface\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        data\n                                \n                                \n                                            Optional\n                                        error\n                                \n                                \n                                            Optional\n                                        message\n                                \n                                \n                                        paging\n                                \n                                \n                                        statusCode\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                    \n                                \n                                \n                                    \n                                        data:     T[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Items included in the current listing\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        error\n                                    \n                                \n                                \n                                    \n                                        error:         APIError\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         APIError\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Error if any\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                    \n                                \n                                \n                                    \n                                        message:     string | string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string | string[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Message if anu\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        paging\n                                    \n                                \n                                \n                                    \n                                        paging:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Paging metadata\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        statusCode\n                                    \n                                \n                                \n                                    \n                                        statusCode:     HttpStatus\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     HttpStatus\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Http status code\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { HttpStatus } from '@nestjs/common'\nimport { ApiPropertyOptional } from '@nestjs/swagger'\n\nimport { Transform } from 'class-transformer'\nimport { IsOptional, Min } from 'class-validator'\n\nimport { APIError } from '../../domain'\n\nexport enum OrderType {\n    DESC = 'DESC',\n    ASC = 'ASC',\n}\n\n/**\n * Describes generic pagination params\n */\nexport abstract class PaginationParams {\n    /**\n     * page\n     */\n    @ApiPropertyOptional({ type: Number, minimum: 0 })\n    @IsOptional()\n    @Min(0)\n    @Transform((val: string) => parseInt(val, 10))\n    readonly page?: number // = 0\n\n    /**\n     * page size\n     */\n    @ApiPropertyOptional({ type: Number, minimum: 0 })\n    @IsOptional()\n    @Min(0)\n    @Transform((val: string) => parseInt(val, 10))\n    readonly pageSize?: number // = 10\n\n    /**\n     * order\n     */\n    @ApiPropertyOptional()\n    @IsOptional()\n    abstract readonly order?: { [P in keyof T]?: OrderType }\n}\n\n/**\n * Generic pagination response interface\n */\nexport interface IPaginationResult {\n    /**\n     * Items included in the current listing\n     */\n    readonly data: T[]\n\n    /**\n     * Paging metadata\n     */\n    readonly paging: {\n        pageSize: number\n        page: number\n        total: number\n        totalPages: number\n    }\n\n    /**\n     * Error if any\n     */ error?: APIError\n\n    /**\n     * Message if anu\n     */\n    message?: string | string[]\n\n    /**\n     * Http status code\n     */\n    statusCode: HttpStatus\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ITag.html":{"url":"interfaces/ITag.html","title":"interface - ITag","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ITag\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/tag.model.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        name\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger'\n\nimport { IsNotEmpty, IsString, MaxLength, MinLength } from 'class-validator'\nimport type { JSONSchema, ModelObject, PartialModelObject } from 'objection'\n\nimport { BaseModel } from '../database/models/base.model'\n\ninterface ITag {\n    name: string\n}\n\nexport class Tag extends BaseModel implements ITag {\n    static tableName = 'tags'\n\n    name!: string\n\n    // JSON schema is not the database schema! Nothing is generated based on this.\n    // This is only used for validation. Whenever a model instance is created it is checked against this schema.\n    static jsonSchema: JSONSchema = {\n        type: 'object',\n        required: ['name'],\n        properties: {\n            id: { type: 'integer' },\n            name: { type: 'string', minLength: 2, maxLength: 255 },\n            deleted_at: {\n                anyOf: [{ type: 'string', format: 'date' }, { type: 'null' }],\n            },\n        },\n    }\n}\n\n// The `ModelObject` generic gives you a clean interface that can be used on the frontend, without any of the objection Model class properties or methods.\nexport type TagShape = ModelObject\nexport type PartialTagShape = PartialModelObject\n\nexport class CreateTagsDto implements ITag {\n    @IsString()\n    @IsNotEmpty()\n    @MinLength(2)\n    @MaxLength(36)\n    name!: string\n}\n\nexport class UpdateTagsDto extends PartialType(CreateTagsDto) {}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IUser.html":{"url":"interfaces/IUser.html","title":"interface - IUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/user.interface.ts\n        \n\n            \n                Description\n            \n            \n                User Interface contract\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        email\n                                \n                                \n                                            Optional\n                                        firstName\n                                \n                                \n                                        isActive\n                                \n                                \n                                            Optional\n                                        lastName\n                                \n                                \n                                        password\n                                \n                                \n                                        username\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        firstName\n                                    \n                                \n                                \n                                    \n                                        firstName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        isActive\n                                    \n                                \n                                \n                                    \n                                        isActive:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        lastName\n                                    \n                                \n                                \n                                    \n                                        lastName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        password\n                                    \n                                \n                                \n                                    \n                                        password:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        username\n                                    \n                                \n                                \n                                    \n                                        username:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface IUser {\n    username: string\n    email: string\n    firstName?: string\n    lastName?: string\n    isActive: boolean\n    password: string\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/IsEmailExistsConstraint.html":{"url":"classes/IsEmailExistsConstraint.html","title":"class - IsEmailExistsConstraint","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  IsEmailExistsConstraint\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infra/validator/isEmailExists.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        ValidatorConstraintInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(user: ModelClass)\n                    \n                \n                        \n                            \n                                Defined in src/infra/validator/isEmailExists.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        user\n                                                  \n                                                        \n                                                                        ModelClass\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infra/validator/isEmailExists.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Inject } from '@nestjs/common'\n\nimport {\n    registerDecorator,\n    ValidationOptions,\n    ValidatorConstraint,\n    ValidatorConstraintInterface,\n} from 'class-validator'\nimport { ModelClass } from 'objection'\n\nimport { User } from '../../users/user.model'\n\n@ValidatorConstraint({ async: false })\nexport class IsEmailExistsConstraint implements ValidatorConstraintInterface {\n    constructor(@Inject(User.name) readonly user: ModelClass) {}\n\n    async validate(email: string) {\n        const user = await this.user.query().findOne({ email })\n\n        return !user\n    }\n}\n\nexport const IsEmailExists = (validationOptions?: ValidationOptions) => {\n    return (object, propertyName: string) => {\n        registerDecorator({\n            target: object.constructor,\n            options: validationOptions,\n            constraints: [],\n            propertyName,\n            validator: IsEmailExistsConstraint,\n        })\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt.strategy.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, userService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/jwt.strategy.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(req: Express.Request, payload: VerifiedTokenPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/jwt.strategy.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                Express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    payload\n                                    \n                                                VerifiedTokenPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common'\nimport { ConfigService } from '@nestjs/config'\nimport { PassportStrategy } from '@nestjs/passport'\n\nimport { ExtractJwt, Strategy } from 'passport-jwt'\n\nimport { UsersService } from '../users/users.service'\nimport VerifiedTokenPayload from './tokenPayload.interface'\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n    constructor(\n        readonly configService: ConfigService,\n        readonly userService: UsersService,\n    ) {\n        super({\n            ignoreExpiration: true,\n            secretOrKey: configService.get('JWTKEY'),\n            jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n            passReqToCallback: true,\n        })\n    }\n\n    async validate(req: Express.Request, payload: VerifiedTokenPayload) {\n        const timeDiff = Number(payload?.exp) - Number(payload?.iat)\n\n        if (!payload?.email || timeDiff \n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalStrategy.html":{"url":"injectables/LocalStrategy.html","title":"injectable - LocalStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  LocalStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/local.strategy.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                passwordField\n                            \n                            \n                                    Static\n                                usernameField\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/local.strategy.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(req: Express.Request, email: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/local.strategy.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                Express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            passwordField\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'password'\n                        \n                    \n                        \n                            \n                                    Defined in src/auth/local.strategy.ts:12\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            usernameField\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'email'\n                        \n                    \n                        \n                            \n                                    Defined in src/auth/local.strategy.ts:10\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common'\nimport { PassportStrategy } from '@nestjs/passport'\n\nimport { Strategy } from 'passport-local'\n\nimport { AuthService } from './auth.service'\n\n@Injectable()\nexport class LocalStrategy extends PassportStrategy(Strategy) {\n    static usernameField = 'email'\n\n    static passwordField = 'password'\n\n    constructor(readonly authService: AuthService) {\n        super({\n            usernameField: LocalStrategy.usernameField,\n            passwordField: LocalStrategy.passwordField,\n            session: false,\n            passReqToCallback: true,\n        })\n    }\n\n    async validate(req: Express.Request, email: string, password: string) {\n        if (!email || !password)\n            return Promise.reject(\n                new UnauthorizedException('Credentials cannot be empty'),\n            )\n\n        return this.authService.validateUser(email, password)\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PaginationParams.html":{"url":"classes/PaginationParams.html","title":"class - PaginationParams","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PaginationParams\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/base/crud/pagination.ts\n        \n\n            \n                Description\n            \n            \n                Describes generic pagination params\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Abstract\n                                    Readonly\n                                    Optional\n                                order\n                            \n                            \n                                    Readonly\n                                    Optional\n                                page\n                            \n                            \n                                    Readonly\n                                    Optional\n                                pageSize\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Abstract\n                                Readonly\n                                Optional\n                            order\n                            \n                        \n                    \n                \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiPropertyOptional()@IsOptional()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/base/crud/pagination.ts:41\n                            \n                        \n\n                \n                    \n                        order\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                                Optional\n                            page\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiPropertyOptional({type: Number, minimum: 0})@IsOptional()@Min(0)@Transform(undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/base/crud/pagination.ts:25\n                            \n                        \n\n                \n                    \n                        page\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                                Optional\n                            pageSize\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiPropertyOptional({type: Number, minimum: 0})@IsOptional()@Min(0)@Transform(undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/base/crud/pagination.ts:34\n                            \n                        \n\n                \n                    \n                        page size\n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { HttpStatus } from '@nestjs/common'\nimport { ApiPropertyOptional } from '@nestjs/swagger'\n\nimport { Transform } from 'class-transformer'\nimport { IsOptional, Min } from 'class-validator'\n\nimport { APIError } from '../../domain'\n\nexport enum OrderType {\n    DESC = 'DESC',\n    ASC = 'ASC',\n}\n\n/**\n * Describes generic pagination params\n */\nexport abstract class PaginationParams {\n    /**\n     * page\n     */\n    @ApiPropertyOptional({ type: Number, minimum: 0 })\n    @IsOptional()\n    @Min(0)\n    @Transform((val: string) => parseInt(val, 10))\n    readonly page?: number // = 0\n\n    /**\n     * page size\n     */\n    @ApiPropertyOptional({ type: Number, minimum: 0 })\n    @IsOptional()\n    @Min(0)\n    @Transform((val: string) => parseInt(val, 10))\n    readonly pageSize?: number // = 10\n\n    /**\n     * order\n     */\n    @ApiPropertyOptional()\n    @IsOptional()\n    abstract readonly order?: { [P in keyof T]?: OrderType }\n}\n\n/**\n * Generic pagination response interface\n */\nexport interface IPaginationResult {\n    /**\n     * Items included in the current listing\n     */\n    readonly data: T[]\n\n    /**\n     * Paging metadata\n     */\n    readonly paging: {\n        pageSize: number\n        page: number\n        total: number\n        totalPages: number\n    }\n\n    /**\n     * Error if any\n     */ error?: APIError\n\n    /**\n     * Message if anu\n     */\n    message?: string | string[]\n\n    /**\n     * Http status code\n     */\n    statusCode: HttpStatus\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ParamOption.html":{"url":"interfaces/ParamOption.html","title":"interface - ParamOption","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ParamOption\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/base/swagger-gen/utils/other.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        disabled\n                                \n                                \n                                            Optional\n                                        enum\n                                \n                                \n                                            Optional\n                                        field\n                                \n                                \n                                            Optional\n                                        primary\n                                \n                                \n                                            Optional\n                                        type\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        disabled\n                                    \n                                \n                                \n                                    \n                                        disabled:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        enum\n                                    \n                                \n                                \n                                    \n                                        enum:         SwaggerEnumType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         SwaggerEnumType\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        field\n                                    \n                                \n                                \n                                    \n                                        field:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        primary\n                                    \n                                \n                                \n                                    \n                                        primary:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                    \n                                \n                                \n                                    \n                                        type:     \"number\" | \"string\" | \"uuid\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"number\" | \"string\" | \"uuid\"\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { RequestMethod, ValidationPipeOptions } from '@nestjs/common'\nimport { SwaggerEnumType } from '@nestjs/swagger/dist/types/swagger-enum.type'\n\nexport declare type BaseRouteName =\n    | 'getManyBase'\n    | 'getOneBase'\n    | 'createOneBase'\n    | 'createManyBase'\n    | 'updateOneBase'\n    | 'replaceOneBase'\n    | 'deleteOneBase'\n    | 'getOne'\n\nexport interface BaseRoute {\n    name: BaseRouteName\n    path: string\n    method: RequestMethod\n    enable: boolean\n    override: boolean\n    withParams: boolean\n}\n\nexport interface GetManyDefaultResponse {\n    data: T[]\n    count: number\n    total: number\n    page: number\n    pageCount: number\n}\n\nexport interface ParamOption {\n    field?: string\n    type?: 'number' | 'string' | 'uuid'\n    enum?: SwaggerEnumType\n    primary?: boolean\n    disabled?: boolean\n}\n\nexport interface ParamsOptions {\n    [key: string]: ParamOption\n}\n\nexport interface CrudOptions {\n    model: {\n        type: { name: string }\n    }\n    dto?: {}\n    routes?: {\n        deleteOneBase?: { returnDeleted?: boolean }\n    }\n    validation?: ValidationPipeOptions | false\n    params?: ParamsOptions\n    query?: {\n        limit?: number\n        maxLimit?: number\n        cache?: number | false\n        alwaysPaginate?: boolean\n    }\n    serialize?: {\n        getMany?: false | object\n        get?: false | object\n        create?: false | object\n        createMany?: false | object\n        update?: false | object\n        replace?: false | object\n        delete?: false | object\n    }\n}\n\nexport function safeRequire(path: string): T | null {\n    try {\n        // eslint-disable-next-line global-require,@typescript-eslint/no-var-requires,import/no-dynamic-require\n        const pack = require(path)\n        return pack\n    } catch (_) {\n        return null\n    }\n}\n\nexport const swagger = safeRequire('@nestjs/swagger')\nexport const swaggerConst = safeRequire('@nestjs/swagger/dist/constants')\n\nexport function ApiProperty(options?: any): PropertyDecorator {\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    return (target: object, propertyKey: string | symbol) => {\n        if (swagger) {\n            const ApiPropertyDecorator =\n                swagger.ApiProperty || swagger.ApiModelProperty\n            ApiPropertyDecorator(options)(target, propertyKey)\n        }\n    }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ParamsOptions.html":{"url":"interfaces/ParamsOptions.html","title":"interface - ParamsOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ParamsOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/base/swagger-gen/utils/other.ts\n        \n\n\n\n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:        ParamOption\n\n                    \n                \n                        \n                            \n                                Defined in src/base/swagger-gen/utils/other.ts:40\n                            \n                        \n            \n        \n\n\n    \n\n\n    \n        import { RequestMethod, ValidationPipeOptions } from '@nestjs/common'\nimport { SwaggerEnumType } from '@nestjs/swagger/dist/types/swagger-enum.type'\n\nexport declare type BaseRouteName =\n    | 'getManyBase'\n    | 'getOneBase'\n    | 'createOneBase'\n    | 'createManyBase'\n    | 'updateOneBase'\n    | 'replaceOneBase'\n    | 'deleteOneBase'\n    | 'getOne'\n\nexport interface BaseRoute {\n    name: BaseRouteName\n    path: string\n    method: RequestMethod\n    enable: boolean\n    override: boolean\n    withParams: boolean\n}\n\nexport interface GetManyDefaultResponse {\n    data: T[]\n    count: number\n    total: number\n    page: number\n    pageCount: number\n}\n\nexport interface ParamOption {\n    field?: string\n    type?: 'number' | 'string' | 'uuid'\n    enum?: SwaggerEnumType\n    primary?: boolean\n    disabled?: boolean\n}\n\nexport interface ParamsOptions {\n    [key: string]: ParamOption\n}\n\nexport interface CrudOptions {\n    model: {\n        type: { name: string }\n    }\n    dto?: {}\n    routes?: {\n        deleteOneBase?: { returnDeleted?: boolean }\n    }\n    validation?: ValidationPipeOptions | false\n    params?: ParamsOptions\n    query?: {\n        limit?: number\n        maxLimit?: number\n        cache?: number | false\n        alwaysPaginate?: boolean\n    }\n    serialize?: {\n        getMany?: false | object\n        get?: false | object\n        create?: false | object\n        createMany?: false | object\n        update?: false | object\n        replace?: false | object\n        delete?: false | object\n    }\n}\n\nexport function safeRequire(path: string): T | null {\n    try {\n        // eslint-disable-next-line global-require,@typescript-eslint/no-var-requires,import/no-dynamic-require\n        const pack = require(path)\n        return pack\n    } catch (_) {\n        return null\n    }\n}\n\nexport const swagger = safeRequire('@nestjs/swagger')\nexport const swaggerConst = safeRequire('@nestjs/swagger/dist/constants')\n\nexport function ApiProperty(options?: any): PropertyDecorator {\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    return (target: object, propertyKey: string | symbol) => {\n        if (swagger) {\n            const ApiPropertyDecorator =\n                swagger.ApiProperty || swagger.ApiModelProperty\n            ApiPropertyDecorator(options)(target, propertyKey)\n        }\n    }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PersistedCronService.html":{"url":"injectables/PersistedCronService.html","title":"injectable - PersistedCronService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  PersistedCronService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/cron/persisted-cron.service.ts\n        \n\n            \n                Description\n            \n            \n                Each time the server restarts, this service finds the jobs from the table and restored them\nTODO: make a service to gracefully stop cron jobs on ApplicationShutdown\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                onApplicationBootstrap\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(schedule: SchedulerRegistry)\n                    \n                \n                        \n                            \n                                Defined in src/cron/persisted-cron.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        schedule\n                                                  \n                                                        \n                                                                        SchedulerRegistry\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            onApplicationBootstrap\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    onApplicationBootstrap()\n                \n            \n\n\n            \n                \n                    Defined in src/cron/persisted-cron.service.ts:18\n                \n            \n\n\n            \n                \n                    NestJs hook invoked when the app bootstrapped\n\n\n                    \n                        Returns :     {}\n\n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            logger\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Logger(PersistedCronService.name)\n                        \n                    \n                        \n                            \n                                    Defined in src/cron/persisted-cron.service.ts:11\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable, Logger, OnApplicationBootstrap } from '@nestjs/common'\nimport { SchedulerRegistry } from '@nestjs/schedule'\n\n/**\n * Each time the server restarts, this service finds the jobs from the table and restored them\n *\n * TODO: make a service to gracefully stop cron jobs on ApplicationShutdown\n */\n@Injectable()\nexport class PersistedCronService implements OnApplicationBootstrap {\n    logger = new Logger(PersistedCronService.name)\n\n    constructor(readonly schedule: SchedulerRegistry) {}\n\n    /**\n     * NestJs hook invoked when the app bootstrapped\n     */\n    async onApplicationBootstrap() {\n        // TODO: Implement commented out flow\n\n        /*\n        const jobs = await Job.find() // the jobs are all saved in `Job` table.\n\n        jobs.forEach((job) => {\n            const cron = new CronJob(job.time, () => {}) // You can define the handler for each job type\n            this.schedule.addCronJob(job.name, cron)\n            cron.start()\n        })\n        */\n\n        return Promise.resolve()\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PostType.html":{"url":"interfaces/PostType.html","title":"interface - PostType","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  PostType\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/domain.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        postType\n                                \n                                \n                                        postTypeId\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        postType\n                                    \n                                \n                                \n                                    \n                                        postType:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        postTypeId\n                                    \n                                \n                                \n                                    \n                                        postTypeId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { HttpStatus } from '@nestjs/common'\n\nexport type Results =\n    | GetAppLaunchData\n    | GetUserProfile\n    | GetUserPosts\n    | GetComments\n    | GetRescueList\n    | GetFollowers\n    | GetFollowing\n\nexport type APIError = Error | string | null\n\nexport interface Result {\n    data: T\n    error?: APIError\n    message?: string | string[]\n    statusCode: HttpStatus\n}\n\nexport interface APIResponse {\n    data: T\n    error?: APIError\n    message?: string | string[]\n    statusCode: HttpStatus\n\n    count?: number\n    page?: number\n    pageCount?: number\n    total?: number\n}\n\nexport interface GetAppLaunchData {\n    link: 'api:/'\n    response: APIResponse\n}\n\nexport interface GetUserProfile {\n    link: 'api:v1/user/getUserProfile?userId=25'\n    response: APIResponse\n}\n\nexport interface GetUserPosts {\n    link: 'api:v1/user/getUserPosts?pageNo=0&pageSize=25'\n    response: APIResponse\n}\n\nexport interface GetRescueList {\n    link: 'api:v1/rescue/getRescueList?pageNo=0&pageSize=10&status=pending|inProgress|completed|nearest'\n    response: APIResponse\n}\n\nexport interface GetComments {\n    link: 'api:v1/rescue/getComments?pageNo=0&pageSize=10&postId=1230'\n    response: APIResponse\n}\n\nexport interface GetFollowers {\n    link: 'api:v1/rescue/getUserFollowers?userId=1230'\n    response: APIResponse\n}\n\nexport interface GetFollowing {\n    link: 'api:v1/rescue/getUserFollowing?userId=1230'\n    response: APIResponse\n}\n\nexport interface AppLaunchAction {\n    actionId: number\n    action: string\n    isActive: boolean\n    subject?: string\n}\n\nexport interface User {\n    usesId: number\n\n    coverImage: string\n    following: boolean\n    gender: string\n    isOwnProfile: number\n    isRescuer: boolean\n    latitude: number\n    longitude: number\n    numberOfFollowers: number\n    numberOfFollowing: number\n    numberOfPosts: number\n    numberOfRescuesCompleted: number\n    numberOfRescuesCreated: number\n    numberOfRescuesInProgress: number\n    profileImage: string\n    rescuer: boolean\n    userAddress: string\n    userContacts: string\n    userEmail: string\n    userName: string\n    badge: {\n        badgeId: number\n        badgeName: string\n        badgeDescription: string\n        recuesCompletionNeeded: number\n    }\n    setting: {\n        showMyContacts: boolean\n        getNotifications: boolean\n    }\n}\n\nexport interface PostType {\n    postTypeId: number\n    postType: string\n}\n\nexport interface PostedByUser {\n    usesId: number\n    badgeName: string\n    following: boolean\n    profileImage: string\n    rescuer: boolean\n    userName: string\n}\n\nexport interface UserPost {\n    postId: number\n    commentsCount: number\n    isUserReactedToPost: boolean\n    ownPage: boolean\n    postBy: PostedByUser\n    postImage: string\n    postTime: string\n    postType: PostType\n    postVideo: string\n    reactionsCount: number\n    timeAgo: string\n\n    adCorporateLogoUrl: string | null\n    corporateDescription: string | null\n    corporateName: string | null\n}\n\nexport interface UserPosts {\n    isRecent: boolean\n    feed: UserPost[]\n}\n\nexport interface Rescues {\n    rescueId: number\n    animalImageUrl: string\n    distance: number\n    distanceAway: string\n    emergencyType: string\n    postedBy: string\n    postedMinAgo: string\n    rescueDate: Date\n    rescuedPetName: string\n    rescueLocality: string\n    rescuers: {\n        contact: number\n        name: string\n        profileId: number\n        profileImageUrl: string\n        rescues: boolean\n        showMyNumber: boolean\n    }\n    rescueStatus: string\n    viewsCont: number\n}\n\nexport interface RescueLists {\n    rescues: Rescues[]\n}\n\nexport interface Comment {\n    commentId: number\n    comment: string\n    commentedUseName: string\n    commentedUserId: number\n    timeAgo: string\n}\n\nexport interface Comments {\n    comments: Comment[]\n}\n\nexport interface Follower {\n    userId: number\n    userName: string\n    profileImage: string\n    areYouFollowing: boolean\n    showRemoveOption: boolean\n}\n\nexport type Following = Follower\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PostedByUser.html":{"url":"interfaces/PostedByUser.html","title":"interface - PostedByUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  PostedByUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/domain.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        badgeName\n                                \n                                \n                                        following\n                                \n                                \n                                        profileImage\n                                \n                                \n                                        rescuer\n                                \n                                \n                                        userName\n                                \n                                \n                                        usesId\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        badgeName\n                                    \n                                \n                                \n                                    \n                                        badgeName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        following\n                                    \n                                \n                                \n                                    \n                                        following:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        profileImage\n                                    \n                                \n                                \n                                    \n                                        profileImage:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        rescuer\n                                    \n                                \n                                \n                                    \n                                        rescuer:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        userName\n                                    \n                                \n                                \n                                    \n                                        userName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        usesId\n                                    \n                                \n                                \n                                    \n                                        usesId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { HttpStatus } from '@nestjs/common'\n\nexport type Results =\n    | GetAppLaunchData\n    | GetUserProfile\n    | GetUserPosts\n    | GetComments\n    | GetRescueList\n    | GetFollowers\n    | GetFollowing\n\nexport type APIError = Error | string | null\n\nexport interface Result {\n    data: T\n    error?: APIError\n    message?: string | string[]\n    statusCode: HttpStatus\n}\n\nexport interface APIResponse {\n    data: T\n    error?: APIError\n    message?: string | string[]\n    statusCode: HttpStatus\n\n    count?: number\n    page?: number\n    pageCount?: number\n    total?: number\n}\n\nexport interface GetAppLaunchData {\n    link: 'api:/'\n    response: APIResponse\n}\n\nexport interface GetUserProfile {\n    link: 'api:v1/user/getUserProfile?userId=25'\n    response: APIResponse\n}\n\nexport interface GetUserPosts {\n    link: 'api:v1/user/getUserPosts?pageNo=0&pageSize=25'\n    response: APIResponse\n}\n\nexport interface GetRescueList {\n    link: 'api:v1/rescue/getRescueList?pageNo=0&pageSize=10&status=pending|inProgress|completed|nearest'\n    response: APIResponse\n}\n\nexport interface GetComments {\n    link: 'api:v1/rescue/getComments?pageNo=0&pageSize=10&postId=1230'\n    response: APIResponse\n}\n\nexport interface GetFollowers {\n    link: 'api:v1/rescue/getUserFollowers?userId=1230'\n    response: APIResponse\n}\n\nexport interface GetFollowing {\n    link: 'api:v1/rescue/getUserFollowing?userId=1230'\n    response: APIResponse\n}\n\nexport interface AppLaunchAction {\n    actionId: number\n    action: string\n    isActive: boolean\n    subject?: string\n}\n\nexport interface User {\n    usesId: number\n\n    coverImage: string\n    following: boolean\n    gender: string\n    isOwnProfile: number\n    isRescuer: boolean\n    latitude: number\n    longitude: number\n    numberOfFollowers: number\n    numberOfFollowing: number\n    numberOfPosts: number\n    numberOfRescuesCompleted: number\n    numberOfRescuesCreated: number\n    numberOfRescuesInProgress: number\n    profileImage: string\n    rescuer: boolean\n    userAddress: string\n    userContacts: string\n    userEmail: string\n    userName: string\n    badge: {\n        badgeId: number\n        badgeName: string\n        badgeDescription: string\n        recuesCompletionNeeded: number\n    }\n    setting: {\n        showMyContacts: boolean\n        getNotifications: boolean\n    }\n}\n\nexport interface PostType {\n    postTypeId: number\n    postType: string\n}\n\nexport interface PostedByUser {\n    usesId: number\n    badgeName: string\n    following: boolean\n    profileImage: string\n    rescuer: boolean\n    userName: string\n}\n\nexport interface UserPost {\n    postId: number\n    commentsCount: number\n    isUserReactedToPost: boolean\n    ownPage: boolean\n    postBy: PostedByUser\n    postImage: string\n    postTime: string\n    postType: PostType\n    postVideo: string\n    reactionsCount: number\n    timeAgo: string\n\n    adCorporateLogoUrl: string | null\n    corporateDescription: string | null\n    corporateName: string | null\n}\n\nexport interface UserPosts {\n    isRecent: boolean\n    feed: UserPost[]\n}\n\nexport interface Rescues {\n    rescueId: number\n    animalImageUrl: string\n    distance: number\n    distanceAway: string\n    emergencyType: string\n    postedBy: string\n    postedMinAgo: string\n    rescueDate: Date\n    rescuedPetName: string\n    rescueLocality: string\n    rescuers: {\n        contact: number\n        name: string\n        profileId: number\n        profileImageUrl: string\n        rescues: boolean\n        showMyNumber: boolean\n    }\n    rescueStatus: string\n    viewsCont: number\n}\n\nexport interface RescueLists {\n    rescues: Rescues[]\n}\n\nexport interface Comment {\n    commentId: number\n    comment: string\n    commentedUseName: string\n    commentedUserId: number\n    timeAgo: string\n}\n\nexport interface Comments {\n    comments: Comment[]\n}\n\nexport interface Follower {\n    userId: number\n    userName: string\n    profileImage: string\n    areYouFollowing: boolean\n    showRemoveOption: boolean\n}\n\nexport type Following = Follower\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/QueryFailedFilter.html":{"url":"classes/QueryFailedFilter.html","title":"class - QueryFailedFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  QueryFailedFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infra/filters/query-failed.filter.ts\n        \n\n            \n                Description\n            \n            \n                Query Failed Exception Filter\n\n            \n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            catch\n                        \n                        \n                    \n                \n            \n            \n                \ncatch(exception: CheckViolationError | ConstraintViolationError | DataError | ForeignKeyViolationError | NotNullViolationError | UniqueViolationError | NotFoundError, host: ArgumentsHost)\n                \n            \n\n\n            \n                \n                    Defined in src/infra/filters/query-failed.filter.ts:33\n                \n            \n\n\n            \n                \n                    Method to implement a custom exception filter.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                            CheckViolationError | ConstraintViolationError | DataError | ForeignKeyViolationError | NotNullViolationError | UniqueViolationError | NotFoundError\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the class of the exception being handled\n\n                                    \n                                \n                                \n                                    host\n                                    \n                                            ArgumentsHost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        used to access an array of arguments for\nthe in-flight request\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ArgumentsHost, Catch, ExceptionFilter, HttpStatus } from '@nestjs/common'\n\nimport { NotFoundError } from 'objection'\nimport {\n    UniqueViolationError,\n    NotNullViolationError,\n    ForeignKeyViolationError,\n    ConstraintViolationError,\n    CheckViolationError,\n    DataError,\n} from 'objection-db-errors'\n\n/**\n * Query Failed Exception Filter\n */\n@Catch(\n    CheckViolationError,\n    ConstraintViolationError,\n    DataError,\n    ForeignKeyViolationError,\n    NotNullViolationError,\n    UniqueViolationError,\n    NotFoundError,\n)\nexport class QueryFailedFilter implements ExceptionFilter {\n    /**\n     * Method to implement a custom exception filter.\n     *\n     * @param exception the class of the exception being handled\n     * @param host used to access an array of arguments for\n     * the in-flight request\n     */\n    catch(\n        exception:\n            | CheckViolationError\n            | ConstraintViolationError\n            | DataError\n            | ForeignKeyViolationError\n            | NotNullViolationError\n            | UniqueViolationError\n            | NotFoundError,\n        host: ArgumentsHost,\n    ) {\n        const ctx = host.switchToHttp()\n        const response = ctx.getResponse()\n        const request = ctx.getRequest()\n        const status = HttpStatus.PRECONDITION_FAILED\n\n        const {\n            name, // @ts-ignore\n            data, // @ts-ignore\n            type, // @ts-ignore\n            table, // @ts-ignore\n            column, // @ts-ignore\n            schema, // @ts-ignore\n            message, // @ts-ignore\n            columns, // @ts-ignore\n            database, // @ts-ignore\n            constraint, // @ts-ignore\n            nativeError, // @ts-ignore\n        } = exception\n\n        // @ts-ignore\n        response.status(status).json({\n            statusCode: status,\n            message,\n\n            name,\n            table,\n            schema,\n            database,\n            constraint,\n            nativeError,\n            columns: column ? [column] : columns,\n\n            data,\n            type,\n\n            path: request.url,\n            timestamp: new Date().toISOString(),\n        })\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/R.html":{"url":"classes/R.html","title":"class - R","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  R\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/base/swagger-gen/crud-routes.factory.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                get\n                            \n                            \n                                    Static\n                                set\n                            \n                            \n                                    Static\n                                setRoute\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            get\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    get(metadataKey: any, target: Object, propertyKey?: string | symbol)\n                \n            \n\n\n            \n                \n                    Defined in src/base/swagger-gen/crud-routes.factory.ts:33\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    metadataKey\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    target\n                                    \n                                                Object\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    propertyKey\n                                    \n                                            string | symbol\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            set\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    set(metadataKey: string, metadataValue: any, target: Object, propertyKey?: string | symbol)\n                \n            \n\n\n            \n                \n                    Defined in src/base/swagger-gen/crud-routes.factory.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    metadataKey\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    metadataValue\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    target\n                                    \n                                                Object\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    propertyKey\n                                    \n                                            string | symbol\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            setRoute\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setRoute(route: BaseRoute, func: Function)\n                \n            \n\n\n            \n                \n                    Defined in src/base/swagger-gen/crud-routes.factory.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    route\n                                    \n                                                BaseRoute\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    func\n                                    \n                                                Function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { HttpStatus, RequestMethod } from '@nestjs/common'\n\nimport { Type } from 'class-transformer'\nimport * as deepmerge from 'deepmerge'\n\nimport {\n    ApiProperty,\n    BaseRoute,\n    isFalse,\n    isFunction,\n    isObjectFull,\n    objKeys,\n    swagger,\n    swaggerConst,\n} from './utils'\nimport type { CrudOptions, GetManyDefaultResponse, BaseRouteName } from './utils'\n\nexport class R {\n    static set(\n        metadataKey: string,\n        metadataValue: any,\n        target: Object,\n        propertyKey?: string | symbol,\n    ) {\n        if (!propertyKey) {\n            Reflect.defineMetadata(metadataKey, metadataValue, target)\n        } else {\n            Reflect.defineMetadata(metadataKey, metadataValue, target, propertyKey)\n        }\n    }\n\n    static get(\n        metadataKey: any,\n        target: Object,\n        propertyKey?: string | symbol,\n    ): T {\n        if (!propertyKey) return Reflect.getMetadata(metadataKey, target)\n\n        return Reflect.getMetadata(metadataKey, target, propertyKey)\n    }\n\n    static setRoute(route: BaseRoute, func: Function) {\n        R.set('path', route.path, func)\n        R.set('method', route.method, func)\n    }\n}\n\nexport class Swagger {\n    /**\n     * Sets extra swagger metadata for GET Calls\n     */\n    static setExtraModels(swaggerModels: {\n        [x: string]: any\n        get: Record\n    }) {\n        if (swaggerConst) {\n            const meta = Swagger.getExtraModels(swaggerModels.get)\n            const models = [\n                ...meta,\n                ...objKeys(swaggerModels)\n                    .map((name) => swaggerModels[name])\n                    .filter((one) => one && one.name !== swaggerModels.get.name),\n            ]\n\n            R.set(\n                swaggerConst.DECORATORS.API_EXTRA_MODELS,\n                models,\n                swaggerModels.get,\n            )\n        }\n    }\n\n    /**\n     * Sets swagger metadata for response of GET Calls\n     */\n    static setResponseOk(metadata: any[], func: Function) {\n        if (swaggerConst) {\n            R.set(swaggerConst.DECORATORS.API_RESPONSE, metadata, func)\n        }\n    }\n\n    static getExtraModels(target: Record): any[] {\n        return swaggerConst\n            ? R.get(swaggerConst.API_EXTRA_MODELS, target) || []\n            : []\n    }\n\n    static getResponseOk(func: Function) {\n        return swaggerConst\n            ? R.get(swaggerConst.DECORATORS.API_RESPONSE, func) || {}\n            : {}\n    }\n\n    static createResponseMeta(\n        name: BaseRouteName,\n        options: CrudOptions,\n        swaggerModels: {\n            [x: string]: any\n            get: { name: any }\n            getMany: { name: any }\n        },\n    ) {\n        if (swagger) {\n            const { query } = options\n\n            switch (name) {\n                case 'getOneBase':\n                    return {\n                        [HttpStatus.OK]: {\n                            description: 'Get one base response',\n                            type: swaggerModels.get,\n                        },\n                    }\n                case 'getOne':\n                    return {\n                        [HttpStatus.OK]: query?.alwaysPaginate\n                            ? {\n                                  description: 'Get paginated response',\n                                  type: swaggerModels.getMany,\n                              }\n                            : {\n                                  description: 'Get many base response',\n                                  schema: {\n                                      oneOf: [\n                                          {\n                                              $ref: swagger.getSchemaPath(\n                                                  swaggerModels.getMany.name,\n                                              ),\n                                          },\n                                          {\n                                              type: 'array',\n                                              items: {\n                                                  $ref: swagger.getSchemaPath(\n                                                      swaggerModels.get.name,\n                                                  ),\n                                              },\n                                          },\n                                      ],\n                                  },\n                              },\n                    }\n                default:\n                    // eslint-disable-next-line no-case-declarations\n                    const dto = swaggerModels[name.split('OneBase')[0]]\n\n                    return {\n                        [HttpStatus.OK]: {\n                            description: 'Response',\n                            schema: { $ref: swagger.getSchemaPath(dto.name) },\n                        },\n                    }\n            }\n        } else {\n            return {}\n        }\n    }\n}\n\nexport class SerializeHelper {\n    static createGetManyDto(dto: any, resourceName: string): any {\n        class GetManyResponseDto implements GetManyDefaultResponse {\n            @ApiProperty({ type: dto, isArray: true })\n            @Type(() => dto)\n            data!: any[]\n\n            @ApiProperty({ type: 'number' })\n            count!: number\n\n            @ApiProperty({ type: 'number' })\n            total!: number\n\n            @ApiProperty({ type: 'number' })\n            page!: number\n\n            @ApiProperty({ type: 'number' })\n            pageCount!: number\n        }\n\n        Object.defineProperty(GetManyResponseDto, 'name', {\n            writable: false,\n            value: `GetMany${resourceName}ResponseDto`,\n        })\n\n        return GetManyResponseDto\n    }\n\n    static createGetOneResponseDto(resourceName: string): any {\n        class GetOneResponseDto {}\n\n        Object.defineProperty(GetOneResponseDto, 'name', {\n            writable: false,\n            value: `${resourceName}ResponseDto`,\n        })\n\n        return GetOneResponseDto\n    }\n}\n\nexport class CrudConfigService {\n    static config: Partial = {\n        query: {\n            alwaysPaginate: false,\n        },\n    }\n\n    static load(config: Record) {\n        const query = isObjectFull(config.query) ? config.query : {}\n        const params = isObjectFull(config.params) ? config.params : {}\n        const serialize = isObjectFull(config.serialize) ? config.serialize : {}\n\n        CrudConfigService.config = deepmerge(\n            CrudConfigService.config,\n            { query, params, serialize },\n            { arrayMerge: (a, b, c) => b },\n        )\n    }\n}\n\nexport class CrudRoutesFactory {\n    protected options\n\n    protected swaggerModels: any = {}\n\n    constructor(private target: Object, options: CrudOptions) {\n        this.options = options\n        this.create()\n\n        console.log(\n            'CrudRoutesFactory::constructor',\n            // { ...options },\n            // this.targetProto,\n            // this.modelType,\n            // this.modelName,\n            // this.swaggerModels,\n        )\n    }\n\n    static create(target: Object, options: CrudOptions): CrudRoutesFactory {\n        return new CrudRoutesFactory(target, options)\n    }\n\n    get targetProto() {\n        // @ts-ignore\n        return this.target.prototype\n    }\n\n    get modelName() {\n        return this.options.model.type?.name\n    }\n\n    get modelType() {\n        return this.options.model.type\n    }\n\n    private create() {\n        const routesSchema = CrudRoutesFactory.getRoutesSchema()\n        this.mergeOptions()\n        this.setResponseModels()\n        this.createRoutes(routesSchema)\n        this.enableRoutes(routesSchema)\n    }\n\n    getOne(name: BaseRouteName) {\n        this.targetProto[name] = function getOne(req: any) {\n            return this.service.getOne(req)\n        }\n    }\n\n    getOneBase(name: BaseRouteName) {\n        this.targetProto[name] = function getOneBase(req: any) {\n            return this.service.getOneBase(req)\n        }\n    }\n\n    static getRoutesSchema(): BaseRoute[] {\n        return [\n            {\n                name: 'getOneBase',\n                path: '/',\n                method: RequestMethod.GET,\n                enable: false,\n                override: false,\n                withParams: true,\n            },\n            {\n                name: 'getOne',\n                path: '/',\n                method: RequestMethod.GET,\n                enable: false,\n                override: false,\n                withParams: false,\n            },\n        ]\n    }\n\n    mergeOptions() {\n        // merge query config\n        const query = isObjectFull(this.options.query) ? this.options.query : {}\n        this.options.query = { ...CrudConfigService.config.query, ...query }\n\n        // set dto\n        if (!isObjectFull(this.options.dto)) {\n            this.options.dto = {}\n        }\n\n        // set serialize\n        this.options.serialize = {\n            ...CrudConfigService.config.serialize,\n            ...this.options.serialize,\n        }\n\n        this.options.serialize.get = isFalse(this.options.serialize?.get)\n            ? false\n            : this.options.serialize?.get || this.modelType\n\n        this.options.serialize.getMany = isFalse(this.options.serialize?.getMany)\n            ? false\n            : this.options.serialize?.getMany\n            ? this.options.serialize?.getMany\n            : isFalse(this.options.serialize?.get)\n            ? false\n            : SerializeHelper.createGetManyDto(\n                  this.options.serialize?.get,\n                  this.modelName,\n              )\n\n        this.options.serialize.create = isFalse(this.options.serialize?.create)\n            ? false\n            : this.options.serialize?.create || this.modelType\n\n        this.options.serialize.update = isFalse(this.options.serialize?.update)\n            ? false\n            : this.options.serialize?.update || this.modelType\n\n        this.options.serialize.replace = isFalse(this.options.serialize?.replace)\n            ? false\n            : this.options.serialize?.replace || this.modelType\n\n        this.options.serialize.delete =\n            isFalse(this.options.serialize?.delete) ||\n            !this.options.routes?.deleteOneBase?.returnDeleted\n                ? false\n                : this.options.serialize?.delete || this.modelType\n\n        R.set('CRUD_OPTIONS_METADATA', this.options, this.target)\n    }\n\n    setResponseModels() {\n        const modelType = isFunction(this.modelType)\n            ? this.modelType\n            : SerializeHelper.createGetOneResponseDto(this.modelName)\n\n        this.swaggerModels.get = isFunction(this.options.serialize?.get)\n            ? this.options.serialize?.get\n            : modelType\n\n        this.swaggerModels.getMany =\n            this.options.serialize?.getMany ||\n            SerializeHelper.createGetManyDto(this.swaggerModels.get, this.modelName)\n\n        this.swaggerModels.create = isFunction(this.options.serialize?.create)\n            ? this.options.serialize?.create\n            : modelType\n\n        this.swaggerModels.update = isFunction(this.options.serialize?.update)\n            ? this.options.serialize?.update\n            : modelType\n\n        this.swaggerModels.replace = isFunction(this.options.serialize?.replace)\n            ? this.options.serialize?.replace\n            : modelType\n\n        this.swaggerModels.delete = isFunction(this.options.serialize?.delete)\n            ? this.options.serialize?.delete\n            : modelType\n\n        Swagger.setExtraModels(this.swaggerModels)\n    }\n\n    enableRoutes(routesSchema: BaseRoute[]) {\n        routesSchema.forEach((route) => {\n            if (!route.override && route.enable) {\n                R.setRoute(route, this.targetProto[route.name])\n            }\n        })\n    }\n\n    createRoutes(routesSchema: BaseRoute[]) {\n        routesSchema.forEach((route) => {\n            // create base method\n            /* this[route.name](route.name) */\n            route.enable = true\n\n            // set metadata\n            this.setSwaggerResponseOk(route.name)\n        })\n    }\n\n    setSwaggerResponseOk(name: BaseRouteName) {\n        const metadata = Swagger.getResponseOk(this.targetProto[name]) || {}\n        const metadataToAdd =\n            Swagger.createResponseMeta(name, this.options, this.swaggerModels) || {}\n\n        Swagger.setResponseOk(\n            // @ts-ignore\n            { ...metadata, ...metadataToAdd },\n            this.targetProto[name],\n        )\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/RequestGuard.html":{"url":"guards/RequestGuard.html","title":"guard - RequestGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n    Guards\n    RequestGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/infra/guards/req.ts\n            \n\n                \n                Description\n                \n                \n                    Request Guard\n\n                \n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                bindRequestHelpers\n                            \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            bindRequestHelpers\n                        \n                        \n                    \n                \n            \n            \n                \nbindRequestHelpers(request: any)\n                \n            \n\n\n            \n                \n                    Defined in src/infra/guards/req.ts:33\n                \n            \n\n\n            \n                \n                    Bind Request Helpers\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            canActivate\n                        \n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/infra/guards/req.ts:20\n                \n            \n\n\n            \n                \n                    Guard Method\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Current execution context. Provides access to details about\nthe current request pipeline.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     boolean | Promise | Observable\n\n                    \n                    \n                        Value indicating whether or not the current request is allowed to\nproceed.\n\n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { Injectable, CanActivate, ExecutionContext } from '@nestjs/common'\n\nimport { Observable } from 'rxjs'\n\n/**\n * Request Guard\n */\n@Injectable()\nexport class RequestGuard implements CanActivate {\n    /**\n     * Guard Method\n     *\n     * @param context Current execution context. Provides access to details about\n     * the current request pipeline.\n     *\n     * @returns Value indicating whether or not the current request is allowed to\n     * proceed.\n     */\n    canActivate(\n        context: ExecutionContext,\n    ): boolean | Promise | Observable {\n        this.bindRequestHelpers(context.switchToHttp().getRequest())\n\n        return true\n    }\n\n    /**\n     * Bind Request Helpers\n     *\n     * @param request\n     */\n    bindRequestHelpers(request: any): any {\n        function all(): Record {\n            const inputs = { ...request.query, ...request.body, ...request.params }\n\n            // eslint-disable-next-line guard-for-in,no-restricted-syntax\n            for (const key in inputs) {\n                const value = inputs[key]\n\n                if (typeof value === 'string' || value instanceof String) {\n                    inputs[key] = value.trim()\n                }\n            }\n\n            return inputs\n        }\n\n        request.all = all\n\n        return request\n    }\n}\n\n        \n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RescueLists.html":{"url":"interfaces/RescueLists.html","title":"interface - RescueLists","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  RescueLists\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/domain.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        rescues\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        rescues\n                                    \n                                \n                                \n                                    \n                                        rescues:         Rescues[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Rescues[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { HttpStatus } from '@nestjs/common'\n\nexport type Results =\n    | GetAppLaunchData\n    | GetUserProfile\n    | GetUserPosts\n    | GetComments\n    | GetRescueList\n    | GetFollowers\n    | GetFollowing\n\nexport type APIError = Error | string | null\n\nexport interface Result {\n    data: T\n    error?: APIError\n    message?: string | string[]\n    statusCode: HttpStatus\n}\n\nexport interface APIResponse {\n    data: T\n    error?: APIError\n    message?: string | string[]\n    statusCode: HttpStatus\n\n    count?: number\n    page?: number\n    pageCount?: number\n    total?: number\n}\n\nexport interface GetAppLaunchData {\n    link: 'api:/'\n    response: APIResponse\n}\n\nexport interface GetUserProfile {\n    link: 'api:v1/user/getUserProfile?userId=25'\n    response: APIResponse\n}\n\nexport interface GetUserPosts {\n    link: 'api:v1/user/getUserPosts?pageNo=0&pageSize=25'\n    response: APIResponse\n}\n\nexport interface GetRescueList {\n    link: 'api:v1/rescue/getRescueList?pageNo=0&pageSize=10&status=pending|inProgress|completed|nearest'\n    response: APIResponse\n}\n\nexport interface GetComments {\n    link: 'api:v1/rescue/getComments?pageNo=0&pageSize=10&postId=1230'\n    response: APIResponse\n}\n\nexport interface GetFollowers {\n    link: 'api:v1/rescue/getUserFollowers?userId=1230'\n    response: APIResponse\n}\n\nexport interface GetFollowing {\n    link: 'api:v1/rescue/getUserFollowing?userId=1230'\n    response: APIResponse\n}\n\nexport interface AppLaunchAction {\n    actionId: number\n    action: string\n    isActive: boolean\n    subject?: string\n}\n\nexport interface User {\n    usesId: number\n\n    coverImage: string\n    following: boolean\n    gender: string\n    isOwnProfile: number\n    isRescuer: boolean\n    latitude: number\n    longitude: number\n    numberOfFollowers: number\n    numberOfFollowing: number\n    numberOfPosts: number\n    numberOfRescuesCompleted: number\n    numberOfRescuesCreated: number\n    numberOfRescuesInProgress: number\n    profileImage: string\n    rescuer: boolean\n    userAddress: string\n    userContacts: string\n    userEmail: string\n    userName: string\n    badge: {\n        badgeId: number\n        badgeName: string\n        badgeDescription: string\n        recuesCompletionNeeded: number\n    }\n    setting: {\n        showMyContacts: boolean\n        getNotifications: boolean\n    }\n}\n\nexport interface PostType {\n    postTypeId: number\n    postType: string\n}\n\nexport interface PostedByUser {\n    usesId: number\n    badgeName: string\n    following: boolean\n    profileImage: string\n    rescuer: boolean\n    userName: string\n}\n\nexport interface UserPost {\n    postId: number\n    commentsCount: number\n    isUserReactedToPost: boolean\n    ownPage: boolean\n    postBy: PostedByUser\n    postImage: string\n    postTime: string\n    postType: PostType\n    postVideo: string\n    reactionsCount: number\n    timeAgo: string\n\n    adCorporateLogoUrl: string | null\n    corporateDescription: string | null\n    corporateName: string | null\n}\n\nexport interface UserPosts {\n    isRecent: boolean\n    feed: UserPost[]\n}\n\nexport interface Rescues {\n    rescueId: number\n    animalImageUrl: string\n    distance: number\n    distanceAway: string\n    emergencyType: string\n    postedBy: string\n    postedMinAgo: string\n    rescueDate: Date\n    rescuedPetName: string\n    rescueLocality: string\n    rescuers: {\n        contact: number\n        name: string\n        profileId: number\n        profileImageUrl: string\n        rescues: boolean\n        showMyNumber: boolean\n    }\n    rescueStatus: string\n    viewsCont: number\n}\n\nexport interface RescueLists {\n    rescues: Rescues[]\n}\n\nexport interface Comment {\n    commentId: number\n    comment: string\n    commentedUseName: string\n    commentedUserId: number\n    timeAgo: string\n}\n\nexport interface Comments {\n    comments: Comment[]\n}\n\nexport interface Follower {\n    userId: number\n    userName: string\n    profileImage: string\n    areYouFollowing: boolean\n    showRemoveOption: boolean\n}\n\nexport type Following = Follower\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Rescues.html":{"url":"interfaces/Rescues.html","title":"interface - Rescues","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Rescues\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/domain.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        animalImageUrl\n                                \n                                \n                                        distance\n                                \n                                \n                                        distanceAway\n                                \n                                \n                                        emergencyType\n                                \n                                \n                                        postedBy\n                                \n                                \n                                        postedMinAgo\n                                \n                                \n                                        rescueDate\n                                \n                                \n                                        rescuedPetName\n                                \n                                \n                                        rescueId\n                                \n                                \n                                        rescueLocality\n                                \n                                \n                                        rescuers\n                                \n                                \n                                        rescueStatus\n                                \n                                \n                                        viewsCont\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        animalImageUrl\n                                    \n                                \n                                \n                                    \n                                        animalImageUrl:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        distance\n                                    \n                                \n                                \n                                    \n                                        distance:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        distanceAway\n                                    \n                                \n                                \n                                    \n                                        distanceAway:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        emergencyType\n                                    \n                                \n                                \n                                    \n                                        emergencyType:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        postedBy\n                                    \n                                \n                                \n                                    \n                                        postedBy:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        postedMinAgo\n                                    \n                                \n                                \n                                    \n                                        postedMinAgo:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        rescueDate\n                                    \n                                \n                                \n                                    \n                                        rescueDate:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        rescuedPetName\n                                    \n                                \n                                \n                                    \n                                        rescuedPetName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        rescueId\n                                    \n                                \n                                \n                                    \n                                        rescueId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        rescueLocality\n                                    \n                                \n                                \n                                    \n                                        rescueLocality:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        rescuers\n                                    \n                                \n                                \n                                    \n                                        rescuers:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        rescueStatus\n                                    \n                                \n                                \n                                    \n                                        rescueStatus:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        viewsCont\n                                    \n                                \n                                \n                                    \n                                        viewsCont:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { HttpStatus } from '@nestjs/common'\n\nexport type Results =\n    | GetAppLaunchData\n    | GetUserProfile\n    | GetUserPosts\n    | GetComments\n    | GetRescueList\n    | GetFollowers\n    | GetFollowing\n\nexport type APIError = Error | string | null\n\nexport interface Result {\n    data: T\n    error?: APIError\n    message?: string | string[]\n    statusCode: HttpStatus\n}\n\nexport interface APIResponse {\n    data: T\n    error?: APIError\n    message?: string | string[]\n    statusCode: HttpStatus\n\n    count?: number\n    page?: number\n    pageCount?: number\n    total?: number\n}\n\nexport interface GetAppLaunchData {\n    link: 'api:/'\n    response: APIResponse\n}\n\nexport interface GetUserProfile {\n    link: 'api:v1/user/getUserProfile?userId=25'\n    response: APIResponse\n}\n\nexport interface GetUserPosts {\n    link: 'api:v1/user/getUserPosts?pageNo=0&pageSize=25'\n    response: APIResponse\n}\n\nexport interface GetRescueList {\n    link: 'api:v1/rescue/getRescueList?pageNo=0&pageSize=10&status=pending|inProgress|completed|nearest'\n    response: APIResponse\n}\n\nexport interface GetComments {\n    link: 'api:v1/rescue/getComments?pageNo=0&pageSize=10&postId=1230'\n    response: APIResponse\n}\n\nexport interface GetFollowers {\n    link: 'api:v1/rescue/getUserFollowers?userId=1230'\n    response: APIResponse\n}\n\nexport interface GetFollowing {\n    link: 'api:v1/rescue/getUserFollowing?userId=1230'\n    response: APIResponse\n}\n\nexport interface AppLaunchAction {\n    actionId: number\n    action: string\n    isActive: boolean\n    subject?: string\n}\n\nexport interface User {\n    usesId: number\n\n    coverImage: string\n    following: boolean\n    gender: string\n    isOwnProfile: number\n    isRescuer: boolean\n    latitude: number\n    longitude: number\n    numberOfFollowers: number\n    numberOfFollowing: number\n    numberOfPosts: number\n    numberOfRescuesCompleted: number\n    numberOfRescuesCreated: number\n    numberOfRescuesInProgress: number\n    profileImage: string\n    rescuer: boolean\n    userAddress: string\n    userContacts: string\n    userEmail: string\n    userName: string\n    badge: {\n        badgeId: number\n        badgeName: string\n        badgeDescription: string\n        recuesCompletionNeeded: number\n    }\n    setting: {\n        showMyContacts: boolean\n        getNotifications: boolean\n    }\n}\n\nexport interface PostType {\n    postTypeId: number\n    postType: string\n}\n\nexport interface PostedByUser {\n    usesId: number\n    badgeName: string\n    following: boolean\n    profileImage: string\n    rescuer: boolean\n    userName: string\n}\n\nexport interface UserPost {\n    postId: number\n    commentsCount: number\n    isUserReactedToPost: boolean\n    ownPage: boolean\n    postBy: PostedByUser\n    postImage: string\n    postTime: string\n    postType: PostType\n    postVideo: string\n    reactionsCount: number\n    timeAgo: string\n\n    adCorporateLogoUrl: string | null\n    corporateDescription: string | null\n    corporateName: string | null\n}\n\nexport interface UserPosts {\n    isRecent: boolean\n    feed: UserPost[]\n}\n\nexport interface Rescues {\n    rescueId: number\n    animalImageUrl: string\n    distance: number\n    distanceAway: string\n    emergencyType: string\n    postedBy: string\n    postedMinAgo: string\n    rescueDate: Date\n    rescuedPetName: string\n    rescueLocality: string\n    rescuers: {\n        contact: number\n        name: string\n        profileId: number\n        profileImageUrl: string\n        rescues: boolean\n        showMyNumber: boolean\n    }\n    rescueStatus: string\n    viewsCont: number\n}\n\nexport interface RescueLists {\n    rescues: Rescues[]\n}\n\nexport interface Comment {\n    commentId: number\n    comment: string\n    commentedUseName: string\n    commentedUserId: number\n    timeAgo: string\n}\n\nexport interface Comments {\n    comments: Comment[]\n}\n\nexport interface Follower {\n    userId: number\n    userName: string\n    profileImage: string\n    areYouFollowing: boolean\n    showRemoveOption: boolean\n}\n\nexport type Following = Follower\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Response.html":{"url":"interfaces/Response.html","title":"interface - Response","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Response\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infra/interceptors/transform.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        data\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                    \n                                \n                                \n                                    \n                                        data:     T\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n    Injectable,\n    NestInterceptor,\n    ExecutionContext,\n    CallHandler,\n} from '@nestjs/common'\n\nimport { Observable } from 'rxjs'\nimport { map } from 'rxjs/operators'\n\nexport interface Response {\n    data: T\n}\n\n/**\n * Transform interceptor is Observer which transform response\n */\n@Injectable()\nexport class TransformInterceptor implements NestInterceptor> {\n    /**\n     * Interceptor Method to implement a custom interceptor.\n     *\n     * @param context an `ExecutionContext` object providing methods to access the\n     * route handler and class about to be invoked.\n     * @param next a reference to the `CallHandler`, which provides access to an\n     * `Observable` representing the response stream from the route handler.\n     */\n    intercept(\n        context: ExecutionContext,\n        next: CallHandler,\n    ): Observable> {\n        return next.handle().pipe(map((data) => ({ data })))\n    }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/ResponseGuard.html":{"url":"guards/ResponseGuard.html","title":"guard - ResponseGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n    Guards\n    ResponseGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/infra/guards/res.ts\n            \n\n                \n                Description\n                \n                \n                    Response Guard\n\n                \n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                bindResponseHelpers\n                            \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            bindResponseHelpers\n                        \n                        \n                    \n                \n            \n            \n                \nbindResponseHelpers(response: any)\n                \n            \n\n\n            \n                \n                    Defined in src/infra/guards/res.ts:32\n                \n            \n\n\n            \n                \n                    Bind Response Helpers\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    response\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            canActivate\n                        \n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/infra/guards/res.ts:19\n                \n            \n\n\n            \n                \n                    Guard Method\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Current execution context. Provides access to details about\nthe current request pipeline.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     boolean | Promise | Observable\n\n                    \n                    \n                        Value indicating whether or not the current request is allowed to\nproceed.\n\n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { Injectable, CanActivate, ExecutionContext } from '@nestjs/common'\n\nimport { Observable } from 'rxjs'\n\n/**\n * Response Guard\n */\n@Injectable()\nexport class ResponseGuard implements CanActivate {\n    /**\n     * Guard Method\n     *\n     * @param context Current execution context. Provides access to details about\n     * the current request pipeline.\n     *\n     * @returns Value indicating whether or not the current request is allowed to\n     * proceed.\n     */\n    canActivate(\n        context: ExecutionContext,\n    ): boolean | Promise | Observable {\n        this.bindResponseHelpers(context.switchToHttp().getResponse())\n\n        return true\n    }\n\n    /**\n     * Bind Response Helpers\n     *\n     * @param response\n     */\n    bindResponseHelpers(response: any): any {\n        function success(\n            data: Record | Array | string,\n            status = 200,\n        ) {\n            return response.status(status).json({\n                success: true,\n                code: status,\n                data,\n            })\n        }\n\n        function error(err: Record | string, status = 401) {\n            let message = 'Something went wrong!'\n            let errors = null\n\n            if (typeof err === 'string') {\n                message = err\n            } else {\n                message = err.message\n                errors = err.errors\n            }\n\n            return response.status(status).json({\n                success: false,\n                code: status,\n                message,\n                errors,\n            })\n        }\n\n        function noContent() {\n            return response.status(204).end()\n        }\n\n        function withMeta(data: Record, status = 200) {\n            const { data: dataObj, ...meta } = data\n\n            return response.status(status).json({\n                success: true,\n                code: status,\n                data: dataObj,\n                meta,\n            })\n        }\n\n        response.error = error\n        response.success = success\n        response.withMeta = withMeta\n        response.noContent = noContent\n\n        return response\n    }\n}\n\n        \n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Result.html":{"url":"interfaces/Result.html","title":"interface - Result","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Result\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/domain.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        data\n                                \n                                \n                                            Optional\n                                        error\n                                \n                                \n                                            Optional\n                                        message\n                                \n                                \n                                        statusCode\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                    \n                                \n                                \n                                    \n                                        data:     T\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        error\n                                    \n                                \n                                \n                                    \n                                        error:         APIError\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         APIError\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                    \n                                \n                                \n                                    \n                                        message:     string | string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string | string[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        statusCode\n                                    \n                                \n                                \n                                    \n                                        statusCode:     HttpStatus\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     HttpStatus\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { HttpStatus } from '@nestjs/common'\n\nexport type Results =\n    | GetAppLaunchData\n    | GetUserProfile\n    | GetUserPosts\n    | GetComments\n    | GetRescueList\n    | GetFollowers\n    | GetFollowing\n\nexport type APIError = Error | string | null\n\nexport interface Result {\n    data: T\n    error?: APIError\n    message?: string | string[]\n    statusCode: HttpStatus\n}\n\nexport interface APIResponse {\n    data: T\n    error?: APIError\n    message?: string | string[]\n    statusCode: HttpStatus\n\n    count?: number\n    page?: number\n    pageCount?: number\n    total?: number\n}\n\nexport interface GetAppLaunchData {\n    link: 'api:/'\n    response: APIResponse\n}\n\nexport interface GetUserProfile {\n    link: 'api:v1/user/getUserProfile?userId=25'\n    response: APIResponse\n}\n\nexport interface GetUserPosts {\n    link: 'api:v1/user/getUserPosts?pageNo=0&pageSize=25'\n    response: APIResponse\n}\n\nexport interface GetRescueList {\n    link: 'api:v1/rescue/getRescueList?pageNo=0&pageSize=10&status=pending|inProgress|completed|nearest'\n    response: APIResponse\n}\n\nexport interface GetComments {\n    link: 'api:v1/rescue/getComments?pageNo=0&pageSize=10&postId=1230'\n    response: APIResponse\n}\n\nexport interface GetFollowers {\n    link: 'api:v1/rescue/getUserFollowers?userId=1230'\n    response: APIResponse\n}\n\nexport interface GetFollowing {\n    link: 'api:v1/rescue/getUserFollowing?userId=1230'\n    response: APIResponse\n}\n\nexport interface AppLaunchAction {\n    actionId: number\n    action: string\n    isActive: boolean\n    subject?: string\n}\n\nexport interface User {\n    usesId: number\n\n    coverImage: string\n    following: boolean\n    gender: string\n    isOwnProfile: number\n    isRescuer: boolean\n    latitude: number\n    longitude: number\n    numberOfFollowers: number\n    numberOfFollowing: number\n    numberOfPosts: number\n    numberOfRescuesCompleted: number\n    numberOfRescuesCreated: number\n    numberOfRescuesInProgress: number\n    profileImage: string\n    rescuer: boolean\n    userAddress: string\n    userContacts: string\n    userEmail: string\n    userName: string\n    badge: {\n        badgeId: number\n        badgeName: string\n        badgeDescription: string\n        recuesCompletionNeeded: number\n    }\n    setting: {\n        showMyContacts: boolean\n        getNotifications: boolean\n    }\n}\n\nexport interface PostType {\n    postTypeId: number\n    postType: string\n}\n\nexport interface PostedByUser {\n    usesId: number\n    badgeName: string\n    following: boolean\n    profileImage: string\n    rescuer: boolean\n    userName: string\n}\n\nexport interface UserPost {\n    postId: number\n    commentsCount: number\n    isUserReactedToPost: boolean\n    ownPage: boolean\n    postBy: PostedByUser\n    postImage: string\n    postTime: string\n    postType: PostType\n    postVideo: string\n    reactionsCount: number\n    timeAgo: string\n\n    adCorporateLogoUrl: string | null\n    corporateDescription: string | null\n    corporateName: string | null\n}\n\nexport interface UserPosts {\n    isRecent: boolean\n    feed: UserPost[]\n}\n\nexport interface Rescues {\n    rescueId: number\n    animalImageUrl: string\n    distance: number\n    distanceAway: string\n    emergencyType: string\n    postedBy: string\n    postedMinAgo: string\n    rescueDate: Date\n    rescuedPetName: string\n    rescueLocality: string\n    rescuers: {\n        contact: number\n        name: string\n        profileId: number\n        profileImageUrl: string\n        rescues: boolean\n        showMyNumber: boolean\n    }\n    rescueStatus: string\n    viewsCont: number\n}\n\nexport interface RescueLists {\n    rescues: Rescues[]\n}\n\nexport interface Comment {\n    commentId: number\n    comment: string\n    commentedUseName: string\n    commentedUserId: number\n    timeAgo: string\n}\n\nexport interface Comments {\n    comments: Comment[]\n}\n\nexport interface Follower {\n    userId: number\n    userName: string\n    profileImage: string\n    areYouFollowing: boolean\n    showRemoveOption: boolean\n}\n\nexport type Following = Follower\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SerializeHelper.html":{"url":"classes/SerializeHelper.html","title":"class - SerializeHelper","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SerializeHelper\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/base/swagger-gen/crud-routes.factory.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                createGetManyDto\n                            \n                            \n                                    Static\n                                createGetOneResponseDto\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            createGetManyDto\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createGetManyDto(dto: any, resourceName: string)\n                \n            \n\n\n            \n                \n                    Defined in src/base/swagger-gen/crud-routes.factory.ts:161\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    resourceName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            createGetOneResponseDto\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createGetOneResponseDto(resourceName: string)\n                \n            \n\n\n            \n                \n                    Defined in src/base/swagger-gen/crud-routes.factory.ts:188\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    resourceName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { HttpStatus, RequestMethod } from '@nestjs/common'\n\nimport { Type } from 'class-transformer'\nimport * as deepmerge from 'deepmerge'\n\nimport {\n    ApiProperty,\n    BaseRoute,\n    isFalse,\n    isFunction,\n    isObjectFull,\n    objKeys,\n    swagger,\n    swaggerConst,\n} from './utils'\nimport type { CrudOptions, GetManyDefaultResponse, BaseRouteName } from './utils'\n\nexport class R {\n    static set(\n        metadataKey: string,\n        metadataValue: any,\n        target: Object,\n        propertyKey?: string | symbol,\n    ) {\n        if (!propertyKey) {\n            Reflect.defineMetadata(metadataKey, metadataValue, target)\n        } else {\n            Reflect.defineMetadata(metadataKey, metadataValue, target, propertyKey)\n        }\n    }\n\n    static get(\n        metadataKey: any,\n        target: Object,\n        propertyKey?: string | symbol,\n    ): T {\n        if (!propertyKey) return Reflect.getMetadata(metadataKey, target)\n\n        return Reflect.getMetadata(metadataKey, target, propertyKey)\n    }\n\n    static setRoute(route: BaseRoute, func: Function) {\n        R.set('path', route.path, func)\n        R.set('method', route.method, func)\n    }\n}\n\nexport class Swagger {\n    /**\n     * Sets extra swagger metadata for GET Calls\n     */\n    static setExtraModels(swaggerModels: {\n        [x: string]: any\n        get: Record\n    }) {\n        if (swaggerConst) {\n            const meta = Swagger.getExtraModels(swaggerModels.get)\n            const models = [\n                ...meta,\n                ...objKeys(swaggerModels)\n                    .map((name) => swaggerModels[name])\n                    .filter((one) => one && one.name !== swaggerModels.get.name),\n            ]\n\n            R.set(\n                swaggerConst.DECORATORS.API_EXTRA_MODELS,\n                models,\n                swaggerModels.get,\n            )\n        }\n    }\n\n    /**\n     * Sets swagger metadata for response of GET Calls\n     */\n    static setResponseOk(metadata: any[], func: Function) {\n        if (swaggerConst) {\n            R.set(swaggerConst.DECORATORS.API_RESPONSE, metadata, func)\n        }\n    }\n\n    static getExtraModels(target: Record): any[] {\n        return swaggerConst\n            ? R.get(swaggerConst.API_EXTRA_MODELS, target) || []\n            : []\n    }\n\n    static getResponseOk(func: Function) {\n        return swaggerConst\n            ? R.get(swaggerConst.DECORATORS.API_RESPONSE, func) || {}\n            : {}\n    }\n\n    static createResponseMeta(\n        name: BaseRouteName,\n        options: CrudOptions,\n        swaggerModels: {\n            [x: string]: any\n            get: { name: any }\n            getMany: { name: any }\n        },\n    ) {\n        if (swagger) {\n            const { query } = options\n\n            switch (name) {\n                case 'getOneBase':\n                    return {\n                        [HttpStatus.OK]: {\n                            description: 'Get one base response',\n                            type: swaggerModels.get,\n                        },\n                    }\n                case 'getOne':\n                    return {\n                        [HttpStatus.OK]: query?.alwaysPaginate\n                            ? {\n                                  description: 'Get paginated response',\n                                  type: swaggerModels.getMany,\n                              }\n                            : {\n                                  description: 'Get many base response',\n                                  schema: {\n                                      oneOf: [\n                                          {\n                                              $ref: swagger.getSchemaPath(\n                                                  swaggerModels.getMany.name,\n                                              ),\n                                          },\n                                          {\n                                              type: 'array',\n                                              items: {\n                                                  $ref: swagger.getSchemaPath(\n                                                      swaggerModels.get.name,\n                                                  ),\n                                              },\n                                          },\n                                      ],\n                                  },\n                              },\n                    }\n                default:\n                    // eslint-disable-next-line no-case-declarations\n                    const dto = swaggerModels[name.split('OneBase')[0]]\n\n                    return {\n                        [HttpStatus.OK]: {\n                            description: 'Response',\n                            schema: { $ref: swagger.getSchemaPath(dto.name) },\n                        },\n                    }\n            }\n        } else {\n            return {}\n        }\n    }\n}\n\nexport class SerializeHelper {\n    static createGetManyDto(dto: any, resourceName: string): any {\n        class GetManyResponseDto implements GetManyDefaultResponse {\n            @ApiProperty({ type: dto, isArray: true })\n            @Type(() => dto)\n            data!: any[]\n\n            @ApiProperty({ type: 'number' })\n            count!: number\n\n            @ApiProperty({ type: 'number' })\n            total!: number\n\n            @ApiProperty({ type: 'number' })\n            page!: number\n\n            @ApiProperty({ type: 'number' })\n            pageCount!: number\n        }\n\n        Object.defineProperty(GetManyResponseDto, 'name', {\n            writable: false,\n            value: `GetMany${resourceName}ResponseDto`,\n        })\n\n        return GetManyResponseDto\n    }\n\n    static createGetOneResponseDto(resourceName: string): any {\n        class GetOneResponseDto {}\n\n        Object.defineProperty(GetOneResponseDto, 'name', {\n            writable: false,\n            value: `${resourceName}ResponseDto`,\n        })\n\n        return GetOneResponseDto\n    }\n}\n\nexport class CrudConfigService {\n    static config: Partial = {\n        query: {\n            alwaysPaginate: false,\n        },\n    }\n\n    static load(config: Record) {\n        const query = isObjectFull(config.query) ? config.query : {}\n        const params = isObjectFull(config.params) ? config.params : {}\n        const serialize = isObjectFull(config.serialize) ? config.serialize : {}\n\n        CrudConfigService.config = deepmerge(\n            CrudConfigService.config,\n            { query, params, serialize },\n            { arrayMerge: (a, b, c) => b },\n        )\n    }\n}\n\nexport class CrudRoutesFactory {\n    protected options\n\n    protected swaggerModels: any = {}\n\n    constructor(private target: Object, options: CrudOptions) {\n        this.options = options\n        this.create()\n\n        console.log(\n            'CrudRoutesFactory::constructor',\n            // { ...options },\n            // this.targetProto,\n            // this.modelType,\n            // this.modelName,\n            // this.swaggerModels,\n        )\n    }\n\n    static create(target: Object, options: CrudOptions): CrudRoutesFactory {\n        return new CrudRoutesFactory(target, options)\n    }\n\n    get targetProto() {\n        // @ts-ignore\n        return this.target.prototype\n    }\n\n    get modelName() {\n        return this.options.model.type?.name\n    }\n\n    get modelType() {\n        return this.options.model.type\n    }\n\n    private create() {\n        const routesSchema = CrudRoutesFactory.getRoutesSchema()\n        this.mergeOptions()\n        this.setResponseModels()\n        this.createRoutes(routesSchema)\n        this.enableRoutes(routesSchema)\n    }\n\n    getOne(name: BaseRouteName) {\n        this.targetProto[name] = function getOne(req: any) {\n            return this.service.getOne(req)\n        }\n    }\n\n    getOneBase(name: BaseRouteName) {\n        this.targetProto[name] = function getOneBase(req: any) {\n            return this.service.getOneBase(req)\n        }\n    }\n\n    static getRoutesSchema(): BaseRoute[] {\n        return [\n            {\n                name: 'getOneBase',\n                path: '/',\n                method: RequestMethod.GET,\n                enable: false,\n                override: false,\n                withParams: true,\n            },\n            {\n                name: 'getOne',\n                path: '/',\n                method: RequestMethod.GET,\n                enable: false,\n                override: false,\n                withParams: false,\n            },\n        ]\n    }\n\n    mergeOptions() {\n        // merge query config\n        const query = isObjectFull(this.options.query) ? this.options.query : {}\n        this.options.query = { ...CrudConfigService.config.query, ...query }\n\n        // set dto\n        if (!isObjectFull(this.options.dto)) {\n            this.options.dto = {}\n        }\n\n        // set serialize\n        this.options.serialize = {\n            ...CrudConfigService.config.serialize,\n            ...this.options.serialize,\n        }\n\n        this.options.serialize.get = isFalse(this.options.serialize?.get)\n            ? false\n            : this.options.serialize?.get || this.modelType\n\n        this.options.serialize.getMany = isFalse(this.options.serialize?.getMany)\n            ? false\n            : this.options.serialize?.getMany\n            ? this.options.serialize?.getMany\n            : isFalse(this.options.serialize?.get)\n            ? false\n            : SerializeHelper.createGetManyDto(\n                  this.options.serialize?.get,\n                  this.modelName,\n              )\n\n        this.options.serialize.create = isFalse(this.options.serialize?.create)\n            ? false\n            : this.options.serialize?.create || this.modelType\n\n        this.options.serialize.update = isFalse(this.options.serialize?.update)\n            ? false\n            : this.options.serialize?.update || this.modelType\n\n        this.options.serialize.replace = isFalse(this.options.serialize?.replace)\n            ? false\n            : this.options.serialize?.replace || this.modelType\n\n        this.options.serialize.delete =\n            isFalse(this.options.serialize?.delete) ||\n            !this.options.routes?.deleteOneBase?.returnDeleted\n                ? false\n                : this.options.serialize?.delete || this.modelType\n\n        R.set('CRUD_OPTIONS_METADATA', this.options, this.target)\n    }\n\n    setResponseModels() {\n        const modelType = isFunction(this.modelType)\n            ? this.modelType\n            : SerializeHelper.createGetOneResponseDto(this.modelName)\n\n        this.swaggerModels.get = isFunction(this.options.serialize?.get)\n            ? this.options.serialize?.get\n            : modelType\n\n        this.swaggerModels.getMany =\n            this.options.serialize?.getMany ||\n            SerializeHelper.createGetManyDto(this.swaggerModels.get, this.modelName)\n\n        this.swaggerModels.create = isFunction(this.options.serialize?.create)\n            ? this.options.serialize?.create\n            : modelType\n\n        this.swaggerModels.update = isFunction(this.options.serialize?.update)\n            ? this.options.serialize?.update\n            : modelType\n\n        this.swaggerModels.replace = isFunction(this.options.serialize?.replace)\n            ? this.options.serialize?.replace\n            : modelType\n\n        this.swaggerModels.delete = isFunction(this.options.serialize?.delete)\n            ? this.options.serialize?.delete\n            : modelType\n\n        Swagger.setExtraModels(this.swaggerModels)\n    }\n\n    enableRoutes(routesSchema: BaseRoute[]) {\n        routesSchema.forEach((route) => {\n            if (!route.override && route.enable) {\n                R.setRoute(route, this.targetProto[route.name])\n            }\n        })\n    }\n\n    createRoutes(routesSchema: BaseRoute[]) {\n        routesSchema.forEach((route) => {\n            // create base method\n            /* this[route.name](route.name) */\n            route.enable = true\n\n            // set metadata\n            this.setSwaggerResponseOk(route.name)\n        })\n    }\n\n    setSwaggerResponseOk(name: BaseRouteName) {\n        const metadata = Swagger.getResponseOk(this.targetProto[name]) || {}\n        const metadataToAdd =\n            Swagger.createResponseMeta(name, this.options, this.swaggerModels) || {}\n\n        Swagger.setResponseOk(\n            // @ts-ignore\n            { ...metadata, ...metadataToAdd },\n            this.targetProto[name],\n        )\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Swagger.html":{"url":"classes/Swagger.html","title":"class - Swagger","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Swagger\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/base/swagger-gen/crud-routes.factory.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                createResponseMeta\n                            \n                            \n                                    Static\n                                getExtraModels\n                            \n                            \n                                    Static\n                                getResponseOk\n                            \n                            \n                                    Static\n                                setExtraModels\n                            \n                            \n                                    Static\n                                setResponseOk\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            createResponseMeta\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createResponseMeta(name: BaseRouteName, options: CrudOptions, swaggerModels: literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/base/swagger-gen/crud-routes.factory.ts:95\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                BaseRouteName\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                CrudOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    swaggerModels\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     { [x: number]: any; }\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            getExtraModels\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getExtraModels(target: Record)\n                \n            \n\n\n            \n                \n                    Defined in src/base/swagger-gen/crud-routes.factory.ts:83\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    target\n                                    \n                                                Record\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     any[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            getResponseOk\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getResponseOk(func: Function)\n                \n            \n\n\n            \n                \n                    Defined in src/base/swagger-gen/crud-routes.factory.ts:89\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    func\n                                    \n                                                Function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            setExtraModels\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setExtraModels(swaggerModels: literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/base/swagger-gen/crud-routes.factory.ts:53\n                \n            \n\n\n            \n                \n                    Sets extra swagger metadata for GET Calls\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    swaggerModels\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            setResponseOk\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setResponseOk(metadata: any[], func: Function)\n                \n            \n\n\n            \n                \n                    Defined in src/base/swagger-gen/crud-routes.factory.ts:77\n                \n            \n\n\n            \n                \n                    Sets swagger metadata for response of GET Calls\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    metadata\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    func\n                                    \n                                                Function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { HttpStatus, RequestMethod } from '@nestjs/common'\n\nimport { Type } from 'class-transformer'\nimport * as deepmerge from 'deepmerge'\n\nimport {\n    ApiProperty,\n    BaseRoute,\n    isFalse,\n    isFunction,\n    isObjectFull,\n    objKeys,\n    swagger,\n    swaggerConst,\n} from './utils'\nimport type { CrudOptions, GetManyDefaultResponse, BaseRouteName } from './utils'\n\nexport class R {\n    static set(\n        metadataKey: string,\n        metadataValue: any,\n        target: Object,\n        propertyKey?: string | symbol,\n    ) {\n        if (!propertyKey) {\n            Reflect.defineMetadata(metadataKey, metadataValue, target)\n        } else {\n            Reflect.defineMetadata(metadataKey, metadataValue, target, propertyKey)\n        }\n    }\n\n    static get(\n        metadataKey: any,\n        target: Object,\n        propertyKey?: string | symbol,\n    ): T {\n        if (!propertyKey) return Reflect.getMetadata(metadataKey, target)\n\n        return Reflect.getMetadata(metadataKey, target, propertyKey)\n    }\n\n    static setRoute(route: BaseRoute, func: Function) {\n        R.set('path', route.path, func)\n        R.set('method', route.method, func)\n    }\n}\n\nexport class Swagger {\n    /**\n     * Sets extra swagger metadata for GET Calls\n     */\n    static setExtraModels(swaggerModels: {\n        [x: string]: any\n        get: Record\n    }) {\n        if (swaggerConst) {\n            const meta = Swagger.getExtraModels(swaggerModels.get)\n            const models = [\n                ...meta,\n                ...objKeys(swaggerModels)\n                    .map((name) => swaggerModels[name])\n                    .filter((one) => one && one.name !== swaggerModels.get.name),\n            ]\n\n            R.set(\n                swaggerConst.DECORATORS.API_EXTRA_MODELS,\n                models,\n                swaggerModels.get,\n            )\n        }\n    }\n\n    /**\n     * Sets swagger metadata for response of GET Calls\n     */\n    static setResponseOk(metadata: any[], func: Function) {\n        if (swaggerConst) {\n            R.set(swaggerConst.DECORATORS.API_RESPONSE, metadata, func)\n        }\n    }\n\n    static getExtraModels(target: Record): any[] {\n        return swaggerConst\n            ? R.get(swaggerConst.API_EXTRA_MODELS, target) || []\n            : []\n    }\n\n    static getResponseOk(func: Function) {\n        return swaggerConst\n            ? R.get(swaggerConst.DECORATORS.API_RESPONSE, func) || {}\n            : {}\n    }\n\n    static createResponseMeta(\n        name: BaseRouteName,\n        options: CrudOptions,\n        swaggerModels: {\n            [x: string]: any\n            get: { name: any }\n            getMany: { name: any }\n        },\n    ) {\n        if (swagger) {\n            const { query } = options\n\n            switch (name) {\n                case 'getOneBase':\n                    return {\n                        [HttpStatus.OK]: {\n                            description: 'Get one base response',\n                            type: swaggerModels.get,\n                        },\n                    }\n                case 'getOne':\n                    return {\n                        [HttpStatus.OK]: query?.alwaysPaginate\n                            ? {\n                                  description: 'Get paginated response',\n                                  type: swaggerModels.getMany,\n                              }\n                            : {\n                                  description: 'Get many base response',\n                                  schema: {\n                                      oneOf: [\n                                          {\n                                              $ref: swagger.getSchemaPath(\n                                                  swaggerModels.getMany.name,\n                                              ),\n                                          },\n                                          {\n                                              type: 'array',\n                                              items: {\n                                                  $ref: swagger.getSchemaPath(\n                                                      swaggerModels.get.name,\n                                                  ),\n                                              },\n                                          },\n                                      ],\n                                  },\n                              },\n                    }\n                default:\n                    // eslint-disable-next-line no-case-declarations\n                    const dto = swaggerModels[name.split('OneBase')[0]]\n\n                    return {\n                        [HttpStatus.OK]: {\n                            description: 'Response',\n                            schema: { $ref: swagger.getSchemaPath(dto.name) },\n                        },\n                    }\n            }\n        } else {\n            return {}\n        }\n    }\n}\n\nexport class SerializeHelper {\n    static createGetManyDto(dto: any, resourceName: string): any {\n        class GetManyResponseDto implements GetManyDefaultResponse {\n            @ApiProperty({ type: dto, isArray: true })\n            @Type(() => dto)\n            data!: any[]\n\n            @ApiProperty({ type: 'number' })\n            count!: number\n\n            @ApiProperty({ type: 'number' })\n            total!: number\n\n            @ApiProperty({ type: 'number' })\n            page!: number\n\n            @ApiProperty({ type: 'number' })\n            pageCount!: number\n        }\n\n        Object.defineProperty(GetManyResponseDto, 'name', {\n            writable: false,\n            value: `GetMany${resourceName}ResponseDto`,\n        })\n\n        return GetManyResponseDto\n    }\n\n    static createGetOneResponseDto(resourceName: string): any {\n        class GetOneResponseDto {}\n\n        Object.defineProperty(GetOneResponseDto, 'name', {\n            writable: false,\n            value: `${resourceName}ResponseDto`,\n        })\n\n        return GetOneResponseDto\n    }\n}\n\nexport class CrudConfigService {\n    static config: Partial = {\n        query: {\n            alwaysPaginate: false,\n        },\n    }\n\n    static load(config: Record) {\n        const query = isObjectFull(config.query) ? config.query : {}\n        const params = isObjectFull(config.params) ? config.params : {}\n        const serialize = isObjectFull(config.serialize) ? config.serialize : {}\n\n        CrudConfigService.config = deepmerge(\n            CrudConfigService.config,\n            { query, params, serialize },\n            { arrayMerge: (a, b, c) => b },\n        )\n    }\n}\n\nexport class CrudRoutesFactory {\n    protected options\n\n    protected swaggerModels: any = {}\n\n    constructor(private target: Object, options: CrudOptions) {\n        this.options = options\n        this.create()\n\n        console.log(\n            'CrudRoutesFactory::constructor',\n            // { ...options },\n            // this.targetProto,\n            // this.modelType,\n            // this.modelName,\n            // this.swaggerModels,\n        )\n    }\n\n    static create(target: Object, options: CrudOptions): CrudRoutesFactory {\n        return new CrudRoutesFactory(target, options)\n    }\n\n    get targetProto() {\n        // @ts-ignore\n        return this.target.prototype\n    }\n\n    get modelName() {\n        return this.options.model.type?.name\n    }\n\n    get modelType() {\n        return this.options.model.type\n    }\n\n    private create() {\n        const routesSchema = CrudRoutesFactory.getRoutesSchema()\n        this.mergeOptions()\n        this.setResponseModels()\n        this.createRoutes(routesSchema)\n        this.enableRoutes(routesSchema)\n    }\n\n    getOne(name: BaseRouteName) {\n        this.targetProto[name] = function getOne(req: any) {\n            return this.service.getOne(req)\n        }\n    }\n\n    getOneBase(name: BaseRouteName) {\n        this.targetProto[name] = function getOneBase(req: any) {\n            return this.service.getOneBase(req)\n        }\n    }\n\n    static getRoutesSchema(): BaseRoute[] {\n        return [\n            {\n                name: 'getOneBase',\n                path: '/',\n                method: RequestMethod.GET,\n                enable: false,\n                override: false,\n                withParams: true,\n            },\n            {\n                name: 'getOne',\n                path: '/',\n                method: RequestMethod.GET,\n                enable: false,\n                override: false,\n                withParams: false,\n            },\n        ]\n    }\n\n    mergeOptions() {\n        // merge query config\n        const query = isObjectFull(this.options.query) ? this.options.query : {}\n        this.options.query = { ...CrudConfigService.config.query, ...query }\n\n        // set dto\n        if (!isObjectFull(this.options.dto)) {\n            this.options.dto = {}\n        }\n\n        // set serialize\n        this.options.serialize = {\n            ...CrudConfigService.config.serialize,\n            ...this.options.serialize,\n        }\n\n        this.options.serialize.get = isFalse(this.options.serialize?.get)\n            ? false\n            : this.options.serialize?.get || this.modelType\n\n        this.options.serialize.getMany = isFalse(this.options.serialize?.getMany)\n            ? false\n            : this.options.serialize?.getMany\n            ? this.options.serialize?.getMany\n            : isFalse(this.options.serialize?.get)\n            ? false\n            : SerializeHelper.createGetManyDto(\n                  this.options.serialize?.get,\n                  this.modelName,\n              )\n\n        this.options.serialize.create = isFalse(this.options.serialize?.create)\n            ? false\n            : this.options.serialize?.create || this.modelType\n\n        this.options.serialize.update = isFalse(this.options.serialize?.update)\n            ? false\n            : this.options.serialize?.update || this.modelType\n\n        this.options.serialize.replace = isFalse(this.options.serialize?.replace)\n            ? false\n            : this.options.serialize?.replace || this.modelType\n\n        this.options.serialize.delete =\n            isFalse(this.options.serialize?.delete) ||\n            !this.options.routes?.deleteOneBase?.returnDeleted\n                ? false\n                : this.options.serialize?.delete || this.modelType\n\n        R.set('CRUD_OPTIONS_METADATA', this.options, this.target)\n    }\n\n    setResponseModels() {\n        const modelType = isFunction(this.modelType)\n            ? this.modelType\n            : SerializeHelper.createGetOneResponseDto(this.modelName)\n\n        this.swaggerModels.get = isFunction(this.options.serialize?.get)\n            ? this.options.serialize?.get\n            : modelType\n\n        this.swaggerModels.getMany =\n            this.options.serialize?.getMany ||\n            SerializeHelper.createGetManyDto(this.swaggerModels.get, this.modelName)\n\n        this.swaggerModels.create = isFunction(this.options.serialize?.create)\n            ? this.options.serialize?.create\n            : modelType\n\n        this.swaggerModels.update = isFunction(this.options.serialize?.update)\n            ? this.options.serialize?.update\n            : modelType\n\n        this.swaggerModels.replace = isFunction(this.options.serialize?.replace)\n            ? this.options.serialize?.replace\n            : modelType\n\n        this.swaggerModels.delete = isFunction(this.options.serialize?.delete)\n            ? this.options.serialize?.delete\n            : modelType\n\n        Swagger.setExtraModels(this.swaggerModels)\n    }\n\n    enableRoutes(routesSchema: BaseRoute[]) {\n        routesSchema.forEach((route) => {\n            if (!route.override && route.enable) {\n                R.setRoute(route, this.targetProto[route.name])\n            }\n        })\n    }\n\n    createRoutes(routesSchema: BaseRoute[]) {\n        routesSchema.forEach((route) => {\n            // create base method\n            /* this[route.name](route.name) */\n            route.enable = true\n\n            // set metadata\n            this.setSwaggerResponseOk(route.name)\n        })\n    }\n\n    setSwaggerResponseOk(name: BaseRouteName) {\n        const metadata = Swagger.getResponseOk(this.targetProto[name]) || {}\n        const metadataToAdd =\n            Swagger.createResponseMeta(name, this.options, this.swaggerModels) || {}\n\n        Swagger.setResponseOk(\n            // @ts-ignore\n            { ...metadata, ...metadataToAdd },\n            this.targetProto[name],\n        )\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Tag.html":{"url":"classes/Tag.html","title":"class - Tag","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Tag\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/tag.model.ts\n        \n\n\n            \n                Extends\n            \n            \n                        BaseModel\n            \n\n            \n                Implements\n            \n            \n                            ITag\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                jsonSchema\n                            \n                            \n                                name\n                            \n                            \n                                    Static\n                                tableName\n                            \n                            \n                                created_at\n                            \n                            \n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Static\n                                hidden\n                            \n                            \n                                id\n                            \n                            \n                                    Static\n                                QueryBuilder\n                            \n                            \n                                updated_at\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                $beforeUpdate\n                            \n                            \n                                    Async\n                                fetchRelation\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            jsonSchema\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     JSONSchema\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        type: 'object',\n        required: ['name'],\n        properties: {\n            id: { type: 'integer' },\n            name: { type: 'string', minLength: 2, maxLength: 255 },\n            deleted_at: {\n                anyOf: [{ type: 'string', format: 'date' }, { type: 'null' }],\n            },\n        },\n    }\n                        \n                    \n                        \n                            \n                                    Defined in src/tags/tag.model.ts:19\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/tags/tag.model.ts:15\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            tableName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'tags'\n                        \n                    \n                        \n                            \n                                    Defined in src/tags/tag.model.ts:13\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            created_at\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                            \n                                \n                                    Inherited from         BaseModel\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseModel:39\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            deleted_at\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     any | null\n\n                        \n                    \n                            \n                                \n                                    Inherited from         BaseModel\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseModel:43\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            hidden\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : [\n        'salt',\n        'password',\n        'created_at',\n        'updated_at',\n        // 'deleted_at'\n    ]\n                        \n                    \n                            \n                                \n                                    Inherited from         BaseModel\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseModel:25\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                            \n                                \n                                    Inherited from         BaseModel\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseModel:37\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            QueryBuilder\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : CustomQueryBuilder\n                        \n                    \n                            \n                                \n                                    Inherited from         BaseModel\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseModel:35\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updated_at\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                            \n                                \n                                    Inherited from         BaseModel\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseModel:41\n\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            $beforeUpdate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    $beforeUpdate(opt: ModelOptions, queryContext: QueryContext)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseModel\n\n                \n            \n            \n                \n                        Defined in         BaseModel:60\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    opt\n                                    \n                                            ModelOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    queryContext\n                                    \n                                            QueryContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            fetchRelation\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    fetchRelation(expression: string | Record, options: Objection.FetchGraphOptions)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseModel\n\n                \n            \n            \n                \n                        Defined in         BaseModel:47\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    expression\n                                    \n                                                string | Record\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                            Objection.FetchGraphOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger'\n\nimport { IsNotEmpty, IsString, MaxLength, MinLength } from 'class-validator'\nimport type { JSONSchema, ModelObject, PartialModelObject } from 'objection'\n\nimport { BaseModel } from '../database/models/base.model'\n\ninterface ITag {\n    name: string\n}\n\nexport class Tag extends BaseModel implements ITag {\n    static tableName = 'tags'\n\n    name!: string\n\n    // JSON schema is not the database schema! Nothing is generated based on this.\n    // This is only used for validation. Whenever a model instance is created it is checked against this schema.\n    static jsonSchema: JSONSchema = {\n        type: 'object',\n        required: ['name'],\n        properties: {\n            id: { type: 'integer' },\n            name: { type: 'string', minLength: 2, maxLength: 255 },\n            deleted_at: {\n                anyOf: [{ type: 'string', format: 'date' }, { type: 'null' }],\n            },\n        },\n    }\n}\n\n// The `ModelObject` generic gives you a clean interface that can be used on the frontend, without any of the objection Model class properties or methods.\nexport type TagShape = ModelObject\nexport type PartialTagShape = PartialModelObject\n\nexport class CreateTagsDto implements ITag {\n    @IsString()\n    @IsNotEmpty()\n    @MinLength(2)\n    @MaxLength(36)\n    name!: string\n}\n\nexport class UpdateTagsDto extends PartialType(CreateTagsDto) {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TagsController.html":{"url":"controllers/TagsController.html","title":"controller - TagsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  TagsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/tags.controller.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            create\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    create(input: CreateTagsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n            \n                \n                    Defined in src/tags/tags.controller.ts:35\n                \n            \n\n\n            \n                \n                    Create a Tag\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    input\n                                    \n                                                CreateTagsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: number, input: UpdateTagsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put(':id')\n                \n            \n\n            \n                \n                    Defined in src/tags/tags.controller.ts:48\n                \n            \n\n\n            \n                \n                    Update a Tag\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    input\n                                    \n                                                UpdateTagsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Body,\n    Controller,\n    Delete,\n    Get,\n    HttpStatus,\n    Param,\n    ParseIntPipe,\n    Post,\n    Put,\n    UseGuards,\n} from '@nestjs/common'\nimport { AuthGuard } from '@nestjs/passport'\nimport { ApiBearerAuth, ApiTags } from '@nestjs/swagger'\n\nimport { CrudController } from '../base/crud'\nimport { CreateTagsDto, Tag, UpdateTagsDto } from './tag.model'\nimport { TagsService } from './tags.service'\n\n@Controller(TagsController.path)\n@ApiTags(TagsController.name)\n@ApiBearerAuth()\n@UseGuards(AuthGuard('jwt'))\nexport class TagsController extends CrudController {\n    static path = 'tags'\n\n    constructor(readonly service: TagsService) {\n        super(service)\n    }\n\n    /**\n     * Create a Tag\n     */\n    @Post()\n    async create(@Body() input: CreateTagsDto) {\n        const data = await this.service.create(input)\n\n        return {\n            data,\n            statusCode: HttpStatus.CREATED,\n        }\n    }\n\n    /**\n     * Update a Tag\n     */\n    @Put(':id')\n    async update(\n        @Param('id', ParseIntPipe) id: number,\n        @Body() input: UpdateTagsDto,\n    ) {\n        const data = await this.service.update(id, input)\n\n        return {\n            data,\n            statusCode: !data ? HttpStatus.NO_CONTENT : HttpStatus.OK,\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TagsModule.html":{"url":"modules/TagsModule.html","title":"module - TagsModule","body":"\n                   \n\n\n\n\n    Modules\n    TagsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_TagsModule\n\n\n\ncluster_TagsModule_providers\n\n\n\ncluster_TagsModule_exports\n\n\n\n\nTagsService \n\nTagsService \n\n\n\nTagsModule\n\nTagsModule\n\nTagsService  -->\n\nTagsModule->TagsService \n\n\n\n\n\nTagsService\n\nTagsService\n\nTagsModule -->\n\nTagsService->TagsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/tags/tags.module.ts\n        \n\n\n        \n            Description\n        \n        \n            Tags module\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            TagsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            TagsController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            TagsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common'\n\nimport { TagsController } from './tags.controller'\nimport { TagsService } from './tags.service'\n\n/**\n * Tags module\n */\n@Module({\n    controllers: [TagsController],\n    providers: [TagsService],\n    exports: [TagsService],\n})\nexport class TagsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TagsService.html":{"url":"injectables/TagsService.html","title":"injectable - TagsService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  TagsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/tags.service.ts\n        \n\n\n            \n                Extends\n            \n            \n                        CrudService\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                update\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                findOneByEmail\n                            \n                            \n                                    Async\n                                findOneById\n                            \n                            \n                                    Async\n                                paginatedFindAll\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(model: ModelClass)\n                    \n                \n                        \n                            \n                                Defined in src/tags/tags.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        model\n                                                  \n                                                        \n                                                                        ModelClass\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            create\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    create(input: CreateTagsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/tags/tags.service.ts:17\n                \n            \n\n\n            \n                \n                    Create a Tag\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    input\n                                    \n                                                CreateTagsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: number, input: UpdateTagsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/tags/tags.service.ts:31\n                \n            \n\n\n            \n                \n                    Update a Tag\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    input\n                                    \n                                                UpdateTagsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            create\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    create(input: CreateUserDto | CreateTagsDto | T)\n                \n            \n\n\n            \n                \n                    Inherited from         CrudService\n\n                \n            \n            \n                \n                        Defined in         CrudService:93\n\n                \n            \n\n\n            \n                \n                    Created a entry and return it\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    input\n                                    \n                                                CreateUserDto | CreateTagsDto | T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n\n            \n                \n                    Inherited from         CrudService\n\n                \n            \n            \n                \n                        Defined in         CrudService:27\n\n                \n            \n\n\n            \n                \n                    Finds all entries and return the result\n\n\n                    \n                        Returns :     {}\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(filter: object)\n                \n            \n\n\n            \n                \n                    Inherited from         CrudService\n\n                \n            \n            \n                \n                        Defined in         CrudService:56\n\n                \n            \n\n\n            \n                \n                    Finds one entry with where filter and return the result\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    filter\n                                    \n                                                object\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOneByEmail\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneByEmail(email: string)\n                \n            \n\n\n            \n                \n                    Inherited from         CrudService\n\n                \n            \n            \n                \n                        Defined in         CrudService:74\n\n                \n            \n\n\n            \n                \n                    Finds onw entry by email and return the result\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOneById\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneById(id: number)\n                \n            \n\n\n            \n                \n                    Inherited from         CrudService\n\n                \n            \n            \n                \n                        Defined in         CrudService:65\n\n                \n            \n\n\n            \n                \n                    Finds paginated entries and return the result\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            paginatedFindAll\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    paginatedFindAll(paginationParams: PaginationParams)\n                \n            \n\n\n            \n                \n                    Inherited from         CrudService\n\n                \n            \n            \n                \n                        Defined in         CrudService:36\n\n                \n            \n\n\n            \n                \n                    Finds paginated entries and return the result\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    paginationParams\n                                    \n                                                PaginationParams\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            remove\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: number)\n                \n            \n\n\n            \n                \n                    Inherited from         CrudService\n\n                \n            \n            \n                \n                        Defined in         CrudService:83\n\n                \n            \n\n\n            \n                \n                    Soft-deletes a entry and return it\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: number, input: Partial)\n                \n            \n\n\n            \n                \n                    Inherited from         CrudService\n\n                \n            \n            \n                \n                        Defined in         CrudService:109\n\n                \n            \n\n\n            \n                \n                    Updates a entry and return it\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    input\n                                    \n                                            Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, Inject, Injectable } from '@nestjs/common'\n\nimport { ModelClass } from 'objection'\n\nimport { CrudService } from '../base/crud'\nimport { CreateTagsDto, Tag, UpdateTagsDto } from './tag.model'\n\n@Injectable()\nexport class TagsService extends CrudService {\n    constructor(@Inject(Tag.name) readonly model: ModelClass) {\n        super(model)\n    }\n\n    /**\n     * Create a Tag\n     */\n    async create(input: CreateTagsDto) {\n        const tag = await this.findOne({ name: input.name })\n\n        if (tag)\n            return Promise.reject(\n                new BadRequestException([`Duplicate tag name: ${tag.name}`]),\n            )\n\n        return super.create(input)\n    }\n\n    /**\n     * Update a Tag\n     */\n    async update(id: number, input: UpdateTagsDto) {\n        const tag = await this.findOne({ name: input.name })\n\n        if (tag)\n            return Promise.reject(\n                new BadRequestException([`Duplicate tag name: ${tag.name}`]),\n            )\n\n        return super.update(id, input)\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TimeoutInterceptor.html":{"url":"injectables/TimeoutInterceptor.html","title":"injectable - TimeoutInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  TimeoutInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infra/interceptors/timeout.ts\n        \n\n            \n                Description\n            \n            \n                Timeout interceptor is Observer which terminate request if it takes more than timeout value\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            intercept\n                        \n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n            \n                \n                    Defined in src/infra/interceptors/timeout.ts:25\n                \n            \n\n\n            \n                \n                    Interceptor Method to implement a custom interceptor.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        an ExecutionContext object providing methods to access the\nroute handler and class about to be invoked.\n\n                                    \n                                \n                                \n                                    next\n                                    \n                                            CallHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        a reference to the CallHandler, which provides access to an\nObservable representing the response stream from the route handler.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n    Injectable,\n    NestInterceptor,\n    ExecutionContext,\n    CallHandler,\n    RequestTimeoutException,\n} from '@nestjs/common'\n\nimport { Observable, throwError, TimeoutError } from 'rxjs'\nimport { catchError, timeout } from 'rxjs/operators'\n\n/**\n * Timeout interceptor is Observer which terminate request if it takes more than timeout value\n */\n@Injectable()\nexport class TimeoutInterceptor implements NestInterceptor {\n    /**\n     * Interceptor Method to implement a custom interceptor.\n     *\n     * @param context an `ExecutionContext` object providing methods to access the\n     * route handler and class about to be invoked.\n     * @param next a reference to the `CallHandler`, which provides access to an\n     * `Observable` representing the response stream from the route handler.\n     */\n    intercept(context: ExecutionContext, next: CallHandler): Observable {\n        return next.handle().pipe(\n            timeout(10000), // end request after 10_000 milliseconds\n\n            catchError((e) => {\n                if (e instanceof TimeoutError) {\n                    return throwError(new RequestTimeoutException())\n                }\n\n                return throwError(e)\n            }),\n        )\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TransformInterceptor.html":{"url":"injectables/TransformInterceptor.html","title":"injectable - TransformInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  TransformInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infra/interceptors/transform.ts\n        \n\n            \n                Description\n            \n            \n                Transform interceptor is Observer which transform response\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            intercept\n                        \n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n            \n                \n                    Defined in src/infra/interceptors/transform.ts:28\n                \n            \n\n\n            \n                \n                    Interceptor Method to implement a custom interceptor.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        an ExecutionContext object providing methods to access the\nroute handler and class about to be invoked.\n\n                                    \n                                \n                                \n                                    next\n                                    \n                                            CallHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        a reference to the CallHandler, which provides access to an\nObservable representing the response stream from the route handler.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n    Injectable,\n    NestInterceptor,\n    ExecutionContext,\n    CallHandler,\n} from '@nestjs/common'\n\nimport { Observable } from 'rxjs'\nimport { map } from 'rxjs/operators'\n\nexport interface Response {\n    data: T\n}\n\n/**\n * Transform interceptor is Observer which transform response\n */\n@Injectable()\nexport class TransformInterceptor implements NestInterceptor> {\n    /**\n     * Interceptor Method to implement a custom interceptor.\n     *\n     * @param context an `ExecutionContext` object providing methods to access the\n     * route handler and class about to be invoked.\n     * @param next a reference to the `CallHandler`, which provides access to an\n     * `Observable` representing the response stream from the route handler.\n     */\n    intercept(\n        context: ExecutionContext,\n        next: CallHandler,\n    ): Observable> {\n        return next.handle().pipe(map((data) => ({ data })))\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateTagsDto.html":{"url":"classes/UpdateTagsDto.html","title":"class - UpdateTagsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateTagsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/tag.model.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger'\n\nimport { IsNotEmpty, IsString, MaxLength, MinLength } from 'class-validator'\nimport type { JSONSchema, ModelObject, PartialModelObject } from 'objection'\n\nimport { BaseModel } from '../database/models/base.model'\n\ninterface ITag {\n    name: string\n}\n\nexport class Tag extends BaseModel implements ITag {\n    static tableName = 'tags'\n\n    name!: string\n\n    // JSON schema is not the database schema! Nothing is generated based on this.\n    // This is only used for validation. Whenever a model instance is created it is checked against this schema.\n    static jsonSchema: JSONSchema = {\n        type: 'object',\n        required: ['name'],\n        properties: {\n            id: { type: 'integer' },\n            name: { type: 'string', minLength: 2, maxLength: 255 },\n            deleted_at: {\n                anyOf: [{ type: 'string', format: 'date' }, { type: 'null' }],\n            },\n        },\n    }\n}\n\n// The `ModelObject` generic gives you a clean interface that can be used on the frontend, without any of the objection Model class properties or methods.\nexport type TagShape = ModelObject\nexport type PartialTagShape = PartialModelObject\n\nexport class CreateTagsDto implements ITag {\n    @IsString()\n    @IsNotEmpty()\n    @MinLength(2)\n    @MaxLength(36)\n    name!: string\n}\n\nexport class UpdateTagsDto extends PartialType(CreateTagsDto) {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/user.dto.ts\n        \n\n            \n                Description\n            \n            \n                Data Transfer Object\n\n            \n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger'\n\nimport {\n    IsBoolean,\n    IsEmail,\n    IsNotEmpty,\n    IsString,\n    MaxLength,\n    MinLength,\n} from 'class-validator'\n\nimport { IsEmailExists } from '../infra/validator/isEmailExists'\nimport { IUser } from './user.interface'\n\n/**\n * Data Transfer Object\n */\nexport class CreateUserDto implements IUser {\n    @IsString()\n    @IsNotEmpty()\n    @MinLength(2)\n    @MaxLength(36)\n    username!: string\n\n    @IsEmail()\n    @IsNotEmpty()\n    @MinLength(2)\n    @IsEmailExists({ message: 'Email exists' })\n    email!: string\n\n    @IsString()\n    @IsNotEmpty()\n    @MinLength(8)\n    password!: string\n\n    @IsString()\n    @IsNotEmpty()\n    @MinLength(2)\n    firstName?: string\n\n    @IsString()\n    @IsNotEmpty()\n    @MinLength(2)\n    lastName?: string\n\n    @IsBoolean()\n    isActive!: boolean\n}\n\n/**\n * Data Transfer Object\n */\nexport class UpdateUserDto extends PartialType(CreateUserDto) {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/User.html":{"url":"classes/User.html","title":"class - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/user.model.ts\n        \n\n            \n                Description\n            \n            \n                User Model\n\n            \n\n            \n                Extends\n            \n            \n                        BaseModel\n            \n\n            \n                Implements\n            \n            \n                            IUser\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                    Optional\n                                firstName\n                            \n                            \n                                isActive\n                            \n                            \n                                    Static\n                                isTenantSpecific\n                            \n                            \n                                    Static\n                                jsonSchema\n                            \n                            \n                                    Optional\n                                lastName\n                            \n                            \n                                    Static\n                                modifiers\n                            \n                            \n                                password\n                            \n                            \n                                    Static\n                                tableName\n                            \n                            \n                                username\n                            \n                            \n                                    Static\n                                virtualAttributes\n                            \n                            \n                                created_at\n                            \n                            \n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Static\n                                hidden\n                            \n                            \n                                id\n                            \n                            \n                                    Static\n                                QueryBuilder\n                            \n                            \n                                updated_at\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                $beforeInsert\n                            \n                            \n                                fullName\n                            \n                            \n                                    Async\n                                hashPassword\n                            \n                            \n                                    Async\n                                $beforeUpdate\n                            \n                            \n                                    Async\n                                fetchRelation\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            email\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/users/user.model.ts:17\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            firstName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/users/user.model.ts:19\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isActive\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in src/users/user.model.ts:23\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            isTenantSpecific\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : true\n                        \n                    \n                        \n                            \n                                    Defined in src/users/user.model.ts:27\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            jsonSchema\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     JSONSchema\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        type: 'object',\n        required: ['username', 'email', 'password'],\n        properties: {\n            id: { type: 'integer', readOnly: true },\n            username: { type: 'string', minLength: 3, maxLength: 255 },\n            email: {\n                type: 'string',\n                minLength: 3,\n                maxLength: 255,\n                format: 'email',\n            },\n            password: { type: 'string', minLength: 8, maxLength: 255 },\n            firstName: { type: 'string', minLength: 1, maxLength: 255 },\n            fullName: { type: 'string' },\n            lastName: { type: 'string', minLength: 1, maxLength: 255 },\n            isActive: { type: 'boolean' },\n            deleted_at: {\n                anyOf: [{ type: 'string', format: 'date' }, { type: 'null' }],\n            },\n        },\n    }\n                        \n                    \n                        \n                            \n                                    Defined in src/users/user.model.ts:42\n                            \n                        \n\n                \n                    \n                        JSON schema is not the database schema! Nothing is generated based on this.\nThis is only used for validation. Whenever a model instance is created it is checked against this schema.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            lastName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/users/user.model.ts:21\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            modifiers\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Modifiers\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        // Our example modifier is a a semi-dumb fuzzy name match. We split the name into pieces using whitespace\n        // and then try to partially match each of those pieces to both the `firstName` and the `lastName` fields.\n\n        searchByName(query, name: string) {\n            // This `where` simply creates parentheses so that other `where` statements don't get mixed with the these.\n\n            query.where((q) => {\n                for (const namePart of name.trim().split(/\\s+/)) {\n                    for (const column of ['firstName', 'lastName']) {\n                        q.orWhereRaw('lower(??) like ?', [\n                            column,\n                            `${namePart.toLowerCase()}%`,\n                        ])\n                    }\n                }\n            })\n        },\n    }\n                        \n                    \n                        \n                            \n                                    Defined in src/users/user.model.ts:68\n                            \n                        \n\n                \n                    \n                        Modifiers are reusable query snippets that can be used in various places.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/users/user.model.ts:25\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            tableName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'users'\n                        \n                    \n                        \n                            \n                                    Defined in src/users/user.model.ts:13\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            username\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/users/user.model.ts:15\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            virtualAttributes\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : ['fullName']\n                        \n                    \n                        \n                            \n                                    Defined in src/users/user.model.ts:29\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            created_at\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                            \n                                \n                                    Inherited from         BaseModel\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseModel:39\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            deleted_at\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     any | null\n\n                        \n                    \n                            \n                                \n                                    Inherited from         BaseModel\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseModel:43\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            hidden\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : [\n        'salt',\n        'password',\n        'created_at',\n        'updated_at',\n        // 'deleted_at'\n    ]\n                        \n                    \n                            \n                                \n                                    Inherited from         BaseModel\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseModel:25\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                            \n                                \n                                    Inherited from         BaseModel\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseModel:37\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            QueryBuilder\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : CustomQueryBuilder\n                        \n                    \n                            \n                                \n                                    Inherited from         BaseModel\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseModel:35\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updated_at\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                            \n                                \n                                    Inherited from         BaseModel\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseModel:41\n\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            $beforeInsert\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    $beforeInsert(queryContext: QueryContext)\n                \n            \n\n\n            \n                \n                    Defined in src/users/user.model.ts:93\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryContext\n                                    \n                                            QueryContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            fullName\n                        \n                        \n                    \n                \n            \n            \n                \nfullName()\n                \n            \n\n\n            \n                \n                    Defined in src/users/user.model.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            hashPassword\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    hashPassword(password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/user.model.ts:88\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            $beforeUpdate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    $beforeUpdate(opt: ModelOptions, queryContext: QueryContext)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseModel\n\n                \n            \n            \n                \n                        Defined in         BaseModel:60\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    opt\n                                    \n                                            ModelOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    queryContext\n                                    \n                                            QueryContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            fetchRelation\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    fetchRelation(expression: string | Record, options: Objection.FetchGraphOptions)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseModel\n\n                \n            \n            \n                \n                        Defined in         BaseModel:47\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    expression\n                                    \n                                                string | Record\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                            Objection.FetchGraphOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import * as bcrypt from 'bcrypt'\nimport type { JSONSchema, Modifiers, PartialModelObject } from 'objection'\nimport { ModelObject, QueryContext } from 'objection'\n\nimport { BaseModel } from '../database/models/base.model'\nimport { IUser } from './user.interface'\n\n/**\n * User Model\n */\nexport class User extends BaseModel implements IUser {\n    static tableName = 'users'\n\n    username!: string\n\n    email!: string\n\n    firstName?: string\n\n    lastName?: string\n\n    isActive!: boolean\n\n    password!: string\n\n    static isTenantSpecific = true\n\n    static virtualAttributes = ['fullName']\n\n    fullName() {\n        if (this.firstName && this.lastName)\n            return `${this.firstName} ${this.lastName}`\n\n        return ''\n    }\n\n    /**\n     * JSON schema is not the database schema! Nothing is generated based on this.\n     * This is only used for validation. Whenever a model instance is created it is checked against this schema.\n     */\n    static jsonSchema: JSONSchema = {\n        type: 'object',\n        required: ['username', 'email', 'password'],\n        properties: {\n            id: { type: 'integer', readOnly: true },\n            username: { type: 'string', minLength: 3, maxLength: 255 },\n            email: {\n                type: 'string',\n                minLength: 3,\n                maxLength: 255,\n                format: 'email',\n            },\n            password: { type: 'string', minLength: 8, maxLength: 255 },\n            firstName: { type: 'string', minLength: 1, maxLength: 255 },\n            fullName: { type: 'string' },\n            lastName: { type: 'string', minLength: 1, maxLength: 255 },\n            isActive: { type: 'boolean' },\n            deleted_at: {\n                anyOf: [{ type: 'string', format: 'date' }, { type: 'null' }],\n            },\n        },\n    }\n\n    /**\n     * Modifiers are reusable query snippets that can be used in various places.\n     */\n    static modifiers: Modifiers = {\n        // Our example modifier is a a semi-dumb fuzzy name match. We split the name into pieces using whitespace\n        // and then try to partially match each of those pieces to both the `firstName` and the `lastName` fields.\n\n        searchByName(query, name: string) {\n            // This `where` simply creates parentheses so that other `where` statements don't get mixed with the these.\n\n            query.where((q) => {\n                for (const namePart of name.trim().split(/\\s+/)) {\n                    for (const column of ['firstName', 'lastName']) {\n                        q.orWhereRaw('lower(??) like ?', [\n                            column,\n                            `${namePart.toLowerCase()}%`,\n                        ])\n                    }\n                }\n            })\n        },\n    }\n\n    async hashPassword(password: string) {\n        const hash = await bcrypt.hash(password, 12)\n        return hash\n    }\n\n    async $beforeInsert(queryContext: QueryContext) {\n        await super.$beforeInsert(queryContext)\n        this.password = await this.hashPassword(this.password)\n    }\n}\n\n/**\n * The `ModelObject` generic gives you a clean interface that can be used on\n * the frontend, without any of the objection Model class properties or methods.\n */\nexport type UserShape = ModelObject\n\n/**\n * The `PartialModelObject` generic gives you a clean interface that can be used on\n * the frontend, without any of the objection Model class properties or methods.\n */\nexport type PartialUserShape = PartialModelObject\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserLoginDto.html":{"url":"classes/UserLoginDto.html","title":"class - UserLoginDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserLoginDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                email\n                            \n                            \n                                    Readonly\n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            email\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'admin@demo.com'})@IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auth/auth.controller.ts:23\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: '12345678'})@IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auth/auth.controller.ts:27\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n    Body,\n    Controller,\n    Get,\n    HttpStatus,\n    Post,\n    Req,\n    Res,\n    UseGuards,\n} from '@nestjs/common'\nimport { AuthGuard } from '@nestjs/passport'\nimport { ApiProperty, ApiTags } from '@nestjs/swagger'\n\nimport { IsNotEmpty } from 'class-validator'\nimport type { Request } from 'express'\n\nimport { UsersService } from '../users/users.service'\nimport { AuthService } from './auth.service'\n\nexport class UserLoginDto {\n    @ApiProperty({ example: 'admin@demo.com' })\n    @IsNotEmpty()\n    readonly email!: string\n\n    @ApiProperty({ example: '12345678' })\n    @IsNotEmpty()\n    readonly password!: string\n}\n\n@Controller(AuthController.path)\n@ApiTags(AuthController.name)\nexport class AuthController {\n    static path = 'auth'\n\n    constructor(\n        readonly authService: AuthService,\n        readonly userService: UsersService,\n    ) {}\n\n    /**\n     * Login\n     */\n    @UseGuards(AuthGuard('local'))\n    @Post('login')\n    async login(\n        @Req() req: Request,\n        @Body() userLoginDto: UserLoginDto,\n    ): Promise {\n        const { user } = req\n        const { email, password } = userLoginDto\n\n        const data = await this.authService.login(user)\n\n        return {\n            data,\n            statusCode: HttpStatus.OK,\n        }\n    }\n\n    /**\n     * Google Login\n     *\n     * No-op function as `@UseGuards(AuthGuard('google'))` takes care of login\n     */\n    @Get('google')\n    @UseGuards(AuthGuard('google'))\n    async googleAuth() {} // eslint-disable-line @typescript-eslint/no-empty-function\n\n    /**\n     * Google Login Callback\n     */\n    @Get('google/redirect')\n    @UseGuards(AuthGuard('google'))\n    googleAuthRedirect(@Req() req: Request, @Res() res) {\n        if (process.env.NODE_ENV !== 'production') return req.user\n\n        if (req.user.token)\n            return res.redirect(\n                // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n                `${process.env.HOST}:${process.env.PORT}/#/sign-in/success?jwt=${req.user.token}`,\n            )\n\n        return res.redirect(\n            // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n            `${process.env.host}:${process.env.port}/#/auth/register`,\n        )\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/UserPost.html":{"url":"interfaces/UserPost.html","title":"interface - UserPost","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  UserPost\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/domain.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        adCorporateLogoUrl\n                                \n                                \n                                        commentsCount\n                                \n                                \n                                        corporateDescription\n                                \n                                \n                                        corporateName\n                                \n                                \n                                        isUserReactedToPost\n                                \n                                \n                                        ownPage\n                                \n                                \n                                        postBy\n                                \n                                \n                                        postId\n                                \n                                \n                                        postImage\n                                \n                                \n                                        postTime\n                                \n                                \n                                        postType\n                                \n                                \n                                        postVideo\n                                \n                                \n                                        reactionsCount\n                                \n                                \n                                        timeAgo\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        adCorporateLogoUrl\n                                    \n                                \n                                \n                                    \n                                        adCorporateLogoUrl:     string | null\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string | null\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        commentsCount\n                                    \n                                \n                                \n                                    \n                                        commentsCount:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        corporateDescription\n                                    \n                                \n                                \n                                    \n                                        corporateDescription:     string | null\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string | null\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        corporateName\n                                    \n                                \n                                \n                                    \n                                        corporateName:     string | null\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string | null\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        isUserReactedToPost\n                                    \n                                \n                                \n                                    \n                                        isUserReactedToPost:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        ownPage\n                                    \n                                \n                                \n                                    \n                                        ownPage:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        postBy\n                                    \n                                \n                                \n                                    \n                                        postBy:         PostedByUser\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         PostedByUser\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        postId\n                                    \n                                \n                                \n                                    \n                                        postId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        postImage\n                                    \n                                \n                                \n                                    \n                                        postImage:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        postTime\n                                    \n                                \n                                \n                                    \n                                        postTime:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        postType\n                                    \n                                \n                                \n                                    \n                                        postType:         PostType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         PostType\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        postVideo\n                                    \n                                \n                                \n                                    \n                                        postVideo:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        reactionsCount\n                                    \n                                \n                                \n                                    \n                                        reactionsCount:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        timeAgo\n                                    \n                                \n                                \n                                    \n                                        timeAgo:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { HttpStatus } from '@nestjs/common'\n\nexport type Results =\n    | GetAppLaunchData\n    | GetUserProfile\n    | GetUserPosts\n    | GetComments\n    | GetRescueList\n    | GetFollowers\n    | GetFollowing\n\nexport type APIError = Error | string | null\n\nexport interface Result {\n    data: T\n    error?: APIError\n    message?: string | string[]\n    statusCode: HttpStatus\n}\n\nexport interface APIResponse {\n    data: T\n    error?: APIError\n    message?: string | string[]\n    statusCode: HttpStatus\n\n    count?: number\n    page?: number\n    pageCount?: number\n    total?: number\n}\n\nexport interface GetAppLaunchData {\n    link: 'api:/'\n    response: APIResponse\n}\n\nexport interface GetUserProfile {\n    link: 'api:v1/user/getUserProfile?userId=25'\n    response: APIResponse\n}\n\nexport interface GetUserPosts {\n    link: 'api:v1/user/getUserPosts?pageNo=0&pageSize=25'\n    response: APIResponse\n}\n\nexport interface GetRescueList {\n    link: 'api:v1/rescue/getRescueList?pageNo=0&pageSize=10&status=pending|inProgress|completed|nearest'\n    response: APIResponse\n}\n\nexport interface GetComments {\n    link: 'api:v1/rescue/getComments?pageNo=0&pageSize=10&postId=1230'\n    response: APIResponse\n}\n\nexport interface GetFollowers {\n    link: 'api:v1/rescue/getUserFollowers?userId=1230'\n    response: APIResponse\n}\n\nexport interface GetFollowing {\n    link: 'api:v1/rescue/getUserFollowing?userId=1230'\n    response: APIResponse\n}\n\nexport interface AppLaunchAction {\n    actionId: number\n    action: string\n    isActive: boolean\n    subject?: string\n}\n\nexport interface User {\n    usesId: number\n\n    coverImage: string\n    following: boolean\n    gender: string\n    isOwnProfile: number\n    isRescuer: boolean\n    latitude: number\n    longitude: number\n    numberOfFollowers: number\n    numberOfFollowing: number\n    numberOfPosts: number\n    numberOfRescuesCompleted: number\n    numberOfRescuesCreated: number\n    numberOfRescuesInProgress: number\n    profileImage: string\n    rescuer: boolean\n    userAddress: string\n    userContacts: string\n    userEmail: string\n    userName: string\n    badge: {\n        badgeId: number\n        badgeName: string\n        badgeDescription: string\n        recuesCompletionNeeded: number\n    }\n    setting: {\n        showMyContacts: boolean\n        getNotifications: boolean\n    }\n}\n\nexport interface PostType {\n    postTypeId: number\n    postType: string\n}\n\nexport interface PostedByUser {\n    usesId: number\n    badgeName: string\n    following: boolean\n    profileImage: string\n    rescuer: boolean\n    userName: string\n}\n\nexport interface UserPost {\n    postId: number\n    commentsCount: number\n    isUserReactedToPost: boolean\n    ownPage: boolean\n    postBy: PostedByUser\n    postImage: string\n    postTime: string\n    postType: PostType\n    postVideo: string\n    reactionsCount: number\n    timeAgo: string\n\n    adCorporateLogoUrl: string | null\n    corporateDescription: string | null\n    corporateName: string | null\n}\n\nexport interface UserPosts {\n    isRecent: boolean\n    feed: UserPost[]\n}\n\nexport interface Rescues {\n    rescueId: number\n    animalImageUrl: string\n    distance: number\n    distanceAway: string\n    emergencyType: string\n    postedBy: string\n    postedMinAgo: string\n    rescueDate: Date\n    rescuedPetName: string\n    rescueLocality: string\n    rescuers: {\n        contact: number\n        name: string\n        profileId: number\n        profileImageUrl: string\n        rescues: boolean\n        showMyNumber: boolean\n    }\n    rescueStatus: string\n    viewsCont: number\n}\n\nexport interface RescueLists {\n    rescues: Rescues[]\n}\n\nexport interface Comment {\n    commentId: number\n    comment: string\n    commentedUseName: string\n    commentedUserId: number\n    timeAgo: string\n}\n\nexport interface Comments {\n    comments: Comment[]\n}\n\nexport interface Follower {\n    userId: number\n    userName: string\n    profileImage: string\n    areYouFollowing: boolean\n    showRemoveOption: boolean\n}\n\nexport type Following = Follower\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/UserPosts.html":{"url":"interfaces/UserPosts.html","title":"interface - UserPosts","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  UserPosts\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/domain.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        feed\n                                \n                                \n                                        isRecent\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        feed\n                                    \n                                \n                                \n                                    \n                                        feed:         UserPost[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         UserPost[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        isRecent\n                                    \n                                \n                                \n                                    \n                                        isRecent:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { HttpStatus } from '@nestjs/common'\n\nexport type Results =\n    | GetAppLaunchData\n    | GetUserProfile\n    | GetUserPosts\n    | GetComments\n    | GetRescueList\n    | GetFollowers\n    | GetFollowing\n\nexport type APIError = Error | string | null\n\nexport interface Result {\n    data: T\n    error?: APIError\n    message?: string | string[]\n    statusCode: HttpStatus\n}\n\nexport interface APIResponse {\n    data: T\n    error?: APIError\n    message?: string | string[]\n    statusCode: HttpStatus\n\n    count?: number\n    page?: number\n    pageCount?: number\n    total?: number\n}\n\nexport interface GetAppLaunchData {\n    link: 'api:/'\n    response: APIResponse\n}\n\nexport interface GetUserProfile {\n    link: 'api:v1/user/getUserProfile?userId=25'\n    response: APIResponse\n}\n\nexport interface GetUserPosts {\n    link: 'api:v1/user/getUserPosts?pageNo=0&pageSize=25'\n    response: APIResponse\n}\n\nexport interface GetRescueList {\n    link: 'api:v1/rescue/getRescueList?pageNo=0&pageSize=10&status=pending|inProgress|completed|nearest'\n    response: APIResponse\n}\n\nexport interface GetComments {\n    link: 'api:v1/rescue/getComments?pageNo=0&pageSize=10&postId=1230'\n    response: APIResponse\n}\n\nexport interface GetFollowers {\n    link: 'api:v1/rescue/getUserFollowers?userId=1230'\n    response: APIResponse\n}\n\nexport interface GetFollowing {\n    link: 'api:v1/rescue/getUserFollowing?userId=1230'\n    response: APIResponse\n}\n\nexport interface AppLaunchAction {\n    actionId: number\n    action: string\n    isActive: boolean\n    subject?: string\n}\n\nexport interface User {\n    usesId: number\n\n    coverImage: string\n    following: boolean\n    gender: string\n    isOwnProfile: number\n    isRescuer: boolean\n    latitude: number\n    longitude: number\n    numberOfFollowers: number\n    numberOfFollowing: number\n    numberOfPosts: number\n    numberOfRescuesCompleted: number\n    numberOfRescuesCreated: number\n    numberOfRescuesInProgress: number\n    profileImage: string\n    rescuer: boolean\n    userAddress: string\n    userContacts: string\n    userEmail: string\n    userName: string\n    badge: {\n        badgeId: number\n        badgeName: string\n        badgeDescription: string\n        recuesCompletionNeeded: number\n    }\n    setting: {\n        showMyContacts: boolean\n        getNotifications: boolean\n    }\n}\n\nexport interface PostType {\n    postTypeId: number\n    postType: string\n}\n\nexport interface PostedByUser {\n    usesId: number\n    badgeName: string\n    following: boolean\n    profileImage: string\n    rescuer: boolean\n    userName: string\n}\n\nexport interface UserPost {\n    postId: number\n    commentsCount: number\n    isUserReactedToPost: boolean\n    ownPage: boolean\n    postBy: PostedByUser\n    postImage: string\n    postTime: string\n    postType: PostType\n    postVideo: string\n    reactionsCount: number\n    timeAgo: string\n\n    adCorporateLogoUrl: string | null\n    corporateDescription: string | null\n    corporateName: string | null\n}\n\nexport interface UserPosts {\n    isRecent: boolean\n    feed: UserPost[]\n}\n\nexport interface Rescues {\n    rescueId: number\n    animalImageUrl: string\n    distance: number\n    distanceAway: string\n    emergencyType: string\n    postedBy: string\n    postedMinAgo: string\n    rescueDate: Date\n    rescuedPetName: string\n    rescueLocality: string\n    rescuers: {\n        contact: number\n        name: string\n        profileId: number\n        profileImageUrl: string\n        rescues: boolean\n        showMyNumber: boolean\n    }\n    rescueStatus: string\n    viewsCont: number\n}\n\nexport interface RescueLists {\n    rescues: Rescues[]\n}\n\nexport interface Comment {\n    commentId: number\n    comment: string\n    commentedUseName: string\n    commentedUserId: number\n    timeAgo: string\n}\n\nexport interface Comments {\n    comments: Comment[]\n}\n\nexport interface Follower {\n    userId: number\n    userName: string\n    profileImage: string\n    areYouFollowing: boolean\n    showRemoveOption: boolean\n}\n\nexport type Following = Follower\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            create\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    create(input: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Create a User', description: 'Create a new User and store it in database'})@Post()\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    input\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: number, input: UpdateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Update one users by id', description: 'Update one users by id'})@Put(':id')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    input\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Controller,\n    Get,\n    Post,\n    Body,\n    Put,\n    Param,\n    Delete,\n    ParseIntPipe,\n    Query,\n    HttpStatus,\n    UnauthorizedException,\n} from '@nestjs/common'\nimport { ApiOperation, ApiTags } from '@nestjs/swagger'\n\nimport { CrudController } from '../base/crud'\nimport { User } from './user.model'\nimport { UsersService } from './users.service'\nimport { CreateUserDto, UpdateUserDto } from './user.dto'\n\n@Controller(UsersController.path)\n@ApiTags(UsersController.name)\nexport class UsersController {\n    static path = 'users'\n\n    constructor(readonly service: UsersService) {}\n\n    @ApiOperation({\n        summary: 'Create a User',\n        description: 'Create a new User and store it in database',\n    })\n    @Post()\n    async create(@Body() input: CreateUserDto) {\n        const data = await this.service.create(input)\n\n        return {\n            data,\n            statusCode: HttpStatus.CREATED,\n        }\n    }\n\n    @ApiOperation({\n        summary: 'Update one users by id',\n        description: 'Update one users by id',\n    })\n    @Put(':id')\n    async update(\n        @Param('id', ParseIntPipe) id: number,\n        @Body() input: UpdateUserDto,\n    ) {\n        const data = await this.service.update(id, input)\n\n        return {\n            data,\n            statusCode: !data ? HttpStatus.NO_CONTENT : HttpStatus.OK,\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_providers\n\n\n\ncluster_UsersModule_exports\n\n\n\n\nUsersService \n\nUsersService \n\n\n\nUsersModule\n\nUsersModule\n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n        \n            Description\n        \n        \n            Users module\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common'\n\nimport { UsersController } from './users.controller'\nimport { UsersService } from './users.service'\n\n/**\n * Users module\n */\n@Module({\n    controllers: [UsersController],\n    providers: [UsersService],\n    exports: [UsersService],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.service.ts\n        \n\n\n            \n                Extends\n            \n            \n                        CrudService\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                findOneByEmail\n                            \n                            \n                                    Async\n                                hashPassword\n                            \n                            \n                                    Async\n                                update\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                findOneByEmail\n                            \n                            \n                                    Async\n                                findOneById\n                            \n                            \n                                    Async\n                                paginatedFindAll\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(model: ModelClass)\n                    \n                \n                        \n                            \n                                Defined in src/users/users.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        model\n                                                  \n                                                        \n                                                                        ModelClass\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            create\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    create(user: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: string | number)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            string | number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOneByEmail\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneByEmail(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            hashPassword\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    hashPassword(password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: number, user: UpdateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            create\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    create(input: CreateUserDto | CreateTagsDto | T)\n                \n            \n\n\n            \n                \n                    Inherited from         CrudService\n\n                \n            \n            \n                \n                        Defined in         CrudService:93\n\n                \n            \n\n\n            \n                \n                    Created a entry and return it\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    input\n                                    \n                                                CreateUserDto | CreateTagsDto | T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n\n            \n                \n                    Inherited from         CrudService\n\n                \n            \n            \n                \n                        Defined in         CrudService:27\n\n                \n            \n\n\n            \n                \n                    Finds all entries and return the result\n\n\n                    \n                        Returns :     {}\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(filter: object)\n                \n            \n\n\n            \n                \n                    Inherited from         CrudService\n\n                \n            \n            \n                \n                        Defined in         CrudService:56\n\n                \n            \n\n\n            \n                \n                    Finds one entry with where filter and return the result\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    filter\n                                    \n                                                object\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOneByEmail\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneByEmail(email: string)\n                \n            \n\n\n            \n                \n                    Inherited from         CrudService\n\n                \n            \n            \n                \n                        Defined in         CrudService:74\n\n                \n            \n\n\n            \n                \n                    Finds onw entry by email and return the result\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOneById\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneById(id: number)\n                \n            \n\n\n            \n                \n                    Inherited from         CrudService\n\n                \n            \n            \n                \n                        Defined in         CrudService:65\n\n                \n            \n\n\n            \n                \n                    Finds paginated entries and return the result\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            paginatedFindAll\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    paginatedFindAll(paginationParams: PaginationParams)\n                \n            \n\n\n            \n                \n                    Inherited from         CrudService\n\n                \n            \n            \n                \n                        Defined in         CrudService:36\n\n                \n            \n\n\n            \n                \n                    Finds paginated entries and return the result\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    paginationParams\n                                    \n                                                PaginationParams\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            remove\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: number)\n                \n            \n\n\n            \n                \n                    Inherited from         CrudService\n\n                \n            \n            \n                \n                        Defined in         CrudService:83\n\n                \n            \n\n\n            \n                \n                    Soft-deletes a entry and return it\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: number, input: Partial)\n                \n            \n\n\n            \n                \n                    Inherited from         CrudService\n\n                \n            \n            \n                \n                        Defined in         CrudService:109\n\n                \n            \n\n\n            \n                \n                    Updates a entry and return it\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    input\n                                    \n                                            Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable, NotFoundException } from '@nestjs/common'\n\nimport * as bcrypt from 'bcrypt'\nimport { ModelClass } from 'objection'\n\nimport { CrudService } from '../base/crud'\nimport { User } from './user.model'\nimport { CreateUserDto, UpdateUserDto } from './user.dto'\n\n@Injectable()\nexport class UsersService extends CrudService {\n    constructor(@Inject(User.name) readonly model: ModelClass) {\n        super(model)\n    }\n\n    async hashPassword(password: string) {\n        return bcrypt.hash(password, 12)\n    }\n\n    async findOne(id: string | number) {\n        const data = await this.model.query().findById(id).first()\n\n        if (!data)\n            return Promise.reject(\n                new NotFoundException(`User with id ${id} not found`),\n            )\n\n        return data\n    }\n\n    async findOneByEmail(email: string) {\n        const data = await this.model.query().findOne({ email })\n\n        if (!data)\n            return Promise.reject(\n                new NotFoundException(`User with email ${email} not found`),\n            )\n\n        return data\n    }\n\n    async create(user: CreateUserDto) {\n        return this.model.query().insertAndFetch(user)\n    }\n\n    async update(id: number, user: UpdateUserDto) {\n        if (user?.password) user.password = await this.hashPassword(user.password) // eslint-disable-line no-param-reassign\n\n        return this.model.query().patchAndFetchById(id, user)\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ValidationFailedFilter.html":{"url":"classes/ValidationFailedFilter.html","title":"class - ValidationFailedFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ValidationFailedFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infra/filters/validation-failed.filter.ts\n        \n\n            \n                Description\n            \n            \n                Validation Failed Exception Filter\n\n            \n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            catch\n                        \n                        \n                    \n                \n            \n            \n                \ncatch(exception: ValidationError, host: ArgumentsHost)\n                \n            \n\n\n            \n                \n                    Defined in src/infra/filters/validation-failed.filter.ts:17\n                \n            \n\n\n            \n                \n                    Method to implement a custom exception filter.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                            ValidationError\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the class of the exception being handled\n\n                                    \n                                \n                                \n                                    host\n                                    \n                                            ArgumentsHost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        used to access an array of arguments for\nthe in-flight request\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ArgumentsHost, Catch, ExceptionFilter, HttpStatus } from '@nestjs/common'\n\nimport { ValidationError } from 'objection'\n\n/**\n * Validation Failed Exception Filter\n */\n@Catch(ValidationError)\nexport class ValidationFailedFilter implements ExceptionFilter {\n    /**\n     * Method to implement a custom exception filter.\n     *\n     * @param exception the class of the exception being handled\n     * @param host used to access an array of arguments for\n     * the in-flight request\n     */\n    catch(exception: ValidationError, host: ArgumentsHost) {\n        const ctx = host.switchToHttp()\n        const response = ctx.getResponse()\n        const request = ctx.getRequest()\n        const status = HttpStatus.PRECONDITION_FAILED\n\n        const {\n            statusCode: validationErrorCode,\n            message,\n            data, // ErrorHash?\n            type, // ValidationErrorType\n        } = exception\n\n        // @ts-ignore\n        response.status(status).json({\n            data,\n            type,\n            message,\n            validationErrorCode,\n\n            statusCode: status,\n\n            path: request.url,\n            timestamp: new Date().toISOString(),\n        })\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/VerifiedTokenPayload.html":{"url":"interfaces/VerifiedTokenPayload.html","title":"interface - VerifiedTokenPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  VerifiedTokenPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/tokenPayload.interface.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        email\n                                \n                                \n                                        exp\n                                \n                                \n                                        iat\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        exp\n                                    \n                                \n                                \n                                    \n                                        exp:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        iat\n                                    \n                                \n                                \n                                    \n                                        iat:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        interface VerifiedTokenPayload {\n    email: string\n    exp: string\n    iat: string\n}\n\nexport default VerifiedTokenPayload\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.module.ts\n            \n            variable\n            ConfigModuleOptions\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                75 %\n                (3/4)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            class\n            UserLoginDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/auth/google.strategy.ts\n            \n            injectable\n            GoogleStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/local.strategy.ts\n            \n            injectable\n            LocalStrategy\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/auth/spec/mocks.ts\n            \n            variable\n            mockedConfigService\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/spec/mocks.ts\n            \n            variable\n            mockedJwtService\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/tokenPayload.interface.ts\n            \n            interface\n            VerifiedTokenPayload\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/base/crud/crud.controller.ts\n            \n            class\n            CrudController\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/base/crud/crud.service.interface.ts\n            \n            interface\n            ICrudService\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                src/base/crud/crud.service.ts\n            \n            class\n            CrudService\n            \n                100 %\n                (10/10)\n            \n        \n        \n            \n                \n                src/base/crud/pagination.ts\n            \n            class\n            PaginationParams\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/base/crud/pagination.ts\n            \n            interface\n            IPaginationResult\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/base/moment-extend.ts\n            \n            variable\n            moment\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/base/swagger-gen/api-errors.decorator.ts\n            \n            class\n            ApiException\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/base/swagger-gen/api-errors.decorator.ts\n            \n            function\n            ApiErrors\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/base/swagger-gen/crud-routes.factory.ts\n            \n            class\n            CrudConfigService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/base/swagger-gen/crud-routes.factory.ts\n            \n            class\n            CrudRoutesFactory\n            \n                0 %\n                (0/14)\n            \n        \n        \n            \n                \n                src/base/swagger-gen/crud-routes.factory.ts\n            \n            class\n            R\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/base/swagger-gen/crud-routes.factory.ts\n            \n            class\n            SerializeHelper\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/base/swagger-gen/crud-routes.factory.ts\n            \n            class\n            Swagger\n            \n                33 %\n                (2/6)\n            \n        \n        \n            \n                \n                src/base/swagger-gen/crud.decorator.ts\n            \n            variable\n            Crud\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/base/swagger-gen/utils/checks.util.ts\n            \n            variable\n            hasLength\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/base/swagger-gen/utils/checks.util.ts\n            \n            variable\n            hasValue\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/base/swagger-gen/utils/checks.util.ts\n            \n            variable\n            isArrayFull\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/base/swagger-gen/utils/checks.util.ts\n            \n            variable\n            isArrayStrings\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/base/swagger-gen/utils/checks.util.ts\n            \n            variable\n            isBoolean\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/base/swagger-gen/utils/checks.util.ts\n            \n            variable\n            isDate\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/base/swagger-gen/utils/checks.util.ts\n            \n            variable\n            isDateString\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/base/swagger-gen/utils/checks.util.ts\n            \n            variable\n            isEqual\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/base/swagger-gen/utils/checks.util.ts\n            \n            variable\n            isFalse\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/base/swagger-gen/utils/checks.util.ts\n            \n            variable\n            isFunction\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/base/swagger-gen/utils/checks.util.ts\n            \n            variable\n            isIn\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/base/swagger-gen/utils/checks.util.ts\n            \n            variable\n            isNil\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/base/swagger-gen/utils/checks.util.ts\n            \n            variable\n            isNull\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/base/swagger-gen/utils/checks.util.ts\n            \n            variable\n            isNumber\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/base/swagger-gen/utils/checks.util.ts\n            \n            variable\n            isNumeric\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/base/swagger-gen/utils/checks.util.ts\n            \n            variable\n            isObject\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/base/swagger-gen/utils/checks.util.ts\n            \n            variable\n            isObjectFull\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/base/swagger-gen/utils/checks.util.ts\n            \n            variable\n            isString\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/base/swagger-gen/utils/checks.util.ts\n            \n            variable\n            isStringFull\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/base/swagger-gen/utils/checks.util.ts\n            \n            variable\n            isTrue\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/base/swagger-gen/utils/checks.util.ts\n            \n            variable\n            isUndefined\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/base/swagger-gen/utils/checks.util.ts\n            \n            variable\n            isValue\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/base/swagger-gen/utils/obj.util.ts\n            \n            variable\n            getOwnPropNames\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/base/swagger-gen/utils/obj.util.ts\n            \n            variable\n            objKeys\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/base/swagger-gen/utils/other.ts\n            \n            interface\n            BaseRoute\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/base/swagger-gen/utils/other.ts\n            \n            interface\n            CrudOptions\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/base/swagger-gen/utils/other.ts\n            \n            interface\n            GetManyDefaultResponse\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/base/swagger-gen/utils/other.ts\n            \n            interface\n            ParamOption\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/base/swagger-gen/utils/other.ts\n            \n            interface\n            ParamsOptions\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/base/swagger-gen/utils/other.ts\n            \n            function\n            ApiProperty\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/base/swagger-gen/utils/other.ts\n            \n            function\n            safeRequire\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/base/swagger-gen/utils/other.ts\n            \n            variable\n            swagger\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/base/swagger-gen/utils/other.ts\n            \n            variable\n            swaggerConst\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/cron/cron.service.ts\n            \n            injectable\n            CronService\n            \n                52 %\n                (10/19)\n            \n        \n        \n            \n                \n                src/cron/persisted-cron.service.ts\n            \n            injectable\n            PersistedCronService\n            \n                50 %\n                (2/4)\n            \n        \n        \n            \n                \n                src/database/database.module.ts\n            \n            variable\n            databaseProviders\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/database.module.ts\n            \n            variable\n            graphQlSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/database.module.ts\n            \n            variable\n            modelProviders\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/database.module.ts\n            \n            variable\n            models\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/helper.ts\n            \n            variable\n            accountStatus\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/helper.ts\n            \n            variable\n            defaultAccountStatus\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/migrations/20190609143930_CreateUser.ts\n            \n            function\n            down\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/migrations/20190609143930_CreateUser.ts\n            \n            function\n            up\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/migrations/20190609143930_CreateUser.ts\n            \n            variable\n            tableName\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/migrations/20190609143931_CreateTag.ts\n            \n            function\n            down\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/migrations/20190609143931_CreateTag.ts\n            \n            function\n            up\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/migrations/20190609143931_CreateTag.ts\n            \n            variable\n            tableName\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/migrations/20210128233543_UpdateTagModel.ts\n            \n            function\n            down\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/migrations/20210128233543_UpdateTagModel.ts\n            \n            function\n            up\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/migrations/20210128233543_UpdateTagModel.ts\n            \n            variable\n            tableName\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/models/base.model.ts\n            \n            class\n            BaseModel\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/database/models/base.model.ts\n            \n            interface\n            IBaseModel\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/database/models/customQueryBuilder.ts\n            \n            class\n            CustomQueryBuilder\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/database/models/customQueryBuilder.ts\n            \n            function\n            isEmpty\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/database/models/customQueryBuilder.ts\n            \n            function\n            isNotEmpty\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/database/models/customQueryBuilder.ts\n            \n            function\n            isObject\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/database/seeds/01-User.ts\n            \n            function\n            seed\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/seeds/02-Tag.ts\n            \n            function\n            seed\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/domain.ts\n            \n            interface\n            APIResponse\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/domain.ts\n            \n            interface\n            AppLaunchAction\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/domain.ts\n            \n            interface\n            Comment\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/domain.ts\n            \n            interface\n            Comments\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/domain.ts\n            \n            interface\n            Follower\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/domain.ts\n            \n            interface\n            GetAppLaunchData\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/domain.ts\n            \n            interface\n            GetComments\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/domain.ts\n            \n            interface\n            GetFollowers\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/domain.ts\n            \n            interface\n            GetFollowing\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/domain.ts\n            \n            interface\n            GetRescueList\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/domain.ts\n            \n            interface\n            GetUserPosts\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/domain.ts\n            \n            interface\n            GetUserProfile\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/domain.ts\n            \n            interface\n            PostedByUser\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/domain.ts\n            \n            interface\n            PostType\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/domain.ts\n            \n            interface\n            RescueLists\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/domain.ts\n            \n            interface\n            Rescues\n            \n                0 %\n                (0/14)\n            \n        \n        \n            \n                \n                src/domain.ts\n            \n            interface\n            Result\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/domain.ts\n            \n            interface\n            User\n            \n                0 %\n                (0/23)\n            \n        \n        \n            \n                \n                src/domain.ts\n            \n            interface\n            UserPost\n            \n                0 %\n                (0/15)\n            \n        \n        \n            \n                \n                src/domain.ts\n            \n            interface\n            UserPosts\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/email/email.service.ts\n            \n            injectable\n            EmailService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/emailScheduling/emailSchedule.dto.ts\n            \n            class\n            EmailScheduleDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/emailScheduling/emailScheduling.controller.ts\n            \n            controller\n            EmailSchedulingController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/emailScheduling/emailScheduling.service.ts\n            \n            injectable\n            EmailSchedulingService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/health/health.controller.ts\n            \n            controller\n            HealthController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/infra/decorators/user.decorator.ts\n            \n            variable\n            GetUser\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infra/filters/query-failed.filter.ts\n            \n            class\n            QueryFailedFilter\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/infra/filters/validation-failed.filter.ts\n            \n            class\n            ValidationFailedFilter\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/infra/guards/req.ts\n            \n            guard\n            RequestGuard\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/infra/guards/res.ts\n            \n            guard\n            ResponseGuard\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/infra/interceptors/null-undefined-override.ts\n            \n            injectable\n            ExcludeNullUndefinedInterceptor\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/infra/interceptors/null-undefined-override.ts\n            \n            function\n            recursivelyStripNullValues\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/infra/interceptors/timeout.ts\n            \n            injectable\n            TimeoutInterceptor\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/infra/interceptors/transform.ts\n            \n            injectable\n            TransformInterceptor\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/infra/interceptors/transform.ts\n            \n            interface\n            Response\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/infra/validator/isEmailExists.ts\n            \n            class\n            IsEmailExistsConstraint\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/infra/validator/isEmailExists.ts\n            \n            variable\n            IsEmailExists\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            run\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            setupInfra\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            setupMiddlewares\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            setupSwaggerDocs\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/tags/tag.model.ts\n            \n            class\n            CreateTagsDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/tags/tag.model.ts\n            \n            class\n            Tag\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/tags/tag.model.ts\n            \n            class\n            UpdateTagsDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/tags/tag.model.ts\n            \n            interface\n            ITag\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/tags/tags.controller.ts\n            \n            controller\n            TagsController\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/tags/tags.service.ts\n            \n            injectable\n            TagsService\n            \n                83 %\n                (10/12)\n            \n        \n        \n            \n                \n                src/users/user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                14 %\n                (1/7)\n            \n        \n        \n            \n                \n                src/users/user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/users/user.interface.ts\n            \n            interface\n            IUser\n            \n                14 %\n                (1/7)\n            \n        \n        \n            \n                \n                src/users/user.model.ts\n            \n            class\n            User\n            \n                13 %\n                (3/23)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                53 %\n                (8/15)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @hapi/joi : ^17.1.1\n        \n            @nestjs/bull : ^0.3.1\n        \n            @nestjs/common : ^7.5.1\n        \n            @nestjs/config : ^0.6.1\n        \n            @nestjs/core : ^7.5.1\n        \n            @nestjs/graphql : ^7.9.8\n        \n            @nestjs/jwt : ^7.2.0\n        \n            @nestjs/mapped-types : ^0.1.1\n        \n            @nestjs/passport : ^7.1.5\n        \n            @nestjs/platform-express : ^7.5.1\n        \n            @nestjs/platform-socket.io : ^7.6.5\n        \n            @nestjs/schedule : ^0.4.1\n        \n            @nestjs/serve-static : ^2.1.4\n        \n            @nestjs/swagger : ^4.7.5\n        \n            @nestjs/terminus : ^7.0.1\n        \n            @types/dotenv : ^8.2.0\n        \n            apollo-server-express : ^2.19.2\n        \n            bcrypt : ^5.0.0\n        \n            blocked-at : ^1.2.0\n        \n            bull : ^3.20.0\n        \n            class-transformer : ^0.3.1\n        \n            class-validator : ^0.12.2\n        \n            cron : ^1.8.2\n        \n            deepmerge : ^4.2.2\n        \n            dotenv : ^8.2.0\n        \n            express : ^4.17.1\n        \n            express-rate-limit : ^5.2.3\n        \n            graphql : ^15.5.0\n        \n            graphql-tools : ^7.0.2\n        \n            helmet : ^4.2.0\n        \n            knex : ^0.21.15\n        \n            lodash : ^4.17.20\n        \n            moment : ^2.29.1\n        \n            moment-range : ^4.0.2\n        \n            objection : ^2.2.6\n        \n            objection-db-errors : ^1.1.2\n        \n            objection-find : ^3.0.1\n        \n            objection-graphql : ^0.4.5\n        \n            objection-visibility : ^1.1.0\n        \n            passport : ^0.4.1\n        \n            passport-google-oauth20 : ^2.0.0\n        \n            passport-jwt : ^4.0.0\n        \n            passport-local : ^1.0.0\n        \n            pg : ^8.5.1\n        \n            pidusage : ^2.0.21\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^6.6.3\n        \n            source-map-support : ^0.5.19\n        \n            sqlite3 : ^5.0.0\n        \n            swagger-ui-express : ^4.1.5\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            OrderType   (src/.../pagination.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/base/crud/pagination.ts\n    \n        \n            \n                \n                    \n                        \n                        OrderType\n                    \n                \n                        \n                            \n                                 DESC\n                            \n                        \n                        \n                            \n                                Value : DESC\n                            \n                        \n                        \n                            \n                                 ASC\n                            \n                        \n                        \n                            \n                                Value : ASC\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ApiErrors   (src/.../api-errors.decorator.ts)\n                        \n                        \n                            ApiProperty   (src/.../other.ts)\n                        \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            down   (src/.../20190609143930_CreateUser.ts)\n                        \n                        \n                            down   (src/.../20190609143931_CreateTag.ts)\n                        \n                        \n                            down   (src/.../20210128233543_UpdateTagModel.ts)\n                        \n                        \n                            isEmpty   (src/.../customQueryBuilder.ts)\n                        \n                        \n                            isNotEmpty   (src/.../customQueryBuilder.ts)\n                        \n                        \n                            isObject   (src/.../customQueryBuilder.ts)\n                        \n                        \n                            recursivelyStripNullValues   (src/.../null-undefined-override.ts)\n                        \n                        \n                            run   (src/.../main.ts)\n                        \n                        \n                            safeRequire   (src/.../other.ts)\n                        \n                        \n                            seed   (src/.../01-User.ts)\n                        \n                        \n                            seed   (src/.../02-Tag.ts)\n                        \n                        \n                            setupInfra   (src/.../main.ts)\n                        \n                        \n                            setupMiddlewares   (src/.../main.ts)\n                        \n                        \n                            setupSwaggerDocs   (src/.../main.ts)\n                        \n                        \n                            up   (src/.../20190609143930_CreateUser.ts)\n                        \n                        \n                            up   (src/.../20190609143931_CreateTag.ts)\n                        \n                        \n                            up   (src/.../20210128233543_UpdateTagModel.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/base/swagger-gen/api-errors.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            ApiErrors\n                        \n                        \n                    \n                \n            \n            \n                \nApiErrors()\n                \n            \n\n\n\n\n        \n    \n    src/base/swagger-gen/utils/other.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            ApiProperty\n                        \n                        \n                    \n                \n            \n            \n                \nApiProperty(options?: any)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                any\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     PropertyDecorator\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            safeRequire\n                        \n                        \n                    \n                \n            \n            \n                \nsafeRequire(path)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    path\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T | null\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            bootstrap\n                        \n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            run\n                        \n                        \n                    \n                \n            \n            \n                \nrun(boot, options: object)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    boot\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                object\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setupInfra\n                        \n                        \n                    \n                \n            \n            \n                \nsetupInfra(app)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    app\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setupMiddlewares\n                        \n                        \n                    \n                \n            \n            \n                \nsetupMiddlewares(app)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    app\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setupSwaggerDocs\n                        \n                        \n                    \n                \n            \n            \n                \nsetupSwaggerDocs(app)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    app\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/database/migrations/20190609143930_CreateUser.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            down\n                        \n                        \n                    \n                \n            \n            \n                \ndown(knex)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    knex\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            up\n                        \n                        \n                    \n                \n            \n            \n                \nup(knex)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    knex\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    src/database/migrations/20190609143931_CreateTag.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            down\n                        \n                        \n                    \n                \n            \n            \n                \ndown(knex)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    knex\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            up\n                        \n                        \n                    \n                \n            \n            \n                \nup(knex)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    knex\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/database/migrations/20210128233543_UpdateTagModel.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            down\n                        \n                        \n                    \n                \n            \n            \n                \ndown(knex)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    knex\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            up\n                        \n                        \n                    \n                \n            \n            \n                \nup(knex)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    knex\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/database/models/customQueryBuilder.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            isEmpty\n                        \n                        \n                    \n                \n            \n            \n                \nisEmpty(value: any)\n                \n            \n\n\n\n\n            \n                \n                    Check if value is empty\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            isNotEmpty\n                        \n                        \n                    \n                \n            \n            \n                \nisNotEmpty(value: any)\n                \n            \n\n\n\n\n            \n                \n                    Check if value is not empty\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            isObject\n                        \n                        \n                    \n                \n            \n            \n                \nisObject(value: any)\n                \n            \n\n\n\n\n            \n                \n                    Check if value is of type object.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    src/infra/interceptors/null-undefined-override.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            recursivelyStripNullValues\n                        \n                        \n                    \n                \n            \n            \n                \nrecursivelyStripNullValues(value)\n                \n            \n\n\n\n\n            \n                \n                    Recursively Strip Null Values\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    src/database/seeds/01-User.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            seed\n                        \n                        \n                    \n                \n            \n            \n                \nseed(knex)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    knex\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    src/database/seeds/02-Tag.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            seed\n                        \n                        \n                    \n                \n            \n            \n                \nseed(knex)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    knex\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\n$ npm installRunning the app\n# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CronModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        DatabaseModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        EmailModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        EmailSchedulingModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TagsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_CronModule\n\n\n\ncluster_CronModule_providers\n\n\n\ncluster_EmailModule\n\n\n\ncluster_EmailModule_exports\n\n\n\ncluster_EmailModule_providers\n\n\n\ncluster_EmailSchedulingModule\n\n\n\ncluster_EmailSchedulingModule_providers\n\n\n\ncluster_TagsModule\n\n\n\ncluster_TagsModule_exports\n\n\n\ncluster_TagsModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\n\n\nEmailSchedulingModule\n\nEmailSchedulingModule\n\nAppModule -->\n\nEmailSchedulingModule->AppModule\n\n\n\n\n\nTagsModule\n\nTagsModule\n\nAppModule -->\n\nTagsModule->AppModule\n\n\n\n\n\nTagsService \n\nTagsService \n\nTagsService  -->\n\nTagsModule->TagsService \n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nGoogleStrategy\n\nGoogleStrategy\n\nAuthModule -->\n\nGoogleStrategy->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\nCronService\n\nCronService\n\n\n\nCronModule\n\nCronModule\n\nCronModule -->\n\nCronService->CronModule\n\n\n\n\n\nPersistedCronService\n\nPersistedCronService\n\nCronModule -->\n\nPersistedCronService->CronModule\n\n\n\n\n\nEmailService \n\nEmailService \n\n\n\nEmailModule\n\nEmailModule\n\nEmailSchedulingModule -->\n\nEmailModule->EmailSchedulingModule\n\n\n\nEmailService  -->\n\nEmailModule->EmailService \n\n\n\n\n\nEmailService\n\nEmailService\n\nEmailModule -->\n\nEmailService->EmailModule\n\n\n\n\n\nEmailSchedulingService\n\nEmailSchedulingService\n\nEmailSchedulingModule -->\n\nEmailSchedulingService->EmailSchedulingModule\n\n\n\n\n\nTagsService\n\nTagsService\n\nTagsModule -->\n\nTagsService->TagsModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        8 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    6 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    13 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    22 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    2 Guards\n                \n            \n        \n        \n            \n                \n                    \n                    32 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            APIError   (src/.../domain.ts)\n                        \n                        \n                            BaseRouteName   (src/.../other.ts)\n                        \n                        \n                            Following   (src/.../domain.ts)\n                        \n                        \n                            ObjectLiteral   (src/.../object-literal.type.ts)\n                        \n                        \n                            PartialTagShape   (src/.../tag.model.ts)\n                        \n                        \n                            PartialUserShape   (src/.../user.model.ts)\n                        \n                        \n                            Results   (src/.../domain.ts)\n                        \n                        \n                            TagShape   (src/.../tag.model.ts)\n                        \n                        \n                            UserShape   (src/.../user.model.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/domain.ts\n    \n    \n        \n            \n                \n                    \n                    APIError\n                \n            \n            \n                \n                        Error | string | null\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Following\n                \n            \n            \n                \n                            Follower\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Results\n                \n            \n            \n                \n                            GetAppLaunchData | GetUserProfile | GetUserPosts | GetComments | GetRescueList | GetFollowers | GetFollowing\n\n                \n            \n        \n    \n    src/base/swagger-gen/utils/other.ts\n    \n    \n        \n            \n                \n                    \n                    BaseRouteName\n                \n            \n            \n                \n                        \"getManyBase\" | \"getOneBase\" | \"createOneBase\" | \"createManyBase\" | \"updateOneBase\" | \"replaceOneBase\" | \"deleteOneBase\" | \"getOne\"\n\n                \n            \n        \n    \n    src/base/swagger-gen/utils/types/object-literal.type.ts\n    \n    \n        \n            \n                \n                    \n                    ObjectLiteral\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/tags/tag.model.ts\n    \n    \n        \n            \n                \n                    \n                    PartialTagShape\n                \n            \n            \n                \n                            PartialModelObject\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    TagShape\n                \n            \n            \n                \n                            ModelObject\n\n                \n            \n        \n    \n    src/users/user.model.ts\n    \n    \n        \n            \n                \n                    \n                    PartialUserShape\n                \n            \n            \n                \n                    The PartialModelObject generic gives you a clean interface that can be used on\nthe frontend, without any of the objection Model class properties or methods.\n\n                \n            \n            \n                \n                            PartialModelObject\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    UserShape\n                \n            \n            \n                \n                    The ModelObject generic gives you a clean interface that can be used on\nthe frontend, without any of the objection Model class properties or methods.\n\n                \n            \n            \n                \n                            ModelObject\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            accountStatus   (src/.../helper.ts)\n                        \n                        \n                            ConfigModuleOptions   (src/.../app.module.ts)\n                        \n                        \n                            Crud   (src/.../crud.decorator.ts)\n                        \n                        \n                            databaseProviders   (src/.../database.module.ts)\n                        \n                        \n                            defaultAccountStatus   (src/.../helper.ts)\n                        \n                        \n                            getOwnPropNames   (src/.../obj.util.ts)\n                        \n                        \n                            GetUser   (src/.../user.decorator.ts)\n                        \n                        \n                            graphQlSchema   (src/.../database.module.ts)\n                        \n                        \n                            hasLength   (src/.../checks.util.ts)\n                        \n                        \n                            hasValue   (src/.../checks.util.ts)\n                        \n                        \n                            isArrayFull   (src/.../checks.util.ts)\n                        \n                        \n                            isArrayStrings   (src/.../checks.util.ts)\n                        \n                        \n                            isBoolean   (src/.../checks.util.ts)\n                        \n                        \n                            isDate   (src/.../checks.util.ts)\n                        \n                        \n                            isDateString   (src/.../checks.util.ts)\n                        \n                        \n                            IsEmailExists   (src/.../isEmailExists.ts)\n                        \n                        \n                            isEqual   (src/.../checks.util.ts)\n                        \n                        \n                            isFalse   (src/.../checks.util.ts)\n                        \n                        \n                            isFunction   (src/.../checks.util.ts)\n                        \n                        \n                            isIn   (src/.../checks.util.ts)\n                        \n                        \n                            isNil   (src/.../checks.util.ts)\n                        \n                        \n                            isNull   (src/.../checks.util.ts)\n                        \n                        \n                            isNumber   (src/.../checks.util.ts)\n                        \n                        \n                            isNumeric   (src/.../checks.util.ts)\n                        \n                        \n                            isObject   (src/.../checks.util.ts)\n                        \n                        \n                            isObjectFull   (src/.../checks.util.ts)\n                        \n                        \n                            isString   (src/.../checks.util.ts)\n                        \n                        \n                            isStringFull   (src/.../checks.util.ts)\n                        \n                        \n                            isTrue   (src/.../checks.util.ts)\n                        \n                        \n                            isUndefined   (src/.../checks.util.ts)\n                        \n                        \n                            isValue   (src/.../checks.util.ts)\n                        \n                        \n                            mockedConfigService   (src/.../mocks.ts)\n                        \n                        \n                            mockedJwtService   (src/.../mocks.ts)\n                        \n                        \n                            modelProviders   (src/.../database.module.ts)\n                        \n                        \n                            models   (src/.../database.module.ts)\n                        \n                        \n                            moment   (src/.../moment-extend.ts)\n                        \n                        \n                            objKeys   (src/.../obj.util.ts)\n                        \n                        \n                            swagger   (src/.../other.ts)\n                        \n                        \n                            swaggerConst   (src/.../other.ts)\n                        \n                        \n                            tableName   (src/.../20190609143930_CreateUser.ts)\n                        \n                        \n                            tableName   (src/.../20190609143931_CreateTag.ts)\n                        \n                        \n                            tableName   (src/.../20210128233543_UpdateTagModel.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/database/helper.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            accountStatus\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : [\n    'unverified',\n    'disabled',\n    'banned',\n    'verified',\n] as const\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            defaultAccountStatus\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : 'unverified'\n                        \n                    \n\n\n            \n        \n\n    src/app.module.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            ConfigModuleOptions\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n    isGlobal: true,\n    validationOptions: {\n        allowUnknown: true,\n        abortEarly: true,\n    },\n    /* eslint-disable */\n    validationSchema: Joi.object({\n        PORT: Joi.number().default(3000),\n        NODE_ENV: Joi.string()\n            .required()\n            .valid('development', 'production', 'test', 'provision')\n            .default('development'),\n\n        HOST: Joi.string().required().default('http://localhost:3000'),\n\n        JWTKEY: Joi.string().required(),\n        TOKEN_EXPIRATION: Joi.string().required(),\n\n        DATABASE_URL: Joi.string().required(),\n        DATABASE_DEBUG: Joi.string().required(),\n\n        GOOGLE_SECRET: Joi.string().required(),\n        GOOGLE_CLIENT_ID: Joi.string().required(),\n    }),\n    /* eslint-enable */\n}\n                        \n                    \n\n\n            \n        \n\n    src/base/swagger-gen/crud.decorator.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            Crud\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (options: any) => (target: Object) => {\n    let factory = CrudRoutesFactory.create(target, options)\n    // @ts-ignore\n    factory = undefined\n}\n                        \n                    \n\n\n            \n        \n\n    src/database/database.module.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            databaseProviders\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : [\n    ...modelProviders,\n    {\n        provide: 'KnexConnection',\n        useFactory: async () => {\n            const knex = Knex({\n                // @ts-ignore\n                debug: true,\n                connection: process.env.DATABASE_URL,\n                useNullAsDefault: true,\n                client: 'pg',\n            })\n\n            Model.knex(knex)\n            return knex\n        },\n    },\n]\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            graphQlSchema\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : graphQlBuilder().allModels(models).build()\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            modelProviders\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : models.map((model) => {\n    return {\n        provide: model.name,\n        useValue: model,\n    }\n})\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            models\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : [Tag, User]\n                        \n                    \n\n\n            \n        \n\n    src/base/swagger-gen/utils/obj.util.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            getOwnPropNames\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (val: any): string[] =>\n    Object.getOwnPropertyNames(val)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            objKeys\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (val: any): string[] => Object.keys(val)\n                        \n                    \n\n\n            \n        \n\n    src/infra/decorators/user.decorator.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            GetUser\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : createParamDecorator(\n    (data: string, ctx: ExecutionContext) => {\n        const request = ctx.switchToHttp().getRequest()\n        const { user } = request\n\n        return data ? user?.[data] : user\n    },\n)\n                        \n                    \n\n\n            \n        \n\n    src/base/swagger-gen/utils/checks.util.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            hasLength\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (val: any): boolean => val.length > 0\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            hasValue\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (val: any): boolean =>\n    isArrayFull(val) ? (val as any[]).every((o) => isValue(o)) : isValue(val)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isArrayFull\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (val: any): boolean =>\n    Array.isArray(val) && hasLength(val)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isArrayStrings\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (val: any): boolean =>\n    isArrayFull(val) && (val as string[]).every((v) => isStringFull(v))\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isBoolean\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (val: any): boolean => typeof val === 'boolean'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isDate\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (val: any): val is Date => val instanceof Date\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isDateString\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (val: any): boolean =>\n    isStringFull(val) &&\n    /^\\d{4}-[01]\\d-[0-3]\\d(?:T[0-2]\\d:[0-5]\\d:[0-5]\\d(?:\\.\\d+)?(?:Z|[-+][0-2]\\d(?::?[0-5]\\d)?)?)?$/g.test(\n        val,\n    )\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isEqual\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (val: any, eq: any): boolean => val === eq\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isFalse\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (val: any): boolean => val === false\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isFunction\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (val: any): boolean => typeof val === 'function'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isIn\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (val: any, arr: any[] = []): boolean =>\n    arr.some((o) => isEqual(val, o))\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isNil\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (val: any): boolean => isUndefined(val) || isNull(val)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isNull\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (val: any): boolean => val === null\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isNumber\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (val: any): boolean =>\n    typeof val === 'number' && !Number.isNaN(val) && Number.isFinite(val)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isNumeric\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (val: any): boolean =>\n    /^[+-]?([0-9]*[.])?[0-9]+$/.test(val)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isObject\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (val: any): boolean =>\n    typeof val === 'object' && !isNull(val)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isObjectFull\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (val: any) => isObject(val) && hasLength(objKeys(val))\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isString\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (val: any): boolean => typeof val === 'string'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isStringFull\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (val: any): boolean => isString(val) && hasLength(val)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isTrue\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (val: any): boolean => val === true\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isUndefined\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (val: any): boolean => typeof val === 'undefined'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isValue\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (val: any): boolean =>\n    isStringFull(val) || isNumber(val) || isBoolean(val) || isDate(val)\n                        \n                    \n\n\n            \n        \n\n    src/infra/validator/isEmailExists.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            IsEmailExists\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (validationOptions?: ValidationOptions) => {\n    return (object, propertyName: string) => {\n        registerDecorator({\n            target: object.constructor,\n            options: validationOptions,\n            constraints: [],\n            propertyName,\n            validator: IsEmailExistsConstraint,\n        })\n    }\n}\n                        \n                    \n\n\n            \n        \n\n    src/auth/spec/mocks.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            mockedConfigService\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n    get(key: string) {\n        switch (key) {\n            case 'JWT_ACCESS_TOKEN_EXPIRATION_TIME':\n                return '3600'\n            default:\n                return ''\n        }\n    },\n}\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            mockedJwtService\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n    sign: () => '',\n    signAsync: async () => Promise.resolve(''),\n}\n                        \n                    \n\n\n            \n        \n\n    src/base/moment-extend.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            moment\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : extendMoment(momentDefault)\n                        \n                    \n\n\n            \n        \n\n    src/base/swagger-gen/utils/other.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            swagger\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : safeRequire('@nestjs/swagger')\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            swaggerConst\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : safeRequire('@nestjs/swagger/dist/constants')\n                        \n                    \n\n\n            \n        \n\n    src/database/migrations/20190609143930_CreateUser.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            tableName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'users'\n                        \n                    \n\n\n            \n        \n\n    src/database/migrations/20190609143931_CreateTag.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            tableName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'tags'\n                        \n                    \n\n\n            \n        \n\n    src/database/migrations/20210128233543_UpdateTagModel.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            tableName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'tags'\n                        \n                    \n\n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
