var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/interfaces/APIResponse.html",[0,0.23,1,1.416]],["body/interfaces/APIResponse.html",[0,0.463,1,2.607,2,0.867,3,0.103,4,0.083,5,0.093,6,1.215,7,0.169,8,0.792,9,1.302,10,1.714,11,1.013,12,2.206,13,2.117,14,1.567,15,1.767,16,1.874,17,1.567,18,1.372,19,0.333,20,0.012,21,1.309,22,2.325,23,0.799,24,1.614,25,0.114,26,0.252,27,0.252,28,0.007,29,1.702,30,1.702,31,1.702,32,1.702,33,1.702,34,1.702,35,1.702,36,1.521,37,0.007,38,2.755,39,1.298,40,1.683,41,1.298,42,1.298,43,1.298,44,1.298,45,1.298,46,1.298,47,1.215,48,1.298,49,1.298,50,1.14,51,1.985,52,1.215,53,0.842,54,1.877,55,1.298,56,2.133,57,1.298,58,1.298,59,1.298,60,1.298,61,1.298,62,1.298,63,1.298,64,1.298,65,1.298,66,1.298,67,1.298,68,2.205,69,1.877,70,1.298,71,1.298,72,1.298,73,1.938,74,1.298,75,1.298,76,1.877,77,1.298,78,1.298,79,1.298,80,1.298,81,1.298,82,2.263,83,1.298,84,1.758,85,1.758,86,1.298,87,1.298,88,1.298,89,1.298,90,1.298,91,1.298,92,1.298,93,1.298,94,1.298,95,1.877,96,1.298,97,1.298,98,1.298,99,1.215,100,1.298,101,1.298,102,2.263,103,1.298,104,1.298,105,1.298,106,1.298,107,1.298,108,1.298,109,1.298,110,1.298,111,1.14,112,1.298,113,1.298,114,1.298,115,1.298,116,0.264,117,1.298,118,1.298,119,1.298,120,1.298,121,1.298,122,1.215,123,2.065,124,1.298,125,1.298,126,1.298,127,1.758,128,1.702,129,1.298,130,1.298,131,1.298,132,0.007]],["title/classes/ApiException.html",[133,0.176,134,3.302]],["body/classes/ApiException.html",[3,0.121,4,0.097,5,0.109,7,0.197,8,0.886,9,1.377,12,2.426,13,2.323,16,2.108,18,1.148,19,0.36,20,0.012,23,0.786,24,0.957,25,0.184,26,0.295,27,0.167,28,0.005,37,0.005,116,0.31,132,0.008,133,0.171,134,6.097,135,1.379,136,3.468,137,5.891,138,3.215,139,4.939,140,2.7,141,7.683,142,3.895,143,4.692,144,2.327,145,4.052,146,4.66,147,1.474,148,5.594,149,0.902,150,3.503,151,6.685,152,4.052,153,4.052,154,4.052,155,4.052,156,4.052,157,4.052,158,4.052,159,6.407,160,5.61,161,5.594,162,5.594,163,5.594,164,4.097,165,4.097,166,6.407,167,6.407,168,6.407,169,6.407,170,6.407,171,5.594,172,1.471,173,4.052,174,4.052,175,4.052,176,4.052,177,4.052,178,4.052,179,1.471,180,2.769,181,4.052,182,4.052,183,4.052,184,1.572,185,2.967,186,1.07,187,2.046,188,4.439,189,4.052,190,2.34,191,4.052,192,2.967,193,4.052,194,4.052]],["title/controllers/AppController.html",[195,1.794,196,3.047]],["body/controllers/AppController.html",[3,0.186,4,0.149,5,0.168,7,0.304,20,0.012,23,0.571,25,0.243,26,0.454,27,0.186,28,0.008,37,0.008,132,0.01,133,0.264,140,2.193,147,1.157,150,2.792,172,2.266,186,1.194,195,2.691,196,5.406,197,2.901,198,5.464,199,1.369,200,8.123,201,6.24,202,1.389,203,3.794,204,6.24,205,6.24,206,1.934,207,6.24,208,6.24]],["title/interfaces/AppLaunchAction.html",[0,0.23,47,1.462]],["body/interfaces/AppLaunchAction.html",[0,0.465,1,2.591,2,0.909,3,0.108,4,0.087,5,0.097,6,1.273,7,0.177,8,0.819,9,0.846,10,0.965,11,0.767,12,1.869,13,1.603,14,0.882,15,0.994,16,1.419,17,0.882,18,1.367,19,0.315,20,0.012,21,1.051,22,2.053,23,0.801,24,1.425,25,0.119,26,0.264,27,0.253,28,0.007,29,1.76,30,1.76,31,1.76,32,1.76,33,1.76,34,1.76,35,1.76,36,1.554,37,0.007,38,2.793,39,1.36,40,1.707,41,1.36,42,1.36,43,1.36,44,1.36,45,1.36,46,1.36,47,1.818,48,2.468,49,2.468,50,2.169,51,2.021,52,2.312,53,0.882,54,1.941,55,1.36,56,2.19,57,1.36,58,1.36,59,1.36,60,1.36,61,1.36,62,1.36,63,1.36,64,1.36,65,1.36,66,1.36,67,1.36,68,2.263,69,1.941,70,1.36,71,1.36,72,1.36,73,1.989,74,1.36,75,1.36,76,1.941,77,1.36,78,1.36,79,1.36,80,1.36,81,1.36,82,2.312,83,1.36,84,1.818,85,1.818,86,1.36,87,1.36,88,1.36,89,1.36,90,1.36,91,1.36,92,1.36,93,1.36,94,1.36,95,1.941,96,1.36,97,1.36,98,1.36,99,1.273,100,1.36,101,1.36,102,2.312,103,1.36,104,1.36,105,1.36,106,1.36,107,1.36,108,1.36,109,1.36,110,1.36,111,1.195,112,1.36,113,1.36,114,1.36,115,1.36,116,0.277,117,1.36,118,1.36,119,1.36,120,1.36,121,1.36,122,1.273,123,2.12,124,1.36,125,1.36,126,1.36,127,1.818,128,1.76,129,1.36,130,1.36,131,1.36,132,0.007]],["title/modules/AppModule.html",[209,1.671,210,3.047]],["body/modules/AppModule.html",[3,0.121,4,0.097,5,0.109,9,0.663,19,0.237,20,0.012,23,0.587,25,0.273,26,0.295,27,0.121,28,0.005,37,0.005,116,0.31,132,0.008,133,0.172,147,1.038,149,0.903,184,1.574,187,1.08,196,4.696,197,2.602,199,1.038,202,1.427,209,3.012,210,6.144,211,2.044,212,2.134,213,2.343,214,1.886,215,2.134,216,3.082,217,2.233,218,3.552,219,3.552,220,5.126,221,5.126,222,5.126,223,5.126,224,4.821,225,3.233,226,2.343,227,2.233,228,3.22,229,4.101,230,4.696,231,4.101,232,6.052,233,4.902,234,4.057,235,6.351,236,2.773,237,3.636,238,6.351,239,4.057,240,3.22,241,2.466,242,4.057,243,3.552,244,4.057,245,2.773,246,5.599,247,3.22,248,4.057,249,3.552,250,4.057,251,4.057,252,3.827,253,4.057,254,4.101,255,4.057,256,4.057,257,4.057,258,4.057,259,3.552,260,0.903,261,3.22,262,3.552,263,2.913,264,3.552,265,3.552,266,3.552,267,2.328,268,2.033,269,3.552,270,3.552,271,3.552,272,3.552,273,3.552,274,3.552,275,2.134,276,3.552,277,3.22,278,3.22,279,3.552,280,3.552,281,3.552,282,6.566,283,3.552,284,1.815,285,3.552,286,3.552,287,1.962,288,4.057,289,4.057,290,3.22,291,4.057,292,4.057,293,3.552,294,4.057,295,4.057,296,4.057,297,1.183,298,4.057,299,4.057,300,4.057,301,5.599,302,5.599,303,4.057,304,4.057,305,5.599,306,4.057,307,4.057,308,4.057,309,4.057,310,4.057,311,4.057,312,4.057,313,2.945,314,3.552,315,4.057,316,4.057,317,4.057,318,4.057,319,4.057,320,3.552,321,4.057,322,1.426,323,1.522,324,1.886,325,3.22,326,3.22,327,3.22,328,3.22,329,3.552]],["title/controllers/AuthController.html",[195,1.794,330,2.844]],["body/controllers/AuthController.html",[3,0.153,4,0.123,5,0.138,7,0.25,9,0.84,11,0.971,16,1.409,19,0.277,20,0.012,23,0.599,24,1.213,25,0.268,26,0.374,27,0.196,28,0.007,37,0.007,53,1.25,116,0.392,132,0.009,133,0.305,140,1.805,144,2.136,147,0.952,149,1.143,150,2.297,172,1.864,186,0.982,190,4.384,195,2.214,197,2.387,199,1.214,202,1.143,203,3.122,206,1.591,260,1.604,313,3.444,330,4.475,331,4.075,332,2.234,333,5.721,334,5.135,335,6.647,336,5.56,337,5.135,338,5.135,339,6.866,340,4.209,341,3.301,342,4.075,343,4.075,344,3.122,345,3.967,346,3.35,347,2.297,348,4.075,349,3.444,350,3.761,351,4.163,352,3.761,353,4.209,354,4.496,355,3.049,356,2.629,357,4.496,358,3.166,359,4.496,360,4.496,361,4.075,362,3.761,363,4.496,364,4.496,365,1.927,366,4.496,367,2.701]],["title/modules/AuthModule.html",[209,1.671,220,2.844]],["body/modules/AuthModule.html",[3,0.155,4,0.124,5,0.139,20,0.012,25,0.275,26,0.377,27,0.155,28,0.007,37,0.007,132,0.009,133,0.219,187,1.378,197,3.059,209,3.157,211,2.608,212,2.723,213,2.989,214,2.406,215,2.723,216,3.982,217,3.622,220,5.813,224,5.165,225,3.801,226,2.989,227,2.849,231,5.299,240,5.742,241,3.147,259,4.533,330,4.946,332,1.604,344,3.147,351,4.64,352,3.791,361,5.223,368,4.533,369,4.533,370,5.177,371,5.492,372,5.492,373,5.177,374,5.577,375,6.581,376,4.108,377,7.236,378,5.177,379,5.177,380,5.177,381,5.177,382,4.108,383,4.108,384,5.177,385,4.533,386,5.177,387,5.177,388,5.177]],["title/injectables/AuthService.html",[351,2.402,389,1.176]],["body/injectables/AuthService.html",[3,0.144,4,0.115,5,0.129,7,0.235,9,1.257,19,0.325,20,0.012,23,0.77,25,0.244,26,0.351,27,0.144,28,0.006,37,0.006,53,1.871,116,0.587,132,0.008,133,0.204,144,2.613,147,1.426,149,1.71,165,3.528,179,1.749,186,1.508,199,1.165,202,1.649,260,1.398,332,2.609,333,4.986,349,3.898,350,3.528,351,3.628,355,2.523,356,1.934,358,3.381,362,4.602,365,2.358,376,3.823,389,1.777,390,2.239,391,4.218,392,6.283,393,6.283,394,6.283,395,4.817,396,8.028,397,4.817,398,6.283,399,7.411,400,4.817,401,4.817,402,6.283,403,3.526,404,4.817,405,6.283,406,4.817,407,6.283,408,4.817,409,3.82,410,4.817,411,4.817,412,4.817,413,3.528,414,4.817,415,6.283,416,4.294,417,4.817,418,4.218,419,3.528,420,4.817,421,4.817,422,4.817]],["title/classes/BaseModel.html",[133,0.176,423,1.861]],["body/classes/BaseModel.html",[0,0.243,3,0.131,4,0.105,5,0.118,7,0.214,8,0.935,9,1.168,11,0.651,18,1.057,19,0.332,20,0.012,23,0.653,25,0.235,27,0.176,28,0.006,36,1.395,37,0.008,116,0.451,132,0.008,133,0.185,135,1.493,139,2.82,147,1.479,149,1.314,179,1.592,180,2.998,186,1.129,199,1.095,202,1.314,206,2.379,267,1.592,268,1.592,297,1.721,322,1.541,323,1.646,324,2.039,332,2.379,358,2.855,365,2.216,403,2.986,423,2.642,424,3.481,425,4.889,426,5.622,427,5.247,428,5.23,429,2.868,430,4.563,431,5.622,432,4.686,433,4.889,434,4.386,435,4.386,436,2.216,437,1.947,438,4.325,439,4.386,440,4.386,441,4.341,442,4.386,443,4.386,444,3.59,445,4.341,446,4.849,447,4.386,448,3.481,449,3.481,450,3.453,451,4.889,452,4.386,453,4.889,454,2.771,455,3.481,456,3.84,457,1.541,458,3.84,459,5.17,460,3.212,461,5.17,462,3.481,463,3.212,464,1.761,465,3.84,466,2.82,467,2.667,468,2.144,469,3.84,470,2.533,471,3.481,472,2.533,473,3.84,474,3.84,475,3.84,476,2.533,477,2.414,478,2.667,479,3.84,480,2.039,481,2.039,482,3.84,483,3.84,484,2.82,485,3.84,486,3.481,487,3.84]],["title/interfaces/BaseRoute.html",[0,0.23,488,2.012]],["body/interfaces/BaseRoute.html",[0,0.406,2,1.049,3,0.125,4,0.1,5,0.112,7,0.204,8,0.906,10,1.114,11,0.621,14,1.019,15,1.148,17,1.019,18,1.249,19,0.338,20,0.012,21,1.163,23,0.732,25,0.188,26,0.304,27,0.242,28,0.006,36,1.351,37,0.006,51,2.019,116,0.56,132,0.008,136,1.804,140,2.461,184,2.219,186,1.246,260,1.558,267,2.076,268,2.076,287,3.387,322,2.01,323,2.146,324,1.945,457,1.471,468,1.519,476,2.417,477,2.303,488,2.766,489,2.303,490,2.628,491,3.684,492,3.684,493,3.684,494,3.529,495,3.909,496,3.909,497,2.86,498,2.86,499,2.69,500,2.69,501,2.108,502,2.69,503,2.69,504,2.69,505,2.69,506,3.677,507,2.108,508,2.023,509,3.477,510,2.86,511,2.86,512,2.544,513,2.86,514,2.86,515,3.477,516,2.417,517,2.023,518,2.201,519,2.544,520,2.86,521,1.872,522,3.719,523,2.023,524,2.69,525,2.86,526,2.86,527,2.201,528,2.201,529,2.201,530,2.231,531,1.68,532,2.86,533,2.023,534,2.86,535,2.201,536,2.69,537,2.108,538,2.69,539,2.86,540,2.69,541,2.86,542,2.86,543,2.86,544,2.86,545,3.909,546,2.86,547,2.303,548,2.86,549,2.466,550,2.69,551,2.023,552,2.69,553,2.69,554,2.69,555,2.108,556,3.008,557,2.201,558,2.86,559,2.86,560,2.86,561,2.86]],["title/interfaces/Comment.html",[0,0.23,123,1.462]],["body/interfaces/Comment.html",[0,0.465,1,2.587,2,0.904,3,0.108,4,0.086,5,0.097,6,1.266,7,0.176,8,0.816,10,0.959,11,0.764,12,1.863,13,1.596,14,0.877,15,0.989,16,1.413,17,0.877,18,1.37,19,0.321,20,0.012,21,1.047,22,2.046,23,0.801,24,1.42,25,0.119,26,0.262,27,0.253,28,0.007,29,1.753,30,1.753,31,1.753,32,1.753,33,1.753,34,1.753,35,1.753,36,1.55,37,0.007,38,2.789,39,1.352,40,1.704,41,1.352,42,1.352,43,1.352,44,1.352,45,1.352,46,1.352,47,1.266,48,1.352,49,1.352,50,1.188,51,1.998,52,1.266,53,0.877,54,1.933,55,1.352,56,2.183,57,1.352,58,1.352,59,1.352,60,1.352,61,1.352,62,1.352,63,1.352,64,1.352,65,1.352,66,1.352,67,1.352,68,2.256,69,1.933,70,1.352,71,1.352,72,1.352,73,1.983,74,1.352,75,1.352,76,1.933,77,1.352,78,1.352,79,1.352,80,1.352,81,1.352,82,2.306,83,1.352,84,1.81,85,1.81,86,1.352,87,1.352,88,1.352,89,1.352,90,1.352,91,1.352,92,1.352,93,1.352,94,1.352,95,2.604,96,1.352,97,1.352,98,1.352,99,1.266,100,1.352,101,1.352,102,2.306,103,1.352,104,1.352,105,1.352,106,1.352,107,1.352,108,1.352,109,1.352,110,1.352,111,1.188,112,1.352,113,1.352,114,1.352,115,1.352,116,0.275,117,1.352,118,1.352,119,1.352,120,1.352,121,1.352,122,1.266,123,2.612,124,2.462,125,2.462,126,2.462,127,1.81,128,1.753,129,1.352,130,1.352,131,1.352,132,0.007]],["title/interfaces/Comments.html",[0,0.23,127,1.462]],["body/interfaces/Comments.html",[0,0.467,1,2.609,2,0.933,3,0.111,4,0.089,5,0.1,6,1.308,7,0.181,8,0.835,10,0.991,11,0.782,12,1.896,13,1.633,14,0.906,15,1.021,16,1.446,17,0.906,18,1.365,19,0.281,20,0.012,21,1.071,22,2.083,23,0.799,24,1.446,25,0.122,26,0.271,27,0.254,28,0.007,29,1.794,30,1.794,31,1.794,32,1.794,33,1.794,34,1.794,35,1.794,36,1.573,37,0.007,38,2.815,39,1.396,40,1.72,41,1.396,42,1.396,43,1.396,44,1.396,45,1.396,46,1.396,47,1.308,48,1.396,49,1.396,50,1.227,51,2.007,52,1.308,53,0.906,54,1.978,55,1.396,56,2.222,57,1.396,58,1.396,59,1.396,60,1.396,61,1.396,62,1.396,63,1.396,64,1.396,65,1.396,66,1.396,67,1.396,68,2.296,69,1.978,70,1.396,71,1.396,72,1.396,73,2.018,74,1.396,75,1.396,76,1.978,77,1.396,78,1.396,79,1.396,80,1.396,81,1.396,82,2.339,83,1.396,84,1.852,85,1.852,86,1.396,87,1.396,88,1.396,89,1.396,90,1.396,91,1.396,92,1.396,93,1.396,94,1.396,95,1.978,96,1.396,97,1.396,98,1.396,99,1.308,100,1.396,101,1.396,102,2.339,103,1.396,104,1.396,105,1.396,106,1.396,107,1.396,108,1.396,109,1.396,110,1.396,111,1.227,112,1.396,113,1.396,114,1.396,115,1.396,116,0.284,117,1.396,118,1.396,119,1.396,120,1.396,121,1.396,122,1.308,123,2.469,124,1.396,125,1.396,126,1.396,127,2.564,128,1.794,129,1.396,130,1.396,131,1.396,132,0.007]],["title/classes/CreateTagsDto.html",[133,0.176,562,2.188]],["body/classes/CreateTagsDto.html",[0,0.362,3,0.153,4,0.122,5,0.138,7,0.25,8,1.201,19,0.344,20,0.012,23,0.717,25,0.25,27,0.234,28,0.007,37,0.007,116,0.622,132,0.009,133,0.331,135,1.745,147,0.951,150,2.294,172,1.861,199,0.951,206,2.027,275,2.697,284,2.294,297,2.1,346,3.04,347,2.294,423,2.926,429,2.059,454,2.538,457,2.299,464,2.627,521,2.294,530,1.45,562,3.44,563,3.296,564,4.877,565,4.489,566,5.127,567,2.961,568,3.296,569,3.777,570,3.777,571,4.16,572,3.964,573,3.6,574,2.697,575,3.44,576,2.697,577,2.961,578,3.223,579,2.961,580,2.961,581,2.961,582,3.44,583,2.961,584,2.961,585,2.479,586,2.961,587,2.961,588,2.961,589,3.504,590,2.961,591,2.697,592,2.961,593,2.961,594,2.961,595,2.961,596,3.504,597,3.504,598,2.961,599,2.961,600,3.117,601,3.755]],["title/classes/CreateUserDto.html",[133,0.176,602,2.188]],["body/classes/CreateUserDto.html",[0,0.284,3,0.107,4,0.086,5,0.096,7,0.175,8,1.037,9,1.071,19,0.351,20,0.012,23,0.783,25,0.237,27,0.207,28,0.005,37,0.005,50,2.377,51,1.686,53,1.25,73,2.448,116,0.458,132,0.007,133,0.293,135,1.221,147,1.337,150,3.225,172,1.302,186,0.686,199,0.665,206,1.858,260,1.335,263,1.44,275,1.887,284,1.605,297,1.748,332,1.858,346,3.35,347,1.605,353,2.306,355,1.44,356,3.049,358,3.589,365,2.6,409,3.122,416,3.51,423,2.297,429,1.44,444,2.181,445,2.181,446,4.212,454,2.327,457,1.804,464,2.062,466,2.306,468,1.302,484,2.306,521,1.605,530,1.014,537,1.807,565,3.14,567,2.071,568,3.491,569,4.163,570,4.163,571,3.463,572,3.301,573,2.826,574,1.887,576,1.887,577,2.071,578,2.683,579,2.071,580,2.071,581,2.071,582,3.155,583,2.071,584,2.071,585,1.734,586,2.071,587,2.071,588,2.071,590,4.001,591,1.887,592,2.071,593,2.071,594,2.071,595,2.071,598,3.781,599,2.071,602,2.701,603,2.306,604,4.209,605,5.56,606,5.56,607,3.587,608,3.587,609,5.135,610,3.587,611,3.855,612,3.587,613,3.587,614,3.587,615,3.587,616,3.587,617,3.51,618,4.795,619,3.51,620,2.627,621,2.452,622,3.122,623,2.627,624,2.627,625,2.627,626,2.627,627,2.627,628,2.627,629,2.627,630,2.627,631,2.627,632,3.761,633,2.627,634,2.627,635,2.627,636,2.181,637,2.627,638,2.627,639,2.627,640,2.627,641,2.452,642,2.627,643,2.452,644,2.627,645,2.627,646,2.627,647,2.627,648,2.627,649,3.51,650,2.627,651,2.627,652,2.452,653,3.761,654,2.452,655,2.306,656,2.627,657,2.627,658,3.761,659,3.761,660,2.452,661,2.452,662,2.627,663,2.071,664,2.627]],["title/modules/CronModule.html",[209,1.671,252,2.844]],["body/modules/CronModule.html",[3,0.178,4,0.143,5,0.16,20,0.012,25,0.254,26,0.435,27,0.178,28,0.008,37,0.008,132,0.01,133,0.252,187,1.59,209,3.29,211,3.009,212,3.141,213,3.449,214,2.776,215,3.141,216,4.246,217,3.287,225,4.152,226,3.449,227,3.287,252,5.802,665,5.229,666,5.229,667,5.688,668,5.688,669,5.972,670,4.914,671,7.19,672,5.972]],["title/injectables/CronService.html",[389,1.176,667,2.844]],["body/injectables/CronService.html",[3,0.079,4,0.063,5,0.071,7,0.129,8,0.649,9,1.136,10,1.502,12,0.822,18,1.253,19,0.313,20,0.012,23,0.759,25,0.165,26,0.193,27,0.079,28,0.004,37,0.004,111,0.875,116,0.656,132,0.006,133,0.112,144,1.103,147,1.478,149,1.545,150,2.243,179,1.82,186,0.784,187,1.79,188,3.979,199,0.761,202,1.696,206,1.554,237,3.958,245,1.813,260,1.62,263,1.065,267,0.963,268,0.963,322,2.363,323,0.995,324,1.233,325,2.105,326,2.105,327,2.105,389,1.16,390,1.233,436,2.117,437,1.86,490,2.117,499,3.626,516,2.895,535,3.392,537,1.337,547,1.46,622,3.429,636,1.613,667,2.803,670,5.066,673,2.323,674,4.101,675,4.39,676,6.976,677,4.467,678,4.101,679,5.641,680,6.928,681,4.101,682,5.013,683,4.477,684,5.013,685,4.101,686,4.101,687,4.101,688,4.101,689,4.101,690,4.101,691,4.101,692,5.641,693,5.013,694,5.013,695,5.013,696,5.641,697,5.641,698,2.653,699,4.477,700,4.101,701,3.591,702,4.101,703,7.127,704,2.653,705,7.524,706,5.645,707,6.049,708,4.101,709,6.875,710,2.653,711,7.281,712,4.101,713,2.653,714,4.101,715,2.653,716,4.101,717,4.101,718,2.653,719,4.101,720,2.653,721,4.101,722,2.653,723,5.013,724,4.101,725,4.101,726,2.653,727,2.653,728,2.653,729,2.653,730,2.653,731,2.653,732,2.653,733,2.653,734,2.653,735,5.013,736,2.653,737,5.013,738,3.048,739,2.653,740,4.101,741,4.101,742,2.653,743,4.101,744,2.653,745,2.653,746,2.323,747,1.705,748,2.653,749,4.101,750,2.653,751,2.653,752,2.323,753,2.323,754,1.813,755,2.653,756,2.653,757,2.105,758,2.653,759,2.653,760,2.653,761,2.964,762,2.653,763,2.653,764,2.653,765,2.323,766,5.013,767,2.323,768,2.653,769,2.653,770,2.653,771,4.39,772,2.653,773,2.653,774,2.653,775,4.101,776,2.653,777,4.101,778,2.323,779,2.653,780,2.653,781,2.653,782,2.653,783,4.101,784,2.653,785,2.653,786,2.653,787,5.013,788,2.653,789,2.653,790,2.653,791,2.653]],["title/classes/CrudConfigService.html",[133,0.176,792,2.529]],["body/classes/CrudConfigService.html",[3,0.071,4,0.057,5,0.064,7,0.116,8,0.595,9,0.388,10,0.631,11,0.352,14,0.577,15,0.65,17,0.577,18,1.059,19,0.314,20,0.012,21,0.482,23,0.59,24,0.56,25,0.19,26,0.173,27,0.173,28,0.003,37,0.003,40,1.326,116,0.526,132,0.005,133,0.283,135,0.807,136,2.011,140,1.32,147,0.696,149,0.528,179,0.861,184,2.244,186,1.482,187,1.413,199,0.696,202,0.528,206,2.421,214,1.102,237,1.247,260,1.628,263,1.873,267,0.861,268,0.861,287,1.816,297,0.691,322,0.833,323,0.89,345,3.386,367,2.453,403,2.587,436,1.409,437,1.538,450,3.232,468,2.427,480,1.746,481,1.746,488,2.796,490,1.75,491,1.975,492,1.975,493,1.247,494,2.913,501,1.892,507,1.892,508,1.816,517,2.565,518,2.791,522,3.571,523,1.816,527,1.975,528,2.453,529,1.247,530,1.5,531,1.508,549,2.493,551,2.796,555,3.368,556,3.236,557,1.975,578,1.68,792,2.283,793,2.998,794,1.524,795,3.516,796,3.288,797,1.975,798,2.371,799,2.567,800,2.371,801,1.369,802,2.998,803,1.441,804,1.441,805,1.441,806,1.441,807,2.567,808,1.441,809,3.626,810,2.567,811,3.188,812,2.567,813,2.567,814,1.62,815,4.204,816,1.62,817,1.62,818,1.62,819,1.62,820,2.567,821,1.62,822,3.552,823,2.567,824,1.62,825,2.567,826,2.414,827,1.62,828,2.169,829,1.62,830,1.62,831,1.62,832,1.62,833,1.975,834,1.62,835,2.567,836,1.62,837,1.62,838,2.567,839,1.62,840,1.62,841,1.62,842,1.62,843,1.62,844,1.62,845,1.62,846,2.567,847,1.524,848,2.998,849,2.835,850,1.62,851,1.369,852,1.62,853,1.62,854,1.62,855,3.188,856,2.567,857,1.62,858,1.369,859,1.441,860,1.62,861,1.62,862,1.441,863,1.62,864,1.62,865,2.567,866,1.62,867,1.62,868,2.567,869,1.62,870,1.62,871,2.567,872,1.62,873,1.62,874,1.62,875,1.62,876,1.62,877,1.62,878,1.62,879,1.62,880,2.567,881,1.62,882,2.414,883,1.524,884,2.283,885,2.283,886,1.62,887,3.188,888,1.62,889,1.441,890,1.62,891,1.62,892,4.405,893,3.188,894,2.567,895,1.62,896,1.62,897,1.62,898,1.62,899,1.62,900,1.62,901,4.405,902,1.62,903,1.524,904,1.62,905,1.62,906,1.62,907,1.62,908,1.62,909,1.62,910,1.62,911,3.188,912,1.62,913,1.62,914,1.62,915,1.62,916,1.62,917,1.62,918,2.567,919,1.62,920,1.62,921,1.62,922,2.567,923,1.62,924,1.62,925,1.62,926,2.567,927,1.62,928,1.62,929,2.567,930,3.188,931,1.62,932,1.62,933,3.188,934,1.62,935,1.62,936,1.62,937,2.567,938,1.62,939,1.62,940,2.567,941,1.62,942,1.62,943,2.567,944,1.62,945,1.62,946,1.62,947,2.567,948,1.62,949,1.62,950,1.62,951,1.62,952,1.62,953,1.62,954,1.62,955,1.62,956,1.62,957,1.62,958,1.62,959,1.62,960,1.62,961,1.62,962,1.62,963,1.62,964,1.62,965,1.62,966,1.62,967,2.567,968,1.62,969,2.567,970,1.62,971,1.62,972,1.62,973,1.62,974,1.62,975,1.62,976,1.62,977,2.567,978,1.62,979,1.62]],["title/classes/CrudController.html",[133,0.176,980,2.844]],["body/classes/CrudController.html",[1,2.377,3,0.088,4,0.071,5,0.079,7,0.144,9,1.1,11,1.178,16,1.757,18,1.165,19,0.345,20,0.012,21,1.42,24,0.699,25,0.23,26,0.215,27,0.088,28,0.004,37,0.006,116,0.514,132,0.006,133,0.125,135,1.007,137,2.166,142,4.091,144,2.23,146,1.901,147,1.248,149,1.497,150,2.864,164,3.264,172,1.074,179,1.074,185,3.264,186,1.224,187,2.215,188,4.736,195,2.901,199,0.826,202,1.425,260,1.425,284,2.67,313,3.139,332,2.462,340,2.865,341,1.901,355,1.188,365,2.402,367,3.868,403,3.71,423,3.215,429,3.097,468,1.618,472,1.708,531,2.886,533,3.475,535,3.673,549,1.275,574,1.556,585,2.155,641,3.046,761,1.853,771,5.225,797,2.82,833,4.403,849,4.091,885,2.709,980,3.046,981,2.59,982,3.927,983,3.902,984,4.371,985,3.046,986,5.225,987,3.902,988,4.736,989,4.376,990,4.079,991,4.079,992,2.958,993,4.376,994,2.958,995,3.902,996,5.225,997,4.773,998,3.902,999,3.264,1000,3.902,1001,1.901,1002,5.606,1003,4.456,1004,4.326,1005,2.958,1006,2.958,1007,4.326,1008,2.958,1009,3.844,1010,2.958,1011,2.958,1012,2.958,1013,2.022,1014,5.225,1015,4.456,1016,2.958,1017,2.958,1018,2.022,1019,4.371,1020,2.958,1021,2.958,1022,2.958,1023,1.798,1024,3.264,1025,4.456,1026,2.958,1027,2.958,1028,4.736,1029,2.347,1030,5.892,1031,2.347,1032,2.958,1033,2.59,1034,2.709,1035,2.59,1036,5.606,1037,3.902,1038,2.958,1039,3.264,1040,2.958,1041,2.958,1042,2.958,1043,2.958,1044,2.958,1045,4.255,1046,2.958,1047,2.958,1048,2.958,1049,2.958,1050,2.347,1051,2.347,1052,2.347,1053,2.347,1054,2.958,1055,2.347]],["title/interfaces/CrudOptions.html",[0,0.23,517,2.012]],["body/interfaces/CrudOptions.html",[0,0.4,2,1.006,3,0.12,4,0.096,5,0.108,7,0.195,8,0.88,9,1.338,10,1.068,11,0.595,14,0.976,15,1.101,17,0.976,18,1.237,19,0.359,20,0.012,21,1.129,23,0.701,25,0.183,26,0.292,27,0.24,28,0.005,36,1.312,37,0.005,51,1.865,116,0.424,132,0.007,136,1.729,140,1.41,184,2.156,186,1.219,260,1.531,267,2.017,268,2.017,287,1.939,322,1.952,323,2.084,324,1.864,457,2.418,468,2.497,476,2.316,477,2.208,488,1.939,489,2.208,490,1.505,491,2.11,492,2.11,493,2.922,494,2.799,495,4.702,496,3.797,497,2.742,498,2.742,499,2.578,500,2.578,501,2.021,502,2.578,503,2.578,504,2.578,505,2.578,506,3.571,507,2.021,508,1.939,509,3.377,510,2.742,511,2.742,512,2.439,513,2.742,514,2.742,515,4.182,516,2.316,517,2.686,518,3.618,519,4.182,520,2.742,521,3.078,522,3.685,523,3.326,524,2.578,525,2.742,526,2.742,527,2.11,528,3.618,529,2.11,530,2.209,531,1.611,532,2.742,533,1.939,534,2.742,535,2.11,536,2.578,537,2.021,538,2.578,539,2.742,540,2.578,541,2.742,542,2.742,543,2.742,544,2.742,545,3.797,546,2.742,547,2.208,548,2.742,549,2.395,550,2.578,551,1.939,552,2.578,553,2.578,554,2.578,555,2.021,556,2.922,557,2.11,558,2.742,559,2.742,560,2.742,561,2.742,1004,3.571,1056,5.16]],["title/classes/CrudRoutesFactory.html",[133,0.176,884,2.529]],["body/classes/CrudRoutesFactory.html",[3,0.062,4,0.05,5,0.056,7,0.102,8,0.538,9,1.002,10,0.557,11,0.31,14,0.509,15,0.574,17,0.509,18,1.011,19,0.325,20,0.012,21,0.425,23,0.561,24,0.494,25,0.179,26,0.152,27,0.162,28,0.003,37,0.003,40,1.245,116,0.583,132,0.005,133,0.27,135,0.712,136,3.258,140,1.193,144,0.87,147,1.387,149,1.363,179,0.759,184,2.106,186,1.445,187,1.314,199,0.63,202,1.509,206,2.363,214,0.972,237,3.358,260,1.574,263,1.722,267,0.759,268,0.759,287,1.642,297,0.609,322,0.735,323,0.785,345,3.2,367,2.255,403,1.918,436,1.274,437,1.414,450,3.53,468,2.224,480,1.578,481,1.578,488,3.279,490,1.609,491,1.786,492,1.786,493,1.1,494,3.496,501,2.487,507,2.487,508,1.642,517,3.086,518,2.596,522,3.437,523,1.642,527,1.1,528,2.255,529,1.1,530,1.805,531,2.46,549,2.34,551,2.625,555,3.417,556,3.059,557,1.786,578,1.519,792,1.271,793,4.857,794,1.344,795,2.064,797,1.1,799,1.429,801,1.207,802,2.756,803,1.271,804,1.271,805,1.271,806,1.271,807,2.321,808,1.271,809,3.374,810,2.321,811,2.931,812,2.321,813,2.321,814,1.429,815,3.974,816,1.429,817,1.429,818,1.429,819,1.429,820,2.321,821,1.429,822,3.358,823,2.321,824,1.429,825,2.321,826,2.183,827,1.429,828,1.961,829,1.429,830,1.429,831,1.429,832,1.429,833,1.786,834,1.429,835,2.321,836,1.429,837,1.429,838,2.321,839,1.429,840,1.429,841,1.429,842,1.429,843,1.429,844,1.429,845,1.429,846,3.374,847,1.344,848,2.756,849,2.607,850,1.429,851,1.207,852,1.429,853,1.429,854,1.429,855,2.931,856,2.321,857,1.429,858,1.207,859,1.271,860,1.429,861,1.429,862,1.271,863,1.429,864,1.429,865,2.321,866,1.429,867,1.429,868,2.321,869,1.429,870,1.429,871,2.321,872,1.429,873,1.429,874,1.429,875,1.429,876,1.429,877,1.429,878,1.429,879,1.429,880,2.321,881,1.429,882,2.183,883,1.344,884,3.001,885,3.535,886,1.429,887,2.931,888,1.429,889,1.271,890,1.429,891,1.429,892,4.188,893,2.931,894,2.321,895,2.321,896,1.429,897,2.931,898,1.429,899,2.931,900,1.429,901,4.51,902,1.429,903,2.756,904,2.931,905,1.429,906,1.429,907,1.429,908,1.429,909,1.429,910,2.321,911,2.931,912,1.429,913,1.429,914,2.321,915,1.429,916,1.429,917,3.374,918,2.321,919,3.374,920,1.429,921,1.429,922,2.321,923,1.429,924,1.429,925,1.429,926,2.321,927,1.429,928,1.429,929,2.321,930,2.931,931,1.429,932,1.429,933,2.931,934,1.429,935,1.429,936,1.429,937,2.321,938,1.429,939,1.429,940,2.321,941,1.429,942,1.429,943,2.321,944,1.429,945,1.429,946,1.429,947,2.321,948,1.429,949,1.429,950,3.374,951,1.429,952,1.429,953,1.429,954,1.429,955,1.429,956,1.429,957,1.429,958,1.429,959,1.429,960,1.429,961,1.429,962,1.429,963,1.429,964,1.429,965,1.429,966,2.321,967,2.321,968,1.429,969,2.321,970,1.429,971,1.429,972,2.321,973,1.429,974,1.429,975,2.321,976,1.429,977,2.321,978,1.429,979,1.429,1057,3.396,1058,3.396,1059,3.396,1060,3.396,1061,2.091,1062,3.396,1063,2.091,1064,2.091,1065,2.091,1066,2.091,1067,2.091,1068,2.091,1069,2.091,1070,2.091,1071,2.091,1072,2.091,1073,2.091,1074,2.091,1075,2.091,1076,2.091,1077,2.091,1078,2.091,1079,2.091]],["title/classes/CrudService.html",[133,0.176,1080,2.844]],["body/classes/CrudService.html",[3,0.091,4,0.073,5,0.082,7,0.149,9,1.187,11,1.215,14,1.112,17,1.112,18,1.175,19,0.307,20,0.012,21,1.233,23,0.5,25,0.232,26,0.222,27,0.091,28,0.007,37,0.01,116,0.555,132,0.006,133,0.129,135,1.041,144,2.275,146,4.539,147,1.376,149,1.615,164,4.756,186,1.622,187,1.216,199,0.847,202,1.615,260,1.615,297,1.332,313,3.714,332,2.588,355,1.228,356,2.437,365,2.649,419,4.444,423,1.368,427,2.09,429,2.196,436,1.147,437,1.008,454,1.186,455,2.426,457,2.551,467,3.325,472,1.765,480,1.421,481,1.421,486,2.426,530,1.292,531,2.437,533,2.934,535,2.403,537,2.302,547,2.514,562,3.192,574,1.608,585,2.209,602,3.192,619,2.09,738,1.859,757,3.625,761,1.272,797,2.877,833,2.403,849,4.142,851,3.504,885,2.777,982,4.006,983,4,984,4.444,985,3.122,986,5.312,987,4,988,3.625,989,4.147,990,3.122,991,3.122,993,3.738,995,4,996,5.312,997,4.147,998,4,999,4.006,1000,4,1001,2.936,1007,4.174,1009,3.75,1013,3.122,1018,3.122,1019,3.346,1023,2.777,1024,3.346,1033,2.677,1034,1.859,1035,2.677,1039,2.239,1080,3.122,1081,2.677,1082,4,1083,3.625,1084,3.122,1085,3.346,1086,2.426,1087,4.815,1088,3.057,1089,3.057,1090,5.996,1091,3.057,1092,5.533,1093,5.407,1094,3.625,1095,3.057,1096,3.122,1097,3.057,1098,3.625,1099,3.057,1100,3.346,1101,3.057,1102,3.057,1103,3.625,1104,3.057,1105,2.677,1106,2.677,1107,3.057,1108,4.815,1109,3.057,1110,2.239,1111,3.057,1112,3.057,1113,2.677,1114,2.677,1115,3.057,1116,3.057,1117,4.568,1118,2.677]],["title/classes/CustomQueryBuilder.html",[133,0.176,441,2.529]],["body/classes/CustomQueryBuilder.html",[3,0.122,4,0.097,5,0.109,7,0.198,8,0.889,9,0.918,11,0.604,14,1.828,17,0.991,18,1.26,19,0.325,20,0.012,25,0.185,27,0.168,28,0.005,36,0.962,37,0.009,51,1.366,116,0.429,132,0.008,135,1.386,146,4.13,147,1.454,149,1.249,184,2.818,186,1.389,199,1.041,202,1.541,260,1.541,263,1.635,267,2.637,268,2.637,313,2.953,322,1.431,323,2.725,324,1.893,332,2.541,365,2.887,430,4.391,437,2.476,441,4.837,454,1.58,457,1.431,464,2.254,468,1.478,472,2.352,476,2.352,477,2.241,478,2.476,530,1.587,622,3.413,738,2.476,761,2.88,883,4.13,1037,3.566,1110,2.983,1119,3.232,1120,6.424,1121,6.424,1122,6.424,1123,6.424,1124,5.614,1125,6.924,1126,6.924,1127,5.614,1128,4.072,1129,4.072,1130,4.072,1131,4.072,1132,5.614,1133,5.495,1134,4.072,1135,4.072,1136,4.072,1137,4.072,1138,5.614,1139,7.955,1140,4.072,1141,4.072,1142,3.566,1143,4.455,1144,3.566,1145,2.983,1146,3.566,1147,3.566,1148,4.072,1149,4.455,1150,4.072,1151,4.072,1152,4.072,1153,4.072,1154,4.072,1155,4.072,1156,4.072,1157,4.072,1158,4.072,1159,6.424,1160,6.924,1161,4.072,1162,4.072,1163,5.614,1164,4.072,1165,4.072]],["title/modules/DatabaseModule.html",[209,1.671,221,2.844]],["body/modules/DatabaseModule.html",[3,0.161,4,0.129,5,0.145,20,0.012,25,0.271,26,0.393,27,0.231,28,0.007,37,0.007,53,1.644,132,0.009,133,0.228,186,1.292,187,1.437,209,3.104,211,2.719,216,2.97,217,2.97,221,4.618,254,4.948,260,1.771,263,2.713,284,3.022,290,4.282,332,1.672,383,4.282,454,2.621,457,2.374,471,4.282,538,4.343,575,3.553,828,3.116,984,4.948,1105,4.724,1106,4.724,1166,4.282,1167,6.457,1168,5.829,1169,5.396,1170,4.724,1171,5.396,1172,5.361,1173,4.724,1174,4.724,1175,4.724,1176,5.853,1177,4.724,1178,4.724,1179,4.282,1180,4.724,1181,4.724,1182,4.724,1183,4.724,1184,4.724]],["title/modules/EmailModule.html",[209,1.671,1185,2.844]],["body/modules/EmailModule.html",[3,0.177,4,0.142,5,0.159,20,0.012,25,0.253,26,0.431,27,0.177,28,0.008,37,0.008,132,0.01,133,0.251,187,1.578,197,2.755,209,3.283,211,2.986,212,3.118,213,3.423,214,2.755,215,3.118,216,4.232,217,4.232,225,4.133,226,3.423,227,3.262,231,4.341,240,5.68,241,3.604,356,2.874,1185,5.744,1186,5.19,1187,5.19,1188,5.19,1189,5.563,1190,5.927,1191,5.927]],["title/classes/EmailScheduleDto.html",[133,0.176,1192,2.844]],["body/classes/EmailScheduleDto.html",[3,0.176,4,0.141,5,0.158,7,0.287,8,1.128,19,0.337,20,0.012,23,0.775,25,0.194,27,0.176,28,0.008,37,0.008,52,2.694,111,2.528,132,0.01,133,0.301,135,2.003,147,1.477,150,3.564,346,3.563,347,2.632,568,3.862,617,5.239,1192,4.87,1193,5.151,1194,7.665,1195,7.665,1196,7.125,1197,5.883,1198,6.083,1199,5.883,1200,5.883,1201,5.883]],["title/controllers/EmailSchedulingController.html",[195,1.794,1202,3.047]],["body/controllers/EmailSchedulingController.html",[3,0.176,4,0.141,5,0.159,7,0.288,9,0.966,19,0.25,20,0.012,25,0.262,26,0.43,27,0.176,28,0.008,37,0.008,116,0.451,132,0.01,133,0.25,140,2.075,147,1.095,149,1.314,150,2.642,172,2.144,195,2.546,197,2.745,199,1.324,202,1.314,203,3.59,206,1.83,332,2.379,340,3.796,341,3.796,356,2.371,365,2.216,436,2.216,747,3.796,1192,5.452,1202,5.23,1203,5.171,1204,6.253,1205,5.171,1206,7.141,1207,5.905,1208,6.253,1209,5.171,1210,4.935,1211,5.171,1212,5.905,1213,5.905,1214,5.171,1215,5.905,1216,5.905]],["title/modules/EmailSchedulingModule.html",[209,1.671,222,2.844]],["body/modules/EmailSchedulingModule.html",[3,0.175,4,0.14,5,0.158,20,0.012,25,0.262,26,0.427,27,0.175,28,0.008,37,0.008,132,0.01,133,0.248,187,1.564,197,3.308,209,3.275,211,2.959,212,3.089,213,3.391,214,2.73,215,3.089,216,4.215,217,3.232,222,5.784,225,4.11,226,3.391,227,3.232,231,5.213,356,2.858,1185,5.665,1202,5.609,1210,5.328,1211,5.142,1214,6.232,1217,5.142,1218,5.142,1219,5.873,1220,5.873,1221,5.873,1222,5.873]],["title/injectables/EmailSchedulingService.html",[389,1.176,1210,2.674]],["body/injectables/EmailSchedulingService.html",[3,0.16,4,0.128,5,0.144,7,0.261,8,1.064,9,1.099,19,0.284,20,0.012,25,0.261,26,0.389,27,0.16,28,0.007,37,0.007,52,1.88,111,1.764,116,0.513,132,0.009,133,0.226,144,2.795,147,1.362,149,1.495,179,2.798,199,1.246,202,1.191,245,3.657,260,1.495,332,2.277,355,2.699,389,1.9,390,2.487,436,2.521,437,1.764,670,3.657,683,6.116,699,6.116,701,6.433,707,5.831,746,4.685,765,4.685,767,4.685,1189,5.209,1192,5.267,1204,5.884,1205,5.884,1208,4.685,1209,4.685,1210,4.32,1223,4.685,1224,5.35,1225,6.72,1226,5.35,1227,6.72,1228,5.35,1229,5.35,1230,5.35,1231,5.35,1232,6.72,1233,5.35,1234,5.35,1235,5.35,1236,5.35,1237,5.35,1238,5.35]],["title/injectables/EmailService.html",[389,1.176,1189,2.674]],["body/injectables/EmailService.html",[3,0.178,4,0.143,5,0.16,7,0.291,9,1.176,19,0.252,20,0.012,25,0.237,26,0.435,27,0.178,28,0.008,37,0.008,116,0.549,132,0.01,133,0.252,144,2.99,147,1.333,149,1.6,199,1.333,202,1.329,237,3.141,241,3.631,355,2.398,374,6.094,389,2.033,390,2.776,436,2.241,450,3.477,795,3.631,889,3.631,903,3.839,1189,4.622,1239,5.229,1240,7.19,1241,5.229,1242,5.972,1243,7.19,1244,5.972,1245,5.229,1246,3.449,1247,5.972]],["title/injectables/ExcludeNullUndefinedInterceptor.html",[389,1.176,1248,3.302]],["body/injectables/ExcludeNullUndefinedInterceptor.html",[3,0.139,4,0.111,5,0.125,7,0.226,9,0.759,19,0.196,20,0.012,23,0.561,25,0.226,26,0.338,27,0.139,28,0.006,36,1.794,37,0.006,40,1.406,116,0.355,132,0.008,133,0.29,146,3.942,147,0.861,149,1.033,184,1.801,186,1.453,187,1.633,199,1.355,202,1.033,267,1.685,268,1.685,297,1.353,322,2.669,323,1.742,324,2.157,389,1.734,390,2.157,437,2.664,470,3.541,478,2.822,480,2.85,481,2.85,490,2.301,530,1.942,540,2.984,636,3.728,761,2.55,1004,3.942,1145,4.491,1147,4.064,1246,3.541,1248,4.866,1249,4.866,1250,3.684,1251,6.132,1252,4.191,1253,6.132,1254,4.491,1255,4.866,1256,5.015,1257,5.714,1258,4.642,1259,5.35,1260,3.942,1261,4.491,1262,4.218,1263,4.993,1264,4.993,1265,4.191,1266,4.491,1267,3.942,1268,4.618,1269,4.491,1270,4.491,1271,4.491,1272,2.68,1273,4.191,1274,3.173,1275,4.064,1276,4.064,1277,4.064,1278,5.369,1279,4.642,1280,4.642,1281,4.642,1282,4.642,1283,4.642,1284,4.642,1285,4.642,1286,4.064]],["title/interfaces/Follower.html",[0,0.23,128,1.416]],["body/interfaces/Follower.html",[0,0.465,1,2.587,2,0.904,3,0.108,4,0.086,5,0.097,6,1.266,7,0.176,8,0.816,10,0.959,11,0.764,12,1.863,13,1.596,14,0.877,15,0.989,16,1.413,17,0.877,18,1.366,19,0.321,20,0.012,21,1.047,22,2.046,23,0.8,24,1.42,25,0.119,26,0.262,27,0.253,28,0.007,29,1.753,30,1.753,31,1.753,32,1.753,33,1.753,34,1.753,35,1.753,36,1.55,37,0.007,38,2.789,39,1.352,40,1.704,41,1.352,42,1.352,43,1.352,44,1.352,45,1.352,46,1.352,47,1.266,48,1.352,49,1.352,50,1.188,51,2.037,52,1.266,53,0.877,54,1.933,55,1.352,56,2.183,57,1.352,58,1.352,59,1.352,60,1.352,61,1.352,62,1.352,63,1.352,64,1.352,65,1.352,66,1.352,67,1.352,68,2.709,69,1.933,70,1.352,71,1.352,72,1.352,73,2.381,74,1.352,75,1.352,76,1.933,77,1.352,78,1.352,79,1.352,80,1.352,81,1.352,82,2.306,83,1.352,84,1.81,85,1.81,86,1.352,87,1.352,88,1.352,89,1.352,90,1.352,91,1.352,92,1.352,93,1.352,94,1.352,95,1.933,96,1.352,97,1.352,98,1.352,99,1.266,100,1.352,101,1.352,102,2.306,103,1.352,104,1.352,105,1.352,106,1.352,107,1.352,108,1.352,109,1.352,110,1.352,111,1.188,112,1.352,113,1.352,114,1.352,115,1.352,116,0.275,117,1.352,118,1.352,119,1.352,120,1.352,121,1.352,122,1.266,123,2.113,124,1.352,125,1.352,126,1.352,127,1.81,128,2.046,129,2.462,130,2.462,131,2.462,132,0.007]],["title/interfaces/GetAppLaunchData.html",[0,0.23,29,1.416]],["body/interfaces/GetAppLaunchData.html",[0,0.467,1,2.688,2,0.93,3,0.111,4,0.089,5,0.1,6,1.303,7,0.181,8,0.833,10,0.987,11,0.78,12,1.893,13,1.629,14,0.903,15,1.017,16,1.443,17,0.903,18,1.365,19,0.281,20,0.012,21,1.069,22,2.079,23,0.799,24,1.443,25,0.122,26,0.27,27,0.254,28,0.007,29,2.079,30,1.789,31,1.789,32,1.789,33,1.789,34,1.789,35,1.789,36,1.57,37,0.007,38,2.963,39,1.391,40,1.811,41,1.391,42,1.391,43,1.391,44,1.391,45,1.391,46,1.391,47,1.303,48,1.391,49,1.391,50,1.223,51,2.006,52,1.303,53,0.903,54,1.973,55,1.391,56,2.218,57,1.391,58,1.391,59,1.391,60,1.391,61,1.391,62,1.391,63,1.391,64,1.391,65,1.391,66,1.391,67,1.391,68,2.292,69,1.973,70,1.391,71,1.391,72,1.391,73,2.014,74,1.391,75,1.391,76,1.973,77,1.391,78,1.391,79,1.391,80,1.391,81,1.391,82,2.336,83,1.391,84,1.848,85,1.848,86,1.391,87,1.391,88,1.391,89,1.391,90,1.391,91,1.391,92,1.391,93,1.391,94,1.391,95,1.973,96,1.391,97,1.391,98,1.391,99,1.303,100,1.391,101,1.391,102,2.336,103,1.391,104,1.391,105,1.391,106,1.391,107,1.391,108,1.391,109,1.391,110,1.391,111,1.223,112,1.391,113,1.391,114,1.391,115,1.391,116,0.283,117,1.391,118,1.391,119,1.391,120,1.391,121,1.391,122,1.303,123,2.147,124,1.391,125,1.391,126,1.391,127,1.848,128,1.789,129,1.391,130,1.391,131,1.391,132,0.007]],["title/interfaces/GetComments.html",[0,0.23,32,1.416]],["body/interfaces/GetComments.html",[0,0.467,1,2.688,2,0.93,3,0.111,4,0.089,5,0.1,6,1.303,7,0.181,8,0.833,10,0.987,11,0.78,12,1.893,13,1.629,14,0.903,15,1.017,16,1.443,17,0.903,18,1.365,19,0.281,20,0.012,21,1.069,22,2.079,23,0.799,24,1.443,25,0.122,26,0.27,27,0.254,28,0.007,29,1.789,30,1.789,31,1.789,32,2.079,33,1.789,34,1.789,35,1.789,36,1.57,37,0.007,38,2.963,39,1.391,40,1.811,41,1.391,42,1.391,43,1.391,44,1.391,45,1.391,46,1.391,47,1.303,48,1.391,49,1.391,50,1.223,51,2.006,52,1.303,53,0.903,54,1.973,55,1.391,56,2.218,57,1.391,58,1.391,59,1.391,60,1.391,61,1.391,62,1.391,63,1.391,64,1.391,65,1.391,66,1.391,67,1.391,68,2.292,69,1.973,70,1.391,71,1.391,72,1.391,73,2.014,74,1.391,75,1.391,76,1.973,77,1.391,78,1.391,79,1.391,80,1.391,81,1.391,82,2.336,83,1.391,84,1.848,85,1.848,86,1.391,87,1.391,88,1.391,89,1.391,90,1.391,91,1.391,92,1.391,93,1.391,94,1.391,95,1.973,96,1.391,97,1.391,98,1.391,99,1.303,100,1.391,101,1.391,102,2.336,103,1.391,104,1.391,105,1.391,106,1.391,107,1.391,108,1.391,109,1.391,110,1.391,111,1.223,112,1.391,113,1.391,114,1.391,115,1.391,116,0.283,117,1.391,118,1.391,119,1.391,120,1.391,121,1.391,122,1.303,123,2.147,124,1.391,125,1.391,126,1.391,127,1.848,128,1.789,129,1.391,130,1.391,131,1.391,132,0.007]],["title/interfaces/GetFollowers.html",[0,0.23,34,1.416]],["body/interfaces/GetFollowers.html",[0,0.467,1,2.688,2,0.93,3,0.111,4,0.089,5,0.1,6,1.303,7,0.181,8,0.833,10,0.987,11,0.78,12,1.893,13,1.629,14,0.903,15,1.017,16,1.443,17,0.903,18,1.365,19,0.281,20,0.012,21,1.069,22,2.079,23,0.799,24,1.443,25,0.122,26,0.27,27,0.254,28,0.007,29,1.789,30,1.789,31,1.789,32,1.789,33,1.789,34,2.079,35,1.789,36,1.57,37,0.007,38,2.963,39,1.391,40,1.811,41,1.391,42,1.391,43,1.391,44,1.391,45,1.391,46,1.391,47,1.303,48,1.391,49,1.391,50,1.223,51,2.006,52,1.303,53,0.903,54,1.973,55,1.391,56,2.218,57,1.391,58,1.391,59,1.391,60,1.391,61,1.391,62,1.391,63,1.391,64,1.391,65,1.391,66,1.391,67,1.391,68,2.292,69,1.973,70,1.391,71,1.391,72,1.391,73,2.014,74,1.391,75,1.391,76,1.973,77,1.391,78,1.391,79,1.391,80,1.391,81,1.391,82,2.336,83,1.391,84,1.848,85,1.848,86,1.391,87,1.391,88,1.391,89,1.391,90,1.391,91,1.391,92,1.391,93,1.391,94,1.391,95,1.973,96,1.391,97,1.391,98,1.391,99,1.303,100,1.391,101,1.391,102,2.336,103,1.391,104,1.391,105,1.391,106,1.391,107,1.391,108,1.391,109,1.391,110,1.391,111,1.223,112,1.391,113,1.391,114,1.391,115,1.391,116,0.283,117,1.391,118,1.391,119,1.391,120,1.391,121,1.391,122,1.303,123,2.147,124,1.391,125,1.391,126,1.391,127,1.848,128,1.789,129,1.391,130,1.391,131,1.391,132,0.007]],["title/interfaces/GetFollowing.html",[0,0.23,35,1.416]],["body/interfaces/GetFollowing.html",[0,0.467,1,2.688,2,0.93,3,0.111,4,0.089,5,0.1,6,1.303,7,0.181,8,0.833,10,0.987,11,0.78,12,1.893,13,1.629,14,0.903,15,1.017,16,1.443,17,0.903,18,1.365,19,0.281,20,0.012,21,1.069,22,2.079,23,0.799,24,1.443,25,0.122,26,0.27,27,0.254,28,0.007,29,1.789,30,1.789,31,1.789,32,1.789,33,1.789,34,1.789,35,2.079,36,1.57,37,0.007,38,2.963,39,1.391,40,1.811,41,1.391,42,1.391,43,1.391,44,1.391,45,1.391,46,1.391,47,1.303,48,1.391,49,1.391,50,1.223,51,2.006,52,1.303,53,0.903,54,1.973,55,1.391,56,2.218,57,1.391,58,1.391,59,1.391,60,1.391,61,1.391,62,1.391,63,1.391,64,1.391,65,1.391,66,1.391,67,1.391,68,2.292,69,1.973,70,1.391,71,1.391,72,1.391,73,2.014,74,1.391,75,1.391,76,1.973,77,1.391,78,1.391,79,1.391,80,1.391,81,1.391,82,2.336,83,1.391,84,1.848,85,1.848,86,1.391,87,1.391,88,1.391,89,1.391,90,1.391,91,1.391,92,1.391,93,1.391,94,1.391,95,1.973,96,1.391,97,1.391,98,1.391,99,1.303,100,1.391,101,1.391,102,2.336,103,1.391,104,1.391,105,1.391,106,1.391,107,1.391,108,1.391,109,1.391,110,1.391,111,1.223,112,1.391,113,1.391,114,1.391,115,1.391,116,0.283,117,1.391,118,1.391,119,1.391,120,1.391,121,1.391,122,1.303,123,2.147,124,1.391,125,1.391,126,1.391,127,1.848,128,1.789,129,1.391,130,1.391,131,1.391,132,0.007]],["title/interfaces/GetManyDefaultResponse.html",[0,0.23,508,2.012]],["body/interfaces/GetManyDefaultResponse.html",[0,0.407,2,1.059,3,0.126,4,0.101,5,0.113,7,0.206,8,0.911,10,1.872,11,1.043,14,1.711,15,1.929,17,1.711,18,1.335,19,0.334,20,0.012,21,1.429,23,0.711,25,0.189,26,0.307,27,0.242,28,0.006,36,1.36,37,0.006,51,1.891,116,0.44,132,0.008,136,1.821,140,1.484,184,2.233,186,1.252,260,1.565,267,2.09,268,2.09,287,2.042,322,2.023,323,2.16,324,1.963,457,1.484,468,1.533,476,2.439,477,2.325,488,2.042,489,2.325,490,1.585,491,2.222,492,2.222,493,3.027,494,2.9,495,3.934,496,3.934,497,2.887,498,2.887,499,2.715,500,2.715,501,2.128,502,2.715,503,2.715,504,2.715,505,2.715,506,3.7,507,2.128,508,2.783,509,3.499,510,2.887,511,2.887,512,2.568,513,2.887,514,2.887,515,3.499,516,2.439,517,2.042,518,2.222,519,2.568,520,2.887,521,1.89,522,3.727,523,2.042,524,2.715,525,2.887,526,2.887,527,2.222,528,2.222,529,2.222,530,2.236,531,1.696,532,2.887,533,2.042,534,2.887,535,2.222,536,2.715,537,2.128,538,2.715,539,2.887,540,2.715,541,2.887,542,2.887,543,2.887,544,2.887,545,3.934,546,2.887,547,2.325,548,2.887,549,2.481,550,2.715,551,2.042,552,2.715,553,2.715,554,2.715,555,2.128,556,3.027,557,2.222,558,2.887,559,2.887,560,2.887,561,2.887]],["title/interfaces/GetRescueList.html",[0,0.23,33,1.416]],["body/interfaces/GetRescueList.html",[0,0.467,1,2.688,2,0.93,3,0.111,4,0.089,5,0.1,6,1.303,7,0.181,8,0.833,10,0.987,11,0.78,12,1.893,13,1.629,14,0.903,15,1.017,16,1.443,17,0.903,18,1.365,19,0.281,20,0.012,21,1.069,22,2.079,23,0.799,24,1.443,25,0.122,26,0.27,27,0.254,28,0.007,29,1.789,30,1.789,31,1.789,32,1.789,33,2.079,34,1.789,35,1.789,36,1.57,37,0.007,38,2.963,39,1.391,40,1.811,41,1.391,42,1.391,43,1.391,44,1.391,45,1.391,46,1.391,47,1.303,48,1.391,49,1.391,50,1.223,51,2.006,52,1.303,53,0.903,54,1.973,55,1.391,56,2.218,57,1.391,58,1.391,59,1.391,60,1.391,61,1.391,62,1.391,63,1.391,64,1.391,65,1.391,66,1.391,67,1.391,68,2.292,69,1.973,70,1.391,71,1.391,72,1.391,73,2.014,74,1.391,75,1.391,76,1.973,77,1.391,78,1.391,79,1.391,80,1.391,81,1.391,82,2.336,83,1.391,84,1.848,85,1.848,86,1.391,87,1.391,88,1.391,89,1.391,90,1.391,91,1.391,92,1.391,93,1.391,94,1.391,95,1.973,96,1.391,97,1.391,98,1.391,99,1.303,100,1.391,101,1.391,102,2.336,103,1.391,104,1.391,105,1.391,106,1.391,107,1.391,108,1.391,109,1.391,110,1.391,111,1.223,112,1.391,113,1.391,114,1.391,115,1.391,116,0.283,117,1.391,118,1.391,119,1.391,120,1.391,121,1.391,122,1.303,123,2.147,124,1.391,125,1.391,126,1.391,127,1.848,128,1.789,129,1.391,130,1.391,131,1.391,132,0.007]],["title/interfaces/GetUserPosts.html",[0,0.23,31,1.416]],["body/interfaces/GetUserPosts.html",[0,0.467,1,2.688,2,0.93,3,0.111,4,0.089,5,0.1,6,1.303,7,0.181,8,0.833,10,0.987,11,0.78,12,1.893,13,1.629,14,0.903,15,1.017,16,1.443,17,0.903,18,1.365,19,0.281,20,0.012,21,1.069,22,2.079,23,0.799,24,1.443,25,0.122,26,0.27,27,0.254,28,0.007,29,1.789,30,1.789,31,2.079,32,1.789,33,1.789,34,1.789,35,1.789,36,1.57,37,0.007,38,2.963,39,1.391,40,1.811,41,1.391,42,1.391,43,1.391,44,1.391,45,1.391,46,1.391,47,1.303,48,1.391,49,1.391,50,1.223,51,2.006,52,1.303,53,0.903,54,1.973,55,1.391,56,2.218,57,1.391,58,1.391,59,1.391,60,1.391,61,1.391,62,1.391,63,1.391,64,1.391,65,1.391,66,1.391,67,1.391,68,2.292,69,1.973,70,1.391,71,1.391,72,1.391,73,2.014,74,1.391,75,1.391,76,1.973,77,1.391,78,1.391,79,1.391,80,1.391,81,1.391,82,2.336,83,1.391,84,1.848,85,1.848,86,1.391,87,1.391,88,1.391,89,1.391,90,1.391,91,1.391,92,1.391,93,1.391,94,1.391,95,1.973,96,1.391,97,1.391,98,1.391,99,1.303,100,1.391,101,1.391,102,2.336,103,1.391,104,1.391,105,1.391,106,1.391,107,1.391,108,1.391,109,1.391,110,1.391,111,1.223,112,1.391,113,1.391,114,1.391,115,1.391,116,0.283,117,1.391,118,1.391,119,1.391,120,1.391,121,1.391,122,1.303,123,2.147,124,1.391,125,1.391,126,1.391,127,1.848,128,1.789,129,1.391,130,1.391,131,1.391,132,0.007]],["title/interfaces/GetUserProfile.html",[0,0.23,30,1.416]],["body/interfaces/GetUserProfile.html",[0,0.467,1,2.688,2,0.93,3,0.111,4,0.089,5,0.1,6,1.303,7,0.181,8,0.833,10,0.987,11,0.78,12,1.893,13,1.629,14,0.903,15,1.017,16,1.443,17,0.903,18,1.365,19,0.281,20,0.012,21,1.069,22,2.079,23,0.799,24,1.443,25,0.122,26,0.27,27,0.254,28,0.007,29,1.789,30,2.079,31,1.789,32,1.789,33,1.789,34,1.789,35,1.789,36,1.57,37,0.007,38,2.963,39,1.391,40,1.811,41,1.391,42,1.391,43,1.391,44,1.391,45,1.391,46,1.391,47,1.303,48,1.391,49,1.391,50,1.223,51,2.006,52,1.303,53,0.903,54,1.973,55,1.391,56,2.218,57,1.391,58,1.391,59,1.391,60,1.391,61,1.391,62,1.391,63,1.391,64,1.391,65,1.391,66,1.391,67,1.391,68,2.292,69,1.973,70,1.391,71,1.391,72,1.391,73,2.014,74,1.391,75,1.391,76,1.973,77,1.391,78,1.391,79,1.391,80,1.391,81,1.391,82,2.336,83,1.391,84,1.848,85,1.848,86,1.391,87,1.391,88,1.391,89,1.391,90,1.391,91,1.391,92,1.391,93,1.391,94,1.391,95,1.973,96,1.391,97,1.391,98,1.391,99,1.303,100,1.391,101,1.391,102,2.336,103,1.391,104,1.391,105,1.391,106,1.391,107,1.391,108,1.391,109,1.391,110,1.391,111,1.223,112,1.391,113,1.391,114,1.391,115,1.391,116,0.283,117,1.391,118,1.391,119,1.391,120,1.391,121,1.391,122,1.303,123,2.147,124,1.391,125,1.391,126,1.391,127,1.848,128,1.789,129,1.391,130,1.391,131,1.391,132,0.007]],["title/controllers/HealthController.html",[195,1.794,230,3.047]],["body/controllers/HealthController.html",[3,0.124,4,0.099,5,0.112,7,0.203,9,0.931,11,0.617,18,1.159,19,0.295,20,0.012,23,0.594,25,0.259,26,0.303,27,0.124,28,0.006,37,0.006,116,0.435,132,0.008,133,0.176,140,1.461,143,3.045,144,1.729,147,1.357,149,1.267,150,2.547,172,1.509,186,1.336,195,1.792,197,1.932,199,1.056,202,1.628,203,2.528,206,1.288,230,5.115,232,6.115,233,4.985,235,5.686,236,2.842,237,3.416,238,6.615,241,2.528,247,3.299,260,0.925,267,2.656,268,2.656,293,4.985,297,1.212,320,3.64,322,1.461,323,2.745,324,1.932,325,3.299,326,3.299,327,3.299,328,3.299,329,3.64,355,2.608,374,4.17,480,1.932,481,1.932,622,3.462,676,5.686,752,3.64,753,4.985,761,2.905,795,3.462,796,3.64,882,2.672,889,2.528,1056,3.66,1143,5.543,1149,5.543,1268,3.948,1272,2.401,1273,2.842,1274,2.842,1287,3.64,1288,5.694,1289,7.316,1290,4.157,1291,4.157,1292,5.694,1293,4.157,1294,6.494,1295,4.157,1296,4.157,1297,5.694,1298,4.157,1299,4.157,1300,4.157,1301,5.694,1302,5.694,1303,5.694,1304,6.985,1305,5.686,1306,4.157,1307,4.157,1308,4.157,1309,5.694,1310,4.157,1311,4.157,1312,5.694,1313,4.157,1314,4.157,1315,4.157,1316,4.157,1317,4.157,1318,4.157,1319,4.157,1320,4.157,1321,4.157,1322,4.985,1323,5.694,1324,4.157,1325,4.157,1326,5.694,1327,5.694,1328,4.157,1329,4.157,1330,4.157,1331,4.157,1332,4.157,1333,4.157,1334,4.157]],["title/interfaces/IBaseModel.html",[0,0.23,425,3.047]],["body/interfaces/IBaseModel.html",[0,0.275,2,1.248,3,0.149,4,0.119,5,0.134,7,0.242,8,1.016,9,1.049,11,0.738,18,1.188,19,0.317,20,0.012,23,0.587,25,0.247,27,0.192,28,0.007,36,1.175,37,0.009,132,0.009,133,0.21,139,3.198,179,1.806,180,3.4,186,1.227,206,1.988,267,1.806,268,1.806,297,1.45,322,1.748,323,1.867,324,2.312,332,1.988,358,2.405,365,2.407,403,2.226,423,2.226,424,3.948,425,5.201,426,5.823,427,5.435,428,4.699,429,3.118,430,3.4,431,5.823,433,3.643,438,3.643,441,4.317,444,3.024,445,3.901,446,4.561,450,3.102,451,3.643,453,4.699,454,2.911,455,3.948,456,4.356,457,1.748,458,4.356,459,5.617,460,3.643,461,5.617,462,3.948,463,3.643,464,1.998,465,4.356,466,3.198,467,3.024,468,2.329,469,4.356,470,2.873,471,3.948,472,2.873,473,4.356,474,4.356,475,4.356,476,2.873,477,2.738,478,3.024,479,4.356,480,2.312,481,2.312,482,4.356,483,4.356,484,3.198,485,4.356,486,3.948,487,4.356]],["title/interfaces/ICrudService.html",[0,0.23,993,2.844]],["body/interfaces/ICrudService.html",[0,0.386,2,1.203,3,0.143,4,0.115,5,0.129,7,0.234,9,1.288,11,1.097,18,1.302,19,0.333,20,0.012,21,1.418,23,0.638,25,0.158,27,0.143,28,0.006,37,0.006,116,0.601,132,0.008,147,1.487,149,1.752,187,1.277,199,1.162,202,1.785,236,3.278,313,4.469,356,1.926,429,2.802,472,2.769,531,2.971,533,3.577,797,3.67,985,4.282,989,5.381,990,5.057,991,5.057,993,4.282,1009,4.333,1013,4.282,1018,4.282,1023,3.809,1034,2.915,1082,5.485,1084,5.057,1085,5.622,1096,4.282,1100,3.512,1335,4.198,1336,6.264,1337,5.485,1338,4.795,1339,4.795,1340,4.795,1341,4.795,1342,4.795,1343,4.795,1344,4.795]],["title/interfaces/IPaginationResult.html",[0,0.23,1034,2.529]],["body/interfaces/IPaginationResult.html",[0,0.373,2,1.123,3,0.134,4,0.107,5,0.12,7,0.218,8,0.948,9,1.178,11,1.068,12,2.393,13,2.393,14,1.753,16,1.976,17,1.09,18,1.269,19,0.343,20,0.012,21,1.464,22,2.451,23,0.733,24,1.701,25,0.247,26,0.326,27,0.201,28,0.006,37,0.006,40,1.373,132,0.008,133,0.285,142,3.64,151,5.715,172,1.626,187,1.192,347,2.004,355,3.014,472,3.896,512,2.723,523,2.166,591,3.548,738,4.101,754,4.093,801,2.586,822,3.458,859,3.64,982,4.386,999,4.386,1009,2.465,1031,3.554,1034,3.64,1039,5.656,1056,3.849,1108,4.752,1110,3.28,1133,3.554,1252,3.061,1345,3.28,1346,5.243,1347,5.243,1348,5.243,1349,5.243,1350,4.752,1351,6.305,1352,3.921,1353,4.752,1354,4.752,1355,4.752,1356,3.921,1357,5.243,1358,5.243,1359,5.243,1360,5.243,1361,5.906,1362,3.921,1363,3.921]],["title/interfaces/ITag.html",[0,0.23,564,2.674]],["body/interfaces/ITag.html",[0,0.364,2,1.296,3,0.154,4,0.123,5,0.139,7,0.252,8,1.205,19,0.345,20,0.012,23,0.735,25,0.25,27,0.235,28,0.007,37,0.007,116,0.631,132,0.009,133,0.332,172,1.876,199,0.958,206,2.037,275,2.719,284,2.312,297,1.916,346,3.056,347,2.312,423,2.941,429,2.075,454,2.551,457,2.311,464,2.64,521,2.312,530,1.462,562,2.719,563,3.322,564,4.892,567,2.985,568,3.313,569,3.797,570,3.797,571,4.175,572,3.979,573,3.618,574,2.719,575,3.458,576,2.719,577,2.985,578,3.235,579,2.985,580,2.985,581,2.985,582,3.458,583,2.985,584,2.985,585,2.499,586,2.985,587,2.985,588,2.985,589,3.533,590,2.985,591,2.719,592,2.985,593,2.985,594,2.985,595,2.985,596,3.533,597,3.533,598,2.985,599,2.985,600,3.142,601,3.785]],["title/interfaces/IUser.html",[0,0.23,604,2.674]],["body/interfaces/IUser.html",[0,0.289,2,0.92,3,0.11,4,0.088,5,0.099,7,0.179,8,1.048,9,1.082,19,0.352,20,0.012,23,0.79,25,0.239,27,0.209,28,0.005,37,0.005,50,2.464,51,1.768,53,1.27,73,2.518,116,0.464,132,0.007,133,0.295,172,1.332,186,0.702,199,0.68,206,1.882,260,1.351,263,1.474,275,1.93,284,1.642,297,1.521,332,1.882,346,3.376,347,1.642,353,2.359,355,1.474,356,3.12,358,3.693,365,2.622,409,3.173,416,3.567,423,2.335,429,1.474,444,2.231,445,2.231,446,4.249,454,2.357,457,1.834,464,2.096,466,2.359,468,1.332,484,2.359,521,1.642,530,1.038,537,1.849,567,2.119,568,3.521,569,4.194,570,4.194,571,3.507,572,3.343,573,2.872,574,1.93,576,1.93,577,2.119,578,2.717,579,2.119,580,2.119,581,2.119,582,3.195,583,2.119,584,2.119,585,1.774,586,2.119,587,2.119,588,2.119,590,4.036,591,1.93,592,2.119,593,2.119,594,2.119,595,2.119,598,3.82,599,2.119,602,1.93,603,2.359,604,4.252,605,5.691,606,5.691,611,3.355,617,3.567,618,4.845,619,3.567,620,2.687,621,2.508,622,3.173,623,2.687,624,2.687,625,2.687,626,2.687,627,2.687,628,2.687,629,2.687,630,2.687,631,2.687,632,3.822,633,2.687,634,2.687,635,2.687,636,2.231,637,2.687,638,2.687,639,2.687,640,2.687,641,2.508,642,2.687,643,2.508,644,2.687,645,2.687,646,2.687,647,2.687,648,2.687,649,3.567,650,2.687,651,2.687,652,2.508,653,3.822,654,2.508,655,2.359,656,2.687,657,2.687,658,3.822,659,3.822,660,2.508,661,2.508,662,2.687,663,2.119,664,2.687]],["title/injectables/JwtStrategy.html",[371,2.844,389,1.176]],["body/injectables/JwtStrategy.html",[3,0.161,4,0.129,5,0.145,7,0.263,9,1.105,19,0.286,20,0.012,25,0.267,26,0.393,27,0.161,28,0.007,37,0.007,53,1.644,116,0.516,132,0.009,133,0.228,144,2.81,147,1.253,149,1.503,165,5.402,179,1.959,186,1.411,199,1.253,202,1.201,241,3.28,260,1.201,263,2.167,332,2.285,344,3.28,349,4.066,350,3.952,355,2.713,362,5.402,365,2.025,371,4.618,374,5.947,385,4.724,389,1.91,390,2.508,413,3.952,419,3.952,464,2.167,1241,4.724,1364,4.724,1365,5.915,1366,5.396,1367,6.756,1368,5.661,1369,5.396,1370,6.756,1371,4.724,1372,5.396,1373,4.724,1374,4.282,1375,4.724,1376,5.396,1377,4.724,1378,4.724,1379,5.396,1380,5.396,1381,5.396,1382,5.396,1383,5.396,1384,5.396,1385,5.396,1386,5.396,1387,5.396]],["title/injectables/LocalStrategy.html",[372,2.844,389,1.176]],["body/injectables/LocalStrategy.html",[3,0.157,4,0.126,5,0.141,7,0.256,8,1.053,9,1.088,19,0.324,20,0.012,23,0.759,25,0.252,26,0.383,27,0.157,28,0.007,37,0.007,116,0.508,132,0.009,133,0.222,144,2.189,147,1.421,149,1.48,165,3.854,179,1.91,186,1.272,199,1.233,202,1.171,206,2.5,332,2.259,344,3.199,351,4.659,352,3.854,356,3.076,358,3.962,372,4.545,389,1.88,390,2.446,413,3.854,436,2.495,437,2.193,464,2.113,522,2.446,747,3.383,1145,3.854,1365,5.822,1371,4.607,1373,4.607,1374,4.176,1377,4.607,1378,4.607,1388,4.607,1389,7.66,1390,7.66,1391,5.262,1392,6.65,1393,6.65,1394,5.262,1395,5.262,1396,4.607,1397,5.262,1398,5.262,1399,5.262,1400,5.262,1401,5.262]],["title/classes/LoginCredsDto.html",[133,0.176,336,3.047]],["body/classes/LoginCredsDto.html",[3,0.153,4,0.122,5,0.138,7,0.25,8,1.036,11,0.97,16,1.407,19,0.305,20,0.012,23,0.694,24,1.211,25,0.268,26,0.373,27,0.195,28,0.007,37,0.007,53,1.248,132,0.009,133,0.305,135,1.745,140,1.802,144,2.132,147,1.213,150,2.926,172,1.861,186,0.98,190,3.777,195,2.21,203,3.117,206,1.589,260,1.603,313,2.697,330,3.504,331,4.069,332,1.589,333,4.069,335,5.727,336,5.275,339,6.643,340,4.205,341,3.296,342,4.069,343,4.069,344,3.117,345,3.964,346,3.348,347,2.294,348,4.069,349,3.44,350,3.755,351,4.16,352,3.755,353,4.205,354,4.489,355,3.312,356,3.047,357,4.489,358,3.669,359,4.489,360,4.489,361,4.069,362,3.755,363,4.489,364,4.489,365,1.924,366,4.489,367,2.697,1402,6.541,1403,5.127,1404,5.127,1405,5.127,1406,5.127]],["title/classes/PaginationParams.html",[133,0.176,1009,2.29]],["body/classes/PaginationParams.html",[0,0.333,3,0.135,4,0.108,5,0.121,7,0.22,8,0.954,9,1.266,11,0.67,12,1.866,13,1.866,14,1.954,16,1.239,17,1.099,18,1.32,19,0.305,20,0.012,21,1.224,22,2.05,23,0.661,24,1.423,25,0.248,26,0.329,27,0.202,28,0.006,37,0.006,40,1.036,132,0.008,133,0.286,135,1.537,142,2.746,147,1.256,150,3.031,151,5.735,172,1.64,187,1.203,347,2.021,355,3.325,472,3.912,512,2.746,523,2.912,591,3.563,738,4.119,754,3.087,801,2.608,822,2.608,859,2.746,982,5.292,999,5.513,1009,3.314,1031,3.584,1034,2.746,1039,4.41,1108,5.735,1110,3.308,1133,4.779,1252,3.087,1345,3.308,1346,3.955,1347,3.955,1348,3.955,1349,3.955,1350,3.584,1351,6.327,1352,3.955,1353,4.779,1354,4.779,1355,4.779,1356,5.273,1357,6.327,1358,5.273,1359,5.273,1360,5.273,1361,5.931,1362,3.955,1363,3.955,1407,4.517,1408,4.517,1409,6.022,1410,6.022,1411,4.517,1412,4.517]],["title/interfaces/ParamOption.html",[0,0.23,509,2.529]],["body/interfaces/ParamOption.html",[0,0.404,2,1.035,3,0.123,4,0.099,5,0.111,7,0.201,8,0.897,9,1.32,10,1.098,11,0.612,14,1.004,15,1.132,17,1.004,18,1.278,19,0.345,20,0.012,21,1.151,23,0.746,25,0.186,26,0.3,27,0.241,28,0.006,36,1.338,37,0.005,51,1.984,116,0.433,132,0.008,136,1.779,140,1.45,184,2.198,186,1.237,260,1.549,267,2.056,268,2.056,287,1.995,322,1.99,323,2.125,324,1.917,457,1.45,468,1.498,476,2.382,477,2.27,488,1.995,489,2.27,490,1.548,491,2.17,492,2.17,493,2.979,494,2.854,495,3.871,496,4.758,497,2.82,498,2.82,499,2.652,500,2.652,501,2.078,502,2.652,503,2.652,504,2.652,505,2.652,506,3.641,507,2.078,508,1.995,509,3.932,510,4.758,511,4.421,512,4.232,513,4.758,514,4.758,515,3.443,516,2.382,517,1.995,518,2.17,519,2.508,520,2.82,521,1.846,522,3.708,523,1.995,524,2.652,525,2.82,526,2.82,527,2.17,528,2.17,529,2.17,530,2.223,531,1.657,532,2.82,533,1.995,534,2.82,535,2.17,536,2.652,537,2.078,538,2.652,539,2.82,540,2.652,541,2.82,542,2.82,543,2.82,544,2.82,545,3.871,546,2.82,547,2.27,548,2.82,549,2.442,550,2.652,551,1.995,552,2.652,553,2.652,554,2.652,555,2.078,556,2.979,557,2.17,558,2.82,559,2.82,560,2.82,561,2.82]],["title/interfaces/ParamsOptions.html",[0,0.23,515,2.529]],["body/interfaces/ParamsOptions.html",[0,0.413,2,1.105,3,0.132,4,0.105,5,0.118,10,1.173,11,0.653,14,1.072,15,1.208,17,1.072,18,1.264,19,0.283,20,0.012,21,1.204,23,0.731,25,0.195,26,0.32,27,0.244,28,0.006,36,1.399,37,0.006,51,1.912,116,0.452,132,0.008,136,2.553,140,1.548,147,0.817,184,2.298,186,1.279,260,1.592,267,2.15,268,2.15,287,2.13,322,2.081,323,2.222,324,2.047,457,1.548,468,1.599,476,2.543,477,2.424,488,2.13,489,2.424,490,1.653,491,2.317,492,2.317,493,3.115,494,2.983,495,4.047,496,4.047,497,3.01,498,3.01,499,2.831,500,2.831,501,2.219,502,2.831,503,2.831,504,2.831,505,2.831,506,3.806,507,2.219,508,2.13,509,4.067,510,3.01,511,3.01,512,2.678,513,3.01,514,3.01,515,4.067,516,3.419,517,2.13,518,2.317,519,2.678,520,3.01,521,1.97,522,3.759,523,2.13,524,2.831,525,3.01,526,3.01,527,2.317,528,2.317,529,2.317,530,2.258,531,1.769,532,3.01,533,2.13,534,3.01,535,2.317,536,2.831,537,2.219,538,2.831,539,3.01,540,2.831,541,3.01,542,3.01,543,3.01,544,3.01,545,4.047,546,3.01,547,2.424,548,3.01,549,2.553,550,2.831,551,2.13,552,2.831,553,2.831,554,2.831,555,2.219,556,3.115,557,2.317,558,3.01,559,3.01,560,3.01,561,3.01,1413,4.404,1414,4.404]],["title/injectables/PersistedCronService.html",[389,1.176,668,2.844]],["body/injectables/PersistedCronService.html",[3,0.149,4,0.12,5,0.134,7,0.244,8,1.02,9,0.819,19,0.272,20,0.012,25,0.212,26,0.364,27,0.149,28,0.007,37,0.007,116,0.382,132,0.009,133,0.212,144,2.082,147,1.321,149,1.114,179,2.586,186,0.957,187,1.333,192,4.718,199,1.195,202,1.114,227,2.755,229,4.718,245,3.422,260,1.433,297,1.459,328,5.112,332,2.207,365,1.878,389,1.822,390,2.327,436,1.878,437,1.651,636,4.33,668,4.403,670,5.14,675,6.973,683,5.968,699,5.968,706,5.64,707,5.112,747,3.218,778,5.64,997,5.14,1092,4.718,1245,6.236,1246,2.891,1264,3.422,1265,4.403,1415,6.584,1416,4.383,1417,6.442,1418,5.653,1419,6.442,1420,6.442,1421,6.442,1422,6.442,1423,7.964,1424,5.006,1425,6.442,1426,5.006,1427,6.442,1428,6.442,1429,6.442,1430,6.442,1431,5.006,1432,5.006,1433,5.006,1434,5.006,1435,5.006,1436,5.006,1437,5.006,1438,5.006,1439,5.006,1440,4.383]],["title/interfaces/PostType.html",[0,0.23,82,1.462]],["body/interfaces/PostType.html",[0,0.466,1,2.603,2,0.926,3,0.11,4,0.088,5,0.099,6,1.297,7,0.18,8,0.83,10,0.983,11,0.777,12,1.888,13,1.624,14,0.898,15,1.013,16,1.438,17,0.898,18,1.368,19,0.296,20,0.012,21,1.065,22,2.074,23,0.8,24,1.439,25,0.121,26,0.269,27,0.254,28,0.007,29,1.784,30,1.784,31,1.784,32,1.784,33,1.784,34,1.784,35,1.784,36,1.567,37,0.007,38,2.808,39,1.385,40,1.716,41,1.385,42,1.385,43,1.385,44,1.385,45,1.385,46,1.385,47,1.297,48,1.385,49,1.385,50,1.217,51,2.005,52,1.297,53,0.898,54,1.966,55,1.385,56,2.212,57,1.385,58,1.385,59,1.385,60,1.385,61,1.385,62,1.385,63,1.385,64,1.385,65,1.385,66,1.385,67,1.385,68,2.286,69,1.966,70,1.385,71,1.385,72,1.385,73,2.009,74,1.385,75,1.385,76,1.966,77,1.385,78,1.385,79,1.385,80,1.385,81,1.385,82,2.688,83,2.489,84,1.842,85,1.842,86,1.385,87,1.385,88,1.385,89,1.385,90,1.385,91,1.385,92,1.385,93,1.385,94,1.385,95,1.966,96,1.385,97,1.385,98,1.385,99,1.297,100,1.385,101,1.385,102,2.331,103,1.385,104,1.385,105,1.385,106,1.385,107,1.385,108,1.385,109,1.385,110,1.385,111,1.217,112,1.385,113,1.385,114,1.385,115,1.385,116,0.282,117,1.385,118,1.385,119,1.385,120,1.385,121,1.385,122,1.297,123,2.141,124,1.385,125,1.385,126,1.385,127,1.842,128,1.784,129,1.385,130,1.385,131,1.385,132,0.007]],["title/interfaces/PostedByUser.html",[0,0.23,84,1.462]],["body/interfaces/PostedByUser.html",[0,0.465,1,2.582,2,0.897,3,0.107,4,0.085,5,0.096,6,1.256,7,0.174,8,0.811,10,0.952,11,0.76,12,1.855,13,1.587,14,0.87,15,0.981,16,1.405,17,0.87,18,1.365,19,0.326,20,0.012,21,1.041,22,2.037,23,0.801,24,1.414,25,0.118,26,0.26,27,0.253,28,0.007,29,1.743,30,1.743,31,1.743,32,1.743,33,1.743,34,1.743,35,1.743,36,1.544,37,0.007,38,2.782,39,1.341,40,1.7,41,1.341,42,1.341,43,1.341,44,1.341,45,1.341,46,1.341,47,1.256,48,1.341,49,1.341,50,1.179,51,2.035,52,1.256,53,0.87,54,2.596,55,1.341,56,2.614,57,1.341,58,1.341,59,1.341,60,1.341,61,1.341,62,1.341,63,1.341,64,1.341,65,1.341,66,1.341,67,1.341,68,2.702,69,2.596,70,1.341,71,1.341,72,1.341,73,2.374,74,1.341,75,1.341,76,2.596,77,1.341,78,1.341,79,1.341,80,1.341,81,1.341,82,2.297,83,1.341,84,2.104,85,1.8,86,1.341,87,1.341,88,1.341,89,1.341,90,1.341,91,1.341,92,1.341,93,1.341,94,1.341,95,1.922,96,1.341,97,1.341,98,1.341,99,1.256,100,1.341,101,1.341,102,2.297,103,1.341,104,1.341,105,1.341,106,1.341,107,1.341,108,1.341,109,1.341,110,1.341,111,1.179,112,1.341,113,1.341,114,1.341,115,1.341,116,0.273,117,1.341,118,1.341,119,1.341,120,1.341,121,1.341,122,1.256,123,2.104,124,1.341,125,1.341,126,1.341,127,1.8,128,1.743,129,1.341,130,1.341,131,1.341,132,0.007]],["title/classes/QueryFailedFilter.html",[133,0.176,1441,3.302]],["body/classes/QueryFailedFilter.html",[3,0.13,4,0.104,5,0.117,7,0.213,9,0.714,11,0.873,13,1.825,16,1.199,19,0.282,20,0.012,24,1.032,25,0.219,26,0.318,27,0.13,28,0.006,37,0.006,40,1.002,116,0.509,132,0.008,133,0.282,135,1.487,139,2.808,140,1.535,142,3.58,143,3.199,147,0.81,149,0.972,179,1.586,180,2.986,187,1.568,190,3.847,199,1.092,202,0.972,237,2.298,260,1.656,284,2.634,297,1.716,454,2.285,460,3.199,467,4.334,468,2.138,470,3.4,480,3.855,481,3.855,490,2.209,547,4.096,578,2.634,582,3.097,649,4.553,761,2.449,858,3.4,1246,3.4,1262,3.4,1418,4.673,1441,4.673,1442,5.156,1443,3.467,1444,5.156,1445,7.145,1446,5.832,1447,3.825,1448,7.443,1449,7.443,1450,7.443,1451,7.443,1452,7.443,1453,7.443,1454,7.443,1455,6.242,1456,6.242,1457,4.368,1458,5.156,1459,5.156,1460,5.156,1461,5.156,1462,3.825,1463,3.825,1464,3.825,1465,3.825,1466,3.825,1467,6.661,1468,5.888,1469,5.888,1470,3.467,1471,3.825]],["title/classes/R.html",[133,0.176,808,2.529]],["body/classes/R.html",[3,0.068,4,0.055,5,0.061,7,0.111,9,0.745,10,0.609,11,0.339,14,0.557,15,0.628,17,0.557,18,1.045,19,0.319,20,0.012,21,0.926,23,0.674,24,0.54,25,0.187,26,0.166,27,0.17,28,0.003,37,0.003,40,1.303,116,0.544,132,0.005,133,0.279,135,0.779,136,2.242,140,1.283,147,0.845,149,1.157,179,0.83,184,2.466,186,1.472,187,1.384,199,0.677,202,1.014,206,2.439,214,1.063,236,2.495,237,1.92,260,1.613,263,1.829,267,0.83,268,0.83,287,1.765,297,0.667,322,0.804,323,0.858,345,3.333,367,2.396,403,2.038,436,0.858,437,1.204,450,3.191,468,2.307,480,1.697,481,1.697,488,3.073,490,1.709,491,1.92,492,1.92,493,1.203,494,2.863,501,1.839,507,1.839,508,1.765,517,2.514,518,2.735,522,3.508,523,1.765,527,1.203,528,2.396,529,1.203,530,1.866,531,1.466,549,2.45,551,2.747,555,3.653,556,3.669,557,3.185,578,1.633,792,1.391,793,3.342,794,1.47,795,2.219,797,1.203,799,1.563,801,1.321,802,2.928,803,1.391,804,1.391,805,1.391,806,1.391,807,2.495,808,2.219,809,4.139,810,3.554,811,3.883,812,2.495,813,2.495,814,2.495,815,4.511,816,1.563,817,1.563,818,1.563,819,1.563,820,2.495,821,1.563,822,3.497,823,2.495,824,1.563,825,2.495,826,2.346,827,1.563,828,2.108,829,1.563,830,1.563,831,1.563,832,1.563,833,1.92,834,1.563,835,2.495,836,1.563,837,1.563,838,2.495,839,1.563,840,1.563,841,1.563,842,1.563,843,1.563,844,1.563,845,1.563,846,2.495,847,1.47,848,2.928,849,2.769,850,1.563,851,1.321,852,1.563,853,1.563,854,1.563,855,3.113,856,2.495,857,1.563,858,1.321,859,1.391,860,1.563,861,1.563,862,1.391,863,1.563,864,1.563,865,2.495,866,1.563,867,1.563,868,2.495,869,1.563,870,1.563,871,2.495,872,1.563,873,1.563,874,1.563,875,1.563,876,1.563,877,1.563,878,1.563,879,1.563,880,2.495,881,1.563,882,2.346,883,1.47,884,2.219,885,2.219,886,1.563,887,3.113,888,1.563,889,1.391,890,1.563,891,1.563,892,4.344,893,3.113,894,2.495,895,1.563,896,1.563,897,1.563,898,1.563,899,1.563,900,1.563,901,4.344,902,1.563,903,1.47,904,1.563,905,1.563,906,1.563,907,1.563,908,1.563,909,1.563,910,1.563,911,3.113,912,1.563,913,1.563,914,1.563,915,1.563,916,1.563,917,1.563,918,2.495,919,1.563,920,1.563,921,1.563,922,2.495,923,1.563,924,1.563,925,1.563,926,2.495,927,1.563,928,1.563,929,2.495,930,3.113,931,1.563,932,1.563,933,3.113,934,1.563,935,1.563,936,1.563,937,2.495,938,1.563,939,1.563,940,2.495,941,1.563,942,1.563,943,2.495,944,1.563,945,1.563,946,1.563,947,2.495,948,1.563,949,1.563,950,1.563,951,1.563,952,1.563,953,1.563,954,1.563,955,1.563,956,1.563,957,1.563,958,1.563,959,1.563,960,1.563,961,1.563,962,1.563,963,1.563,964,1.563,965,1.563,966,1.563,967,2.495,968,1.563,969,2.495,970,1.563,971,1.563,972,1.563,973,1.563,974,1.563,975,1.563,976,1.563,977,2.495,978,1.563,979,1.563,1263,1.563,1472,3.65,1473,2.287,1474,2.287,1475,2.287,1476,2.287,1477,2.287]],["title/guards/RequestGuard.html",[1478,2.844,1479,3.302]],["body/guards/RequestGuard.html",[3,0.144,4,0.115,5,0.129,7,0.234,9,1.027,19,0.265,20,0.012,23,0.574,25,0.207,26,0.35,27,0.144,28,0.006,37,0.006,51,1.528,116,0.48,132,0.008,133,0.203,147,1.164,149,1.397,184,1.866,186,1.336,187,1.671,190,4.83,199,1.164,202,1.555,260,1.555,263,1.931,267,1.746,268,1.746,297,1.402,313,3.302,322,1.69,323,1.805,389,1.775,403,2.152,437,2.534,463,4.597,478,2.924,490,2.355,516,2.777,754,5.385,761,2.611,1256,4.761,1260,4.939,1262,3.625,1267,4.035,1268,4.248,1272,2.777,1478,5.251,1479,4.981,1480,3.817,1481,4.211,1482,6.277,1483,6.727,1484,6.277,1485,4.81,1486,5.496,1487,4.211,1488,4.81,1489,5.496,1490,5.496,1491,5.496,1492,5.496,1493,5.496,1494,5.496,1495,5.496,1496,4.81,1497,6.987,1498,4.81,1499,4.81,1500,4.81,1501,4.81,1502,4.81,1503,4.81,1504,6.277,1505,3.817,1506,4.81,1507,4.81]],["title/interfaces/RescueLists.html",[0,0.23,122,1.462]],["body/interfaces/RescueLists.html",[0,0.467,1,2.609,2,0.933,3,0.111,4,0.089,5,0.1,6,1.308,7,0.181,8,0.835,10,0.991,11,0.782,12,1.896,13,1.633,14,0.906,15,1.021,16,1.446,17,0.906,18,1.365,19,0.281,20,0.012,21,1.071,22,2.083,23,0.799,24,1.446,25,0.122,26,0.271,27,0.254,28,0.007,29,1.794,30,1.794,31,1.794,32,1.794,33,1.794,34,1.794,35,1.794,36,1.573,37,0.007,38,2.815,39,1.396,40,1.72,41,1.396,42,1.396,43,1.396,44,1.396,45,1.396,46,1.396,47,1.308,48,1.396,49,1.396,50,1.227,51,2.007,52,1.308,53,0.906,54,1.978,55,1.396,56,2.222,57,1.396,58,1.396,59,1.396,60,1.396,61,1.396,62,1.396,63,1.396,64,1.396,65,1.396,66,1.396,67,1.396,68,2.296,69,1.978,70,1.396,71,1.396,72,1.396,73,2.018,74,1.396,75,1.396,76,1.978,77,1.396,78,1.396,79,1.396,80,1.396,81,1.396,82,2.339,83,1.396,84,1.852,85,1.852,86,1.396,87,1.396,88,1.396,89,1.396,90,1.396,91,1.396,92,1.396,93,1.396,94,1.396,95,1.978,96,1.396,97,1.396,98,1.396,99,1.308,100,1.396,101,1.396,102,2.74,103,1.396,104,1.396,105,1.396,106,1.396,107,1.396,108,1.396,109,1.396,110,1.396,111,1.227,112,1.396,113,1.396,114,1.396,115,1.396,116,0.284,117,1.396,118,1.396,119,1.396,120,1.396,121,1.396,122,1.852,123,2.151,124,1.396,125,1.396,126,1.396,127,1.852,128,1.794,129,1.396,130,1.396,131,1.396,132,0.007]],["title/interfaces/Rescues.html",[0,0.23,102,1.462]],["body/interfaces/Rescues.html",[0,0.461,1,2.543,2,0.848,3,0.101,4,0.081,5,0.091,6,1.188,7,0.165,8,0.779,10,0.9,11,0.73,12,1.798,13,1.525,14,0.823,15,0.928,16,1.35,17,0.823,18,1.367,19,0.349,20,0.012,21,1,22,1.974,23,0.803,24,1.37,25,0.111,26,0.246,27,0.251,28,0.007,29,1.675,30,1.675,31,1.675,32,1.675,33,1.675,34,1.675,35,1.675,36,1.505,37,0.007,38,2.736,39,1.269,40,1.672,41,1.269,42,1.269,43,1.269,44,1.269,45,1.269,46,1.269,47,1.188,48,1.269,49,1.269,50,1.115,51,1.978,52,1.188,53,0.823,54,1.846,55,1.269,56,2.106,57,1.269,58,1.269,59,1.269,60,1.269,61,1.269,62,1.269,63,1.269,64,1.269,65,1.269,66,1.269,67,1.269,68,2.177,69,1.846,70,1.269,71,1.269,72,1.269,73,1.913,74,1.269,75,1.269,76,1.846,77,1.269,78,1.269,79,1.269,80,1.269,81,1.269,82,2.239,83,1.269,84,1.729,85,1.729,86,1.269,87,1.269,88,1.269,89,1.269,90,1.269,91,1.269,92,1.269,93,1.269,94,1.269,95,1.846,96,1.269,97,1.269,98,1.269,99,1.188,100,1.269,101,1.269,102,2.379,103,2.39,104,2.39,105,2.39,106,2.39,107,2.39,108,2.39,109,2.39,110,2.39,111,1.913,112,2.39,113,2.39,114,2.39,115,1.269,116,0.258,117,1.269,118,1.269,119,1.269,120,2.39,121,2.39,122,1.188,123,2.039,124,1.269,125,1.269,126,1.269,127,1.729,128,1.675,129,1.269,130,1.269,131,1.269,132,0.007,1056,3.163]],["title/interfaces/Response.html",[0,0.23,40,0.954]],["body/interfaces/Response.html",[0,0.308,2,1.396,3,0.166,4,0.133,5,0.149,7,0.271,8,1.091,11,1.191,19,0.235,20,0.012,21,1.52,25,0.246,26,0.405,27,0.206,28,0.007,37,0.007,40,1.792,132,0.009,133,0.291,186,1.064,199,1.032,297,1.622,322,2.42,389,1.948,470,3.214,490,2.088,530,1.574,761,2.864,1246,3.214,1252,4.707,1254,4.076,1256,4.808,1257,5.478,1259,5.478,1260,4.427,1261,4.076,1262,3.977,1263,4.707,1264,4.707,1265,3.804,1266,4.076,1267,3.577,1268,4.547,1269,4.076,1270,4.076,1271,5.044,1272,3.214,1273,3.804,1274,3.804,1508,4.417,1509,4.417,1510,4.076,1511,4.873]],["title/guards/ResponseGuard.html",[1478,2.844,1512,3.302]],["body/guards/ResponseGuard.html",[3,0.131,4,0.105,5,0.118,7,0.214,9,0.967,11,1.106,12,1.361,13,2.214,19,0.25,20,0.012,23,0.611,25,0.194,26,0.32,27,0.131,28,0.006,36,1.038,37,0.006,40,1.799,51,1.439,116,0.452,132,0.008,133,0.186,139,4.294,142,4.669,147,1.096,149,1.315,184,2.773,186,1.469,187,1.574,190,4.126,199,1.096,202,1.486,260,0.977,263,2.682,297,1.28,313,3.109,389,1.671,403,2.988,437,1.949,463,4.329,478,2.67,490,2.218,522,2.041,754,5.249,761,2.458,826,3.799,858,2.536,1256,4.593,1260,4.793,1262,3.413,1267,3.799,1268,4.061,1272,2.536,1322,5.175,1350,5.301,1470,5.301,1478,4.884,1480,3.486,1483,6.529,1486,5.175,1487,3.846,1489,5.175,1490,5.175,1491,5.175,1492,5.175,1493,5.175,1494,5.175,1495,5.175,1512,4.69,1513,3.846,1514,5.91,1515,5.91,1516,4.392,1517,4.392,1518,4.392,1519,7.457,1520,5.91,1521,4.392,1522,4.392,1523,4.392,1524,4.392,1525,4.392,1526,4.392,1527,4.392,1528,5.91,1529,4.392,1530,4.392,1531,5.91,1532,4.392,1533,4.392,1534,4.392,1535,4.392,1536,4.392]],["title/interfaces/Result.html",[0,0.23,37,0.006]],["body/interfaces/Result.html",[0,0.465,1,2.586,2,0.903,3,0.107,4,0.086,5,0.097,6,1.265,7,0.175,8,0.815,9,1.072,10,0.958,11,1.029,12,2.236,13,2.15,14,0.876,15,0.988,16,1.904,17,0.876,18,1.362,19,0.314,20,0.012,21,1.333,22,2.361,23,0.8,24,1.639,25,0.118,26,0.262,27,0.253,28,0.007,29,1.752,30,1.752,31,1.752,32,1.752,33,1.752,34,1.752,35,1.752,36,1.549,37,0.008,38,2.788,39,1.35,40,1.704,41,1.35,42,1.35,43,1.35,44,1.35,45,1.35,46,1.35,47,1.265,48,1.35,49,1.35,50,1.187,51,1.997,52,1.265,53,0.876,54,1.931,55,1.35,56,2.181,57,1.35,58,1.35,59,1.35,60,1.35,61,1.35,62,1.35,63,1.35,64,1.35,65,1.35,66,1.35,67,1.35,68,2.255,69,1.931,70,1.35,71,1.35,72,1.35,73,1.981,74,1.35,75,1.35,76,1.931,77,1.35,78,1.35,79,1.35,80,1.35,81,1.35,82,2.304,83,1.35,84,1.809,85,1.809,86,1.35,87,1.35,88,1.35,89,1.35,90,1.35,91,1.35,92,1.35,93,1.35,94,1.35,95,1.931,96,1.35,97,1.35,98,1.35,99,1.265,100,1.35,101,1.35,102,2.304,103,1.35,104,1.35,105,1.35,106,1.35,107,1.35,108,1.35,109,1.35,110,1.35,111,1.187,112,1.35,113,1.35,114,1.35,115,1.35,116,0.275,117,1.35,118,1.35,119,1.35,120,1.35,121,1.35,122,1.265,123,2.112,124,1.35,125,1.35,126,1.35,127,1.809,128,1.752,129,1.35,130,1.35,131,1.35,132,0.007]],["title/classes/SerializeHelper.html",[133,0.176,862,2.529]],["body/classes/SerializeHelper.html",[3,0.071,4,0.057,5,0.064,7,0.116,9,0.615,10,0.633,11,0.352,14,0.578,15,0.652,17,0.578,18,1.059,19,0.314,20,0.012,21,0.483,23,0.659,24,0.561,25,0.19,26,0.173,27,0.173,28,0.003,37,0.003,40,1.327,116,0.539,132,0.005,133,0.283,135,0.809,136,2.014,140,1.322,147,0.698,149,0.837,179,0.863,184,2.246,186,1.483,187,1.414,199,0.698,202,0.837,206,2.422,214,1.104,260,1.629,263,1.876,267,0.863,268,0.863,287,1.819,297,0.693,322,0.835,323,0.892,345,3.389,367,2.457,403,2.09,436,0.892,437,1.241,450,3.235,468,2.342,480,1.749,481,1.749,488,2.799,490,1.753,491,1.979,492,1.979,493,1.25,494,2.917,501,1.896,507,1.896,508,1.819,517,2.568,518,3.045,522,3.537,523,1.819,527,1.25,528,2.457,529,1.25,530,1.502,531,1.511,549,2.496,551,2.799,555,3.37,556,3.239,557,1.979,578,1.683,792,1.445,793,3.002,794,1.527,795,2.287,797,1.25,799,1.624,801,1.372,802,3.002,803,1.445,804,1.445,805,1.445,806,1.445,807,2.572,808,1.445,809,3.631,810,2.572,811,3.192,812,2.572,813,2.572,814,1.624,815,4.209,816,1.624,817,1.624,818,1.624,819,1.624,820,2.572,821,1.624,822,3.556,823,2.572,824,1.624,825,2.572,826,2.418,827,1.624,828,2.173,829,1.624,830,1.624,831,1.624,832,1.624,833,1.979,834,1.624,835,2.572,836,1.624,837,1.624,838,2.572,839,1.624,840,1.624,841,1.624,842,1.624,843,1.624,844,1.624,845,1.624,846,2.572,847,1.527,848,3.002,849,2.84,850,1.624,851,1.372,852,1.624,853,1.624,854,1.624,855,3.192,856,2.572,857,1.624,858,1.372,859,1.445,860,1.624,861,1.624,862,2.287,863,2.572,864,3.631,865,2.572,866,1.624,867,1.624,868,2.572,869,1.624,870,2.572,871,2.572,872,1.624,873,1.624,874,1.624,875,1.624,876,1.624,877,1.624,878,1.624,879,1.624,880,2.572,881,1.624,882,2.418,883,1.527,884,2.287,885,2.287,886,1.624,887,3.192,888,1.624,889,1.445,890,1.624,891,1.624,892,4.409,893,3.192,894,2.572,895,1.624,896,1.624,897,1.624,898,1.624,899,1.624,900,1.624,901,4.409,902,1.624,903,1.527,904,1.624,905,1.624,906,1.624,907,1.624,908,1.624,909,1.624,910,1.624,911,3.192,912,1.624,913,1.624,914,1.624,915,1.624,916,1.624,917,1.624,918,2.572,919,1.624,920,1.624,921,1.624,922,2.572,923,1.624,924,1.624,925,1.624,926,2.572,927,1.624,928,1.624,929,2.572,930,3.192,931,1.624,932,1.624,933,3.192,934,1.624,935,1.624,936,1.624,937,2.572,938,1.624,939,1.624,940,2.572,941,1.624,942,1.624,943,2.572,944,1.624,945,1.624,946,1.624,947,2.572,948,1.624,949,1.624,950,1.624,951,1.624,952,1.624,953,1.624,954,1.624,955,1.624,956,1.624,957,1.624,958,1.624,959,1.624,960,1.624,961,1.624,962,1.624,963,1.624,964,1.624,965,1.624,966,1.624,967,2.572,968,1.624,969,2.572,970,1.624,971,1.624,972,1.624,973,1.624,974,1.624,975,1.624,976,1.624,977,2.572,978,1.624,979,1.624,1537,3.762,1538,3.762,1539,2.376,1540,2.376]],["title/classes/Swagger.html",[133,0.176,549,1.794]],["body/classes/Swagger.html",[3,0.067,4,0.053,5,0.06,7,0.109,9,0.918,10,0.595,11,0.331,14,0.544,15,0.613,17,0.544,18,1.069,19,0.331,20,0.012,21,0.454,23,0.576,24,0.528,25,0.185,26,0.162,27,0.168,28,0.003,37,0.003,40,1.374,116,0.567,132,0.005,133,0.277,135,0.76,136,2.583,140,1.258,147,1.041,149,1.249,179,0.811,184,2.619,186,1.465,187,1.365,199,0.664,202,1.249,206,2.484,214,1.038,237,1.883,260,1.603,263,1.8,267,0.811,268,0.811,287,1.731,297,0.651,322,0.785,323,0.838,345,3.298,367,2.358,403,2.511,436,0.838,437,1.181,450,3.348,468,2.285,480,1.664,481,1.664,488,2.714,490,1.682,491,1.883,492,1.883,493,1.175,494,3.171,501,1.804,507,1.804,508,1.731,517,2.897,518,2.697,522,3.49,523,1.731,527,1.175,528,2.358,529,1.175,530,1.45,531,1.438,549,2.821,551,2.714,555,3.4,556,3.152,557,1.883,578,1.602,792,1.358,793,3.851,794,1.435,795,2.177,797,1.175,799,1.526,801,1.289,802,2.881,803,1.358,804,1.358,805,1.358,806,1.358,807,2.447,808,1.358,809,3.505,810,2.447,811,3.064,812,2.447,813,2.447,814,1.526,815,4.613,816,1.526,817,1.526,818,1.526,819,1.526,820,3.505,821,2.447,822,3.897,823,3.505,824,2.447,825,3.064,826,2.302,827,1.526,828,2.068,829,1.526,830,1.526,831,1.526,832,1.526,833,1.883,834,1.526,835,2.447,836,1.526,837,1.526,838,2.447,839,2.447,840,1.526,841,2.447,842,1.526,843,2.447,844,1.526,845,3.064,846,3.837,847,1.435,848,2.881,849,2.725,850,1.526,851,1.289,852,1.526,853,1.526,854,1.526,855,3.064,856,2.447,857,1.526,858,1.289,859,1.358,860,1.526,861,1.526,862,1.358,863,1.526,864,1.526,865,2.447,866,1.526,867,1.526,868,2.447,869,1.526,870,1.526,871,2.447,872,1.526,873,1.526,874,1.526,875,1.526,876,1.526,877,1.526,878,1.526,879,1.526,880,2.447,881,1.526,882,2.302,883,1.435,884,2.177,885,2.177,886,1.526,887,3.064,888,1.526,889,1.358,890,1.526,891,1.526,892,4.302,893,3.064,894,2.447,895,1.526,896,1.526,897,1.526,898,1.526,899,1.526,900,1.526,901,4.302,902,1.526,903,1.435,904,1.526,905,1.526,906,1.526,907,1.526,908,1.526,909,1.526,910,1.526,911,3.064,912,1.526,913,1.526,914,1.526,915,1.526,916,1.526,917,1.526,918,2.447,919,1.526,920,1.526,921,1.526,922,2.447,923,1.526,924,1.526,925,1.526,926,2.447,927,1.526,928,1.526,929,2.447,930,3.064,931,1.526,932,1.526,933,3.064,934,1.526,935,1.526,936,1.526,937,2.447,938,1.526,939,1.526,940,2.447,941,1.526,942,1.526,943,2.447,944,1.526,945,1.526,946,1.526,947,2.447,948,1.526,949,1.526,950,1.526,951,1.526,952,1.526,953,1.526,954,1.526,955,1.526,956,1.526,957,1.526,958,1.526,959,1.526,960,1.526,961,1.526,962,1.526,963,1.526,964,1.526,965,1.526,966,1.526,967,2.447,968,1.526,969,2.447,970,1.526,971,1.526,972,1.526,973,1.526,974,1.526,975,1.526,976,1.526,977,2.447,978,1.526,979,1.526,1056,3.297,1541,3.581,1542,3.581,1543,3.581,1544,3.581,1545,2.233,1546,2.233,1547,2.233,1548,2.233,1549,2.233,1550,2.233]],["title/classes/Tag.html",[133,0.176,575,2.188]],["body/classes/Tag.html",[0,0.308,3,0.12,4,0.096,5,0.108,7,0.196,8,1.145,9,1.126,18,0.637,19,0.358,20,0.012,23,0.726,25,0.227,27,0.216,28,0.005,36,0.95,37,0.005,116,0.62,132,0.007,133,0.306,135,1.369,147,1.505,149,1.238,172,1.46,199,1.183,202,1.238,206,2.489,275,2.927,284,1.799,297,1.86,332,2.134,346,2.586,347,1.799,358,1.944,403,2.49,423,3.63,426,4.674,427,4.362,428,4.076,429,2.765,430,3.804,431,4.674,432,4.416,433,4.076,436,2.584,437,2.271,438,2.945,441,2.445,444,2.445,445,3.383,446,4.187,448,3.191,449,3.191,450,2.691,451,4.076,453,2.945,454,2.159,457,1.956,464,2.563,521,1.799,530,1.574,562,2.115,563,2.585,564,4.427,567,2.322,568,2.804,569,3.685,570,3.685,571,4.319,572,3.512,573,3.063,574,2.115,575,3.622,576,3.357,577,2.322,578,2.855,579,2.322,580,2.322,581,2.322,582,2.927,583,2.322,584,2.322,585,1.944,586,2.322,587,2.322,588,3.214,589,3.804,590,3.214,591,2.115,592,2.322,593,2.322,594,2.322,595,2.322,596,2.748,597,2.748,598,2.322,599,2.322,600,2.445,601,2.945,1551,4.021,1552,4.021,1553,4.021,1554,5.723,1555,3.521,1556,3.521,1557,3.521,1558,3.521,1559,3.521,1560,3.521,1561,3.521,1562,3.521]],["title/controllers/TagsController.html",[195,1.794,1563,3.047]],["body/controllers/TagsController.html",[3,0.151,4,0.121,5,0.136,7,0.247,9,1.062,11,1.158,16,1.782,18,1.135,19,0.275,20,0.012,24,1.198,25,0.263,26,0.369,27,0.151,28,0.007,37,0.007,116,0.496,132,0.009,133,0.214,140,1.782,147,1.204,149,1.445,150,2.905,172,1.84,186,1.242,195,2.186,197,2.356,199,1.204,202,1.445,203,3.082,206,1.571,260,1.445,332,2.476,340,4.175,341,4.606,342,4.023,343,4.023,344,3.082,365,2.437,367,2.667,429,2.608,464,2.036,531,2.608,533,3.465,535,2.667,562,3.974,575,2.667,600,4.594,747,3.259,761,2.109,980,4.439,997,3.465,1001,3.259,1007,5.137,1023,3.082,1028,5.154,1029,4.023,1045,4.023,1050,4.023,1051,4.023,1052,4.023,1053,5.154,1055,4.023,1563,4.756,1564,4.439,1565,5.07,1566,5.07,1567,6.494,1568,3.713,1569,4.439,1570,4.175,1571,4.439,1572,5.07,1573,5.07,1574,5.07,1575,4.439,1576,4.439,1577,4.439]],["title/modules/TagsModule.html",[209,1.671,223,2.844]],["body/modules/TagsModule.html",[3,0.176,4,0.141,5,0.159,20,0.012,25,0.253,26,0.43,27,0.176,28,0.008,37,0.008,132,0.01,133,0.25,187,1.572,197,3.319,209,3.28,211,2.975,212,3.106,213,3.41,214,2.745,215,3.106,216,4.225,217,4.225,223,5.739,225,4.124,226,3.41,227,3.25,1563,5.623,1570,5.561,1571,5.171,1575,6.253,1578,5.171,1579,5.171,1580,5.171,1581,5.905,1582,5.905]],["title/injectables/TagsService.html",[389,1.176,1570,2.674]],["body/injectables/TagsService.html",[3,0.124,4,0.099,5,0.111,7,0.202,9,1.305,11,0.613,18,1.195,19,0.337,20,0.012,21,1.153,23,0.519,25,0.229,26,0.301,27,0.124,28,0.006,37,0.01,116,0.623,132,0.008,133,0.175,144,1.72,147,1.498,149,1.776,160,3.621,179,1.501,186,1.545,199,1.052,202,1.776,260,0.92,332,2.635,355,1.661,356,2.278,365,1.552,382,3.282,389,1.604,390,1.922,413,3.029,429,2.601,436,1.552,437,1.364,454,1.605,457,1.994,464,2.278,467,3.449,530,1.604,531,2.799,533,2.743,562,3.968,575,3.666,585,2,602,2.984,797,2.984,833,2.175,851,3.276,989,4.427,990,3.878,991,3.878,1001,2.659,1007,4.163,1009,3.564,1013,2.827,1018,2.827,1019,3.029,1023,2.514,1024,3.029,1080,5.574,1083,4.503,1084,3.878,1085,4.155,1086,3.282,1087,5.531,1090,5.796,1092,5.349,1093,5.14,1094,3.282,1096,2.827,1098,3.282,1100,3.029,1103,3.282,1337,4.968,1554,5.762,1568,3.029,1569,3.621,1570,3.647,1583,3.621,1584,4.136,1585,4.136,1586,3.621,1587,3.621,1588,3.621,1589,3.621,1590,3.621,1591,3.621,1592,3.621,1593,3.621,1594,4.136,1595,3.621,1596,4.136,1597,4.136,1598,4.136,1599,4.136,1600,4.136]],["title/injectables/TimeoutInterceptor.html",[389,1.176,1601,3.302]],["body/injectables/TimeoutInterceptor.html",[3,0.149,4,0.12,5,0.134,7,0.244,9,0.819,19,0.212,20,0.012,25,0.234,26,0.364,27,0.149,28,0.007,37,0.007,40,1.477,116,0.382,132,0.009,133,0.301,147,0.928,149,1.114,186,1.362,187,1.715,190,4.113,199,1.395,202,1.114,297,1.459,322,2.643,389,1.822,390,2.327,437,2.124,470,3.72,490,2.417,530,1.822,680,6.812,709,4.383,757,3.973,761,2.679,1246,3.72,1254,4.718,1255,5.112,1256,5.12,1257,5.833,1259,5.833,1260,4.141,1261,4.718,1262,4.343,1263,5.14,1264,5.14,1265,4.403,1266,4.718,1267,4.141,1268,4.73,1269,4.718,1270,4.718,1271,4.718,1272,2.891,1274,3.422,1286,4.383,1505,3.973,1509,5.112,1601,5.112,1602,4.383,1603,6.442,1604,6.442,1605,5.64,1606,5.006,1607,6.442,1608,5.006,1609,6.442,1610,5.006,1611,5.006,1612,5.006,1613,5.006,1614,5.006,1615,5.006,1616,5.006]],["title/interfaces/TokenPayload.html",[0,0.23,1368,3.047]],["body/interfaces/TokenPayload.html",[0,0.36,2,1.632,3,0.194,4,0.155,5,0.175,7,0.317,8,1.198,19,0.275,20,0.011,23,0.732,27,0.194,28,0.009,37,0.009,132,0.01,356,3.306,436,2.442,1368,5.858,1617,5.698]],["title/injectables/TransformInterceptor.html",[389,1.176,1510,3.047]],["body/injectables/TransformInterceptor.html",[0,0.286,3,0.154,4,0.123,5,0.139,7,0.252,9,0.845,11,0.975,19,0.219,20,0.012,21,1.051,25,0.238,26,0.376,27,0.196,28,0.007,37,0.007,40,1.802,116,0.395,132,0.009,133,0.306,147,0.958,149,1.15,186,0.988,187,1.751,199,1.411,202,1.15,297,1.506,322,2.674,389,1.859,390,2.402,470,3.797,490,2.467,530,1.859,761,2.734,1246,3.797,1252,5.201,1254,5.295,1255,4.102,1256,5.163,1257,5.882,1259,5.882,1260,4.648,1261,4.815,1262,4.394,1263,5.201,1264,5.201,1265,4.494,1266,4.815,1267,4.226,1268,4.777,1269,4.815,1270,4.815,1271,4.815,1272,2.985,1273,3.533,1274,3.533,1508,4.102,1509,5.218,1510,4.815,1511,4.525,1618,5.168]],["title/classes/UpdateTagsDto.html",[133,0.176,600,2.529]],["body/classes/UpdateTagsDto.html",[0,0.368,3,0.157,4,0.125,5,0.141,8,1.052,19,0.341,20,0.012,23,0.701,25,0.252,27,0.236,28,0.007,37,0.007,116,0.603,132,0.009,133,0.334,135,1.788,172,1.907,199,0.974,206,2.059,275,2.763,284,2.35,297,1.936,346,3.088,347,2.35,423,2.972,429,2.11,454,2.578,457,2.335,464,2.668,521,2.35,530,1.486,562,2.763,563,3.377,564,4.683,567,3.034,568,3.347,569,3.836,570,3.836,571,4.207,572,4.01,573,3.656,574,2.763,575,3.494,576,2.763,577,3.034,578,3.259,579,3.034,580,3.034,581,3.034,582,3.494,583,3.034,584,3.034,585,2.54,586,3.034,587,3.034,588,3.034,589,3.591,590,3.034,591,2.763,592,3.034,593,3.034,594,3.034,595,3.034,596,3.591,597,3.591,598,3.034,599,3.034,600,4.039,601,3.848]],["title/classes/UpdateUserDto.html",[133,0.176,663,2.402]],["body/classes/UpdateUserDto.html",[0,0.301,3,0.116,4,0.093,5,0.104,8,0.861,19,0.341,20,0.012,23,0.78,25,0.244,27,0.213,28,0.005,37,0.005,50,2.238,51,1.652,53,1.323,73,2.355,116,0.479,132,0.007,133,0.302,135,1.324,172,1.412,186,0.744,199,0.721,206,1.942,260,1.395,263,1.562,275,2.045,284,1.74,297,1.585,332,1.942,346,3.44,347,1.74,353,2.5,355,1.562,356,2.972,358,3.454,365,2.68,409,3.305,416,3.716,423,2.432,429,1.562,444,2.364,445,2.364,446,4.342,454,2.432,457,1.911,464,2.183,466,2.5,468,1.412,484,2.5,521,1.74,530,1.1,537,1.959,567,2.246,568,3.599,569,4.274,570,4.274,571,3.62,572,3.45,573,2.992,574,2.045,576,2.045,577,2.246,578,2.804,579,2.246,580,2.246,581,2.246,582,3.297,583,2.246,584,2.246,585,1.88,586,2.246,587,2.246,588,2.246,590,4.125,591,2.045,592,2.246,593,2.246,594,2.246,595,2.246,598,3.92,599,2.246,602,2.045,603,2.5,604,4.029,605,5.42,606,5.42,611,3.495,617,3.716,618,4.971,619,3.716,620,2.848,621,2.658,622,3.305,623,2.848,624,2.848,625,2.848,626,2.848,627,2.848,628,2.848,629,2.848,630,2.848,631,2.848,632,3.982,633,2.848,634,2.848,635,2.848,636,2.364,637,2.848,638,2.848,639,2.848,640,2.848,641,2.658,642,2.848,643,2.658,644,2.848,645,2.848,646,2.848,647,2.848,648,2.848,649,3.716,650,2.848,651,2.848,652,2.658,653,3.982,654,2.658,655,2.5,656,2.848,657,2.848,658,3.982,659,3.982,660,2.658,661,2.658,662,2.848,663,3.14,664,2.848]],["title/classes/User.html",[53,1.013,133,0.176]],["body/classes/User.html",[0,0.228,3,0.079,4,0.064,5,0.071,7,0.13,8,0.967,9,1.192,18,0.421,19,0.359,20,0.012,23,0.778,25,0.212,27,0.182,28,0.004,36,0.629,37,0.004,50,2.22,51,1.572,53,1.375,73,2.353,116,0.557,132,0.006,133,0.258,135,0.906,147,1.488,149,1.257,172,0.966,186,0.509,199,0.932,202,1.257,206,2.364,260,1.359,263,1.651,275,2.163,284,1.191,297,1.464,332,2.299,346,3.001,347,1.191,353,2.643,355,1.651,356,2.979,358,3.587,365,2.292,403,1.839,409,2.5,416,3.862,423,3.319,426,3.679,427,3.434,428,3.011,429,2.269,430,2.81,431,3.679,432,3.263,433,3.011,436,2.292,437,2.014,438,1.949,441,1.618,444,2.5,445,3.054,446,4.578,448,2.112,449,2.112,450,1.988,451,3.011,453,1.949,454,1.949,457,1.445,464,2.017,466,2.643,468,0.966,484,1.711,521,1.191,530,1.163,537,2.072,567,1.537,568,3.078,569,4.284,570,4.284,571,3.728,572,2.765,573,2.263,574,1.4,576,2.643,577,1.537,578,2.248,579,1.537,580,1.537,581,1.537,582,2.643,583,1.537,584,1.537,585,1.287,586,1.537,587,1.537,588,2.374,590,4.208,591,1.4,592,1.537,593,1.537,594,1.537,595,1.537,598,3.263,599,1.537,602,1.4,603,1.711,604,3.632,605,5.433,606,5.433,611,2.643,617,2.81,618,4.929,619,3.862,620,3.011,621,2.81,622,3.435,623,1.949,624,1.949,625,1.949,626,1.949,627,3.011,628,3.011,629,3.011,630,3.011,631,3.011,632,4.139,633,3.011,634,3.011,635,3.011,636,2.5,637,3.011,638,3.011,639,3.011,640,3.011,641,2.81,642,3.011,643,2.81,644,3.011,645,3.011,646,3.011,647,3.011,648,3.011,649,3.862,650,3.011,651,3.011,652,2.81,653,3.011,654,1.819,655,1.711,656,3.011,657,1.949,658,3.011,659,3.011,660,1.819,661,1.819,662,1.949,663,1.537,664,1.949,1554,5.092,1555,2.33,1556,2.33,1557,2.33,1558,2.33,1559,2.33,1560,2.33,1561,2.33,1562,2.33,1619,4.112,1620,3.6,1621,2.662,1622,2.662,1623,2.662,1624,2.662,1625,2.662,1626,2.662,1627,2.662,1628,2.662,1629,2.662,1630,2.662,1631,2.662]],["title/interfaces/UserPost.html",[0,0.23,85,1.462]],["body/interfaces/UserPost.html",[0,0.46,1,2.53,2,0.833,3,0.099,4,0.079,5,0.089,6,1.167,7,0.162,8,0.769,10,0.884,11,0.72,12,1.779,13,1.505,14,0.809,15,0.911,16,1.333,17,0.809,18,1.365,19,0.347,20,0.012,21,0.987,22,1.954,23,0.802,24,1.356,25,0.109,26,0.242,27,0.251,28,0.007,29,1.653,30,1.653,31,1.653,32,1.653,33,1.653,34,1.653,35,1.653,36,1.821,37,0.006,38,2.721,39,1.246,40,1.663,41,1.246,42,1.246,43,1.246,44,1.246,45,1.246,46,1.246,47,1.167,48,1.246,49,1.246,50,1.095,51,2.016,52,1.167,53,0.809,54,1.822,55,1.246,56,2.084,57,1.246,58,1.246,59,1.246,60,1.246,61,1.246,62,1.246,63,1.246,64,1.246,65,1.246,66,1.246,67,1.246,68,2.154,69,1.822,70,1.246,71,1.246,72,1.246,73,1.893,74,1.246,75,1.246,76,1.822,77,1.246,78,1.246,79,1.246,80,1.246,81,1.246,82,2.665,83,1.246,84,2.22,85,2.018,86,2.37,87,2.37,88,2.37,89,2.37,90,2.37,91,2.37,92,2.37,93,2.37,94,2.37,95,2.522,96,2.37,97,2.37,98,2.37,99,1.167,100,1.246,101,1.246,102,2.22,103,1.246,104,1.246,105,1.246,106,1.246,107,1.246,108,1.246,109,1.246,110,1.246,111,1.095,112,1.246,113,1.246,114,1.246,115,1.246,116,0.254,117,1.246,118,1.246,119,1.246,120,1.246,121,1.246,122,1.167,123,2.018,124,1.246,125,1.246,126,1.246,127,1.707,128,1.653,129,1.246,130,1.246,131,1.246,132,0.007]],["title/interfaces/UserPosts.html",[0,0.23,99,1.462]],["body/interfaces/UserPosts.html",[0,0.466,1,2.603,2,0.926,3,0.11,4,0.088,5,0.099,6,1.297,7,0.18,8,0.83,10,0.983,11,0.777,12,1.888,13,1.624,14,0.898,15,1.013,16,1.438,17,0.898,18,1.364,19,0.296,20,0.012,21,1.065,22,2.074,23,0.799,24,1.439,25,0.121,26,0.269,27,0.254,28,0.007,29,1.784,30,1.784,31,1.784,32,1.784,33,1.784,34,1.784,35,1.784,36,1.567,37,0.007,38,2.808,39,1.385,40,1.716,41,1.385,42,1.385,43,1.385,44,1.385,45,1.385,46,1.385,47,1.297,48,1.385,49,1.385,50,1.217,51,2.026,52,1.297,53,0.898,54,1.966,55,1.385,56,2.212,57,1.385,58,1.385,59,1.385,60,1.385,61,1.385,62,1.385,63,1.385,64,1.385,65,1.385,66,1.385,67,1.385,68,2.286,69,1.966,70,1.385,71,1.385,72,1.385,73,2.009,74,1.385,75,1.385,76,1.966,77,1.385,78,1.385,79,1.385,80,1.385,81,1.385,82,2.331,83,1.385,84,1.842,85,2.331,86,1.385,87,1.385,88,1.385,89,1.385,90,1.385,91,1.385,92,1.385,93,1.385,94,1.385,95,1.966,96,1.385,97,1.385,98,1.385,99,1.842,100,2.489,101,2.489,102,2.331,103,1.385,104,1.385,105,1.385,106,1.385,107,1.385,108,1.385,109,1.385,110,1.385,111,1.217,112,1.385,113,1.385,114,1.385,115,1.385,116,0.282,117,1.385,118,1.385,119,1.385,120,1.385,121,1.385,122,1.297,123,2.141,124,1.385,125,1.385,126,1.385,127,1.842,128,1.784,129,1.385,130,1.385,131,1.385,132,0.007]],["title/controllers/UsersController.html",[195,1.794,1632,3.047]],["body/controllers/UsersController.html",[3,0.134,4,0.107,5,0.12,7,0.218,9,1.103,11,1.113,16,1.643,18,1.068,19,0.285,20,0.012,23,0.617,24,1.058,25,0.247,26,0.326,27,0.134,28,0.006,37,0.006,53,1.827,116,0.515,132,0.008,133,0.189,140,1.574,147,1.251,149,1.501,150,3.018,172,1.626,179,2.174,186,1.29,187,2.056,195,1.931,197,2.082,199,1.11,202,1.501,203,2.723,206,1.388,260,1.332,284,3.018,332,2.515,340,3.849,341,3.849,349,3.15,356,3.014,365,2.247,367,2.356,403,3.222,429,3.014,464,1.799,468,1.626,531,3.102,533,3.813,535,2.356,602,3.788,663,4.159,747,2.879,761,1.863,833,4.215,980,4.093,997,3.061,1001,2.879,1002,5.906,1007,4.965,1014,5.243,1023,2.723,1028,4.752,1029,3.554,1030,6.305,1036,5.906,1045,3.554,1050,3.554,1051,3.554,1052,3.554,1053,3.554,1055,3.554,1084,4.093,1096,3.061,1568,3.28,1576,3.921,1577,3.921,1632,4.386,1633,3.921,1634,5.988,1635,4.479,1636,4.479,1637,4.479,1638,4.479,1639,6.572,1640,4.479,1641,4.479,1642,3.921,1643,3.921,1644,4.479,1645,4.479,1646,4.479,1647,4.479]],["title/modules/UsersModule.html",[209,1.671,224,2.674]],["body/modules/UsersModule.html",[3,0.176,4,0.141,5,0.159,20,0.012,25,0.253,26,0.43,27,0.176,28,0.008,37,0.008,132,0.01,133,0.25,187,1.572,197,3.319,209,3.28,211,2.975,212,3.106,213,3.41,214,2.745,215,3.106,216,4.225,217,4.225,224,5.398,225,4.124,226,3.41,227,3.25,349,4.55,1632,5.623,1639,6.253,1643,5.171,1648,5.171,1649,5.171,1650,5.171,1651,5.905,1652,5.905]],["title/injectables/UsersService.html",[349,2.188,389,1.176]],["body/injectables/UsersService.html",[3,0.105,4,0.084,5,0.095,7,0.172,9,1.319,11,1.063,18,1.265,19,0.341,20,0.012,21,1.03,23,0.724,25,0.226,26,0.256,27,0.105,28,0.005,37,0.01,53,1.744,116,0.616,132,0.007,133,0.149,144,1.465,147,1.507,149,1.794,164,4.349,186,1.564,199,0.94,202,1.794,260,1.128,267,1.279,268,1.279,323,1.322,332,2.664,349,2.666,355,1.415,356,2.608,358,1.704,365,2.437,382,2.796,389,1.434,390,1.638,409,3.082,418,3.085,419,3.713,429,2.763,436,1.322,437,1.162,454,1.367,457,1.782,464,2.036,467,3.082,530,1.434,531,2.608,533,3.14,562,2.666,585,1.704,602,3.769,652,3.465,654,2.408,655,2.265,663,3.75,761,1.465,797,2.666,833,1.853,851,2.927,989,4.058,990,3.465,991,3.465,1001,2.265,1007,3.817,1009,3.268,1013,2.408,1018,2.408,1019,2.581,1023,3.61,1024,2.581,1080,5.405,1083,5.154,1084,4.439,1085,3.713,1086,2.796,1087,5.154,1090,5.46,1092,5.039,1093,4.712,1094,2.796,1096,4.058,1098,2.796,1100,2.581,1103,2.796,1113,3.085,1114,3.085,1118,3.085,1149,2.796,1554,5.534,1568,2.581,1586,3.085,1587,3.085,1588,3.085,1589,3.085,1590,3.085,1591,3.085,1592,3.085,1593,3.085,1595,3.085,1620,4.438,1642,3.085,1653,3.085,1654,3.523,1655,5.069,1656,3.523,1657,5.069,1658,3.523,1659,3.523,1660,3.523,1661,3.523,1662,3.523,1663,3.523,1664,3.523,1665,3.523]],["title/classes/ValidationFailedFilter.html",[133,0.176,1666,3.302]],["body/classes/ValidationFailedFilter.html",[3,0.152,4,0.122,5,0.137,7,0.249,9,0.834,11,0.967,13,2.021,16,1.789,19,0.304,20,0.012,24,1.205,25,0.215,26,0.371,27,0.152,28,0.007,37,0.007,40,1.17,116,0.39,132,0.009,133,0.304,135,1.737,140,1.793,142,3.964,143,3.737,147,0.946,149,1.135,179,1.852,180,3.487,187,1.736,190,4.15,199,1.209,202,1.135,237,2.684,260,1.742,297,1.901,454,1.98,467,4.604,470,3.766,480,2.371,481,2.371,490,2.447,521,2.917,547,3.955,582,3.43,761,2.712,858,3.766,1246,3.766,1262,3.766,1443,4.049,1444,5.709,1445,7.285,1446,6.292,1447,5.709,1455,6.631,1456,6.631,1458,5.709,1459,5.709,1460,5.709,1461,5.709,1462,4.467,1463,4.467,1464,4.467,1465,4.467,1466,4.467,1470,4.049,1471,4.467,1666,5.175,1667,5.709,1668,7.574,1669,5.102,1670,5.102,1671,6.521,1672,5.102,1673,5.102]],["title/coverage.html",[1674,4.521]],["body/coverage.html",[0,0.461,1,0.823,5,0.065,6,2.793,19,0.102,20,0.012,28,0.003,29,0.823,30,0.823,31,0.823,32,0.823,33,0.823,34,0.823,35,0.823,37,0.005,40,0.555,47,0.85,53,0.929,82,0.85,84,0.85,85,0.85,99,0.85,102,0.85,122,0.85,123,0.85,127,0.85,128,0.823,132,0.005,133,0.338,134,1.92,136,3.651,137,2.795,138,3.029,179,0.878,184,3.083,185,1.772,195,2.675,196,1.772,198,2.118,215,1.273,228,1.92,230,1.772,254,1.772,261,1.92,330,1.654,331,3.029,336,1.772,345,1.332,346,1.124,349,1.273,351,1.397,371,1.654,372,1.654,389,2.08,391,2.118,423,1.082,424,3.029,425,1.772,441,1.471,488,1.17,489,3.813,508,1.17,509,1.471,515,1.471,517,1.17,549,1.645,551,1.17,562,1.273,563,3.449,564,1.555,568,1.219,575,1.273,576,2.486,600,1.471,602,1.273,603,3.449,604,1.555,611,1.555,643,1.654,663,1.397,667,1.654,668,1.654,673,2.118,677,1.772,738,5.358,792,1.471,793,3.754,794,3.754,803,1.471,804,1.471,805,1.471,806,1.471,808,1.471,828,1.397,862,1.471,884,1.471,980,1.654,981,2.118,985,1.654,993,1.654,1004,2.453,1009,1.332,1034,1.471,1080,1.654,1081,2.118,1119,4.258,1166,4.258,1172,1.92,1176,1.92,1189,1.555,1192,1.654,1193,2.118,1198,1.92,1202,1.772,1203,2.118,1210,1.555,1223,2.118,1239,2.118,1248,1.92,1249,3.029,1250,3.029,1287,2.118,1335,2.118,1345,2.795,1364,2.118,1368,1.772,1388,2.118,1415,2.118,1416,2.118,1418,1.92,1441,1.92,1442,2.118,1443,3.029,1478,2.608,1479,1.92,1481,2.118,1508,3.029,1510,1.772,1512,1.92,1513,2.118,1563,1.772,1564,2.118,1570,1.555,1583,2.118,1601,1.92,1602,2.118,1617,2.118,1632,1.772,1633,2.118,1653,2.118,1666,1.92,1667,2.118,1674,1.92,1675,2.419,1676,2.419,1677,6.928,1678,8.426,1679,8.619,1680,7.64,1681,6.205,1682,5.84,1683,3.341,1684,2.118,1685,2.118,1686,7.714,1687,2.419,1688,2.419,1689,2.419,1690,2.419,1691,2.419,1692,2.118,1693,2.118,1694,1.92,1695,2.419,1696,3.816,1697,4.726,1698,2.419,1699,2.419,1700,2.118,1701,7.034,1702,2.118,1703,2.118,1704,2.118,1705,2.118,1706,2.118,1707,2.118,1708,2.118,1709,2.118,1710,2.118,1711,2.118,1712,2.118,1713,3.029,1714,2.118,1715,2.118,1716,2.118,1717,2.118,1718,3.341,1719,2.118,1720,5.365,1721,2.419,1722,2.118,1723,2.419,1724,2.419,1725,2.419,1726,2.419,1727,3.751,1728,4.138,1729,4.138,1730,3.751,1731,3.751,1732,4.726,1733,2.118,1734,5.365,1735,2.118,1736,2.118,1737,3.341,1738,2.118,1739,2.118,1740,2.419,1741,2.419,1742,5.84,1743,3.816,1744,2.118,1745,5.113,1746,2.118,1747,2.118,1748,2.118,1749,2.419,1750,2.419,1751,2.419,1752,2.419,1753,2.419,1754,2.419,1755,2.419]],["title/dependencies.html",[212,2.635,1756,3.465]],["body/dependencies.html",[4,0.12,20,0.012,26,0.364,28,0.007,37,0.007,132,0.009,133,0.272,139,3.218,172,1.817,192,3.666,206,1.551,212,2.633,241,3.043,243,4.383,245,3.422,247,3.973,249,4.383,344,3.043,347,2.24,348,6.175,376,3.973,409,3.043,454,3.019,460,3.666,462,3.973,477,2.755,524,3.218,549,2.158,670,3.422,801,2.891,802,3.218,822,2.891,988,3.973,1142,4.383,1167,6.236,1168,3.666,1179,3.973,1272,2.891,1273,3.422,1305,4.383,1374,5.653,1375,4.383,1396,4.383,1694,5.112,1757,5.006,1758,5.006,1759,6.442,1760,7.122,1761,5.006,1762,5.006,1763,5.006,1764,5.006,1765,5.006,1766,5.006,1767,5.006,1768,6.442,1769,5.006,1770,5.006,1771,6.442,1772,5.006,1773,5.006,1774,5.006,1775,5.006,1776,5.006,1777,6.442,1778,5.006,1779,5.006,1780,6.442,1781,5.006,1782,5.006,1783,5.006,1784,5.006,1785,5.006,1786,5.006,1787,5.006,1788,5.006,1789,5.006,1790,5.006,1791,5.006,1792,5.006,1793,5.006,1794,5.006,1795,5.006,1796,5.006,1797,5.006,1798,5.006,1799,5.006,1800,5.006,1801,5.006,1802,5.006,1803,5.006,1804,5.006,1805,5.006,1806,5.006,1807,5.006,1808,5.006,1809,5.006,1810,5.006,1811,5.006,1812,5.006,1813,5.006,1814,5.006,1815,3.973,1816,5.006,1817,5.006,1818,5.006]],["title/miscellaneous/enumerations.html",[1819,2.001,1820,4.386]],["body/miscellaneous/enumerations.html",[7,0.324,20,0.011,28,0.009,37,0.009,132,0.01,437,2.525,1345,4.866,1353,6.076,1354,6.076,1355,6.076,1819,3.837,1820,5.817,1821,6.644]],["title/miscellaneous/functions.html",[1819,2.001,1822,4.386]],["body/miscellaneous/functions.html",[7,0.217,9,1.397,19,0.326,20,0.012,21,0.905,28,0.006,36,1.409,37,0.006,51,1.637,116,0.653,132,0.008,136,2.572,137,3.262,138,4.734,140,1.565,146,2.863,149,1.901,185,4.927,202,1.822,215,3.538,229,4.927,236,3.044,313,3.78,345,3.283,346,2.773,437,2.597,450,3.253,489,2.451,530,1.902,536,2.863,553,2.863,554,2.863,677,4.369,1004,3.835,1119,3.534,1143,5.338,1144,3.899,1145,4.369,1146,3.899,1168,5.862,1249,3.534,1250,4.734,1275,3.899,1276,3.899,1277,3.899,1278,3.899,1713,4.734,1722,5.223,1727,3.534,1728,6.751,1729,6.751,1730,3.534,1731,3.534,1733,5.223,1735,3.899,1736,5.223,1737,6.291,1738,3.899,1739,5.223,1744,5.223,1745,3.899,1746,5.223,1747,5.223,1748,5.223,1819,2.572,1822,3.899,1823,4.454,1824,4.734,1825,7.492,1826,5.223,1827,5.223,1828,5.223,1829,6.727,1830,4.454,1831,4.454,1832,4.454,1833,4.454,1834,4.454,1835,4.454,1836,4.454,1837,4.454,1838,6.727,1839,6.727,1840,4.454,1841,5.966]],["title/index.html",[7,0.169,1842,3.465,1843,3.465]],["body/index.html",[4,0.137,20,0.012,28,0.008,37,0.008,132,0.009,187,1.524,192,4.193,229,4.193,277,4.543,278,5.562,314,6.631,324,2.661,677,6.034,1605,5.013,1674,4.543,1815,4.543,1844,5.725,1845,5.725,1846,7.008,1847,5.725,1848,5.725,1849,5.725,1850,5.725,1851,5.725,1852,5.725,1853,5.725,1854,5.725,1855,8.343,1856,5.725,1857,5.725,1858,5.725,1859,5.725,1860,7.008,1861,5.725,1862,5.725,1863,5.725,1864,7.008,1865,5.725,1866,5.725,1867,5.725,1868,7.008,1869,7.008,1870,5.725,1871,5.725,1872,5.725,1873,5.725,1874,5.725,1875,5.725,1876,5.725,1877,5.725,1878,5.725,1879,5.725,1880,5.725,1881,5.725,1882,5.725,1883,5.725,1884,5.725,1885,5.725,1886,5.725,1887,5.725,1888,5.725,1889,5.725,1890,5.725,1891,5.725]],["title/modules.html",[211,2.87]],["body/modules.html",[20,0.01,28,0.008,37,0.008,132,0.01,210,4.625,211,3.182,220,4.316,221,4.316,222,4.316,223,4.316,224,4.059,252,4.316,1185,4.316,1815,6.753,1892,8.509,1893,8.509,1894,8.571,1895,6.315,1896,6.315]],["title/overview.html",[1897,4.988]],["body/overview.html",[2,1.286,20,0.012,28,0.007,37,0.007,132,0.009,135,1.745,197,2.383,209,2.059,210,6.22,211,2.583,212,2.697,213,2.961,214,2.383,215,2.697,216,2.822,217,2.822,218,4.489,219,4.489,220,5.774,221,4.923,222,5.568,223,5.478,224,5.236,225,3.777,226,2.961,227,2.822,252,5.478,349,4.285,351,4.16,368,4.489,369,4.489,371,4.923,372,4.923,390,2.383,589,3.504,621,3.504,655,3.296,665,4.489,666,4.489,667,4.923,668,4.923,1185,5.478,1186,4.489,1187,4.489,1188,4.489,1189,5.236,1210,4.63,1217,4.489,1218,4.489,1480,4.069,1570,5.236,1578,4.489,1579,4.489,1580,4.489,1648,4.489,1649,4.489,1650,4.489,1897,4.489,1898,5.127,1899,5.127,1900,5.127]],["title/miscellaneous/typealiases.html",[1819,2.001,1901,5.009]],["body/miscellaneous/typealiases.html",[6,2.056,7,0.285,12,1.813,19,0.3,20,0.012,22,2.417,23,0.535,28,0.01,29,1.992,30,1.992,31,1.992,32,1.992,33,1.992,34,1.992,35,1.992,36,1.382,37,0.008,56,2.578,128,1.992,132,0.01,136,3.062,489,3.22,494,3.578,500,3.761,501,2.948,502,3.761,503,3.761,504,3.761,505,3.761,506,3.761,507,2.948,563,3.761,572,3.909,573,3.909,596,4.854,597,4.854,603,3.761,660,4.854,661,4.854,1056,3.761,1819,3.379,1824,4.644,1902,5.851,1903,7.646,1904,7.102,1905,5.851,1906,7.102,1907,7.102,1908,7.102,1909,5.851]],["title/miscellaneous/variables.html",[1819,2.001,1910,4.386]],["body/miscellaneous/variables.html",[7,0.147,18,0.477,19,0.312,20,0.012,23,0.643,28,0.004,36,0.711,37,0.004,51,2.007,53,1.099,111,1.489,132,0.006,136,2.596,184,1.168,186,1.152,228,2.39,254,3.308,260,0.67,261,3.584,262,2.636,263,2.72,264,2.636,265,2.636,266,2.636,267,1.64,268,1.093,269,2.636,270,2.636,271,2.636,272,2.636,273,2.636,274,2.636,275,1.584,276,2.636,277,2.39,278,2.39,279,2.636,280,2.636,281,2.636,282,5.931,283,2.636,284,1.347,285,2.636,286,2.636,287,1.456,290,2.39,332,1.4,383,2.39,436,3.224,437,2.83,450,2.184,457,1.058,478,4.119,480,1.399,481,1.399,489,1.657,516,1.739,522,1.399,530,1.824,549,1.947,550,1.936,551,2.184,552,1.936,555,1.517,568,2.276,575,2.851,576,3.563,611,2.903,738,3.661,803,2.746,804,2.746,805,2.746,806,2.746,828,2.608,847,1.936,848,1.936,984,3.308,985,3.087,1004,2.903,1166,2.39,1168,3.969,1170,2.636,1172,4.301,1173,2.636,1174,2.636,1175,2.636,1176,3.584,1177,2.636,1178,2.636,1179,2.39,1180,2.636,1181,2.636,1182,2.636,1183,2.636,1184,2.636,1198,3.584,1440,2.636,1505,2.39,1683,2.636,1684,3.954,1685,3.954,1692,2.636,1693,3.954,1694,3.584,1700,2.636,1701,2.636,1702,3.954,1703,3.954,1704,3.954,1705,3.954,1706,3.954,1707,3.954,1708,3.954,1709,3.954,1710,3.954,1711,3.954,1712,3.954,1713,3.584,1714,3.954,1715,3.954,1716,3.954,1717,3.954,1718,2.636,1719,3.954,1727,2.39,1730,2.39,1731,2.39,1819,1.739,1824,3.584,1826,2.636,1827,2.636,1828,2.636,1910,2.636,1911,3.011,1912,3.011,1913,6.022,1914,4.516,1915,8.279,1916,4.516,1917,3.011,1918,4.516,1919,3.011,1920,8.591,1921,3.011,1922,3.011,1923,3.011,1924,4.516,1925,3.011,1926,3.011,1927,3.011,1928,3.011,1929,4.516,1930,3.011,1931,3.011,1932,4.516,1933,3.011,1934,3.011,1935,3.011,1936,3.011,1937,3.011,1938,3.011,1939,3.011,1940,3.011,1941,4.516,1942,3.011,1943,3.011,1944,3.011,1945,3.011,1946,3.011,1947,4.516,1948,3.011,1949,3.011,1950,3.011,1951,3.011,1952,3.011,1953,3.011,1954,3.011,1955,3.011,1956,3.011,1957,3.011,1958,3.011,1959,3.011,1960,3.011,1961,3.011,1962,3.011,1963,3.011]],["title/routes.html",[519,3.463]],["body/routes.html",[20,0.01,28,0.009,37,0.009,132,0.01,519,4.16]]],"invertedIndex":[["",{"_index":20,"title":{},"body":{"interfaces/APIResponse.html":{},"classes/ApiException.html":{},"controllers/AppController.html":{},"interfaces/AppLaunchAction.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseModel.html":{},"interfaces/BaseRoute.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"modules/CronModule.html":{},"injectables/CronService.html":{},"classes/CrudConfigService.html":{},"classes/CrudController.html":{},"interfaces/CrudOptions.html":{},"classes/CrudRoutesFactory.html":{},"classes/CrudService.html":{},"classes/CustomQueryBuilder.html":{},"modules/DatabaseModule.html":{},"modules/EmailModule.html":{},"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"modules/EmailSchedulingModule.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/ExcludeNullUndefinedInterceptor.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"controllers/HealthController.html":{},"interfaces/IBaseModel.html":{},"interfaces/ICrudService.html":{},"interfaces/IPaginationResult.html":{},"interfaces/ITag.html":{},"interfaces/IUser.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginCredsDto.html":{},"classes/PaginationParams.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"injectables/PersistedCronService.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"classes/QueryFailedFilter.html":{},"classes/R.html":{},"guards/RequestGuard.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Response.html":{},"guards/ResponseGuard.html":{},"interfaces/Result.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"classes/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"injectables/TimeoutInterceptor.html":{},"interfaces/TokenPayload.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateTagsDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/ValidationFailedFilter.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{},"routes.html":{}}}],["0",{"_index":738,"title":{},"body":{"injectables/CronService.html":{},"classes/CrudService.html":{},"classes/CustomQueryBuilder.html":{},"interfaces/IPaginationResult.html":{},"classes/PaginationParams.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["0.1.1",{"_index":1766,"title":{},"body":{"dependencies.html":{}}}],["0.1.13",{"_index":1811,"title":{},"body":{"dependencies.html":{}}}],["0.12.2",{"_index":1785,"title":{},"body":{"dependencies.html":{}}}],["0.21.15",{"_index":1797,"title":{},"body":{"dependencies.html":{}}}],["0.3.1",{"_index":1759,"title":{},"body":{"dependencies.html":{}}}],["0.4.1",{"_index":1771,"title":{},"body":{"dependencies.html":{}}}],["0.4.5",{"_index":1805,"title":{},"body":{"dependencies.html":{}}}],["0.5.19",{"_index":1816,"title":{},"body":{"dependencies.html":{}}}],["0.6.1",{"_index":1761,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":1679,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":1695,"title":{},"body":{"coverage.html":{}}}],["0/12",{"_index":1749,"title":{},"body":{"coverage.html":{}}}],["0/14",{"_index":1696,"title":{},"body":{"coverage.html":{}}}],["0/15",{"_index":1741,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1677,"title":{},"body":{"coverage.html":{}}}],["0/20",{"_index":1752,"title":{},"body":{"coverage.html":{}}}],["0/23",{"_index":1740,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1680,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1697,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":1682,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":1681,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":1720,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":1721,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":1732,"title":{},"body":{"coverage.html":{}}}],["01]\\d",{"_index":1934,"title":{},"body":{"miscellaneous/variables.html":{}}}],["0})@isoptional()@min(0)@transform(undefined",{"_index":1410,"title":{},"body":{"classes/PaginationParams.html":{}}}],["1",{"_index":622,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/CronService.html":{},"classes/CustomQueryBuilder.html":{},"controllers/HealthController.html":{},"interfaces/IUser.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["1.0.0",{"_index":1808,"title":{},"body":{"dependencies.html":{}}}],["1.1.0",{"_index":1806,"title":{},"body":{"dependencies.html":{}}}],["1.1.2",{"_index":1803,"title":{},"body":{"dependencies.html":{}}}],["1.2.0",{"_index":1782,"title":{},"body":{"dependencies.html":{}}}],["1.8.2",{"_index":1786,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":1734,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":1361,"title":{},"body":{"interfaces/IPaginationResult.html":{},"classes/PaginationParams.html":{}}}],["10/10",{"_index":1689,"title":{},"body":{"coverage.html":{}}}],["10/19",{"_index":1724,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":1686,"title":{},"body":{"coverage.html":{}}}],["100000",{"_index":728,"title":{},"body":{"injectables/CronService.html":{}}}],["1024",{"_index":1327,"title":{},"body":{"controllers/HealthController.html":{}}}],["10_000",{"_index":1613,"title":{},"body":{"injectables/TimeoutInterceptor.html":{}}}],["12",{"_index":655,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/IUser.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["12345678",{"_index":357,"title":{},"body":{"controllers/AuthController.html":{},"classes/LoginCredsDto.html":{}}}],["12345678'})@isnotempty",{"_index":1405,"title":{},"body":{"classes/LoginCredsDto.html":{}}}],["15",{"_index":1150,"title":{},"body":{"classes/CustomQueryBuilder.html":{}}}],["15.5.0",{"_index":1792,"title":{},"body":{"dependencies.html":{}}}],["17.1.1",{"_index":1757,"title":{},"body":{"dependencies.html":{}}}],["2",{"_index":589,"title":{},"body":{"classes/CreateTagsDto.html":{},"interfaces/ITag.html":{},"classes/Tag.html":{},"classes/UpdateTagsDto.html":{},"overview.html":{}}}],["2.0.21",{"_index":1809,"title":{},"body":{"dependencies.html":{}}}],["2.1.4",{"_index":1773,"title":{},"body":{"dependencies.html":{}}}],["2.19.2",{"_index":1779,"title":{},"body":{"dependencies.html":{}}}],["2.2.6",{"_index":1802,"title":{},"body":{"dependencies.html":{}}}],["2.29.1",{"_index":1799,"title":{},"body":{"dependencies.html":{}}}],["2/2",{"_index":1742,"title":{},"body":{"coverage.html":{}}}],["2/4",{"_index":1726,"title":{},"body":{"coverage.html":{}}}],["2/6",{"_index":1699,"title":{},"body":{"coverage.html":{}}}],["200",{"_index":1520,"title":{},"body":{"guards/ResponseGuard.html":{}}}],["20922789888000",{"_index":740,"title":{},"body":{"injectables/CronService.html":{}}}],["21",{"_index":1899,"title":{},"body":{"overview.html":{}}}],["255",{"_index":590,"title":{},"body":{"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"interfaces/ITag.html":{},"interfaces/IUser.html":{},"classes/Tag.html":{},"classes/UpdateTagsDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["2]\\d(?::?[0",{"_index":1939,"title":{},"body":{"miscellaneous/variables.html":{}}}],["2]\\d:[0",{"_index":1936,"title":{},"body":{"miscellaneous/variables.html":{}}}],["3",{"_index":619,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/CrudService.html":{},"interfaces/IUser.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["3.0.1",{"_index":1804,"title":{},"body":{"dependencies.html":{}}}],["3.0.2",{"_index":1813,"title":{},"body":{"dependencies.html":{}}}],["3.20.0",{"_index":1784,"title":{},"body":{"dependencies.html":{}}}],["3/3",{"_index":1743,"title":{},"body":{"coverage.html":{}}}],["32",{"_index":1900,"title":{},"body":{"overview.html":{}}}],["33",{"_index":1698,"title":{},"body":{"coverage.html":{}}}],["3600",{"_index":1960,"title":{},"body":{"miscellaneous/variables.html":{}}}],["3]\\d(?:t[0",{"_index":1935,"title":{},"body":{"miscellaneous/variables.html":{}}}],["4.0.0",{"_index":1807,"title":{},"body":{"dependencies.html":{}}}],["4.0.2",{"_index":1801,"title":{},"body":{"dependencies.html":{}}}],["4.1.5",{"_index":1818,"title":{},"body":{"dependencies.html":{}}}],["4.17.1",{"_index":1789,"title":{},"body":{"dependencies.html":{}}}],["4.17.20",{"_index":1798,"title":{},"body":{"dependencies.html":{}}}],["4.2.0",{"_index":1796,"title":{},"body":{"dependencies.html":{}}}],["4.2.2",{"_index":1787,"title":{},"body":{"dependencies.html":{}}}],["4.7.5",{"_index":1774,"title":{},"body":{"dependencies.html":{}}}],["4/4",{"_index":1690,"title":{},"body":{"coverage.html":{}}}],["401",{"_index":1522,"title":{},"body":{"guards/ResponseGuard.html":{}}}],["5.0.0",{"_index":1780,"title":{},"body":{"dependencies.html":{}}}],["5.2.3",{"_index":1791,"title":{},"body":{"dependencies.html":{}}}],["50",{"_index":1725,"title":{},"body":{"coverage.html":{}}}],["50000",{"_index":731,"title":{},"body":{"injectables/CronService.html":{}}}],["50000000",{"_index":743,"title":{},"body":{"injectables/CronService.html":{}}}],["52",{"_index":1723,"title":{},"body":{"coverage.html":{}}}],["53",{"_index":1753,"title":{},"body":{"coverage.html":{}}}],["5]\\d(?:\\.\\d+)?(?:z",{"_index":1938,"title":{},"body":{"miscellaneous/variables.html":{}}}],["5]\\d)?)?)?$/g.test",{"_index":1940,"title":{},"body":{"miscellaneous/variables.html":{}}}],["5]\\d:[0",{"_index":1937,"title":{},"body":{"miscellaneous/variables.html":{}}}],["6",{"_index":1898,"title":{},"body":{"overview.html":{}}}],["6.6.3",{"_index":1814,"title":{},"body":{"dependencies.html":{}}}],["6/6",{"_index":1691,"title":{},"body":{"coverage.html":{}}}],["60",{"_index":753,"title":{},"body":{"injectables/CronService.html":{},"controllers/HealthController.html":{}}}],["7.0.1",{"_index":1775,"title":{},"body":{"dependencies.html":{}}}],["7.0.2",{"_index":1794,"title":{},"body":{"dependencies.html":{}}}],["7.1.5",{"_index":1767,"title":{},"body":{"dependencies.html":{}}}],["7.2.0",{"_index":1764,"title":{},"body":{"dependencies.html":{}}}],["7.5.1",{"_index":1760,"title":{},"body":{"dependencies.html":{}}}],["7.6.5",{"_index":1770,"title":{},"body":{"dependencies.html":{}}}],["7.9.8",{"_index":1763,"title":{},"body":{"dependencies.html":{}}}],["7/7",{"_index":1687,"title":{},"body":{"coverage.html":{}}}],["72",{"_index":1750,"title":{},"body":{"coverage.html":{}}}],["8",{"_index":621,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/IUser.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"overview.html":{}}}],["8.2.0",{"_index":1777,"title":{},"body":{"dependencies.html":{}}}],["8/11",{"_index":1751,"title":{},"body":{"coverage.html":{}}}],["8/15",{"_index":1754,"title":{},"body":{"coverage.html":{}}}],["8/8",{"_index":1688,"title":{},"body":{"coverage.html":{}}}],["9]*[.])?[0",{"_index":1950,"title":{},"body":{"miscellaneous/variables.html":{}}}],["9]+$/.test(val",{"_index":1951,"title":{},"body":{"miscellaneous/variables.html":{}}}],["_",{"_index":548,"title":{},"body":{"interfaces/BaseRoute.html":{},"interfaces/CrudOptions.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{}}}],["abortearly",{"_index":266,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["above",{"_index":307,"title":{},"body":{"modules/AppModule.html":{}}}],["abstract",{"_index":982,"title":{},"body":{"classes/CrudController.html":{},"classes/CrudService.html":{},"interfaces/IPaginationResult.html":{},"classes/PaginationParams.html":{}}}],["access",{"_index":1262,"title":{},"body":{"injectables/ExcludeNullUndefinedInterceptor.html":{},"classes/QueryFailedFilter.html":{},"guards/RequestGuard.html":{},"interfaces/Response.html":{},"guards/ResponseGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/ValidationFailedFilter.html":{}}}],["accessors",{"_index":1060,"title":{},"body":{"classes/CrudRoutesFactory.html":{}}}],["action",{"_index":49,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["actionid",{"_index":48,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["adcorporatelogourl",{"_index":96,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["addcronjob",{"_index":685,"title":{},"body":{"injectables/CronService.html":{}}}],["addcronjob(name",{"_index":702,"title":{},"body":{"injectables/CronService.html":{}}}],["added",{"_index":767,"title":{},"body":{"injectables/CronService.html":{},"injectables/EmailSchedulingService.html":{}}}],["addinterval",{"_index":686,"title":{},"body":{"injectables/CronService.html":{}}}],["addinterval(name",{"_index":708,"title":{},"body":{"injectables/CronService.html":{}}}],["addtimeout",{"_index":687,"title":{},"body":{"injectables/CronService.html":{}}}],["addtimeout(name",{"_index":712,"title":{},"body":{"injectables/CronService.html":{}}}],["admin@demo.com",{"_index":354,"title":{},"body":{"controllers/AuthController.html":{},"classes/LoginCredsDto.html":{}}}],["admin@demo.com'})@isnotempty",{"_index":1403,"title":{},"body":{"classes/LoginCredsDto.html":{}}}],["against",{"_index":587,"title":{},"body":{"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"interfaces/ITag.html":{},"interfaces/IUser.html":{},"classes/Tag.html":{},"classes/UpdateTagsDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["aliases",{"_index":1902,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["allowed",{"_index":1494,"title":{},"body":{"guards/RequestGuard.html":{},"guards/ResponseGuard.html":{}}}],["allowunknown",{"_index":265,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["alwayspaginate",{"_index":527,"title":{},"body":{"interfaces/BaseRoute.html":{},"classes/CrudConfigService.html":{},"interfaces/CrudOptions.html":{},"classes/CrudRoutesFactory.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["amazing",{"_index":1875,"title":{},"body":{"index.html":{}}}],["animalimageurl",{"_index":104,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["anu",{"_index":1348,"title":{},"body":{"interfaces/IPaginationResult.html":{},"classes/PaginationParams.html":{}}}],["any[]).every((o",{"_index":1925,"title":{},"body":{"miscellaneous/variables.html":{}}}],["api",{"_index":39,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["api:v1/rescue/getcomments?pageno=0&pagesize=10&postid=1230",{"_index":44,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["api:v1/rescue/getrescuelist?pageno=0&pagesize=10&status=pending|inprogress|completed|nearest",{"_index":43,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["api:v1/rescue/getuserfollowers?userid=1230",{"_index":45,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["api:v1/rescue/getuserfollowing?userid=1230",{"_index":46,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["api:v1/user/getuserposts?pageno=0&pagesize=25",{"_index":42,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["api:v1/user/getuserprofile?userid=25",{"_index":41,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["apibadrequestresponse",{"_index":166,"title":{},"body":{"classes/ApiException.html":{}}}],["apibearerauth",{"_index":1567,"title":{},"body":{"controllers/TagsController.html":{}}}],["apiconflictresponse",{"_index":171,"title":{},"body":{"classes/ApiException.html":{}}}],["apierror",{"_index":22,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/IPaginationResult.html":{},"classes/PaginationParams.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{},"miscellaneous/typealiases.html":{}}}],["apierrors",{"_index":185,"title":{},"body":{"classes/ApiException.html":{},"classes/CrudController.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["apiexception",{"_index":134,"title":{"classes/ApiException.html":{}},"body":{"classes/ApiException.html":{},"coverage.html":{}}}],["apiforbiddenresponse",{"_index":167,"title":{},"body":{"classes/ApiException.html":{}}}],["apiinternalservererrorresponse",{"_index":168,"title":{},"body":{"classes/ApiException.html":{}}}],["apinotfoundresponse",{"_index":169,"title":{},"body":{"classes/ApiException.html":{}}}],["apioperation",{"_index":1030,"title":{},"body":{"classes/CrudController.html":{},"controllers/UsersController.html":{}}}],["apioperation({summary",{"_index":1002,"title":{},"body":{"classes/CrudController.html":{},"controllers/UsersController.html":{}}}],["apiproperty",{"_index":345,"title":{},"body":{"controllers/AuthController.html":{},"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/LoginCredsDto.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["apiproperty(options",{"_index":553,"title":{},"body":{"interfaces/BaseRoute.html":{},"interfaces/CrudOptions.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"miscellaneous/functions.html":{}}}],["apiproperty({example",{"_index":1402,"title":{},"body":{"classes/LoginCredsDto.html":{}}}],["apipropertydecorator",{"_index":558,"title":{},"body":{"interfaces/BaseRoute.html":{},"interfaces/CrudOptions.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{}}}],["apipropertydecorator(options)(target",{"_index":561,"title":{},"body":{"interfaces/BaseRoute.html":{},"interfaces/CrudOptions.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{}}}],["apipropertyoptional",{"_index":151,"title":{},"body":{"classes/ApiException.html":{},"interfaces/IPaginationResult.html":{},"classes/PaginationParams.html":{}}}],["apipropertyoptional()@isoptional",{"_index":1407,"title":{},"body":{"classes/PaginationParams.html":{}}}],["apipropertyoptional({type",{"_index":1409,"title":{},"body":{"classes/PaginationParams.html":{}}}],["apiresponse",{"_index":1,"title":{"interfaces/APIResponse.html":{}},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"classes/CrudController.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{},"coverage.html":{}}}],["apitags",{"_index":203,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/EmailSchedulingController.html":{},"controllers/HealthController.html":{},"classes/LoginCredsDto.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["apitags(appcontroller.name",{"_index":205,"title":{},"body":{"controllers/AppController.html":{}}}],["apitags(authcontroller.name",{"_index":360,"title":{},"body":{"controllers/AuthController.html":{},"classes/LoginCredsDto.html":{}}}],["apitags(emailschedulingcontroller.name",{"_index":1212,"title":{},"body":{"controllers/EmailSchedulingController.html":{}}}],["apitags(healthcontroller.name",{"_index":1306,"title":{},"body":{"controllers/HealthController.html":{}}}],["apitags(tagscontroller.name",{"_index":1573,"title":{},"body":{"controllers/TagsController.html":{}}}],["apitags(userscontroller.name",{"_index":1645,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiunauthorizedresponse",{"_index":170,"title":{},"body":{"classes/ApiException.html":{}}}],["apollo",{"_index":1778,"title":{},"body":{"dependencies.html":{}}}],["app",{"_index":229,"title":{},"body":{"modules/AppModule.html":{},"injectables/PersistedCronService.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["app.controller",{"_index":250,"title":{},"body":{"modules/AppModule.html":{}}}],["appcontroller",{"_index":196,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["applaunchaction",{"_index":47,"title":{"interfaces/AppLaunchAction.html":{}},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{},"coverage.html":{}}}],["application",{"_index":298,"title":{},"body":{"modules/AppModule.html":{}}}],["applications",{"_index":1851,"title":{},"body":{"index.html":{}}}],["applicationshutdown",{"_index":328,"title":{},"body":{"modules/AppModule.html":{},"controllers/HealthController.html":{},"injectables/PersistedCronService.html":{}}}],["applydecorators",{"_index":159,"title":{},"body":{"classes/ApiException.html":{}}}],["appmodule",{"_index":210,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["areyoufollowing",{"_index":130,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["arguments",{"_index":1460,"title":{},"body":{"classes/QueryFailedFilter.html":{},"classes/ValidationFailedFilter.html":{}}}],["argumentshost",{"_index":1456,"title":{},"body":{"classes/QueryFailedFilter.html":{},"classes/ValidationFailedFilter.html":{}}}],["arr",{"_index":1942,"title":{},"body":{"miscellaneous/variables.html":{}}}],["arr.some((o",{"_index":1943,"title":{},"body":{"miscellaneous/variables.html":{}}}],["array",{"_index":858,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/QueryFailedFilter.html":{},"classes/R.html":{},"guards/ResponseGuard.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"classes/ValidationFailedFilter.html":{}}}],["array.isarray(val",{"_index":1928,"title":{},"body":{"miscellaneous/variables.html":{}}}],["array.isarray(value",{"_index":1147,"title":{},"body":{"classes/CustomQueryBuilder.html":{},"injectables/ExcludeNullUndefinedInterceptor.html":{}}}],["arraymerge",{"_index":881,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["arrayquerybuildertype",{"_index":1120,"title":{},"body":{"classes/CustomQueryBuilder.html":{}}}],["asc",{"_index":1355,"title":{},"body":{"interfaces/IPaginationResult.html":{},"classes/PaginationParams.html":{},"miscellaneous/enumerations.html":{}}}],["async",{"_index":332,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseModel.html":{},"classes/CreateUserDto.html":{},"classes/CrudController.html":{},"classes/CrudService.html":{},"classes/CustomQueryBuilder.html":{},"modules/DatabaseModule.html":{},"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"interfaces/IBaseModel.html":{},"interfaces/IUser.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginCredsDto.html":{},"injectables/PersistedCronService.html":{},"classes/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["asynchronous",{"_index":312,"title":{},"body":{"modules/AppModule.html":{}}}],["auth",{"_index":361,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/LoginCredsDto.html":{}}}],["auth.controller",{"_index":378,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.service",{"_index":352,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{},"classes/LoginCredsDto.html":{}}}],["auth/auth.module",{"_index":251,"title":{},"body":{"modules/AppModule.html":{}}}],["authcontroller",{"_index":330,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/LoginCredsDto.html":{},"coverage.html":{}}}],["authguard",{"_index":343,"title":{},"body":{"controllers/AuthController.html":{},"classes/LoginCredsDto.html":{},"controllers/TagsController.html":{}}}],["authmodule",{"_index":220,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":1884,"title":{},"body":{"index.html":{}}}],["authorized",{"_index":1385,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["authservice",{"_index":351,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"classes/LoginCredsDto.html":{},"coverage.html":{},"overview.html":{}}}],["available",{"_index":1896,"title":{},"body":{"modules.html":{}}}],["await",{"_index":365,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BaseModel.html":{},"classes/CreateUserDto.html":{},"classes/CrudController.html":{},"classes/CrudService.html":{},"classes/CustomQueryBuilder.html":{},"controllers/EmailSchedulingController.html":{},"interfaces/IBaseModel.html":{},"interfaces/IUser.html":{},"injectables/JwtStrategy.html":{},"classes/LoginCredsDto.html":{},"injectables/PersistedCronService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["awaits",{"_index":311,"title":{},"body":{"modules/AppModule.html":{}}}],["b",{"_index":882,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"controllers/HealthController.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["backers",{"_index":1876,"title":{},"body":{"index.html":{}}}],["bad",{"_index":189,"title":{},"body":{"classes/ApiException.html":{}}}],["badge",{"_index":74,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["badgedescription",{"_index":77,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["badgeid",{"_index":75,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["badgename",{"_index":76,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["badrequestexception",{"_index":160,"title":{},"body":{"classes/ApiException.html":{},"injectables/TagsService.html":{}}}],["badrequestexception([`duplicate",{"_index":1598,"title":{},"body":{"injectables/TagsService.html":{}}}],["base",{"_index":849,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudController.html":{},"classes/CrudRoutesFactory.html":{},"classes/CrudService.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["base/crud",{"_index":1568,"title":{},"body":{"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["based",{"_index":581,"title":{},"body":{"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"interfaces/ITag.html":{},"interfaces/IUser.html":{},"classes/Tag.html":{},"classes/UpdateTagsDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["basemodel",{"_index":423,"title":{"classes/BaseModel.html":{}},"body":{"classes/BaseModel.html":{},"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"classes/CrudController.html":{},"classes/CrudService.html":{},"interfaces/IBaseModel.html":{},"interfaces/ITag.html":{},"interfaces/IUser.html":{},"classes/Tag.html":{},"classes/UpdateTagsDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"coverage.html":{}}}],["basemodel:25",{"_index":1557,"title":{},"body":{"classes/Tag.html":{},"classes/User.html":{}}}],["basemodel:35",{"_index":1559,"title":{},"body":{"classes/Tag.html":{},"classes/User.html":{}}}],["basemodel:37",{"_index":1558,"title":{},"body":{"classes/Tag.html":{},"classes/User.html":{}}}],["basemodel:39",{"_index":1555,"title":{},"body":{"classes/Tag.html":{},"classes/User.html":{}}}],["basemodel:41",{"_index":1560,"title":{},"body":{"classes/Tag.html":{},"classes/User.html":{}}}],["basemodel:43",{"_index":1556,"title":{},"body":{"classes/Tag.html":{},"classes/User.html":{}}}],["basemodel:47",{"_index":1562,"title":{},"body":{"classes/Tag.html":{},"classes/User.html":{}}}],["basemodel:60",{"_index":1561,"title":{},"body":{"classes/Tag.html":{},"classes/User.html":{}}}],["basemodel})@apiresponse({status",{"_index":1020,"title":{},"body":{"classes/CrudController.html":{}}}],["basemodel})@get(':id",{"_index":1016,"title":{},"body":{"classes/CrudController.html":{}}}],["basemodel})@post(':id",{"_index":1005,"title":{},"body":{"classes/CrudController.html":{}}}],["basemodel})@put(':id",{"_index":1026,"title":{},"body":{"classes/CrudController.html":{}}}],["baseroute",{"_index":488,"title":{"interfaces/BaseRoute.html":{}},"body":{"interfaces/BaseRoute.html":{},"classes/CrudConfigService.html":{},"interfaces/CrudOptions.html":{},"classes/CrudRoutesFactory.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"coverage.html":{}}}],["baseroutename",{"_index":494,"title":{},"body":{"interfaces/BaseRoute.html":{},"classes/CrudConfigService.html":{},"interfaces/CrudOptions.html":{},"classes/CrudRoutesFactory.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"miscellaneous/typealiases.html":{}}}],["bcrypt",{"_index":409,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"interfaces/IUser.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["bcrypt.compare(enteredpassword",{"_index":410,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.hash(password",{"_index":654,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/IUser.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"injectables/UsersService.html":{}}}],["beforeapplicationshutdown",{"_index":304,"title":{},"body":{"modules/AppModule.html":{}}}],["beforeinsert",{"_index":1619,"title":{},"body":{"classes/User.html":{}}}],["beforeinsert(querycontext",{"_index":656,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/IUser.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["beforeupdate",{"_index":432,"title":{},"body":{"classes/BaseModel.html":{},"classes/Tag.html":{},"classes/User.html":{}}}],["beforeupdate(opt",{"_index":444,"title":{},"body":{"classes/BaseModel.html":{},"classes/CreateUserDto.html":{},"interfaces/IBaseModel.html":{},"interfaces/IUser.html":{},"classes/Tag.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["being",{"_index":1458,"title":{},"body":{"classes/QueryFailedFilter.html":{},"classes/ValidationFailedFilter.html":{}}}],["bind",{"_index":1486,"title":{},"body":{"guards/RequestGuard.html":{},"guards/ResponseGuard.html":{}}}],["bindrequesthelpers",{"_index":1482,"title":{},"body":{"guards/RequestGuard.html":{}}}],["bindrequesthelpers(request",{"_index":1484,"title":{},"body":{"guards/RequestGuard.html":{}}}],["bindresponsehelpers",{"_index":1514,"title":{},"body":{"guards/ResponseGuard.html":{}}}],["bindresponsehelpers(response",{"_index":1515,"title":{},"body":{"guards/ResponseGuard.html":{}}}],["blocked",{"_index":1781,"title":{},"body":{"dependencies.html":{}}}],["body",{"_index":340,"title":{},"body":{"controllers/AuthController.html":{},"classes/CrudController.html":{},"controllers/EmailSchedulingController.html":{},"classes/LoginCredsDto.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["boolean",{"_index":51,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/BaseRoute.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"classes/CreateUserDto.html":{},"interfaces/CrudOptions.html":{},"classes/CustomQueryBuilder.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/IUser.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"guards/RequestGuard.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"guards/ResponseGuard.html":{},"interfaces/Result.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["boot",{"_index":1834,"title":{},"body":{"miscellaneous/functions.html":{}}}],["bootstrap",{"_index":215,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CronModule.html":{},"modules/EmailModule.html":{},"modules/EmailSchedulingModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["bootstrapped",{"_index":1429,"title":{},"body":{"injectables/PersistedCronService.html":{}}}],["both",{"_index":638,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/IUser.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["browse",{"_index":1894,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1892,"title":{},"body":{"modules.html":{}}}],["builder",{"_index":471,"title":{},"body":{"classes/BaseModel.html":{},"modules/DatabaseModule.html":{},"interfaces/IBaseModel.html":{}}}],["building",{"_index":1847,"title":{},"body":{"index.html":{}}}],["bull",{"_index":1783,"title":{},"body":{"dependencies.html":{}}}],["c",{"_index":883,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/CustomQueryBuilder.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["cache",{"_index":526,"title":{},"body":{"interfaces/BaseRoute.html":{},"interfaces/CrudOptions.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{}}}],["call",{"_index":301,"title":{},"body":{"modules/AppModule.html":{}}}],["callback",{"_index":775,"title":{},"body":{"injectables/CronService.html":{}}}],["called",{"_index":751,"title":{},"body":{"injectables/CronService.html":{}}}],["callhandler",{"_index":1257,"title":{},"body":{"injectables/ExcludeNullUndefinedInterceptor.html":{},"interfaces/Response.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["calls",{"_index":823,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["canactivate",{"_index":1483,"title":{},"body":{"guards/RequestGuard.html":{},"guards/ResponseGuard.html":{}}}],["canactivate(context",{"_index":1487,"title":{},"body":{"guards/RequestGuard.html":{},"guards/ResponseGuard.html":{}}}],["case",{"_index":848,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"miscellaneous/variables.html":{}}}],["catch",{"_index":547,"title":{},"body":{"interfaces/BaseRoute.html":{},"injectables/CronService.html":{},"interfaces/CrudOptions.html":{},"classes/CrudService.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"classes/QueryFailedFilter.html":{},"classes/ValidationFailedFilter.html":{}}}],["catch(exception",{"_index":1447,"title":{},"body":{"classes/QueryFailedFilter.html":{},"classes/ValidationFailedFilter.html":{}}}],["catch(validationerror",{"_index":1670,"title":{},"body":{"classes/ValidationFailedFilter.html":{}}}],["catcherror",{"_index":1610,"title":{},"body":{"injectables/TimeoutInterceptor.html":{}}}],["catcherror((e",{"_index":1614,"title":{},"body":{"injectables/TimeoutInterceptor.html":{}}}],["cb",{"_index":1135,"title":{},"body":{"classes/CustomQueryBuilder.html":{}}}],["cb(records",{"_index":1165,"title":{},"body":{"classes/CustomQueryBuilder.html":{}}}],["check",{"_index":1143,"title":{},"body":{"classes/CustomQueryBuilder.html":{},"controllers/HealthController.html":{},"miscellaneous/functions.html":{}}}],["checked",{"_index":586,"title":{},"body":{"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"interfaces/ITag.html":{},"interfaces/IUser.html":{},"classes/Tag.html":{},"classes/UpdateTagsDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["checkviolationerror",{"_index":1448,"title":{},"body":{"classes/QueryFailedFilter.html":{}}}],["child",{"_index":998,"title":{},"body":{"classes/CrudController.html":{},"classes/CrudService.html":{}}}],["chunk",{"_index":1124,"title":{},"body":{"classes/CustomQueryBuilder.html":{}}}],["chunk(cb",{"_index":1132,"title":{},"body":{"classes/CustomQueryBuilder.html":{}}}],["class",{"_index":133,"title":{"classes/ApiException.html":{},"classes/BaseModel.html":{},"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"classes/CrudConfigService.html":{},"classes/CrudController.html":{},"classes/CrudRoutesFactory.html":{},"classes/CrudService.html":{},"classes/CustomQueryBuilder.html":{},"classes/EmailScheduleDto.html":{},"classes/LoginCredsDto.html":{},"classes/PaginationParams.html":{},"classes/QueryFailedFilter.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"classes/Tag.html":{},"classes/UpdateTagsDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/ValidationFailedFilter.html":{}},"body":{"classes/ApiException.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseModel.html":{},"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"modules/CronModule.html":{},"injectables/CronService.html":{},"classes/CrudConfigService.html":{},"classes/CrudController.html":{},"classes/CrudRoutesFactory.html":{},"classes/CrudService.html":{},"modules/DatabaseModule.html":{},"modules/EmailModule.html":{},"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"modules/EmailSchedulingModule.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/ExcludeNullUndefinedInterceptor.html":{},"controllers/HealthController.html":{},"interfaces/IBaseModel.html":{},"interfaces/IPaginationResult.html":{},"interfaces/ITag.html":{},"interfaces/IUser.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginCredsDto.html":{},"classes/PaginationParams.html":{},"injectables/PersistedCronService.html":{},"classes/QueryFailedFilter.html":{},"classes/R.html":{},"guards/RequestGuard.html":{},"interfaces/Response.html":{},"guards/ResponseGuard.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"classes/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateTagsDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/ValidationFailedFilter.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":135,"title":{},"body":{"classes/ApiException.html":{},"classes/BaseModel.html":{},"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"classes/CrudConfigService.html":{},"classes/CrudController.html":{},"classes/CrudRoutesFactory.html":{},"classes/CrudService.html":{},"classes/CustomQueryBuilder.html":{},"classes/EmailScheduleDto.html":{},"classes/LoginCredsDto.html":{},"classes/PaginationParams.html":{},"classes/QueryFailedFilter.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"classes/Tag.html":{},"classes/UpdateTagsDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/ValidationFailedFilter.html":{},"overview.html":{}}}],["clean",{"_index":593,"title":{},"body":{"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"interfaces/ITag.html":{},"interfaces/IUser.html":{},"classes/Tag.html":{},"classes/UpdateTagsDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["client",{"_index":1178,"title":{},"body":{"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["clonedeep",{"_index":1141,"title":{},"body":{"classes/CustomQueryBuilder.html":{}}}],["clonedeep(this",{"_index":1161,"title":{},"body":{"classes/CustomQueryBuilder.html":{}}}],["cluster_appmodule",{"_index":218,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":219,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":368,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":370,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":369,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_cronmodule",{"_index":665,"title":{},"body":{"modules/CronModule.html":{},"overview.html":{}}}],["cluster_cronmodule_providers",{"_index":666,"title":{},"body":{"modules/CronModule.html":{},"overview.html":{}}}],["cluster_emailmodule",{"_index":1186,"title":{},"body":{"modules/EmailModule.html":{},"overview.html":{}}}],["cluster_emailmodule_exports",{"_index":1188,"title":{},"body":{"modules/EmailModule.html":{},"overview.html":{}}}],["cluster_emailmodule_providers",{"_index":1187,"title":{},"body":{"modules/EmailModule.html":{},"overview.html":{}}}],["cluster_emailschedulingmodule",{"_index":1217,"title":{},"body":{"modules/EmailSchedulingModule.html":{},"overview.html":{}}}],["cluster_emailschedulingmodule_imports",{"_index":1219,"title":{},"body":{"modules/EmailSchedulingModule.html":{}}}],["cluster_emailschedulingmodule_providers",{"_index":1218,"title":{},"body":{"modules/EmailSchedulingModule.html":{},"overview.html":{}}}],["cluster_tagsmodule",{"_index":1578,"title":{},"body":{"modules/TagsModule.html":{},"overview.html":{}}}],["cluster_tagsmodule_exports",{"_index":1580,"title":{},"body":{"modules/TagsModule.html":{},"overview.html":{}}}],["cluster_tagsmodule_providers",{"_index":1579,"title":{},"body":{"modules/TagsModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":1648,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":1650,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":1649,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["code",{"_index":1350,"title":{},"body":{"interfaces/IPaginationResult.html":{},"classes/PaginationParams.html":{},"guards/ResponseGuard.html":{}}}],["collectosmetrics",{"_index":1288,"title":{},"body":{"controllers/HealthController.html":{}}}],["collectosmetrics(metrics",{"_index":1292,"title":{},"body":{"controllers/HealthController.html":{}}}],["column",{"_index":649,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/IUser.html":{},"classes/QueryFailedFilter.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["columns",{"_index":1467,"title":{},"body":{"classes/QueryFailedFilter.html":{}}}],["comment",{"_index":123,"title":{"interfaces/Comment.html":{}},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{},"coverage.html":{}}}],["commented",{"_index":1431,"title":{},"body":{"injectables/PersistedCronService.html":{}}}],["commentedusename",{"_index":125,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["commenteduserid",{"_index":126,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["commentid",{"_index":124,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["comments",{"_index":127,"title":{"interfaces/Comments.html":{}},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{},"coverage.html":{}}}],["commentscount",{"_index":87,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["comparepassword",{"_index":392,"title":{},"body":{"injectables/AuthService.html":{}}}],["comparepassword(enteredpassword",{"_index":398,"title":{},"body":{"injectables/AuthService.html":{}}}],["config",{"_index":795,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"injectables/EmailService.html":{},"controllers/HealthController.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["config.params",{"_index":877,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["config.query",{"_index":875,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["config.serialize",{"_index":879,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["configmodule",{"_index":240,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EmailModule.html":{}}}],["configmodule.forroot(configmoduleoptions",{"_index":288,"title":{},"body":{"modules/AppModule.html":{}}}],["configmoduleoptions",{"_index":261,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["configservice",{"_index":374,"title":{},"body":{"modules/AuthModule.html":{},"injectables/EmailService.html":{},"controllers/HealthController.html":{},"injectables/JwtStrategy.html":{}}}],["configservice.get('jwtkey",{"_index":385,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["configservice.get('token_expiration",{"_index":388,"title":{},"body":{"modules/AuthModule.html":{}}}],["conflictexception",{"_index":161,"title":{},"body":{"classes/ApiException.html":{}}}],["connection",{"_index":1181,"title":{},"body":{"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["console.error",{"_index":321,"title":{},"body":{"modules/AppModule.html":{}}}],["console.info",{"_index":1171,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["console.info(`moduleinit",{"_index":319,"title":{},"body":{"modules/AppModule.html":{}}}],["console.log",{"_index":889,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"injectables/EmailService.html":{},"controllers/HealthController.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["console.log(`moduleinit",{"_index":1333,"title":{},"body":{"controllers/HealthController.html":{}}}],["const",{"_index":260,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/BaseRoute.html":{},"classes/CreateUserDto.html":{},"injectables/CronService.html":{},"classes/CrudConfigService.html":{},"classes/CrudController.html":{},"interfaces/CrudOptions.html":{},"classes/CrudRoutesFactory.html":{},"classes/CrudService.html":{},"classes/CustomQueryBuilder.html":{},"modules/DatabaseModule.html":{},"injectables/EmailSchedulingService.html":{},"interfaces/GetManyDefaultResponse.html":{},"controllers/HealthController.html":{},"interfaces/IUser.html":{},"injectables/JwtStrategy.html":{},"classes/LoginCredsDto.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"injectables/PersistedCronService.html":{},"classes/QueryFailedFilter.html":{},"classes/R.html":{},"guards/RequestGuard.html":{},"guards/ResponseGuard.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/ValidationFailedFilter.html":{},"miscellaneous/variables.html":{}}}],["constraint",{"_index":1468,"title":{},"body":{"classes/QueryFailedFilter.html":{}}}],["constraintviolationerror",{"_index":1449,"title":{},"body":{"classes/QueryFailedFilter.html":{}}}],["constructor",{"_index":144,"title":{},"body":{"classes/ApiException.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CronService.html":{},"classes/CrudController.html":{},"classes/CrudRoutesFactory.html":{},"classes/CrudService.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"controllers/HealthController.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginCredsDto.html":{},"injectables/PersistedCronService.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["constructor(@inject(tag.name",{"_index":1594,"title":{},"body":{"injectables/TagsService.html":{}}}],["constructor(@inject(user.name",{"_index":1662,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(authservice",{"_index":1391,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["constructor(configservice",{"_index":1241,"title":{},"body":{"injectables/EmailService.html":{},"injectables/JwtStrategy.html":{}}}],["constructor(emailservice",{"_index":1224,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["constructor(message",{"_index":145,"title":{},"body":{"classes/ApiException.html":{}}}],["constructor(model",{"_index":1086,"title":{},"body":{"classes/CrudService.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["constructor(private",{"_index":886,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["constructor(protected",{"_index":1035,"title":{},"body":{"classes/CrudController.html":{},"classes/CrudService.html":{}}}],["constructor(readonly",{"_index":747,"title":{},"body":{"injectables/CronService.html":{},"controllers/EmailSchedulingController.html":{},"injectables/LocalStrategy.html":{},"injectables/PersistedCronService.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["constructor(schedule",{"_index":1424,"title":{},"body":{"injectables/PersistedCronService.html":{}}}],["constructor(scheduler",{"_index":698,"title":{},"body":{"injectables/CronService.html":{}}}],["constructor(service",{"_index":992,"title":{},"body":{"classes/CrudController.html":{}}}],["constructor(target",{"_index":1061,"title":{},"body":{"classes/CrudRoutesFactory.html":{}}}],["constructor(userservice",{"_index":395,"title":{},"body":{"injectables/AuthService.html":{}}}],["contact",{"_index":115,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["content",{"_index":1194,"title":{},"body":{"classes/EmailScheduleDto.html":{}}}],["context",{"_index":1260,"title":{},"body":{"injectables/ExcludeNullUndefinedInterceptor.html":{},"guards/RequestGuard.html":{},"interfaces/Response.html":{},"guards/ResponseGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["continue",{"_index":315,"title":{},"body":{"modules/AppModule.html":{}}}],["controller",{"_index":195,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/EmailSchedulingController.html":{},"controllers/HealthController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/CrudController.html":{},"controllers/EmailSchedulingController.html":{},"controllers/HealthController.html":{},"classes/LoginCredsDto.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller(appcontroller.path",{"_index":204,"title":{},"body":{"controllers/AppController.html":{}}}],["controller(authcontroller.path",{"_index":359,"title":{},"body":{"controllers/AuthController.html":{},"classes/LoginCredsDto.html":{}}}],["controller(emailschedulingcontroller.path",{"_index":1213,"title":{},"body":{"controllers/EmailSchedulingController.html":{}}}],["controller(healthcontroller.path",{"_index":1307,"title":{},"body":{"controllers/HealthController.html":{}}}],["controller(tagscontroller.path",{"_index":1572,"title":{},"body":{"controllers/TagsController.html":{}}}],["controller(userscontroller.path",{"_index":1644,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":197,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"modules/EmailModule.html":{},"controllers/EmailSchedulingController.html":{},"modules/EmailSchedulingModule.html":{},"controllers/HealthController.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["convert",{"_index":1324,"title":{},"body":{"controllers/HealthController.html":{}}}],["corporatedescription",{"_index":97,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["corporatename",{"_index":98,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["corresponding",{"_index":308,"title":{},"body":{"modules/AppModule.html":{}}}],["count",{"_index":10,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/BaseRoute.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"injectables/CronService.html":{},"classes/CrudConfigService.html":{},"interfaces/CrudOptions.html":{},"classes/CrudRoutesFactory.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"classes/R.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["coverage",{"_index":1674,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["coverimage",{"_index":55,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["create",{"_index":531,"title":{},"body":{"interfaces/BaseRoute.html":{},"classes/CrudConfigService.html":{},"classes/CrudController.html":{},"interfaces/CrudOptions.html":{},"classes/CrudRoutesFactory.html":{},"classes/CrudService.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ICrudService.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["create(@body",{"_index":1050,"title":{},"body":{"classes/CrudController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["create(data",{"_index":1337,"title":{},"body":{"interfaces/ICrudService.html":{},"injectables/TagsService.html":{}}}],["create(input",{"_index":1001,"title":{},"body":{"classes/CrudController.html":{},"classes/CrudService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["create(target",{"_index":895,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["create(user",{"_index":1655,"title":{},"body":{"injectables/UsersService.html":{}}}],["created",{"_index":585,"title":{},"body":{"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"classes/CrudController.html":{},"classes/CrudService.html":{},"interfaces/ITag.html":{},"interfaces/IUser.html":{},"classes/Tag.html":{},"injectables/TagsService.html":{},"classes/UpdateTagsDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"injectables/UsersService.html":{}}}],["created_at",{"_index":426,"title":{},"body":{"classes/BaseModel.html":{},"interfaces/IBaseModel.html":{},"classes/Tag.html":{},"classes/User.html":{}}}],["creategetmanydto",{"_index":1537,"title":{},"body":{"classes/SerializeHelper.html":{}}}],["creategetmanydto(dto",{"_index":863,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["creategetoneresponsedto",{"_index":1538,"title":{},"body":{"classes/SerializeHelper.html":{}}}],["creategetoneresponsedto(resourcename",{"_index":870,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["createmany",{"_index":532,"title":{},"body":{"interfaces/BaseRoute.html":{},"interfaces/CrudOptions.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{}}}],["createmanybase",{"_index":503,"title":{},"body":{"interfaces/BaseRoute.html":{},"interfaces/CrudOptions.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"miscellaneous/typealiases.html":{}}}],["createonebase",{"_index":502,"title":{},"body":{"interfaces/BaseRoute.html":{},"interfaces/CrudOptions.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"miscellaneous/typealiases.html":{}}}],["createresponsemeta",{"_index":845,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["createresponsemeta(name",{"_index":1545,"title":{},"body":{"classes/Swagger.html":{}}}],["createroutes",{"_index":1057,"title":{},"body":{"classes/CrudRoutesFactory.html":{}}}],["createroutes(routesschema",{"_index":972,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["creates",{"_index":641,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/CrudController.html":{},"interfaces/IUser.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["createtagsdto",{"_index":562,"title":{"classes/CreateTagsDto.html":{}},"body":{"classes/CreateTagsDto.html":{},"classes/CrudService.html":{},"interfaces/ITag.html":{},"classes/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"classes/UpdateTagsDto.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["createuserdto",{"_index":602,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/CrudService.html":{},"interfaces/IUser.html":{},"injectables/TagsService.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["credentials",{"_index":415,"title":{},"body":{"injectables/AuthService.html":{}}}],["cron",{"_index":670,"title":{},"body":{"modules/CronModule.html":{},"injectables/CronService.html":{},"injectables/EmailSchedulingService.html":{},"injectables/PersistedCronService.html":{},"dependencies.html":{}}}],["cron(cronexpression.every_minute",{"_index":724,"title":{},"body":{"injectables/CronService.html":{}}}],["cron.service",{"_index":671,"title":{},"body":{"modules/CronModule.html":{}}}],["cron.service.ts",{"_index":1416,"title":{},"body":{"injectables/PersistedCronService.html":{},"coverage.html":{}}}],["cron.service.ts:11",{"_index":1425,"title":{},"body":{"injectables/PersistedCronService.html":{}}}],["cron.service.ts:18",{"_index":1426,"title":{},"body":{"injectables/PersistedCronService.html":{}}}],["cron.start",{"_index":1439,"title":{},"body":{"injectables/PersistedCronService.html":{}}}],["cron/cron.module",{"_index":253,"title":{},"body":{"modules/AppModule.html":{}}}],["cronexpression",{"_index":745,"title":{},"body":{"injectables/CronService.html":{}}}],["cronjob",{"_index":746,"title":{},"body":{"injectables/CronService.html":{},"injectables/EmailSchedulingService.html":{}}}],["cronjob(`${seconds",{"_index":762,"title":{},"body":{"injectables/CronService.html":{}}}],["cronjob(date",{"_index":1230,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["cronjob(job.time",{"_index":1436,"title":{},"body":{"injectables/PersistedCronService.html":{}}}],["cronmodule",{"_index":252,"title":{"modules/CronModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CronModule.html":{},"modules.html":{},"overview.html":{}}}],["cronmodules",{"_index":295,"title":{},"body":{"modules/AppModule.html":{}}}],["cronservice",{"_index":667,"title":{"injectables/CronService.html":{}},"body":{"modules/CronModule.html":{},"injectables/CronService.html":{},"coverage.html":{},"overview.html":{}}}],["cronservice.count",{"_index":749,"title":{},"body":{"injectables/CronService.html":{}}}],["crud",{"_index":985,"title":{},"body":{"classes/CrudController.html":{},"classes/CrudService.html":{},"interfaces/ICrudService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["crud.service.interface",{"_index":1033,"title":{},"body":{"classes/CrudController.html":{},"classes/CrudService.html":{}}}],["crudconfigservice",{"_index":792,"title":{"classes/CrudConfigService.html":{}},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"coverage.html":{}}}],["crudconfigservice.config",{"_index":880,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["crudconfigservice.config.query",{"_index":923,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["crudconfigservice.config.serialize",{"_index":927,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["crudcontroller",{"_index":980,"title":{"classes/CrudController.html":{}},"body":{"classes/CrudController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["crudoptions",{"_index":517,"title":{"interfaces/CrudOptions.html":{}},"body":{"interfaces/BaseRoute.html":{},"classes/CrudConfigService.html":{},"interfaces/CrudOptions.html":{},"classes/CrudRoutesFactory.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"coverage.html":{}}}],["crudroutesfactory",{"_index":884,"title":{"classes/CrudRoutesFactory.html":{}},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"coverage.html":{}}}],["crudroutesfactory(target",{"_index":896,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["crudroutesfactory.create(target",{"_index":1919,"title":{},"body":{"miscellaneous/variables.html":{}}}],["crudroutesfactory.getroutesschema",{"_index":905,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["crudroutesfactory::constructor",{"_index":890,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["crudservice",{"_index":1080,"title":{"classes/CrudService.html":{}},"body":{"classes/CrudService.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["crudservice:112",{"_index":1593,"title":{},"body":{"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["crudservice:27",{"_index":1587,"title":{},"body":{"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["crudservice:38",{"_index":1591,"title":{},"body":{"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["crudservice:56",{"_index":1588,"title":{},"body":{"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["crudservice:67",{"_index":1590,"title":{},"body":{"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["crudservice:78",{"_index":1589,"title":{},"body":{"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["crudservice:89",{"_index":1592,"title":{},"body":{"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["crudservice:99",{"_index":1586,"title":{},"body":{"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["ctx",{"_index":1462,"title":{},"body":{"classes/QueryFailedFilter.html":{},"classes/ValidationFailedFilter.html":{}}}],["ctx.getrequest",{"_index":1465,"title":{},"body":{"classes/QueryFailedFilter.html":{},"classes/ValidationFailedFilter.html":{}}}],["ctx.getresponse",{"_index":1464,"title":{},"body":{"classes/QueryFailedFilter.html":{},"classes/ValidationFailedFilter.html":{}}}],["current",{"_index":754,"title":{},"body":{"injectables/CronService.html":{},"interfaces/IPaginationResult.html":{},"classes/PaginationParams.html":{},"guards/RequestGuard.html":{},"guards/ResponseGuard.html":{}}}],["currentpage",{"_index":1152,"title":{},"body":{"classes/CustomQueryBuilder.html":{}}}],["custom",{"_index":470,"title":{},"body":{"classes/BaseModel.html":{},"injectables/ExcludeNullUndefinedInterceptor.html":{},"interfaces/IBaseModel.html":{},"classes/QueryFailedFilter.html":{},"interfaces/Response.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/ValidationFailedFilter.html":{}}}],["customquerybuilder",{"_index":441,"title":{"classes/CustomQueryBuilder.html":{}},"body":{"classes/BaseModel.html":{},"classes/CustomQueryBuilder.html":{},"interfaces/IBaseModel.html":{},"classes/Tag.html":{},"classes/User.html":{},"coverage.html":{}}}],["data",{"_index":11,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"controllers/AuthController.html":{},"classes/BaseModel.html":{},"interfaces/BaseRoute.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"classes/CrudConfigService.html":{},"classes/CrudController.html":{},"interfaces/CrudOptions.html":{},"classes/CrudRoutesFactory.html":{},"classes/CrudService.html":{},"classes/CustomQueryBuilder.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"controllers/HealthController.html":{},"interfaces/IBaseModel.html":{},"interfaces/ICrudService.html":{},"interfaces/IPaginationResult.html":{},"classes/LoginCredsDto.html":{},"classes/PaginationParams.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"classes/QueryFailedFilter.html":{},"classes/R.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Response.html":{},"guards/ResponseGuard.html":{},"interfaces/Result.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/TransformInterceptor.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/ValidationFailedFilter.html":{}}}],["data.name",{"_index":1597,"title":{},"body":{"injectables/TagsService.html":{}}}],["database",{"_index":284,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"classes/CrudController.html":{},"modules/DatabaseModule.html":{},"interfaces/ITag.html":{},"interfaces/IUser.html":{},"classes/QueryFailedFilter.html":{},"classes/Tag.html":{},"classes/UpdateTagsDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["database'})@post",{"_index":1635,"title":{},"body":{"controllers/UsersController.html":{}}}],["database/database.module",{"_index":255,"title":{},"body":{"modules/AppModule.html":{}}}],["database/models/base.model",{"_index":574,"title":{},"body":{"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"classes/CrudController.html":{},"classes/CrudService.html":{},"interfaces/ITag.html":{},"interfaces/IUser.html":{},"classes/Tag.html":{},"classes/UpdateTagsDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["databasemodule",{"_index":221,"title":{"modules/DatabaseModule.html":{}},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules.html":{},"overview.html":{}}}],["databaseproviders",{"_index":1176,"title":{},"body":{"modules/DatabaseModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["dataerror",{"_index":1450,"title":{},"body":{"classes/QueryFailedFilter.html":{}}}],["dataobj",{"_index":1531,"title":{},"body":{"guards/ResponseGuard.html":{}}}],["datapoints",{"_index":1311,"title":{},"body":{"controllers/HealthController.html":{}}}],["date",{"_index":111,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"injectables/CronService.html":{},"classes/EmailScheduleDto.html":{},"injectables/EmailSchedulingService.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{},"miscellaneous/variables.html":{}}}],["date().toisostring",{"_index":180,"title":{},"body":{"classes/ApiException.html":{},"classes/BaseModel.html":{},"interfaces/IBaseModel.html":{},"classes/QueryFailedFilter.html":{},"classes/ValidationFailedFilter.html":{}}}],["date(emailschedule.date",{"_index":1229,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["date.now",{"_index":1329,"title":{},"body":{"controllers/HealthController.html":{}}}],["date.tolocaledatestring",{"_index":1238,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["db",{"_index":460,"title":{},"body":{"classes/BaseModel.html":{},"interfaces/IBaseModel.html":{},"classes/QueryFailedFilter.html":{},"dependencies.html":{}}}],["dberrors",{"_index":459,"title":{},"body":{"classes/BaseModel.html":{},"interfaces/IBaseModel.html":{}}}],["dbpassword",{"_index":399,"title":{},"body":{"injectables/AuthService.html":{}}}],["debug",{"_index":290,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["declarations",{"_index":214,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CronModule.html":{},"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"modules/EmailModule.html":{},"modules/EmailSchedulingModule.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["declare",{"_index":499,"title":{},"body":{"interfaces/BaseRoute.html":{},"injectables/CronService.html":{},"interfaces/CrudOptions.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{}}}],["decorators",{"_index":150,"title":{},"body":{"classes/ApiException.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"injectables/CronService.html":{},"classes/CrudController.html":{},"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"controllers/HealthController.html":{},"classes/LoginCredsDto.html":{},"classes/PaginationParams.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["deepmerge",{"_index":802,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"dependencies.html":{}}}],["default",{"_index":436,"title":{},"body":{"classes/BaseModel.html":{},"injectables/CronService.html":{},"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/CrudService.html":{},"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/LocalStrategy.html":{},"injectables/PersistedCronService.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"classes/Tag.html":{},"injectables/TagsService.html":{},"interfaces/TokenPayload.html":{},"classes/User.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["default('development",{"_index":280,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["define",{"_index":1437,"title":{},"body":{"injectables/PersistedCronService.html":{}}}],["defined",{"_index":147,"title":{},"body":{"classes/ApiException.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BaseModel.html":{},"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"injectables/CronService.html":{},"classes/CrudConfigService.html":{},"classes/CrudController.html":{},"classes/CrudRoutesFactory.html":{},"classes/CrudService.html":{},"classes/CustomQueryBuilder.html":{},"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/ExcludeNullUndefinedInterceptor.html":{},"controllers/HealthController.html":{},"interfaces/ICrudService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginCredsDto.html":{},"classes/PaginationParams.html":{},"interfaces/ParamsOptions.html":{},"injectables/PersistedCronService.html":{},"classes/QueryFailedFilter.html":{},"classes/R.html":{},"guards/RequestGuard.html":{},"guards/ResponseGuard.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"classes/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/ValidationFailedFilter.html":{}}}],["delete",{"_index":535,"title":{},"body":{"interfaces/BaseRoute.html":{},"injectables/CronService.html":{},"classes/CrudController.html":{},"interfaces/CrudOptions.html":{},"classes/CrudService.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["delete(':id",{"_index":1046,"title":{},"body":{"classes/CrudController.html":{}}}],["deletecron",{"_index":688,"title":{},"body":{"injectables/CronService.html":{}}}],["deletecron(name",{"_index":714,"title":{},"body":{"injectables/CronService.html":{}}}],["deleted",{"_index":771,"title":{},"body":{"injectables/CronService.html":{},"classes/CrudController.html":{}}}],["deleted_at",{"_index":427,"title":{},"body":{"classes/BaseModel.html":{},"classes/CrudService.html":{},"interfaces/IBaseModel.html":{},"classes/Tag.html":{},"classes/User.html":{}}}],["deleteinterval",{"_index":689,"title":{},"body":{"injectables/CronService.html":{}}}],["deleteinterval(name",{"_index":717,"title":{},"body":{"injectables/CronService.html":{}}}],["deleteonebase",{"_index":506,"title":{},"body":{"interfaces/BaseRoute.html":{},"interfaces/CrudOptions.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"miscellaneous/typealiases.html":{}}}],["deletes",{"_index":1103,"title":{},"body":{"classes/CrudService.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["deletetimeout",{"_index":690,"title":{},"body":{"injectables/CronService.html":{}}}],["deletetimeout(name",{"_index":719,"title":{},"body":{"injectables/CronService.html":{}}}],["dependencies",{"_index":212,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CronModule.html":{},"modules/EmailModule.html":{},"modules/EmailSchedulingModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["deps",{"_index":296,"title":{},"body":{"modules/AppModule.html":{}}}],["desc",{"_index":1354,"title":{},"body":{"interfaces/IPaginationResult.html":{},"classes/PaginationParams.html":{},"miscellaneous/enumerations.html":{}}}],["described",{"_index":306,"title":{},"body":{"modules/AppModule.html":{}}}],["describes",{"_index":1356,"title":{},"body":{"interfaces/IPaginationResult.html":{},"classes/PaginationParams.html":{}}}],["description",{"_index":187,"title":{},"body":{"classes/ApiException.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CronModule.html":{},"injectables/CronService.html":{},"classes/CrudConfigService.html":{},"classes/CrudController.html":{},"classes/CrudRoutesFactory.html":{},"classes/CrudService.html":{},"modules/DatabaseModule.html":{},"modules/EmailModule.html":{},"modules/EmailSchedulingModule.html":{},"injectables/ExcludeNullUndefinedInterceptor.html":{},"interfaces/ICrudService.html":{},"interfaces/IPaginationResult.html":{},"classes/PaginationParams.html":{},"injectables/PersistedCronService.html":{},"classes/QueryFailedFilter.html":{},"classes/R.html":{},"guards/RequestGuard.html":{},"guards/ResponseGuard.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"modules/TagsModule.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"classes/ValidationFailedFilter.html":{},"index.html":{}}}],["details",{"_index":1490,"title":{},"body":{"guards/RequestGuard.html":{},"guards/ResponseGuard.html":{}}}],["development",{"_index":1857,"title":{},"body":{"index.html":{}}}],["disable",{"_index":268,"title":{},"body":{"modules/AppModule.html":{},"classes/BaseModel.html":{},"interfaces/BaseRoute.html":{},"injectables/CronService.html":{},"classes/CrudConfigService.html":{},"interfaces/CrudOptions.html":{},"classes/CrudRoutesFactory.html":{},"classes/CustomQueryBuilder.html":{},"injectables/ExcludeNullUndefinedInterceptor.html":{},"interfaces/GetManyDefaultResponse.html":{},"controllers/HealthController.html":{},"interfaces/IBaseModel.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"classes/R.html":{},"guards/RequestGuard.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["disabled",{"_index":514,"title":{},"body":{"interfaces/BaseRoute.html":{},"interfaces/CrudOptions.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{}}}],["distance",{"_index":105,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["distanceaway",{"_index":106,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["dns",{"_index":1308,"title":{},"body":{"controllers/HealthController.html":{}}}],["dnshealthindicator",{"_index":1301,"title":{},"body":{"controllers/HealthController.html":{}}}],["docs",{"_index":1319,"title":{},"body":{"controllers/HealthController.html":{}}}],["documentation",{"_index":1675,"title":{},"body":{"coverage.html":{}}}],["domain",{"_index":1031,"title":{},"body":{"classes/CrudController.html":{},"interfaces/IPaginationResult.html":{},"classes/PaginationParams.html":{}}}],["don't",{"_index":644,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/IUser.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["dotenv",{"_index":1788,"title":{},"body":{"dependencies.html":{}}}],["down",{"_index":1728,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["down(knex",{"_index":1838,"title":{},"body":{"miscellaneous/functions.html":{}}}],["dto",{"_index":518,"title":{},"body":{"interfaces/BaseRoute.html":{},"classes/CrudConfigService.html":{},"interfaces/CrudOptions.html":{},"classes/CrudRoutesFactory.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["dumb",{"_index":629,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/IUser.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["dynamic",{"_index":543,"title":{},"body":{"interfaces/BaseRoute.html":{},"interfaces/CrudOptions.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{}}}],["dynamically",{"_index":705,"title":{},"body":{"injectables/CronService.html":{}}}],["d{4",{"_index":1933,"title":{},"body":{"miscellaneous/variables.html":{}}}],["e",{"_index":757,"title":{},"body":{"injectables/CronService.html":{},"classes/CrudService.html":{},"injectables/TimeoutInterceptor.html":{}}}],["e2e",{"_index":1865,"title":{},"body":{"index.html":{}}}],["each",{"_index":636,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/CronService.html":{},"injectables/ExcludeNullUndefinedInterceptor.html":{},"interfaces/IUser.html":{},"injectables/PersistedCronService.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["efficient",{"_index":1848,"title":{},"body":{"index.html":{}}}],["email",{"_index":356,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/CrudService.html":{},"modules/EmailModule.html":{},"controllers/EmailSchedulingController.html":{},"modules/EmailSchedulingModule.html":{},"interfaces/ICrudService.html":{},"interfaces/IUser.html":{},"injectables/LocalStrategy.html":{},"classes/LoginCredsDto.html":{},"injectables/TagsService.html":{},"interfaces/TokenPayload.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["email'})@get",{"_index":1637,"title":{},"body":{"controllers/UsersController.html":{}}}],["email.service",{"_index":1191,"title":{},"body":{"modules/EmailModule.html":{}}}],["email/email.module",{"_index":1221,"title":{},"body":{"modules/EmailSchedulingModule.html":{}}}],["email/email.service",{"_index":1228,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["emailmodule",{"_index":1185,"title":{"modules/EmailModule.html":{}},"body":{"modules/EmailModule.html":{},"modules/EmailSchedulingModule.html":{},"modules.html":{},"overview.html":{}}}],["emailschedule",{"_index":1208,"title":{},"body":{"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{}}}],["emailschedule.content",{"_index":1234,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["emailschedule.dto",{"_index":1209,"title":{},"body":{"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{}}}],["emailschedule.recipient",{"_index":1235,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["emailschedule.subject",{"_index":1232,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["emailscheduledto",{"_index":1192,"title":{"classes/EmailScheduleDto.html":{}},"body":{"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"coverage.html":{}}}],["emailscheduling.controller",{"_index":1222,"title":{},"body":{"modules/EmailSchedulingModule.html":{}}}],["emailscheduling.service",{"_index":1211,"title":{},"body":{"controllers/EmailSchedulingController.html":{},"modules/EmailSchedulingModule.html":{}}}],["emailscheduling/emailscheduling.module",{"_index":256,"title":{},"body":{"modules/AppModule.html":{}}}],["emailschedulingcontroller",{"_index":1202,"title":{"controllers/EmailSchedulingController.html":{}},"body":{"controllers/EmailSchedulingController.html":{},"modules/EmailSchedulingModule.html":{},"coverage.html":{}}}],["emailschedulingmodule",{"_index":222,"title":{"modules/EmailSchedulingModule.html":{}},"body":{"modules/AppModule.html":{},"modules/EmailSchedulingModule.html":{},"modules.html":{},"overview.html":{}}}],["emailschedulingservice",{"_index":1210,"title":{"injectables/EmailSchedulingService.html":{}},"body":{"controllers/EmailSchedulingController.html":{},"modules/EmailSchedulingModule.html":{},"injectables/EmailSchedulingService.html":{},"coverage.html":{},"overview.html":{}}}],["emailservice",{"_index":1189,"title":{"injectables/EmailService.html":{}},"body":{"modules/EmailModule.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"coverage.html":{},"overview.html":{}}}],["emergencytype",{"_index":107,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["empty",{"_index":1145,"title":{},"body":{"classes/CustomQueryBuilder.html":{},"injectables/ExcludeNullUndefinedInterceptor.html":{},"injectables/LocalStrategy.html":{},"miscellaneous/functions.html":{}}}],["enable",{"_index":287,"title":{},"body":{"modules/AppModule.html":{},"interfaces/BaseRoute.html":{},"classes/CrudConfigService.html":{},"interfaces/CrudOptions.html":{},"classes/CrudRoutesFactory.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"miscellaneous/variables.html":{}}}],["enableroutes",{"_index":1058,"title":{},"body":{"classes/CrudRoutesFactory.html":{}}}],["enableroutes(routesschema",{"_index":966,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["end",{"_index":1612,"title":{},"body":{"injectables/TimeoutInterceptor.html":{}}}],["enforce",{"_index":1336,"title":{},"body":{"interfaces/ICrudService.html":{}}}],["enteredpassword",{"_index":401,"title":{},"body":{"injectables/AuthService.html":{}}}],["entries",{"_index":1093,"title":{},"body":{"classes/CrudService.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["entry",{"_index":1090,"title":{},"body":{"classes/CrudService.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["enum",{"_index":512,"title":{},"body":{"interfaces/BaseRoute.html":{},"interfaces/CrudOptions.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/IPaginationResult.html":{},"classes/PaginationParams.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{}}}],["enum.type",{"_index":498,"title":{},"body":{"interfaces/BaseRoute.html":{},"interfaces/CrudOptions.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{}}}],["enumerations",{"_index":1820,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["eq",{"_index":1941,"title":{},"body":{"miscellaneous/variables.html":{}}}],["err",{"_index":1322,"title":{},"body":{"controllers/HealthController.html":{},"guards/ResponseGuard.html":{}}}],["err.errors",{"_index":1527,"title":{},"body":{"guards/ResponseGuard.html":{}}}],["err.message",{"_index":1526,"title":{},"body":{"guards/ResponseGuard.html":{}}}],["error",{"_index":12,"title":{},"body":{"interfaces/APIResponse.html":{},"classes/ApiException.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"injectables/CronService.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/IPaginationResult.html":{},"classes/PaginationParams.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"guards/ResponseGuard.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{},"miscellaneous/typealiases.html":{}}}],["error(err",{"_index":1521,"title":{},"body":{"guards/ResponseGuard.html":{}}}],["errorhash",{"_index":1672,"title":{},"body":{"classes/ValidationFailedFilter.html":{}}}],["errors",{"_index":139,"title":{},"body":{"classes/ApiException.html":{},"classes/BaseModel.html":{},"interfaces/IBaseModel.html":{},"classes/QueryFailedFilter.html":{},"guards/ResponseGuard.html":{},"dependencies.html":{}}}],["errors.decorator",{"_index":1032,"title":{},"body":{"classes/CrudController.html":{}}}],["errors.decorator.ts",{"_index":138,"title":{},"body":{"classes/ApiException.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["errors.decorator.ts:22",{"_index":157,"title":{},"body":{"classes/ApiException.html":{}}}],["errors.decorator.ts:24",{"_index":154,"title":{},"body":{"classes/ApiException.html":{}}}],["errors.decorator.ts:26",{"_index":156,"title":{},"body":{"classes/ApiException.html":{}}}],["errors.decorator.ts:28",{"_index":152,"title":{},"body":{"classes/ApiException.html":{}}}],["errors.decorator.ts:30",{"_index":153,"title":{},"body":{"classes/ApiException.html":{}}}],["errors.decorator.ts:32",{"_index":158,"title":{},"body":{"classes/ApiException.html":{}}}],["errors.decorator.ts:34",{"_index":155,"title":{},"body":{"classes/ApiException.html":{}}}],["errors.decorator.ts:36",{"_index":148,"title":{},"body":{"classes/ApiException.html":{}}}],["eslint",{"_index":267,"title":{},"body":{"modules/AppModule.html":{},"classes/BaseModel.html":{},"interfaces/BaseRoute.html":{},"injectables/CronService.html":{},"classes/CrudConfigService.html":{},"interfaces/CrudOptions.html":{},"classes/CrudRoutesFactory.html":{},"classes/CustomQueryBuilder.html":{},"injectables/ExcludeNullUndefinedInterceptor.html":{},"interfaces/GetManyDefaultResponse.html":{},"controllers/HealthController.html":{},"interfaces/IBaseModel.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"classes/R.html":{},"guards/RequestGuard.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["eslint/ban",{"_index":476,"title":{},"body":{"classes/BaseModel.html":{},"interfaces/BaseRoute.html":{},"interfaces/CrudOptions.html":{},"classes/CustomQueryBuilder.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/IBaseModel.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{}}}],["eslint/no",{"_index":540,"title":{},"body":{"interfaces/BaseRoute.html":{},"interfaces/CrudOptions.html":{},"injectables/ExcludeNullUndefinedInterceptor.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{}}}],["eslint/restrict",{"_index":325,"title":{},"body":{"modules/AppModule.html":{},"injectables/CronService.html":{},"controllers/HealthController.html":{}}}],["example",{"_index":353,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateUserDto.html":{},"interfaces/IUser.html":{},"classes/LoginCredsDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["exception",{"_index":1445,"title":{},"body":{"classes/QueryFailedFilter.html":{},"classes/ValidationFailedFilter.html":{}}}],["exceptionfilter",{"_index":1446,"title":{},"body":{"classes/QueryFailedFilter.html":{},"classes/ValidationFailedFilter.html":{}}}],["excludenullundefinedinterceptor",{"_index":1248,"title":{"injectables/ExcludeNullUndefinedInterceptor.html":{}},"body":{"injectables/ExcludeNullUndefinedInterceptor.html":{},"coverage.html":{}}}],["executing",{"_index":777,"title":{},"body":{"injectables/CronService.html":{}}}],["execution",{"_index":1489,"title":{},"body":{"guards/RequestGuard.html":{},"guards/ResponseGuard.html":{}}}],["executioncontext",{"_index":1256,"title":{},"body":{"injectables/ExcludeNullUndefinedInterceptor.html":{},"guards/RequestGuard.html":{},"interfaces/Response.html":{},"guards/ResponseGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["exists",{"_index":1125,"title":{},"body":{"classes/CustomQueryBuilder.html":{}}}],["expiresin",{"_index":387,"title":{},"body":{"modules/AuthModule.html":{}}}],["export",{"_index":27,"title":{},"body":{"interfaces/APIResponse.html":{},"classes/ApiException.html":{},"controllers/AppController.html":{},"interfaces/AppLaunchAction.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseModel.html":{},"interfaces/BaseRoute.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"modules/CronModule.html":{},"injectables/CronService.html":{},"classes/CrudConfigService.html":{},"classes/CrudController.html":{},"interfaces/CrudOptions.html":{},"classes/CrudRoutesFactory.html":{},"classes/CrudService.html":{},"classes/CustomQueryBuilder.html":{},"modules/DatabaseModule.html":{},"modules/EmailModule.html":{},"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"modules/EmailSchedulingModule.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/ExcludeNullUndefinedInterceptor.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"controllers/HealthController.html":{},"interfaces/IBaseModel.html":{},"interfaces/ICrudService.html":{},"interfaces/IPaginationResult.html":{},"interfaces/ITag.html":{},"interfaces/IUser.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginCredsDto.html":{},"classes/PaginationParams.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"injectables/PersistedCronService.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"classes/QueryFailedFilter.html":{},"classes/R.html":{},"guards/RequestGuard.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Response.html":{},"guards/ResponseGuard.html":{},"interfaces/Result.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"classes/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"injectables/TimeoutInterceptor.html":{},"interfaces/TokenPayload.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateTagsDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/ValidationFailedFilter.html":{}}}],["exports",{"_index":217,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CronModule.html":{},"modules/DatabaseModule.html":{},"modules/EmailModule.html":{},"modules/EmailSchedulingModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":348,"title":{},"body":{"controllers/AuthController.html":{},"classes/LoginCredsDto.html":{},"dependencies.html":{}}}],["expression",{"_index":453,"title":{},"body":{"classes/BaseModel.html":{},"interfaces/IBaseModel.html":{},"classes/Tag.html":{},"classes/User.html":{}}}],["expression.tostring",{"_index":479,"title":{},"body":{"classes/BaseModel.html":{},"interfaces/IBaseModel.html":{}}}],["expressions",{"_index":327,"title":{},"body":{"modules/AppModule.html":{},"injectables/CronService.html":{},"controllers/HealthController.html":{}}}],["extend",{"_index":983,"title":{},"body":{"classes/CrudController.html":{},"classes/CrudService.html":{}}}],["extend.ts",{"_index":1693,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["extendmoment(momentdefault",{"_index":1963,"title":{},"body":{"miscellaneous/variables.html":{}}}],["extends",{"_index":464,"title":{},"body":{"classes/BaseModel.html":{},"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"classes/CustomQueryBuilder.html":{},"interfaces/IBaseModel.html":{},"interfaces/ITag.html":{},"interfaces/IUser.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"classes/UpdateTagsDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["extra",{"_index":821,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["extractjwt",{"_index":1372,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":1382,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["fact16",{"_index":682,"title":{},"body":{"injectables/CronService.html":{}}}],["factorial",{"_index":691,"title":{},"body":{"injectables/CronService.html":{}}}],["factorial(n",{"_index":721,"title":{},"body":{"injectables/CronService.html":{}}}],["factory",{"_index":1918,"title":{},"body":{"miscellaneous/variables.html":{}}}],["failed",{"_index":1444,"title":{},"body":{"classes/QueryFailedFilter.html":{},"classes/ValidationFailedFilter.html":{}}}],["failed.filter.ts",{"_index":1443,"title":{},"body":{"classes/QueryFailedFilter.html":{},"classes/ValidationFailedFilter.html":{},"coverage.html":{}}}],["failed.filter.ts:17",{"_index":1669,"title":{},"body":{"classes/ValidationFailedFilter.html":{}}}],["failed.filter.ts:33",{"_index":1457,"title":{},"body":{"classes/QueryFailedFilter.html":{}}}],["false",{"_index":522,"title":{},"body":{"interfaces/BaseRoute.html":{},"classes/CrudConfigService.html":{},"interfaces/CrudOptions.html":{},"classes/CrudRoutesFactory.html":{},"interfaces/GetManyDefaultResponse.html":{},"injectables/LocalStrategy.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"classes/R.html":{},"guards/ResponseGuard.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"miscellaneous/variables.html":{}}}],["feed",{"_index":101,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["fetch",{"_index":473,"title":{},"body":{"classes/BaseModel.html":{},"interfaces/IBaseModel.html":{}}}],["fetchrelation",{"_index":433,"title":{},"body":{"classes/BaseModel.html":{},"interfaces/IBaseModel.html":{},"classes/Tag.html":{},"classes/User.html":{}}}],["fetchrelation(expression",{"_index":449,"title":{},"body":{"classes/BaseModel.html":{},"classes/Tag.html":{},"classes/User.html":{}}}],["field",{"_index":510,"title":{},"body":{"interfaces/BaseRoute.html":{},"interfaces/CrudOptions.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{}}}],["fields",{"_index":466,"title":{},"body":{"classes/BaseModel.html":{},"classes/CreateUserDto.html":{},"interfaces/IBaseModel.html":{},"interfaces/IUser.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["file",{"_index":5,"title":{},"body":{"interfaces/APIResponse.html":{},"classes/ApiException.html":{},"controllers/AppController.html":{},"interfaces/AppLaunchAction.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseModel.html":{},"interfaces/BaseRoute.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"modules/CronModule.html":{},"injectables/CronService.html":{},"classes/CrudConfigService.html":{},"classes/CrudController.html":{},"interfaces/CrudOptions.html":{},"classes/CrudRoutesFactory.html":{},"classes/CrudService.html":{},"classes/CustomQueryBuilder.html":{},"modules/DatabaseModule.html":{},"modules/EmailModule.html":{},"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"modules/EmailSchedulingModule.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/ExcludeNullUndefinedInterceptor.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"controllers/HealthController.html":{},"interfaces/IBaseModel.html":{},"interfaces/ICrudService.html":{},"interfaces/IPaginationResult.html":{},"interfaces/ITag.html":{},"interfaces/IUser.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginCredsDto.html":{},"classes/PaginationParams.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"injectables/PersistedCronService.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"classes/QueryFailedFilter.html":{},"classes/R.html":{},"guards/RequestGuard.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Response.html":{},"guards/ResponseGuard.html":{},"interfaces/Result.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"classes/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"injectables/TimeoutInterceptor.html":{},"interfaces/TokenPayload.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateTagsDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/ValidationFailedFilter.html":{},"coverage.html":{}}}],["filename",{"_index":1182,"title":{},"body":{"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["filter",{"_index":467,"title":{},"body":{"classes/BaseModel.html":{},"classes/CrudService.html":{},"interfaces/IBaseModel.html":{},"classes/QueryFailedFilter.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{},"classes/ValidationFailedFilter.html":{}}}],["filter((one",{"_index":832,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["find",{"_index":988,"title":{},"body":{"classes/CrudController.html":{},"classes/CrudService.html":{},"dependencies.html":{}}}],["findall",{"_index":989,"title":{},"body":{"classes/CrudController.html":{},"classes/CrudService.html":{},"interfaces/ICrudService.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["findall(paginationparams",{"_index":1008,"title":{},"body":{"classes/CrudController.html":{}}}],["findone",{"_index":1083,"title":{},"body":{"classes/CrudService.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["findone(filter",{"_index":1094,"title":{},"body":{"classes/CrudService.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["findone(id",{"_index":1657,"title":{},"body":{"injectables/UsersService.html":{}}}],["findonebyemail",{"_index":1084,"title":{},"body":{"classes/CrudService.html":{},"interfaces/ICrudService.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["findonebyemail(@query",{"_index":1646,"title":{},"body":{"controllers/UsersController.html":{}}}],["findonebyemail(email",{"_index":1096,"title":{},"body":{"classes/CrudService.html":{},"interfaces/ICrudService.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["findonebyid",{"_index":990,"title":{},"body":{"classes/CrudController.html":{},"classes/CrudService.html":{},"interfaces/ICrudService.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["findonebyid(@param('id",{"_index":1042,"title":{},"body":{"classes/CrudController.html":{}}}],["findonebyid(id",{"_index":1013,"title":{},"body":{"classes/CrudController.html":{},"classes/CrudService.html":{},"interfaces/ICrudService.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["finds",{"_index":1092,"title":{},"body":{"classes/CrudService.html":{},"injectables/PersistedCronService.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["fire",{"_index":758,"title":{},"body":{"injectables/CronService.html":{}}}],["first",{"_index":309,"title":{},"body":{"modules/AppModule.html":{}}}],["firstname",{"_index":605,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/IUser.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["flight",{"_index":1461,"title":{},"body":{"classes/QueryFailedFilter.html":{},"classes/ValidationFailedFilter.html":{}}}],["flow",{"_index":1432,"title":{},"body":{"injectables/PersistedCronService.html":{}}}],["fn.now",{"_index":487,"title":{},"body":{"classes/BaseModel.html":{},"interfaces/IBaseModel.html":{}}}],["follower",{"_index":128,"title":{"interfaces/Follower.html":{}},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["following",{"_index":56,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{},"miscellaneous/typealiases.html":{}}}],["forbidden",{"_index":194,"title":{},"body":{"classes/ApiException.html":{}}}],["forbiddenexception",{"_index":162,"title":{},"body":{"classes/ApiException.html":{}}}],["foreignkeyviolationerror",{"_index":1451,"title":{},"body":{"classes/QueryFailedFilter.html":{}}}],["format",{"_index":620,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/IUser.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["found",{"_index":188,"title":{},"body":{"classes/ApiException.html":{},"injectables/CronService.html":{},"classes/CrudController.html":{}}}],["framework",{"_index":1846,"title":{},"body":{"index.html":{}}}],["frontend",{"_index":594,"title":{},"body":{"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"interfaces/ITag.html":{},"interfaces/IUser.html":{},"classes/Tag.html":{},"classes/UpdateTagsDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["func",{"_index":815,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["function",{"_index":184,"title":{},"body":{"classes/ApiException.html":{},"modules/AppModule.html":{},"interfaces/BaseRoute.html":{},"classes/CrudConfigService.html":{},"interfaces/CrudOptions.html":{},"classes/CrudRoutesFactory.html":{},"classes/CustomQueryBuilder.html":{},"injectables/ExcludeNullUndefinedInterceptor.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"classes/R.html":{},"guards/RequestGuard.html":{},"guards/ResponseGuard.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["functionality",{"_index":986,"title":{},"body":{"classes/CrudController.html":{},"classes/CrudService.html":{}}}],["functions",{"_index":1822,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["fuzzy",{"_index":630,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/IUser.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["gen/api",{"_index":137,"title":{},"body":{"classes/ApiException.html":{},"classes/CrudController.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["gen/crud",{"_index":793,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"coverage.html":{}}}],["gen/crud.decorator.ts",{"_index":1700,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["gen/utils/checks.util.ts",{"_index":1701,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["gen/utils/obj.util.ts",{"_index":1718,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["gen/utils/other.ts",{"_index":489,"title":{},"body":{"interfaces/BaseRoute.html":{},"interfaces/CrudOptions.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["gen/utils/other.ts:40",{"_index":1414,"title":{},"body":{"interfaces/ParamsOptions.html":{}}}],["gen/utils/types/object",{"_index":1909,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["gender",{"_index":57,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["generated",{"_index":580,"title":{},"body":{"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"interfaces/ITag.html":{},"interfaces/IUser.html":{},"classes/Tag.html":{},"classes/UpdateTagsDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["generatetoken",{"_index":393,"title":{},"body":{"injectables/AuthService.html":{}}}],["generatetoken(user",{"_index":402,"title":{},"body":{"injectables/AuthService.html":{}}}],["generic",{"_index":591,"title":{},"body":{"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"interfaces/IPaginationResult.html":{},"interfaces/ITag.html":{},"interfaces/IUser.html":{},"classes/PaginationParams.html":{},"classes/Tag.html":{},"classes/UpdateTagsDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["get(':id",{"_index":1041,"title":{},"body":{"classes/CrudController.html":{}}}],["get()@httpcode(200)@healthcheck",{"_index":1290,"title":{},"body":{"controllers/HealthController.html":{}}}],["get(key",{"_index":1958,"title":{},"body":{"miscellaneous/variables.html":{}}}],["get(metadatakey",{"_index":1473,"title":{},"body":{"classes/R.html":{}}}],["getapplaunchdata",{"_index":29,"title":{"interfaces/GetAppLaunchData.html":{}},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["getcomments",{"_index":32,"title":{"interfaces/GetComments.html":{}},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["getextramodels",{"_index":1541,"title":{},"body":{"classes/Swagger.html":{}}}],["getextramodels(target",{"_index":841,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["getfollowers",{"_index":34,"title":{"interfaces/GetFollowers.html":{}},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["getfollowing",{"_index":35,"title":{"interfaces/GetFollowing.html":{}},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["gethello",{"_index":200,"title":{},"body":{"controllers/AppController.html":{}}}],["getmany",{"_index":529,"title":{},"body":{"interfaces/BaseRoute.html":{},"classes/CrudConfigService.html":{},"interfaces/CrudOptions.html":{},"classes/CrudRoutesFactory.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["getmany${resourcename}responsedto",{"_index":869,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["getmanybase",{"_index":500,"title":{},"body":{"interfaces/BaseRoute.html":{},"interfaces/CrudOptions.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"miscellaneous/typealiases.html":{}}}],["getmanydefaultresponse",{"_index":508,"title":{"interfaces/GetManyDefaultResponse.html":{}},"body":{"interfaces/BaseRoute.html":{},"classes/CrudConfigService.html":{},"interfaces/CrudOptions.html":{},"classes/CrudRoutesFactory.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"coverage.html":{}}}],["getmanyresponsedto",{"_index":865,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["getmodelname",{"_index":1076,"title":{},"body":{"classes/CrudRoutesFactory.html":{}}}],["getmodeltype",{"_index":1078,"title":{},"body":{"classes/CrudRoutesFactory.html":{}}}],["getnotifications",{"_index":81,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["getone",{"_index":507,"title":{},"body":{"interfaces/BaseRoute.html":{},"classes/CrudConfigService.html":{},"interfaces/CrudOptions.html":{},"classes/CrudRoutesFactory.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"miscellaneous/typealiases.html":{}}}],["getone(name",{"_index":910,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["getone(req",{"_index":912,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["getonebase",{"_index":501,"title":{},"body":{"interfaces/BaseRoute.html":{},"classes/CrudConfigService.html":{},"interfaces/CrudOptions.html":{},"classes/CrudRoutesFactory.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"miscellaneous/typealiases.html":{}}}],["getonebase(name",{"_index":914,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["getonebase(req",{"_index":915,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["getoneresponsedto",{"_index":871,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["getownpropnames",{"_index":1719,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["getrescuelist",{"_index":33,"title":{"interfaces/GetRescueList.html":{}},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["getresponseok",{"_index":1542,"title":{},"body":{"classes/Swagger.html":{}}}],["getresponseok(func",{"_index":843,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["getroutesschema",{"_index":917,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["gettargetproto",{"_index":1074,"title":{},"body":{"classes/CrudRoutesFactory.html":{}}}],["getting",{"_index":1842,"title":{"index.html":{}},"body":{}}],["getuserposts",{"_index":31,"title":{"interfaces/GetUserPosts.html":{}},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["getuserprofile",{"_index":30,"title":{"interfaces/GetUserProfile.html":{}},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["gives",{"_index":592,"title":{},"body":{"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"interfaces/ITag.html":{},"interfaces/IUser.html":{},"classes/Tag.html":{},"classes/UpdateTagsDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["global",{"_index":538,"title":{},"body":{"interfaces/BaseRoute.html":{},"interfaces/CrudOptions.html":{},"modules/DatabaseModule.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{}}}],["gracefully",{"_index":1421,"title":{},"body":{"injectables/PersistedCronService.html":{}}}],["graph",{"_index":1895,"title":{},"body":{"modules.html":{}}}],["graphql",{"_index":1167,"title":{},"body":{"modules/DatabaseModule.html":{},"dependencies.html":{}}}],["graphqlbuilder",{"_index":1169,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["graphqlbuilder().allmodels(models).build",{"_index":1170,"title":{},"body":{"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["graphqlmodule",{"_index":242,"title":{},"body":{"modules/AppModule.html":{}}}],["graphqlmodule.forroot",{"_index":289,"title":{},"body":{"modules/AppModule.html":{}}}],["graphqlschema",{"_index":254,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["grow",{"_index":1872,"title":{},"body":{"index.html":{}}}],["guard",{"_index":1478,"title":{"guards/RequestGuard.html":{},"guards/ResponseGuard.html":{}},"body":{"guards/RequestGuard.html":{},"guards/ResponseGuard.html":{},"coverage.html":{}}}],["guards",{"_index":1480,"title":{},"body":{"guards/RequestGuard.html":{},"guards/ResponseGuard.html":{},"overview.html":{}}}],["handlecron",{"_index":692,"title":{},"body":{"injectables/CronService.html":{}}}],["handlecronfn",{"_index":725,"title":{},"body":{"injectables/CronService.html":{}}}],["handled",{"_index":1459,"title":{},"body":{"classes/QueryFailedFilter.html":{},"classes/ValidationFailedFilter.html":{}}}],["handleinterval",{"_index":693,"title":{},"body":{"injectables/CronService.html":{}}}],["handler",{"_index":1264,"title":{},"body":{"injectables/ExcludeNullUndefinedInterceptor.html":{},"injectables/PersistedCronService.html":{},"interfaces/Response.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["handletimeout",{"_index":694,"title":{},"body":{"injectables/CronService.html":{}}}],["hapi/joi",{"_index":249,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["hash",{"_index":653,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/IUser.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["hashpassword",{"_index":1620,"title":{},"body":{"classes/User.html":{},"injectables/UsersService.html":{}}}],["hashpassword(password",{"_index":652,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/IUser.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"injectables/UsersService.html":{}}}],["haslength",{"_index":1702,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["haslength(objkeys(val",{"_index":1953,"title":{},"body":{"miscellaneous/variables.html":{}}}],["haslength(val",{"_index":1929,"title":{},"body":{"miscellaneous/variables.html":{}}}],["hasmore",{"_index":1160,"title":{},"body":{"classes/CustomQueryBuilder.html":{}}}],["hasvalue",{"_index":1703,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["health",{"_index":293,"title":{},"body":{"modules/AppModule.html":{},"controllers/HealthController.html":{}}}],["health/health.controller",{"_index":257,"title":{},"body":{"modules/AppModule.html":{}}}],["healthcheck",{"_index":1302,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthcheckservice",{"_index":1303,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthcontroller",{"_index":230,"title":{"controllers/HealthController.html":{}},"body":{"modules/AppModule.html":{},"controllers/HealthController.html":{},"coverage.html":{}}}],["hello",{"_index":207,"title":{},"body":{"controllers/AppController.html":{}}}],["helmet",{"_index":1795,"title":{},"body":{"dependencies.html":{}}}],["helpers",{"_index":463,"title":{},"body":{"classes/BaseModel.html":{},"interfaces/IBaseModel.html":{},"guards/RequestGuard.html":{},"guards/ResponseGuard.html":{}}}],["here",{"_index":1881,"title":{},"body":{"index.html":{}}}],["hidden",{"_index":428,"title":{},"body":{"classes/BaseModel.html":{},"interfaces/IBaseModel.html":{},"classes/Tag.html":{},"classes/User.html":{}}}],["hook",{"_index":1428,"title":{},"body":{"injectables/PersistedCronService.html":{}}}],["host",{"_index":1455,"title":{},"body":{"classes/QueryFailedFilter.html":{},"classes/ValidationFailedFilter.html":{}}}],["host.switchtohttp",{"_index":1463,"title":{},"body":{"classes/QueryFailedFilter.html":{},"classes/ValidationFailedFilter.html":{}}}],["http",{"_index":1349,"title":{},"body":{"interfaces/IPaginationResult.html":{},"classes/PaginationParams.html":{}}}],["httpcode",{"_index":1299,"title":{},"body":{"controllers/HealthController.html":{}}}],["httpcode(200",{"_index":1316,"title":{},"body":{"controllers/HealthController.html":{}}}],["https://docs.nestjs.com",{"_index":1320,"title":{},"body":{"controllers/HealthController.html":{}}}],["https://nestjs.com",{"_index":1888,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":24,"title":{},"body":{"interfaces/APIResponse.html":{},"classes/ApiException.html":{},"interfaces/AppLaunchAction.html":{},"controllers/AuthController.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"classes/CrudConfigService.html":{},"classes/CrudController.html":{},"classes/CrudRoutesFactory.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/IPaginationResult.html":{},"classes/LoginCredsDto.html":{},"classes/PaginationParams.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"classes/QueryFailedFilter.html":{},"classes/R.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"controllers/TagsController.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{},"controllers/UsersController.html":{},"classes/ValidationFailedFilter.html":{}}}],["httpstatus.created",{"_index":1052,"title":{},"body":{"classes/CrudController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["httpstatus.no_content",{"_index":1045,"title":{},"body":{"classes/CrudController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["httpstatus.ok",{"_index":367,"title":{},"body":{"controllers/AuthController.html":{},"classes/CrudConfigService.html":{},"classes/CrudController.html":{},"classes/CrudRoutesFactory.html":{},"classes/LoginCredsDto.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["httpstatus.precondition_failed",{"_index":1466,"title":{},"body":{"classes/QueryFailedFilter.html":{},"classes/ValidationFailedFilter.html":{}}}],["httpstatus[statuscode",{"_index":183,"title":{},"body":{"classes/ApiException.html":{}}}],["ibasemodel",{"_index":425,"title":{"interfaces/IBaseModel.html":{}},"body":{"classes/BaseModel.html":{},"interfaces/IBaseModel.html":{},"coverage.html":{}}}],["icrudservice",{"_index":993,"title":{"interfaces/ICrudService.html":{}},"body":{"classes/CrudController.html":{},"classes/CrudService.html":{},"interfaces/ICrudService.html":{},"coverage.html":{}}}],["id",{"_index":429,"title":{},"body":{"classes/BaseModel.html":{},"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"classes/CrudController.html":{},"classes/CrudService.html":{},"interfaces/IBaseModel.html":{},"interfaces/ICrudService.html":{},"interfaces/ITag.html":{},"interfaces/IUser.html":{},"classes/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"classes/UpdateTagsDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["id'})@apiresponse({status",{"_index":1015,"title":{},"body":{"classes/CrudController.html":{}}}],["id'})@put(':id",{"_index":1640,"title":{},"body":{"controllers/UsersController.html":{}}}],["identifier",{"_index":1676,"title":{},"body":{"coverage.html":{}}}],["ignore",{"_index":481,"title":{},"body":{"classes/BaseModel.html":{},"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/CrudService.html":{},"injectables/ExcludeNullUndefinedInterceptor.html":{},"controllers/HealthController.html":{},"interfaces/IBaseModel.html":{},"classes/QueryFailedFilter.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"classes/ValidationFailedFilter.html":{},"miscellaneous/variables.html":{}}}],["ignoreexpiration",{"_index":1379,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["implement",{"_index":1246,"title":{},"body":{"injectables/EmailService.html":{},"injectables/ExcludeNullUndefinedInterceptor.html":{},"injectables/PersistedCronService.html":{},"classes/QueryFailedFilter.html":{},"interfaces/Response.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/ValidationFailedFilter.html":{}}}],["implements",{"_index":297,"title":{},"body":{"modules/AppModule.html":{},"classes/BaseModel.html":{},"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/CrudService.html":{},"injectables/ExcludeNullUndefinedInterceptor.html":{},"controllers/HealthController.html":{},"interfaces/IBaseModel.html":{},"interfaces/ITag.html":{},"interfaces/IUser.html":{},"injectables/PersistedCronService.html":{},"classes/QueryFailedFilter.html":{},"classes/R.html":{},"guards/RequestGuard.html":{},"interfaces/Response.html":{},"guards/ResponseGuard.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"classes/Tag.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateTagsDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/ValidationFailedFilter.html":{}}}],["import",{"_index":25,"title":{},"body":{"interfaces/APIResponse.html":{},"classes/ApiException.html":{},"controllers/AppController.html":{},"interfaces/AppLaunchAction.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseModel.html":{},"interfaces/BaseRoute.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"modules/CronModule.html":{},"injectables/CronService.html":{},"classes/CrudConfigService.html":{},"classes/CrudController.html":{},"interfaces/CrudOptions.html":{},"classes/CrudRoutesFactory.html":{},"classes/CrudService.html":{},"classes/CustomQueryBuilder.html":{},"modules/DatabaseModule.html":{},"modules/EmailModule.html":{},"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"modules/EmailSchedulingModule.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/ExcludeNullUndefinedInterceptor.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"controllers/HealthController.html":{},"interfaces/IBaseModel.html":{},"interfaces/ICrudService.html":{},"interfaces/IPaginationResult.html":{},"interfaces/ITag.html":{},"interfaces/IUser.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginCredsDto.html":{},"classes/PaginationParams.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"injectables/PersistedCronService.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"classes/QueryFailedFilter.html":{},"classes/R.html":{},"guards/RequestGuard.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Response.html":{},"guards/ResponseGuard.html":{},"interfaces/Result.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"classes/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateTagsDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/ValidationFailedFilter.html":{}}}],["imports",{"_index":231,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EmailModule.html":{},"modules/EmailSchedulingModule.html":{}}}],["in,no",{"_index":1501,"title":{},"body":{"guards/RequestGuard.html":{}}}],["included",{"_index":1346,"title":{},"body":{"interfaces/IPaginationResult.html":{},"classes/PaginationParams.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"interfaces/APIResponse.html":{},"classes/ApiException.html":{},"controllers/AppController.html":{},"interfaces/AppLaunchAction.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BaseModel.html":{},"interfaces/BaseRoute.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"injectables/CronService.html":{},"classes/CrudConfigService.html":{},"classes/CrudController.html":{},"interfaces/CrudOptions.html":{},"classes/CrudRoutesFactory.html":{},"classes/CrudService.html":{},"classes/CustomQueryBuilder.html":{},"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/ExcludeNullUndefinedInterceptor.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"controllers/HealthController.html":{},"interfaces/IBaseModel.html":{},"interfaces/ICrudService.html":{},"interfaces/IPaginationResult.html":{},"interfaces/ITag.html":{},"interfaces/IUser.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginCredsDto.html":{},"classes/PaginationParams.html":{},"interfaces/ParamOption.html":{},"injectables/PersistedCronService.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"classes/QueryFailedFilter.html":{},"classes/R.html":{},"guards/RequestGuard.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Response.html":{},"guards/ResponseGuard.html":{},"interfaces/Result.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"classes/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/TimeoutInterceptor.html":{},"interfaces/TokenPayload.html":{},"injectables/TransformInterceptor.html":{},"classes/User.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/ValidationFailedFilter.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["indexable",{"_index":1413,"title":{},"body":{"interfaces/ParamsOptions.html":{}}}],["indicating",{"_index":1492,"title":{},"body":{"guards/RequestGuard.html":{},"guards/ResponseGuard.html":{}}}],["info",{"_index":3,"title":{},"body":{"interfaces/APIResponse.html":{},"classes/ApiException.html":{},"controllers/AppController.html":{},"interfaces/AppLaunchAction.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseModel.html":{},"interfaces/BaseRoute.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"modules/CronModule.html":{},"injectables/CronService.html":{},"classes/CrudConfigService.html":{},"classes/CrudController.html":{},"interfaces/CrudOptions.html":{},"classes/CrudRoutesFactory.html":{},"classes/CrudService.html":{},"classes/CustomQueryBuilder.html":{},"modules/DatabaseModule.html":{},"modules/EmailModule.html":{},"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"modules/EmailSchedulingModule.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/ExcludeNullUndefinedInterceptor.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"controllers/HealthController.html":{},"interfaces/IBaseModel.html":{},"interfaces/ICrudService.html":{},"interfaces/IPaginationResult.html":{},"interfaces/ITag.html":{},"interfaces/IUser.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginCredsDto.html":{},"classes/PaginationParams.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"injectables/PersistedCronService.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"classes/QueryFailedFilter.html":{},"classes/R.html":{},"guards/RequestGuard.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Response.html":{},"guards/ResponseGuard.html":{},"interfaces/Result.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"classes/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"injectables/TimeoutInterceptor.html":{},"interfaces/TokenPayload.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateTagsDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/ValidationFailedFilter.html":{}}}],["inherited",{"_index":1554,"title":{},"body":{"classes/Tag.html":{},"injectables/TagsService.html":{},"classes/User.html":{},"injectables/UsersService.html":{}}}],["initialized",{"_index":320,"title":{},"body":{"modules/AppModule.html":{},"controllers/HealthController.html":{}}}],["inject",{"_index":382,"title":{},"body":{"modules/AuthModule.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["injectable",{"_index":389,"title":{"injectables/AuthService.html":{},"injectables/CronService.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/ExcludeNullUndefinedInterceptor.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/PersistedCronService.html":{},"injectables/TagsService.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/CronService.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/ExcludeNullUndefinedInterceptor.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/PersistedCronService.html":{},"guards/RequestGuard.html":{},"interfaces/Response.html":{},"guards/ResponseGuard.html":{},"injectables/TagsService.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":390,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CronService.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/ExcludeNullUndefinedInterceptor.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/PersistedCronService.html":{},"injectables/TagsService.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injected",{"_index":996,"title":{},"body":{"classes/CrudController.html":{},"classes/CrudService.html":{}}}],["input",{"_index":1007,"title":{},"body":{"classes/CrudController.html":{},"classes/CrudService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["inputs",{"_index":1497,"title":{},"body":{"guards/RequestGuard.html":{}}}],["inputs[key",{"_index":1504,"title":{},"body":{"guards/RequestGuard.html":{}}}],["installation",{"_index":1854,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":1856,"title":{},"body":{"index.html":{}}}],["instance",{"_index":584,"title":{},"body":{"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"interfaces/ITag.html":{},"interfaces/IUser.html":{},"classes/Tag.html":{},"classes/UpdateTagsDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["instanceof",{"_index":1505,"title":{},"body":{"guards/RequestGuard.html":{},"injectables/TimeoutInterceptor.html":{},"miscellaneous/variables.html":{}}}],["integer",{"_index":588,"title":{},"body":{"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"interfaces/ITag.html":{},"interfaces/IUser.html":{},"classes/Tag.html":{},"classes/UpdateTagsDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["intercept",{"_index":1254,"title":{},"body":{"injectables/ExcludeNullUndefinedInterceptor.html":{},"interfaces/Response.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["intercept(context",{"_index":1255,"title":{},"body":{"injectables/ExcludeNullUndefinedInterceptor.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["interceptor",{"_index":1259,"title":{},"body":{"injectables/ExcludeNullUndefinedInterceptor.html":{},"interfaces/Response.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["interceptors",{"_index":1251,"title":{},"body":{"injectables/ExcludeNullUndefinedInterceptor.html":{}}}],["interface",{"_index":0,"title":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/BaseRoute.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/CrudOptions.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/IBaseModel.html":{},"interfaces/ICrudService.html":{},"interfaces/IPaginationResult.html":{},"interfaces/ITag.html":{},"interfaces/IUser.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Response.html":{},"interfaces/Result.html":{},"interfaces/TokenPayload.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"classes/BaseModel.html":{},"interfaces/BaseRoute.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"interfaces/CrudOptions.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/IBaseModel.html":{},"interfaces/ICrudService.html":{},"interfaces/IPaginationResult.html":{},"interfaces/ITag.html":{},"interfaces/IUser.html":{},"classes/PaginationParams.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Response.html":{},"interfaces/Result.html":{},"classes/Tag.html":{},"interfaces/TokenPayload.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateTagsDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{},"coverage.html":{}}}],["interfaces",{"_index":2,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/BaseRoute.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/CrudOptions.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/IBaseModel.html":{},"interfaces/ICrudService.html":{},"interfaces/IPaginationResult.html":{},"interfaces/ITag.html":{},"interfaces/IUser.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Response.html":{},"interfaces/Result.html":{},"interfaces/TokenPayload.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{},"overview.html":{}}}],["internal",{"_index":191,"title":{},"body":{"classes/ApiException.html":{}}}],["internalservererrorexception",{"_index":163,"title":{},"body":{"classes/ApiException.html":{}}}],["interval",{"_index":676,"title":{},"body":{"injectables/CronService.html":{},"controllers/HealthController.html":{}}}],["interval('handleintervalfn",{"_index":727,"title":{},"body":{"injectables/CronService.html":{}}}],["interval(5000).pipe",{"_index":1313,"title":{},"body":{"controllers/HealthController.html":{}}}],["intervals",{"_index":735,"title":{},"body":{"injectables/CronService.html":{}}}],["intervals.foreach((key",{"_index":773,"title":{},"body":{"injectables/CronService.html":{}}}],["invoked",{"_index":1265,"title":{},"body":{"injectables/ExcludeNullUndefinedInterceptor.html":{},"injectables/PersistedCronService.html":{},"interfaces/Response.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["ipagination",{"_index":1038,"title":{},"body":{"classes/CrudController.html":{}}}],["ipaginationresult",{"_index":1034,"title":{"interfaces/IPaginationResult.html":{}},"body":{"classes/CrudController.html":{},"classes/CrudService.html":{},"interfaces/ICrudService.html":{},"interfaces/IPaginationResult.html":{},"classes/PaginationParams.html":{},"coverage.html":{}}}],["isactive",{"_index":50,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"classes/CreateUserDto.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/IUser.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["isarray",{"_index":866,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["isarrayfull",{"_index":1704,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["isarrayfull(val",{"_index":1924,"title":{},"body":{"miscellaneous/variables.html":{}}}],["isarraystrings",{"_index":1705,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["isboolean",{"_index":611,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/IUser.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["isboolean(val",{"_index":1956,"title":{},"body":{"miscellaneous/variables.html":{}}}],["isdate",{"_index":1706,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["isdate(val",{"_index":1957,"title":{},"body":{"miscellaneous/variables.html":{}}}],["isdatestring",{"_index":1198,"title":{},"body":{"classes/EmailScheduleDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["isemail",{"_index":617,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/EmailScheduleDto.html":{},"interfaces/IUser.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["isemail()@isnotempty()@minlength(2",{"_index":607,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isempty",{"_index":1733,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["isempty(value",{"_index":1146,"title":{},"body":{"classes/CustomQueryBuilder.html":{},"miscellaneous/functions.html":{}}}],["isequal",{"_index":1707,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["isequal(val",{"_index":1944,"title":{},"body":{"miscellaneous/variables.html":{}}}],["isfalse",{"_index":803,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["isfalse(this.options.serialize?.create",{"_index":936,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["isfalse(this.options.serialize?.delete",{"_index":945,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["isfalse(this.options.serialize?.get",{"_index":929,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["isfalse(this.options.serialize?.getmany",{"_index":932,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["isfalse(this.options.serialize?.replace",{"_index":942,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["isfalse(this.options.serialize?.update",{"_index":939,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["isfunction",{"_index":804,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["isfunction(this.modeltype",{"_index":951,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["isfunction(this.options.serialize?.create",{"_index":958,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["isfunction(this.options.serialize?.delete",{"_index":964,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["isfunction(this.options.serialize?.get",{"_index":954,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["isfunction(this.options.serialize?.replace",{"_index":962,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["isfunction(this.options.serialize?.update",{"_index":960,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["isglobal",{"_index":262,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["isin",{"_index":1708,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["isnil",{"_index":1709,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["isnotempty",{"_index":346,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"classes/EmailScheduleDto.html":{},"interfaces/ITag.html":{},"interfaces/IUser.html":{},"classes/LoginCredsDto.html":{},"classes/Tag.html":{},"classes/UpdateTagsDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["isnotempty(records",{"_index":1164,"title":{},"body":{"classes/CustomQueryBuilder.html":{}}}],["isnotempty(value",{"_index":1840,"title":{},"body":{"miscellaneous/functions.html":{}}}],["isnull",{"_index":1710,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["isnull(val",{"_index":1947,"title":{},"body":{"miscellaneous/variables.html":{}}}],["isnumber",{"_index":1711,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["isnumber(val",{"_index":1955,"title":{},"body":{"miscellaneous/variables.html":{}}}],["isnumeric",{"_index":1712,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["isobject",{"_index":1713,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["isobject(val",{"_index":1952,"title":{},"body":{"miscellaneous/variables.html":{}}}],["isobject(value",{"_index":1144,"title":{},"body":{"classes/CustomQueryBuilder.html":{},"miscellaneous/functions.html":{}}}],["isobjectfull",{"_index":805,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["isobjectfull(config.params",{"_index":876,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["isobjectfull(config.query",{"_index":874,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["isobjectfull(config.serialize",{"_index":878,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["isobjectfull(this.options.dto",{"_index":924,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["isobjectfull(this.options.query",{"_index":921,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["isoptional",{"_index":1351,"title":{},"body":{"interfaces/IPaginationResult.html":{},"classes/PaginationParams.html":{}}}],["isownprofile",{"_index":58,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["isrecent",{"_index":100,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["isrescuer",{"_index":59,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["isstring",{"_index":568,"title":{},"body":{"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"classes/EmailScheduleDto.html":{},"interfaces/ITag.html":{},"interfaces/IUser.html":{},"classes/Tag.html":{},"classes/UpdateTagsDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["isstring()@isnotempty",{"_index":1196,"title":{},"body":{"classes/EmailScheduleDto.html":{}}}],["isstring()@isnotempty()@minlength(2",{"_index":609,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@isnotempty()@minlength(2)@maxlength(36",{"_index":565,"title":{},"body":{"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{}}}],["isstring()@isnotempty()@minlength(8",{"_index":614,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring(val",{"_index":1954,"title":{},"body":{"miscellaneous/variables.html":{}}}],["isstringfull",{"_index":1714,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["isstringfull(v",{"_index":1931,"title":{},"body":{"miscellaneous/variables.html":{}}}],["isstringfull(val",{"_index":1932,"title":{},"body":{"miscellaneous/variables.html":{}}}],["istrue",{"_index":1715,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["isundefined",{"_index":1716,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["isundefined(val",{"_index":1946,"title":{},"body":{"miscellaneous/variables.html":{}}}],["isuserreactedtopost",{"_index":88,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["isvalue",{"_index":1717,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["isvalue(o",{"_index":1926,"title":{},"body":{"miscellaneous/variables.html":{}}}],["isvalue(val",{"_index":1927,"title":{},"body":{"miscellaneous/variables.html":{}}}],["itag",{"_index":564,"title":{"interfaces/ITag.html":{}},"body":{"classes/CreateTagsDto.html":{},"interfaces/ITag.html":{},"classes/Tag.html":{},"classes/UpdateTagsDto.html":{},"coverage.html":{}}}],["items",{"_index":859,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"interfaces/IPaginationResult.html":{},"classes/PaginationParams.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["iuser",{"_index":604,"title":{"interfaces/IUser.html":{}},"body":{"classes/CreateUserDto.html":{},"interfaces/IUser.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"coverage.html":{}}}],["job",{"_index":707,"title":{},"body":{"injectables/CronService.html":{},"injectables/EmailSchedulingService.html":{},"injectables/PersistedCronService.html":{}}}],["job.find",{"_index":1433,"title":{},"body":{"injectables/PersistedCronService.html":{}}}],["job.start",{"_index":765,"title":{},"body":{"injectables/CronService.html":{},"injectables/EmailSchedulingService.html":{}}}],["jobs",{"_index":675,"title":{},"body":{"injectables/CronService.html":{},"injectables/PersistedCronService.html":{}}}],["jobs.foreach((job",{"_index":1435,"title":{},"body":{"injectables/PersistedCronService.html":{}}}],["joi",{"_index":248,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.number().default(3000",{"_index":272,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["joi.object",{"_index":270,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["joi.string",{"_index":274,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["joi.string().required",{"_index":282,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["join",{"_index":1878,"title":{},"body":{"index.html":{}}}],["json",{"_index":577,"title":{},"body":{"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"interfaces/ITag.html":{},"interfaces/IUser.html":{},"classes/Tag.html":{},"classes/UpdateTagsDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["jsonschema",{"_index":571,"title":{},"body":{"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"interfaces/ITag.html":{},"interfaces/IUser.html":{},"classes/Tag.html":{},"classes/UpdateTagsDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["jwt",{"_index":1375,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["jwt.strategy",{"_index":379,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwt_access_token_expiration_time",{"_index":1959,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jwtfromrequest",{"_index":1381,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtkey",{"_index":281,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["jwtmodule",{"_index":375,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.registerasync",{"_index":381,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtservice",{"_index":396,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":371,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["k",{"_index":1284,"title":{},"body":{"injectables/ExcludeNullUndefinedInterceptor.html":{}}}],["kamil",{"_index":1885,"title":{},"body":{"index.html":{}}}],["keep",{"_index":1310,"title":{},"body":{"controllers/HealthController.html":{}}}],["key",{"_index":516,"title":{},"body":{"interfaces/BaseRoute.html":{},"injectables/CronService.html":{},"interfaces/CrudOptions.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"guards/RequestGuard.html":{},"miscellaneous/variables.html":{}}}],["keyof",{"_index":1363,"title":{},"body":{"interfaces/IPaginationResult.html":{},"classes/PaginationParams.html":{}}}],["knex",{"_index":1168,"title":{},"body":{"modules/DatabaseModule.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["knex.sqlite",{"_index":1183,"title":{},"body":{"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["knexconnection",{"_index":1177,"title":{},"body":{"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["lastname",{"_index":606,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/IUser.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["latitude",{"_index":60,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["legend",{"_index":213,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CronModule.html":{},"modules/EmailModule.html":{},"modules/EmailSchedulingModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["license",{"_index":1891,"title":{},"body":{"index.html":{}}}],["licensed",{"_index":1869,"title":{},"body":{"index.html":{}}}],["limit",{"_index":524,"title":{},"body":{"interfaces/BaseRoute.html":{},"interfaces/CrudOptions.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"dependencies.html":{}}}],["line",{"_index":323,"title":{},"body":{"modules/AppModule.html":{},"classes/BaseModel.html":{},"interfaces/BaseRoute.html":{},"injectables/CronService.html":{},"classes/CrudConfigService.html":{},"interfaces/CrudOptions.html":{},"classes/CrudRoutesFactory.html":{},"classes/CustomQueryBuilder.html":{},"injectables/ExcludeNullUndefinedInterceptor.html":{},"interfaces/GetManyDefaultResponse.html":{},"controllers/HealthController.html":{},"interfaces/IBaseModel.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"classes/R.html":{},"guards/RequestGuard.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"injectables/UsersService.html":{}}}],["link",{"_index":38,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["listing",{"_index":1347,"title":{},"body":{"interfaces/IPaginationResult.html":{},"classes/PaginationParams.html":{}}}],["literal",{"_index":1056,"title":{},"body":{"interfaces/CrudOptions.html":{},"controllers/HealthController.html":{},"interfaces/IPaginationResult.html":{},"interfaces/Rescues.html":{},"classes/Swagger.html":{},"miscellaneous/typealiases.html":{}}}],["literal.type.ts",{"_index":1906,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["load",{"_index":796,"title":{},"body":{"classes/CrudConfigService.html":{},"controllers/HealthController.html":{}}}],["load(config",{"_index":799,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["local",{"_index":1396,"title":{},"body":{"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["local.strategy",{"_index":380,"title":{},"body":{"modules/AuthModule.html":{}}}],["localstrategy",{"_index":372,"title":{"injectables/LocalStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["localstrategy.passwordfield",{"_index":1398,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["localstrategy.usernamefield",{"_index":1397,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["lodash",{"_index":1142,"title":{},"body":{"classes/CustomQueryBuilder.html":{},"dependencies.html":{}}}],["logallcrons",{"_index":695,"title":{},"body":{"injectables/CronService.html":{}}}],["logger",{"_index":683,"title":{},"body":{"injectables/CronService.html":{},"injectables/EmailSchedulingService.html":{},"injectables/PersistedCronService.html":{}}}],["logger(cronservice.name",{"_index":741,"title":{},"body":{"injectables/CronService.html":{}}}],["logger(emailschedulingservice.name",{"_index":1227,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["logger(persistedcronservice.name",{"_index":1430,"title":{},"body":{"injectables/PersistedCronService.html":{}}}],["logging",{"_index":285,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["login",{"_index":333,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginCredsDto.html":{}}}],["login(req",{"_index":334,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(user",{"_index":405,"title":{},"body":{"injectables/AuthService.html":{}}}],["logincreds",{"_index":335,"title":{},"body":{"controllers/AuthController.html":{},"classes/LoginCredsDto.html":{}}}],["logincredsdto",{"_index":336,"title":{"classes/LoginCredsDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/LoginCredsDto.html":{},"coverage.html":{}}}],["logintervals",{"_index":696,"title":{},"body":{"injectables/CronService.html":{}}}],["logtimeouts",{"_index":697,"title":{},"body":{"injectables/CronService.html":{}}}],["longitude",{"_index":61,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["loop",{"_index":1163,"title":{},"body":{"classes/CustomQueryBuilder.html":{}}}],["make",{"_index":1420,"title":{},"body":{"injectables/PersistedCronService.html":{}}}],["many",{"_index":853,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["map",{"_index":1273,"title":{},"body":{"injectables/ExcludeNullUndefinedInterceptor.html":{},"controllers/HealthController.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"dependencies.html":{}}}],["map((_",{"_index":1314,"title":{},"body":{"controllers/HealthController.html":{}}}],["map((name",{"_index":830,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["mapping",{"_index":475,"title":{},"body":{"classes/BaseModel.html":{},"interfaces/IBaseModel.html":{}}}],["match",{"_index":416,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"interfaces/IUser.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["matching",{"_index":132,"title":{},"body":{"interfaces/APIResponse.html":{},"classes/ApiException.html":{},"controllers/AppController.html":{},"interfaces/AppLaunchAction.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseModel.html":{},"interfaces/BaseRoute.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"modules/CronModule.html":{},"injectables/CronService.html":{},"classes/CrudConfigService.html":{},"classes/CrudController.html":{},"interfaces/CrudOptions.html":{},"classes/CrudRoutesFactory.html":{},"classes/CrudService.html":{},"classes/CustomQueryBuilder.html":{},"modules/DatabaseModule.html":{},"modules/EmailModule.html":{},"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"modules/EmailSchedulingModule.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/ExcludeNullUndefinedInterceptor.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"controllers/HealthController.html":{},"interfaces/IBaseModel.html":{},"interfaces/ICrudService.html":{},"interfaces/IPaginationResult.html":{},"interfaces/ITag.html":{},"interfaces/IUser.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginCredsDto.html":{},"classes/PaginationParams.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"injectables/PersistedCronService.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"classes/QueryFailedFilter.html":{},"classes/R.html":{},"guards/RequestGuard.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Response.html":{},"guards/ResponseGuard.html":{},"interfaces/Result.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"classes/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"injectables/TimeoutInterceptor.html":{},"interfaces/TokenPayload.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateTagsDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/ValidationFailedFilter.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{},"routes.html":{}}}],["math.ceil(result.total",{"_index":1153,"title":{},"body":{"classes/CustomQueryBuilder.html":{}}}],["math.ceil(total",{"_index":1111,"title":{},"body":{"classes/CrudService.html":{}}}],["maxlength",{"_index":569,"title":{},"body":{"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"interfaces/ITag.html":{},"interfaces/IUser.html":{},"classes/Tag.html":{},"classes/UpdateTagsDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["maxlength(36",{"_index":599,"title":{},"body":{"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"interfaces/ITag.html":{},"interfaces/IUser.html":{},"classes/Tag.html":{},"classes/UpdateTagsDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["maxlimit",{"_index":525,"title":{},"body":{"interfaces/BaseRoute.html":{},"interfaces/CrudOptions.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{}}}],["mb",{"_index":1325,"title":{},"body":{"controllers/HealthController.html":{}}}],["memory",{"_index":1312,"title":{},"body":{"controllers/HealthController.html":{}}}],["merge",{"_index":920,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["mergeoptions",{"_index":919,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["message",{"_index":13,"title":{},"body":{"interfaces/APIResponse.html":{},"classes/ApiException.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/IPaginationResult.html":{},"classes/PaginationParams.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"classes/QueryFailedFilter.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"guards/ResponseGuard.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{},"classes/ValidationFailedFilter.html":{}}}],["messageevent",{"_index":1300,"title":{},"body":{"controllers/HealthController.html":{}}}],["meta",{"_index":826,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"guards/ResponseGuard.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["metadata",{"_index":822,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"interfaces/IPaginationResult.html":{},"classes/PaginationParams.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"dependencies.html":{}}}],["metadatakey",{"_index":810,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["metadatatoadd",{"_index":977,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["metadatavalue",{"_index":811,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["method",{"_index":490,"title":{},"body":{"interfaces/BaseRoute.html":{},"injectables/CronService.html":{},"classes/CrudConfigService.html":{},"interfaces/CrudOptions.html":{},"classes/CrudRoutesFactory.html":{},"injectables/ExcludeNullUndefinedInterceptor.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"classes/QueryFailedFilter.html":{},"classes/R.html":{},"guards/RequestGuard.html":{},"interfaces/Response.html":{},"guards/ResponseGuard.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/ValidationFailedFilter.html":{}}}],["methods",{"_index":199,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BaseModel.html":{},"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"injectables/CronService.html":{},"classes/CrudConfigService.html":{},"classes/CrudController.html":{},"classes/CrudRoutesFactory.html":{},"classes/CrudService.html":{},"classes/CustomQueryBuilder.html":{},"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/ExcludeNullUndefinedInterceptor.html":{},"controllers/HealthController.html":{},"interfaces/ICrudService.html":{},"interfaces/ITag.html":{},"interfaces/IUser.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/PersistedCronService.html":{},"classes/QueryFailedFilter.html":{},"classes/R.html":{},"guards/RequestGuard.html":{},"interfaces/Response.html":{},"guards/ResponseGuard.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"classes/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateTagsDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/ValidationFailedFilter.html":{}}}],["metrics",{"_index":1294,"title":{},"body":{"controllers/HealthController.html":{}}}],["metrics.os",{"_index":1332,"title":{},"body":{"controllers/HealthController.html":{}}}],["milliseconds",{"_index":709,"title":{},"body":{"injectables/CronService.html":{},"injectables/TimeoutInterceptor.html":{}}}],["min",{"_index":1352,"title":{},"body":{"interfaces/IPaginationResult.html":{},"classes/PaginationParams.html":{}}}],["min(0",{"_index":1358,"title":{},"body":{"interfaces/IPaginationResult.html":{},"classes/PaginationParams.html":{}}}],["minimum",{"_index":1357,"title":{},"body":{"interfaces/IPaginationResult.html":{},"classes/PaginationParams.html":{}}}],["minlength",{"_index":570,"title":{},"body":{"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"interfaces/ITag.html":{},"interfaces/IUser.html":{},"classes/Tag.html":{},"classes/UpdateTagsDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["minlength(2",{"_index":598,"title":{},"body":{"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"interfaces/ITag.html":{},"interfaces/IUser.html":{},"classes/Tag.html":{},"classes/UpdateTagsDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["minlength(8",{"_index":662,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/IUser.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["minute",{"_index":768,"title":{},"body":{"injectables/CronService.html":{}}}],["miscellaneous",{"_index":1819,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":1868,"title":{},"body":{"index.html":{}}}],["mixed",{"_index":645,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/IUser.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["mixin",{"_index":456,"title":{},"body":{"classes/BaseModel.html":{},"interfaces/IBaseModel.html":{}}}],["mixin(model",{"_index":465,"title":{},"body":{"classes/BaseModel.html":{},"interfaces/IBaseModel.html":{}}}],["mockedconfigservice",{"_index":1684,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["mockedjwtservice",{"_index":1685,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["mode",{"_index":1860,"title":{},"body":{"index.html":{}}}],["model",{"_index":457,"title":{},"body":{"classes/BaseModel.html":{},"interfaces/BaseRoute.html":{},"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"interfaces/CrudOptions.html":{},"classes/CrudService.html":{},"classes/CustomQueryBuilder.html":{},"modules/DatabaseModule.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/IBaseModel.html":{},"interfaces/ITag.html":{},"interfaces/IUser.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"classes/Tag.html":{},"injectables/TagsService.html":{},"classes/UpdateTagsDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["model.knex(knex",{"_index":1184,"title":{},"body":{"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["model.name",{"_index":1174,"title":{},"body":{"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["modelclass",{"_index":1087,"title":{},"body":{"classes/CrudService.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["modelname",{"_index":899,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["modelobject",{"_index":572,"title":{},"body":{"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"interfaces/ITag.html":{},"interfaces/IUser.html":{},"classes/Tag.html":{},"classes/UpdateTagsDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"miscellaneous/typealiases.html":{}}}],["modeloptions",{"_index":445,"title":{},"body":{"classes/BaseModel.html":{},"classes/CreateUserDto.html":{},"interfaces/IBaseModel.html":{},"interfaces/IUser.html":{},"classes/Tag.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["modelproviders",{"_index":1172,"title":{},"body":{"modules/DatabaseModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["models",{"_index":828,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"modules/DatabaseModule.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["models.map((model",{"_index":1173,"title":{},"body":{"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["modeltype",{"_index":901,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["modifier",{"_index":627,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/IUser.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["modifiers",{"_index":618,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/IUser.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["module",{"_index":209,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CronModule.html":{},"modules/DatabaseModule.html":{},"modules/EmailModule.html":{},"modules/EmailSchedulingModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CronModule.html":{},"modules/DatabaseModule.html":{},"modules/EmailModule.html":{},"modules/EmailSchedulingModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["modules",{"_index":211,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CronModule.html":{},"modules/DatabaseModule.html":{},"modules/EmailModule.html":{},"modules/EmailSchedulingModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["moment",{"_index":1694,"title":{},"body":{"coverage.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["more",{"_index":1605,"title":{},"body":{"injectables/TimeoutInterceptor.html":{},"index.html":{}}}],["myśliwiec",{"_index":1886,"title":{},"body":{"index.html":{}}}],["n",{"_index":723,"title":{},"body":{"injectables/CronService.html":{}}}],["name",{"_index":116,"title":{},"body":{"interfaces/APIResponse.html":{},"classes/ApiException.html":{},"interfaces/AppLaunchAction.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BaseModel.html":{},"interfaces/BaseRoute.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"injectables/CronService.html":{},"classes/CrudConfigService.html":{},"classes/CrudController.html":{},"interfaces/CrudOptions.html":{},"classes/CrudRoutesFactory.html":{},"classes/CrudService.html":{},"classes/CustomQueryBuilder.html":{},"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/ExcludeNullUndefinedInterceptor.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"controllers/HealthController.html":{},"interfaces/ICrudService.html":{},"interfaces/ITag.html":{},"interfaces/IUser.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"injectables/PersistedCronService.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"classes/QueryFailedFilter.html":{},"classes/R.html":{},"guards/RequestGuard.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"guards/ResponseGuard.html":{},"interfaces/Result.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"classes/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateTagsDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/ValidationFailedFilter.html":{},"miscellaneous/functions.html":{}}}],["name.trim().split(/\\s",{"_index":648,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/IUser.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["named",{"_index":711,"title":{},"body":{"injectables/CronService.html":{}}}],["namepart",{"_index":647,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/IUser.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["namepart.tolowercase",{"_index":651,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/IUser.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["nativeerror",{"_index":1469,"title":{},"body":{"classes/QueryFailedFilter.html":{}}}],["nest",{"_index":314,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["nestframework",{"_index":1890,"title":{},"body":{"index.html":{}}}],["nestinterceptor",{"_index":1271,"title":{},"body":{"injectables/ExcludeNullUndefinedInterceptor.html":{},"interfaces/Response.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["nestjs",{"_index":1427,"title":{},"body":{"injectables/PersistedCronService.html":{}}}],["nestjs/bull",{"_index":1758,"title":{},"body":{"dependencies.html":{}}}],["nestjs/common",{"_index":26,"title":{},"body":{"interfaces/APIResponse.html":{},"classes/ApiException.html":{},"controllers/AppController.html":{},"interfaces/AppLaunchAction.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/BaseRoute.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"modules/CronModule.html":{},"injectables/CronService.html":{},"classes/CrudConfigService.html":{},"classes/CrudController.html":{},"interfaces/CrudOptions.html":{},"classes/CrudRoutesFactory.html":{},"classes/CrudService.html":{},"modules/DatabaseModule.html":{},"modules/EmailModule.html":{},"controllers/EmailSchedulingController.html":{},"modules/EmailSchedulingModule.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/ExcludeNullUndefinedInterceptor.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"controllers/HealthController.html":{},"interfaces/IPaginationResult.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginCredsDto.html":{},"classes/PaginationParams.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"injectables/PersistedCronService.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"classes/QueryFailedFilter.html":{},"classes/R.html":{},"guards/RequestGuard.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Response.html":{},"guards/ResponseGuard.html":{},"interfaces/Result.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/ValidationFailedFilter.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":241,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"controllers/HealthController.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":1762,"title":{},"body":{"dependencies.html":{}}}],["nestjs/graphql",{"_index":243,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":376,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":1765,"title":{},"body":{"dependencies.html":{}}}],["nestjs/passport",{"_index":344,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginCredsDto.html":{},"controllers/TagsController.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":1768,"title":{},"body":{"dependencies.html":{}}}],["nestjs/schedule",{"_index":245,"title":{},"body":{"modules/AppModule.html":{},"injectables/CronService.html":{},"injectables/EmailSchedulingService.html":{},"injectables/PersistedCronService.html":{},"dependencies.html":{}}}],["nestjs/serve",{"_index":1772,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":172,"title":{},"body":{"classes/ApiException.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"classes/CrudController.html":{},"controllers/EmailSchedulingController.html":{},"controllers/HealthController.html":{},"interfaces/IPaginationResult.html":{},"interfaces/ITag.html":{},"interfaces/IUser.html":{},"classes/LoginCredsDto.html":{},"classes/PaginationParams.html":{},"classes/Tag.html":{},"controllers/TagsController.html":{},"classes/UpdateTagsDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["nestjs/swagger/dist/types/swagger",{"_index":497,"title":{},"body":{"interfaces/BaseRoute.html":{},"interfaces/CrudOptions.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{}}}],["nestjs/terminus",{"_index":247,"title":{},"body":{"modules/AppModule.html":{},"controllers/HealthController.html":{},"dependencies.html":{}}}],["new",{"_index":179,"title":{},"body":{"classes/ApiException.html":{},"injectables/AuthService.html":{},"classes/BaseModel.html":{},"injectables/CronService.html":{},"classes/CrudConfigService.html":{},"classes/CrudController.html":{},"classes/CrudRoutesFactory.html":{},"injectables/EmailSchedulingService.html":{},"interfaces/IBaseModel.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/PersistedCronService.html":{},"classes/QueryFailedFilter.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"classes/ValidationFailedFilter.html":{},"coverage.html":{}}}],["next",{"_index":322,"title":{},"body":{"modules/AppModule.html":{},"classes/BaseModel.html":{},"interfaces/BaseRoute.html":{},"injectables/CronService.html":{},"classes/CrudConfigService.html":{},"interfaces/CrudOptions.html":{},"classes/CrudRoutesFactory.html":{},"classes/CustomQueryBuilder.html":{},"injectables/ExcludeNullUndefinedInterceptor.html":{},"interfaces/GetManyDefaultResponse.html":{},"controllers/HealthController.html":{},"interfaces/IBaseModel.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"classes/R.html":{},"guards/RequestGuard.html":{},"interfaces/Response.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["next.handle().pipe",{"_index":1286,"title":{},"body":{"injectables/ExcludeNullUndefinedInterceptor.html":{},"injectables/TimeoutInterceptor.html":{}}}],["next.handle().pipe(map((data",{"_index":1511,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["nocontent",{"_index":1528,"title":{},"body":{"guards/ResponseGuard.html":{}}}],["node.js",{"_index":1845,"title":{},"body":{"index.html":{}}}],["node_env",{"_index":273,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["notfounderror",{"_index":1454,"title":{},"body":{"classes/QueryFailedFilter.html":{}}}],["notfoundexception",{"_index":164,"title":{},"body":{"classes/ApiException.html":{},"classes/CrudController.html":{},"classes/CrudService.html":{},"injectables/UsersService.html":{}}}],["nothing",{"_index":579,"title":{},"body":{"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"interfaces/ITag.html":{},"interfaces/IUser.html":{},"classes/Tag.html":{},"classes/UpdateTagsDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["notnullviolationerror",{"_index":1452,"title":{},"body":{"classes/QueryFailedFilter.html":{}}}],["npm",{"_index":1855,"title":{},"body":{"index.html":{}}}],["null",{"_index":36,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"classes/BaseModel.html":{},"interfaces/BaseRoute.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/CrudOptions.html":{},"classes/CustomQueryBuilder.html":{},"injectables/ExcludeNullUndefinedInterceptor.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/IBaseModel.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"guards/ResponseGuard.html":{},"interfaces/Result.html":{},"classes/Tag.html":{},"classes/User.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["number",{"_index":18,"title":{},"body":{"interfaces/APIResponse.html":{},"classes/ApiException.html":{},"interfaces/AppLaunchAction.html":{},"classes/BaseModel.html":{},"interfaces/BaseRoute.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"injectables/CronService.html":{},"classes/CrudConfigService.html":{},"classes/CrudController.html":{},"interfaces/CrudOptions.html":{},"classes/CrudRoutesFactory.html":{},"classes/CrudService.html":{},"classes/CustomQueryBuilder.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"controllers/HealthController.html":{},"interfaces/IBaseModel.html":{},"interfaces/ICrudService.html":{},"interfaces/IPaginationResult.html":{},"classes/PaginationParams.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"classes/R.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"classes/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"classes/User.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["number.isfinite(val",{"_index":1949,"title":{},"body":{"miscellaneous/variables.html":{}}}],["number.isnan(val",{"_index":1948,"title":{},"body":{"miscellaneous/variables.html":{}}}],["numberoffollowers",{"_index":62,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["numberoffollowing",{"_index":63,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["numberofposts",{"_index":64,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["numberofrescuescompleted",{"_index":65,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["numberofrescuescreated",{"_index":66,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["numberofrescuesinprogress",{"_index":67,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["numberquerybuildertype",{"_index":1121,"title":{},"body":{"classes/CustomQueryBuilder.html":{}}}],["o",{"_index":1945,"title":{},"body":{"miscellaneous/variables.html":{}}}],["object",{"_index":530,"title":{},"body":{"interfaces/BaseRoute.html":{},"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"classes/CrudConfigService.html":{},"interfaces/CrudOptions.html":{},"classes/CrudRoutesFactory.html":{},"classes/CrudService.html":{},"classes/CustomQueryBuilder.html":{},"injectables/ExcludeNullUndefinedInterceptor.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ITag.html":{},"interfaces/IUser.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"classes/R.html":{},"interfaces/Response.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"classes/Tag.html":{},"injectables/TagsService.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateTagsDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["object.defineproperty(getmanyresponsedto",{"_index":867,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["object.defineproperty(getoneresponsedto",{"_index":872,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["object.entries(value).map(([k",{"_index":1282,"title":{},"body":{"injectables/ExcludeNullUndefinedInterceptor.html":{}}}],["object.fromentries",{"_index":1280,"title":{},"body":{"injectables/ExcludeNullUndefinedInterceptor.html":{}}}],["object.getownpropertynames(val",{"_index":1921,"title":{},"body":{"miscellaneous/variables.html":{}}}],["object.keys(val",{"_index":1922,"title":{},"body":{"miscellaneous/variables.html":{}}}],["objection",{"_index":454,"title":{},"body":{"classes/BaseModel.html":{},"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"classes/CrudService.html":{},"classes/CustomQueryBuilder.html":{},"modules/DatabaseModule.html":{},"interfaces/IBaseModel.html":{},"interfaces/ITag.html":{},"interfaces/IUser.html":{},"classes/QueryFailedFilter.html":{},"classes/Tag.html":{},"injectables/TagsService.html":{},"classes/UpdateTagsDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"injectables/UsersService.html":{},"classes/ValidationFailedFilter.html":{},"dependencies.html":{}}}],["objection.fetchgraphoptions",{"_index":451,"title":{},"body":{"classes/BaseModel.html":{},"interfaces/IBaseModel.html":{},"classes/Tag.html":{},"classes/User.html":{}}}],["objectliteral",{"_index":1904,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["objkeys",{"_index":806,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["objkeys(swaggermodels",{"_index":829,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["observable",{"_index":1268,"title":{},"body":{"injectables/ExcludeNullUndefinedInterceptor.html":{},"controllers/HealthController.html":{},"guards/RequestGuard.html":{},"interfaces/Response.html":{},"guards/ResponseGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["observer",{"_index":1509,"title":{},"body":{"interfaces/Response.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["occurrence",{"_index":1253,"title":{},"body":{"injectables/ExcludeNullUndefinedInterceptor.html":{}}}],["offset",{"_index":1159,"title":{},"body":{"classes/CustomQueryBuilder.html":{}}}],["ok",{"_index":755,"title":{},"body":{"injectables/CronService.html":{}}}],["onapplicationbootstrap",{"_index":1423,"title":{},"body":{"injectables/PersistedCronService.html":{}}}],["onapplicationshutdown",{"_index":232,"title":{},"body":{"modules/AppModule.html":{},"controllers/HealthController.html":{}}}],["onapplicationshutdown(signal",{"_index":233,"title":{},"body":{"modules/AppModule.html":{},"controllers/HealthController.html":{}}}],["once",{"_index":681,"title":{},"body":{"injectables/CronService.html":{}}}],["one",{"_index":833,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudController.html":{},"classes/CrudRoutesFactory.html":{},"classes/CrudService.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["one.name",{"_index":834,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["oneof",{"_index":854,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["onlycount",{"_index":1126,"title":{},"body":{"classes/CustomQueryBuilder.html":{}}}],["onmoduledestroy",{"_index":303,"title":{},"body":{"modules/AppModule.html":{}}}],["onmoduleinit",{"_index":238,"title":{},"body":{"modules/AppModule.html":{},"controllers/HealthController.html":{}}}],["onw",{"_index":1098,"title":{},"body":{"classes/CrudService.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["open",{"_index":1870,"title":{},"body":{"index.html":{}}}],["operation",{"_index":1387,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["opt",{"_index":448,"title":{},"body":{"classes/BaseModel.html":{},"classes/Tag.html":{},"classes/User.html":{}}}],["optional",{"_index":9,"title":{},"body":{"interfaces/APIResponse.html":{},"classes/ApiException.html":{},"interfaces/AppLaunchAction.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BaseModel.html":{},"classes/CreateUserDto.html":{},"injectables/CronService.html":{},"classes/CrudConfigService.html":{},"classes/CrudController.html":{},"interfaces/CrudOptions.html":{},"classes/CrudRoutesFactory.html":{},"classes/CrudService.html":{},"classes/CustomQueryBuilder.html":{},"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/ExcludeNullUndefinedInterceptor.html":{},"controllers/HealthController.html":{},"interfaces/IBaseModel.html":{},"interfaces/ICrudService.html":{},"interfaces/IPaginationResult.html":{},"interfaces/IUser.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/PaginationParams.html":{},"interfaces/ParamOption.html":{},"injectables/PersistedCronService.html":{},"classes/QueryFailedFilter.html":{},"classes/R.html":{},"guards/RequestGuard.html":{},"guards/ResponseGuard.html":{},"interfaces/Result.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"classes/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/ValidationFailedFilter.html":{},"miscellaneous/functions.html":{}}}],["options",{"_index":450,"title":{},"body":{"classes/BaseModel.html":{},"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"injectables/EmailService.html":{},"interfaces/IBaseModel.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"classes/Tag.html":{},"classes/User.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["order",{"_index":999,"title":{},"body":{"classes/CrudController.html":{},"classes/CrudService.html":{},"interfaces/IPaginationResult.html":{},"classes/PaginationParams.html":{}}}],["ordertype",{"_index":1353,"title":{},"body":{"interfaces/IPaginationResult.html":{},"classes/PaginationParams.html":{},"miscellaneous/enumerations.html":{}}}],["os",{"_index":1304,"title":{},"body":{"controllers/HealthController.html":{}}}],["os.loadavg",{"_index":1331,"title":{},"body":{"controllers/HealthController.html":{}}}],["out",{"_index":227,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CronModule.html":{},"modules/EmailModule.html":{},"modules/EmailSchedulingModule.html":{},"injectables/PersistedCronService.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["override",{"_index":491,"title":{},"body":{"interfaces/BaseRoute.html":{},"classes/CrudConfigService.html":{},"interfaces/CrudOptions.html":{},"classes/CrudRoutesFactory.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["override.ts",{"_index":1250,"title":{},"body":{"injectables/ExcludeNullUndefinedInterceptor.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["override.ts:51",{"_index":1258,"title":{},"body":{"injectables/ExcludeNullUndefinedInterceptor.html":{}}}],["overview",{"_index":1897,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["ownpage",{"_index":89,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["p",{"_index":1362,"title":{},"body":{"interfaces/IPaginationResult.html":{},"classes/PaginationParams.html":{}}}],["pack",{"_index":545,"title":{},"body":{"interfaces/BaseRoute.html":{},"interfaces/CrudOptions.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{}}}],["package",{"_index":1756,"title":{"dependencies.html":{}},"body":{}}],["page",{"_index":14,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/BaseRoute.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"classes/CrudConfigService.html":{},"interfaces/CrudOptions.html":{},"classes/CrudRoutesFactory.html":{},"classes/CrudService.html":{},"classes/CustomQueryBuilder.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/IPaginationResult.html":{},"classes/PaginationParams.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"classes/R.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["pagecount",{"_index":15,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/BaseRoute.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"classes/CrudConfigService.html":{},"interfaces/CrudOptions.html":{},"classes/CrudRoutesFactory.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"classes/R.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["pagequerybuildertype",{"_index":1122,"title":{},"body":{"classes/CustomQueryBuilder.html":{}}}],["pagesize",{"_index":1108,"title":{},"body":{"classes/CrudService.html":{},"interfaces/IPaginationResult.html":{},"classes/PaginationParams.html":{}}}],["paginate",{"_index":1127,"title":{},"body":{"classes/CustomQueryBuilder.html":{}}}],["paginate(page",{"_index":1138,"title":{},"body":{"classes/CustomQueryBuilder.html":{}}}],["paginated",{"_index":851,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/CrudService.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["paginatedfindall",{"_index":1085,"title":{},"body":{"classes/CrudService.html":{},"interfaces/ICrudService.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["paginatedfindall(paginationparams",{"_index":1100,"title":{},"body":{"classes/CrudService.html":{},"interfaces/ICrudService.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["pagination",{"_index":472,"title":{},"body":{"classes/BaseModel.html":{},"classes/CrudController.html":{},"classes/CrudService.html":{},"classes/CustomQueryBuilder.html":{},"interfaces/IBaseModel.html":{},"interfaces/ICrudService.html":{},"interfaces/IPaginationResult.html":{},"classes/PaginationParams.html":{}}}],["paginationparams",{"_index":1009,"title":{"classes/PaginationParams.html":{}},"body":{"classes/CrudController.html":{},"classes/CrudService.html":{},"interfaces/ICrudService.html":{},"interfaces/IPaginationResult.html":{},"classes/PaginationParams.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["paging",{"_index":1039,"title":{},"body":{"classes/CrudController.html":{},"classes/CrudService.html":{},"interfaces/IPaginationResult.html":{},"classes/PaginationParams.html":{}}}],["param",{"_index":761,"title":{},"body":{"injectables/CronService.html":{},"classes/CrudController.html":{},"classes/CrudService.html":{},"classes/CustomQueryBuilder.html":{},"injectables/ExcludeNullUndefinedInterceptor.html":{},"controllers/HealthController.html":{},"classes/QueryFailedFilter.html":{},"guards/RequestGuard.html":{},"interfaces/Response.html":{},"guards/ResponseGuard.html":{},"controllers/TagsController.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/ValidationFailedFilter.html":{}}}],["param('id",{"_index":1577,"title":{},"body":{"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["parameter",{"_index":310,"title":{},"body":{"modules/AppModule.html":{}}}],["parameters",{"_index":149,"title":{},"body":{"classes/ApiException.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BaseModel.html":{},"injectables/CronService.html":{},"classes/CrudConfigService.html":{},"classes/CrudController.html":{},"classes/CrudRoutesFactory.html":{},"classes/CrudService.html":{},"classes/CustomQueryBuilder.html":{},"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/ExcludeNullUndefinedInterceptor.html":{},"controllers/HealthController.html":{},"interfaces/ICrudService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/PersistedCronService.html":{},"classes/QueryFailedFilter.html":{},"classes/R.html":{},"guards/RequestGuard.html":{},"guards/ResponseGuard.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"classes/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/ValidationFailedFilter.html":{},"miscellaneous/functions.html":{}}}],["paramoption",{"_index":509,"title":{"interfaces/ParamOption.html":{}},"body":{"interfaces/BaseRoute.html":{},"interfaces/CrudOptions.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"coverage.html":{}}}],["params",{"_index":523,"title":{},"body":{"interfaces/BaseRoute.html":{},"classes/CrudConfigService.html":{},"interfaces/CrudOptions.html":{},"classes/CrudRoutesFactory.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/IPaginationResult.html":{},"classes/PaginationParams.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["paramsoptions",{"_index":515,"title":{"interfaces/ParamsOptions.html":{}},"body":{"interfaces/BaseRoute.html":{},"interfaces/CrudOptions.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"coverage.html":{}}}],["parentheses",{"_index":642,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/IUser.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["parseint(val",{"_index":1360,"title":{},"body":{"interfaces/IPaginationResult.html":{},"classes/PaginationParams.html":{}}}],["parseintpipe",{"_index":1028,"title":{},"body":{"classes/CrudController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["partial",{"_index":797,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudController.html":{},"classes/CrudRoutesFactory.html":{},"classes/CrudService.html":{},"interfaces/ICrudService.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["partially",{"_index":635,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/IUser.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["partialmodelobject",{"_index":573,"title":{},"body":{"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"interfaces/ITag.html":{},"interfaces/IUser.html":{},"classes/Tag.html":{},"classes/UpdateTagsDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"miscellaneous/typealiases.html":{}}}],["partialtagshape",{"_index":597,"title":{},"body":{"classes/CreateTagsDto.html":{},"interfaces/ITag.html":{},"classes/Tag.html":{},"classes/UpdateTagsDto.html":{},"miscellaneous/typealiases.html":{}}}],["partialtype",{"_index":567,"title":{},"body":{"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"interfaces/ITag.html":{},"interfaces/IUser.html":{},"classes/Tag.html":{},"classes/UpdateTagsDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["partialtype(createtagsdto",{"_index":601,"title":{},"body":{"classes/CreateTagsDto.html":{},"interfaces/ITag.html":{},"classes/Tag.html":{},"classes/UpdateTagsDto.html":{}}}],["partialtype(createuserdto",{"_index":664,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/IUser.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["partialusershape",{"_index":661,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/IUser.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"miscellaneous/typealiases.html":{}}}],["passport",{"_index":1374,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":377,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":1371,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passportstrategy(strategy",{"_index":1377,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["password",{"_index":358,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BaseModel.html":{},"classes/CreateUserDto.html":{},"interfaces/IBaseModel.html":{},"interfaces/IUser.html":{},"injectables/LocalStrategy.html":{},"classes/LoginCredsDto.html":{},"classes/Tag.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"injectables/UsersService.html":{}}}],["passwordfield",{"_index":1389,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["past",{"_index":759,"title":{},"body":{"injectables/CronService.html":{}}}],["path",{"_index":140,"title":{},"body":{"classes/ApiException.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"interfaces/BaseRoute.html":{},"classes/CrudConfigService.html":{},"interfaces/CrudOptions.html":{},"classes/CrudRoutesFactory.html":{},"controllers/EmailSchedulingController.html":{},"interfaces/GetManyDefaultResponse.html":{},"controllers/HealthController.html":{},"classes/LoginCredsDto.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"classes/QueryFailedFilter.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{},"classes/ValidationFailedFilter.html":{},"miscellaneous/functions.html":{}}}],["payload",{"_index":1370,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.email",{"_index":1383,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["perform",{"_index":1386,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["perpage",{"_index":1139,"title":{},"body":{"classes/CustomQueryBuilder.html":{}}}],["persisted",{"_index":672,"title":{},"body":{"modules/CronModule.html":{}}}],["persistedcronservice",{"_index":668,"title":{"injectables/PersistedCronService.html":{}},"body":{"modules/CronModule.html":{},"injectables/PersistedCronService.html":{},"coverage.html":{},"overview.html":{}}}],["pidusage",{"_index":1305,"title":{},"body":{"controllers/HealthController.html":{},"dependencies.html":{}}}],["pieces",{"_index":632,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/IUser.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["pipeline",{"_index":1491,"title":{},"body":{"guards/RequestGuard.html":{},"guards/ResponseGuard.html":{}}}],["places",{"_index":626,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/IUser.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["playground",{"_index":291,"title":{},"body":{"modules/AppModule.html":{}}}],["please",{"_index":1879,"title":{},"body":{"index.html":{}}}],["port",{"_index":271,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["post",{"_index":341,"title":{},"body":{"controllers/AuthController.html":{},"classes/CrudController.html":{},"controllers/EmailSchedulingController.html":{},"classes/LoginCredsDto.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["post(':id",{"_index":1049,"title":{},"body":{"classes/CrudController.html":{}}}],["post('login",{"_index":364,"title":{},"body":{"controllers/AuthController.html":{},"classes/LoginCredsDto.html":{}}}],["post('schedule",{"_index":1206,"title":{},"body":{"controllers/EmailSchedulingController.html":{}}}],["postby",{"_index":90,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["postedby",{"_index":108,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["postedbyuser",{"_index":84,"title":{"interfaces/PostedByUser.html":{}},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{},"coverage.html":{}}}],["postedminago",{"_index":109,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["postid",{"_index":86,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["postimage",{"_index":91,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["posttime",{"_index":92,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["posttype",{"_index":82,"title":{"interfaces/PostType.html":{}},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{},"coverage.html":{}}}],["posttypeid",{"_index":83,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["postvideo",{"_index":93,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["primary",{"_index":513,"title":{},"body":{"interfaces/BaseRoute.html":{},"interfaces/CrudOptions.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{}}}],["private",{"_index":903,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"injectables/EmailService.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["proceed",{"_index":1495,"title":{},"body":{"guards/RequestGuard.html":{},"guards/ResponseGuard.html":{}}}],["process.pid",{"_index":1321,"title":{},"body":{"controllers/HealthController.html":{}}}],["production",{"_index":277,"title":{},"body":{"modules/AppModule.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["profileid",{"_index":117,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["profileimage",{"_index":68,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["profileimageurl",{"_index":118,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["progressive",{"_index":1844,"title":{},"body":{"index.html":{}}}],["project",{"_index":1871,"title":{},"body":{"index.html":{}}}],["promise",{"_index":313,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/CrudController.html":{},"classes/CrudService.html":{},"classes/CustomQueryBuilder.html":{},"interfaces/ICrudService.html":{},"classes/LoginCredsDto.html":{},"guards/RequestGuard.html":{},"guards/ResponseGuard.html":{},"miscellaneous/functions.html":{}}}],["promise.reject",{"_index":413,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/TagsService.html":{}}}],["promise.reject(e",{"_index":1117,"title":{},"body":{"classes/CrudService.html":{}}}],["promise.reject(new",{"_index":419,"title":{},"body":{"injectables/AuthService.html":{},"classes/CrudService.html":{},"injectables/JwtStrategy.html":{},"injectables/UsersService.html":{}}}],["promise.resolve",{"_index":1440,"title":{},"body":{"injectables/PersistedCronService.html":{},"miscellaneous/variables.html":{}}}],["proper",{"_index":1000,"title":{},"body":{"classes/CrudController.html":{},"classes/CrudService.html":{}}}],["properties",{"_index":8,"title":{},"body":{"interfaces/APIResponse.html":{},"classes/ApiException.html":{},"interfaces/AppLaunchAction.html":{},"classes/BaseModel.html":{},"interfaces/BaseRoute.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"injectables/CronService.html":{},"classes/CrudConfigService.html":{},"interfaces/CrudOptions.html":{},"classes/CrudRoutesFactory.html":{},"classes/CustomQueryBuilder.html":{},"classes/EmailScheduleDto.html":{},"injectables/EmailSchedulingService.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/IBaseModel.html":{},"interfaces/IPaginationResult.html":{},"interfaces/ITag.html":{},"interfaces/IUser.html":{},"injectables/LocalStrategy.html":{},"classes/LoginCredsDto.html":{},"classes/PaginationParams.html":{},"interfaces/ParamOption.html":{},"injectables/PersistedCronService.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Response.html":{},"interfaces/Result.html":{},"classes/Tag.html":{},"interfaces/TokenPayload.html":{},"classes/UpdateTagsDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["propertydecorator",{"_index":554,"title":{},"body":{"interfaces/BaseRoute.html":{},"interfaces/CrudOptions.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"miscellaneous/functions.html":{}}}],["propertykey",{"_index":556,"title":{},"body":{"interfaces/BaseRoute.html":{},"classes/CrudConfigService.html":{},"interfaces/CrudOptions.html":{},"classes/CrudRoutesFactory.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["protected",{"_index":885,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudController.html":{},"classes/CrudRoutesFactory.html":{},"classes/CrudService.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["provide",{"_index":984,"title":{},"body":{"classes/CrudController.html":{},"classes/CrudService.html":{},"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["provided",{"_index":1014,"title":{},"body":{"classes/CrudController.html":{},"controllers/UsersController.html":{}}}],["providers",{"_index":216,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CronModule.html":{},"modules/DatabaseModule.html":{},"modules/EmailModule.html":{},"modules/EmailSchedulingModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["provides",{"_index":1267,"title":{},"body":{"injectables/ExcludeNullUndefinedInterceptor.html":{},"guards/RequestGuard.html":{},"interfaces/Response.html":{},"guards/ResponseGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["providing",{"_index":1261,"title":{},"body":{"injectables/ExcludeNullUndefinedInterceptor.html":{},"interfaces/Response.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["provision",{"_index":279,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["put",{"_index":1029,"title":{},"body":{"classes/CrudController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["put(':id",{"_index":1053,"title":{},"body":{"classes/CrudController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["q.orwhereraw('lower",{"_index":650,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/IUser.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["query",{"_index":468,"title":{},"body":{"classes/BaseModel.html":{},"interfaces/BaseRoute.html":{},"classes/CreateUserDto.html":{},"classes/CrudConfigService.html":{},"classes/CrudController.html":{},"interfaces/CrudOptions.html":{},"classes/CrudRoutesFactory.html":{},"classes/CustomQueryBuilder.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/IBaseModel.html":{},"interfaces/IUser.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"classes/QueryFailedFilter.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{}}}],["query.offset(offset).limit(size",{"_index":1162,"title":{},"body":{"classes/CustomQueryBuilder.html":{}}}],["query.where((q",{"_index":646,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/IUser.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["query?.alwayspaginate",{"_index":850,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["querybuilder",{"_index":430,"title":{},"body":{"classes/BaseModel.html":{},"classes/CustomQueryBuilder.html":{},"interfaces/IBaseModel.html":{},"classes/Tag.html":{},"classes/User.html":{}}}],["querybuildertype",{"_index":469,"title":{},"body":{"classes/BaseModel.html":{},"interfaces/IBaseModel.html":{}}}],["querycontext",{"_index":446,"title":{},"body":{"classes/BaseModel.html":{},"classes/CreateUserDto.html":{},"interfaces/IBaseModel.html":{},"interfaces/IUser.html":{},"classes/Tag.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["queryfailedfilter",{"_index":1441,"title":{"classes/QueryFailedFilter.html":{}},"body":{"classes/QueryFailedFilter.html":{},"coverage.html":{}}}],["r",{"_index":808,"title":{"classes/R.html":{}},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"coverage.html":{}}}],["r.get(swaggerconst.api_extra_models",{"_index":842,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["r.get(swaggerconst.decorators.api_response",{"_index":844,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["r.set",{"_index":836,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["r.set('crud_options_metadata",{"_index":948,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["r.set('method",{"_index":818,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["r.set('path",{"_index":816,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["r.set(swaggerconst.decorators.api_response",{"_index":840,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["r.setroute(route",{"_index":970,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["range",{"_index":1800,"title":{},"body":{"dependencies.html":{}}}],["rate",{"_index":1790,"title":{},"body":{"dependencies.html":{}}}],["raw",{"_index":455,"title":{},"body":{"classes/BaseModel.html":{},"classes/CrudService.html":{},"interfaces/IBaseModel.html":{}}}],["raw('current_timestamp",{"_index":486,"title":{},"body":{"classes/BaseModel.html":{},"classes/CrudService.html":{},"interfaces/IBaseModel.html":{}}}],["reactionscount",{"_index":94,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["read",{"_index":1880,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":355,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/CrudController.html":{},"classes/CrudService.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"controllers/HealthController.html":{},"interfaces/IPaginationResult.html":{},"interfaces/IUser.html":{},"injectables/JwtStrategy.html":{},"classes/LoginCredsDto.html":{},"classes/PaginationParams.html":{},"injectables/TagsService.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"injectables/UsersService.html":{}}}],["reassign",{"_index":1149,"title":{},"body":{"classes/CustomQueryBuilder.html":{},"controllers/HealthController.html":{},"injectables/UsersService.html":{}}}],["receive",{"_index":995,"title":{},"body":{"classes/CrudController.html":{},"classes/CrudService.html":{}}}],["receives",{"_index":299,"title":{},"body":{"modules/AppModule.html":{}}}],["recipient",{"_index":1195,"title":{},"body":{"classes/EmailScheduleDto.html":{}}}],["record",{"_index":403,"title":{},"body":{"injectables/AuthService.html":{},"classes/BaseModel.html":{},"classes/CrudConfigService.html":{},"classes/CrudController.html":{},"classes/CrudRoutesFactory.html":{},"interfaces/IBaseModel.html":{},"classes/R.html":{},"guards/RequestGuard.html":{},"guards/ResponseGuard.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"classes/Tag.html":{},"classes/User.html":{},"controllers/UsersController.html":{}}}],["record'})@apiresponse({status",{"_index":1003,"title":{},"body":{"classes/CrudController.html":{}}}],["record'})@delete(':id",{"_index":1021,"title":{},"body":{"classes/CrudController.html":{}}}],["records",{"_index":1037,"title":{},"body":{"classes/CrudController.html":{},"classes/CustomQueryBuilder.html":{}}}],["records'})@apiresponse({status",{"_index":1010,"title":{},"body":{"classes/CrudController.html":{}}}],["records'})@get",{"_index":1011,"title":{},"body":{"classes/CrudController.html":{}}}],["recuescompletionneeded",{"_index":78,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["recurring",{"_index":678,"title":{},"body":{"injectables/CronService.html":{}}}],["recursively",{"_index":1275,"title":{},"body":{"injectables/ExcludeNullUndefinedInterceptor.html":{},"miscellaneous/functions.html":{}}}],["recursivelystripnullvalues",{"_index":1744,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["recursivelystripnullvalues(v",{"_index":1285,"title":{},"body":{"injectables/ExcludeNullUndefinedInterceptor.html":{}}}],["recursivelystripnullvalues(value",{"_index":1278,"title":{},"body":{"injectables/ExcludeNullUndefinedInterceptor.html":{},"miscellaneous/functions.html":{}}}],["ref",{"_index":855,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["reference",{"_index":1266,"title":{},"body":{"injectables/ExcludeNullUndefinedInterceptor.html":{},"interfaces/Response.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["reflect",{"_index":1810,"title":{},"body":{"dependencies.html":{}}}],["reflect.definemetadata(metadatakey",{"_index":812,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["reflect.getmetadata(metadatakey",{"_index":813,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["registered",{"_index":302,"title":{},"body":{"modules/AppModule.html":{}}}],["regular",{"_index":674,"title":{},"body":{"injectables/CronService.html":{}}}],["rejected",{"_index":318,"title":{},"body":{"modules/AppModule.html":{}}}],["relation",{"_index":474,"title":{},"body":{"classes/BaseModel.html":{},"interfaces/IBaseModel.html":{}}}],["relationexpression",{"_index":458,"title":{},"body":{"classes/BaseModel.html":{},"interfaces/IBaseModel.html":{}}}],["remove",{"_index":991,"title":{},"body":{"classes/CrudController.html":{},"classes/CrudService.html":{},"interfaces/ICrudService.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["remove(@param('id",{"_index":1047,"title":{},"body":{"classes/CrudController.html":{}}}],["remove(id",{"_index":1018,"title":{},"body":{"classes/CrudController.html":{},"classes/CrudService.html":{},"interfaces/ICrudService.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["replace",{"_index":534,"title":{},"body":{"interfaces/BaseRoute.html":{},"interfaces/CrudOptions.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{}}}],["replaceonebase",{"_index":505,"title":{},"body":{"interfaces/BaseRoute.html":{},"interfaces/CrudOptions.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"miscellaneous/typealiases.html":{}}}],["repository",{"_index":1853,"title":{},"body":{"index.html":{}}}],["representing",{"_index":1269,"title":{},"body":{"injectables/ExcludeNullUndefinedInterceptor.html":{},"interfaces/Response.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["req",{"_index":339,"title":{},"body":{"controllers/AuthController.html":{},"classes/LoginCredsDto.html":{}}}],["request",{"_index":190,"title":{},"body":{"classes/ApiException.html":{},"controllers/AuthController.html":{},"classes/LoginCredsDto.html":{},"classes/QueryFailedFilter.html":{},"guards/RequestGuard.html":{},"guards/ResponseGuard.html":{},"injectables/TimeoutInterceptor.html":{},"classes/ValidationFailedFilter.html":{}}}],["request.all",{"_index":1507,"title":{},"body":{"guards/RequestGuard.html":{}}}],["request.body",{"_index":1499,"title":{},"body":{"guards/RequestGuard.html":{}}}],["request.params",{"_index":1500,"title":{},"body":{"guards/RequestGuard.html":{}}}],["request.query",{"_index":1498,"title":{},"body":{"guards/RequestGuard.html":{}}}],["request.url",{"_index":1471,"title":{},"body":{"classes/QueryFailedFilter.html":{},"classes/ValidationFailedFilter.html":{}}}],["requestguard",{"_index":1479,"title":{"guards/RequestGuard.html":{}},"body":{"guards/RequestGuard.html":{},"coverage.html":{}}}],["requestmethod",{"_index":493,"title":{},"body":{"interfaces/BaseRoute.html":{},"classes/CrudConfigService.html":{},"interfaces/CrudOptions.html":{},"classes/CrudRoutesFactory.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["requestmethod.get",{"_index":918,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["requesttimeoutexception",{"_index":1607,"title":{},"body":{"injectables/TimeoutInterceptor.html":{}}}],["require",{"_index":544,"title":{},"body":{"interfaces/BaseRoute.html":{},"interfaces/CrudOptions.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{}}}],["require(path",{"_index":546,"title":{},"body":{"interfaces/BaseRoute.html":{},"interfaces/CrudOptions.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{}}}],["require,@typescript",{"_index":539,"title":{},"body":{"interfaces/BaseRoute.html":{},"interfaces/CrudOptions.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{}}}],["required",{"_index":275,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"interfaces/ITag.html":{},"interfaces/IUser.html":{},"classes/Tag.html":{},"classes/UpdateTagsDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"miscellaneous/variables.html":{}}}],["requires,import/no",{"_index":542,"title":{},"body":{"interfaces/BaseRoute.html":{},"interfaces/CrudOptions.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{}}}],["rescuedate",{"_index":110,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["rescuedpetname",{"_index":112,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["rescueid",{"_index":103,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["rescuelists",{"_index":122,"title":{"interfaces/RescueLists.html":{}},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{},"coverage.html":{}}}],["rescuelocality",{"_index":113,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["rescuer",{"_index":69,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["rescuers",{"_index":114,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["rescues",{"_index":102,"title":{"interfaces/Rescues.html":{}},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{},"coverage.html":{}}}],["rescuestatus",{"_index":120,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["reset",{"_index":226,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CronModule.html":{},"modules/EmailModule.html":{},"modules/EmailSchedulingModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["resolved",{"_index":317,"title":{},"body":{"modules/AppModule.html":{}}}],["resourcename",{"_index":864,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["resourcename}responsedto",{"_index":873,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["response",{"_index":40,"title":{"interfaces/Response.html":{}},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"injectables/ExcludeNullUndefinedInterceptor.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/IPaginationResult.html":{},"classes/PaginationParams.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"classes/QueryFailedFilter.html":{},"classes/R.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Response.html":{},"guards/ResponseGuard.html":{},"interfaces/Result.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{},"classes/ValidationFailedFilter.html":{},"coverage.html":{}}}],["response.error",{"_index":1532,"title":{},"body":{"guards/ResponseGuard.html":{}}}],["response.nocontent",{"_index":1536,"title":{},"body":{"guards/ResponseGuard.html":{}}}],["response.status(204).end",{"_index":1529,"title":{},"body":{"guards/ResponseGuard.html":{}}}],["response.status(status).json",{"_index":1470,"title":{},"body":{"classes/QueryFailedFilter.html":{},"guards/ResponseGuard.html":{},"classes/ValidationFailedFilter.html":{}}}],["response.success",{"_index":1533,"title":{},"body":{"guards/ResponseGuard.html":{}}}],["response.withmeta",{"_index":1534,"title":{},"body":{"guards/ResponseGuard.html":{}}}],["responseguard",{"_index":1512,"title":{"guards/ResponseGuard.html":{}},"body":{"guards/ResponseGuard.html":{},"coverage.html":{}}}],["restarts",{"_index":1417,"title":{},"body":{"injectables/PersistedCronService.html":{}}}],["restored",{"_index":1419,"title":{},"body":{"injectables/PersistedCronService.html":{}}}],["restricted",{"_index":1502,"title":{},"body":{"guards/RequestGuard.html":{}}}],["result",{"_index":37,"title":{"interfaces/Result.html":{}},"body":{"interfaces/APIResponse.html":{},"classes/ApiException.html":{},"controllers/AppController.html":{},"interfaces/AppLaunchAction.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseModel.html":{},"interfaces/BaseRoute.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"modules/CronModule.html":{},"injectables/CronService.html":{},"classes/CrudConfigService.html":{},"classes/CrudController.html":{},"interfaces/CrudOptions.html":{},"classes/CrudRoutesFactory.html":{},"classes/CrudService.html":{},"classes/CustomQueryBuilder.html":{},"modules/DatabaseModule.html":{},"modules/EmailModule.html":{},"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"modules/EmailSchedulingModule.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/ExcludeNullUndefinedInterceptor.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"controllers/HealthController.html":{},"interfaces/IBaseModel.html":{},"interfaces/ICrudService.html":{},"interfaces/IPaginationResult.html":{},"interfaces/ITag.html":{},"interfaces/IUser.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginCredsDto.html":{},"classes/PaginationParams.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"injectables/PersistedCronService.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"classes/QueryFailedFilter.html":{},"classes/R.html":{},"guards/RequestGuard.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Response.html":{},"guards/ResponseGuard.html":{},"interfaces/Result.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"classes/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"injectables/TimeoutInterceptor.html":{},"interfaces/TokenPayload.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateTagsDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/ValidationFailedFilter.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{},"routes.html":{}}}],["result.results",{"_index":1155,"title":{},"body":{"classes/CustomQueryBuilder.html":{}}}],["result.total",{"_index":1154,"title":{},"body":{"classes/CustomQueryBuilder.html":{}}}],["result[0].c",{"_index":1157,"title":{},"body":{"classes/CustomQueryBuilder.html":{}}}],["results",{"_index":28,"title":{},"body":{"interfaces/APIResponse.html":{},"classes/ApiException.html":{},"controllers/AppController.html":{},"interfaces/AppLaunchAction.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseModel.html":{},"interfaces/BaseRoute.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"modules/CronModule.html":{},"injectables/CronService.html":{},"classes/CrudConfigService.html":{},"classes/CrudController.html":{},"interfaces/CrudOptions.html":{},"classes/CrudRoutesFactory.html":{},"classes/CrudService.html":{},"classes/CustomQueryBuilder.html":{},"modules/DatabaseModule.html":{},"modules/EmailModule.html":{},"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"modules/EmailSchedulingModule.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/ExcludeNullUndefinedInterceptor.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"controllers/HealthController.html":{},"interfaces/IBaseModel.html":{},"interfaces/ICrudService.html":{},"interfaces/IPaginationResult.html":{},"interfaces/ITag.html":{},"interfaces/IUser.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginCredsDto.html":{},"classes/PaginationParams.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"injectables/PersistedCronService.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"classes/QueryFailedFilter.html":{},"classes/R.html":{},"guards/RequestGuard.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Response.html":{},"guards/ResponseGuard.html":{},"interfaces/Result.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"classes/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"injectables/TimeoutInterceptor.html":{},"interfaces/TokenPayload.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateTagsDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/ValidationFailedFilter.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{},"routes.html":{}}}],["retention",{"_index":1309,"title":{},"body":{"controllers/HealthController.html":{}}}],["return",{"_index":186,"title":{},"body":{"classes/ApiException.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BaseModel.html":{},"interfaces/BaseRoute.html":{},"classes/CreateUserDto.html":{},"injectables/CronService.html":{},"classes/CrudConfigService.html":{},"classes/CrudController.html":{},"interfaces/CrudOptions.html":{},"classes/CrudRoutesFactory.html":{},"classes/CrudService.html":{},"classes/CustomQueryBuilder.html":{},"modules/DatabaseModule.html":{},"injectables/ExcludeNullUndefinedInterceptor.html":{},"interfaces/GetManyDefaultResponse.html":{},"controllers/HealthController.html":{},"interfaces/IBaseModel.html":{},"interfaces/IUser.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginCredsDto.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"injectables/PersistedCronService.html":{},"classes/R.html":{},"guards/RequestGuard.html":{},"interfaces/Response.html":{},"guards/ResponseGuard.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["returndeleted",{"_index":520,"title":{},"body":{"interfaces/BaseRoute.html":{},"interfaces/CrudOptions.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{}}}],["returns",{"_index":202,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BaseModel.html":{},"injectables/CronService.html":{},"classes/CrudConfigService.html":{},"classes/CrudController.html":{},"classes/CrudRoutesFactory.html":{},"classes/CrudService.html":{},"classes/CustomQueryBuilder.html":{},"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/ExcludeNullUndefinedInterceptor.html":{},"controllers/HealthController.html":{},"interfaces/ICrudService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/PersistedCronService.html":{},"classes/QueryFailedFilter.html":{},"classes/R.html":{},"guards/RequestGuard.html":{},"guards/ResponseGuard.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"classes/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/ValidationFailedFilter.html":{},"miscellaneous/functions.html":{}}}],["reusable",{"_index":623,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/IUser.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["rimraf",{"_index":1812,"title":{},"body":{"dependencies.html":{}}}],["route",{"_index":1263,"title":{},"body":{"injectables/ExcludeNullUndefinedInterceptor.html":{},"classes/R.html":{},"interfaces/Response.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["route.enable",{"_index":969,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["route.method",{"_index":819,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["route.override",{"_index":968,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["route.path",{"_index":817,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["routes",{"_index":519,"title":{"routes.html":{}},"body":{"interfaces/BaseRoute.html":{},"interfaces/CrudOptions.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"routes.html":{}}}],["routes.factory.ts",{"_index":794,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"coverage.html":{}}}],["routes.factory.ts:161",{"_index":1539,"title":{},"body":{"classes/SerializeHelper.html":{}}}],["routes.factory.ts:188",{"_index":1540,"title":{},"body":{"classes/SerializeHelper.html":{}}}],["routes.factory.ts:20",{"_index":1476,"title":{},"body":{"classes/R.html":{}}}],["routes.factory.ts:201",{"_index":798,"title":{},"body":{"classes/CrudConfigService.html":{}}}],["routes.factory.ts:207",{"_index":800,"title":{},"body":{"classes/CrudConfigService.html":{}}}],["routes.factory.ts:221",{"_index":1063,"title":{},"body":{"classes/CrudRoutesFactory.html":{}}}],["routes.factory.ts:223",{"_index":1062,"title":{},"body":{"classes/CrudRoutesFactory.html":{}}}],["routes.factory.ts:239",{"_index":1064,"title":{},"body":{"classes/CrudRoutesFactory.html":{}}}],["routes.factory.ts:243",{"_index":1075,"title":{},"body":{"classes/CrudRoutesFactory.html":{}}}],["routes.factory.ts:248",{"_index":1077,"title":{},"body":{"classes/CrudRoutesFactory.html":{}}}],["routes.factory.ts:252",{"_index":1079,"title":{},"body":{"classes/CrudRoutesFactory.html":{}}}],["routes.factory.ts:256",{"_index":1065,"title":{},"body":{"classes/CrudRoutesFactory.html":{}}}],["routes.factory.ts:264",{"_index":1068,"title":{},"body":{"classes/CrudRoutesFactory.html":{}}}],["routes.factory.ts:270",{"_index":1069,"title":{},"body":{"classes/CrudRoutesFactory.html":{}}}],["routes.factory.ts:276",{"_index":1070,"title":{},"body":{"classes/CrudRoutesFactory.html":{}}}],["routes.factory.ts:297",{"_index":1071,"title":{},"body":{"classes/CrudRoutesFactory.html":{}}}],["routes.factory.ts:33",{"_index":1474,"title":{},"body":{"classes/R.html":{}}}],["routes.factory.ts:349",{"_index":1072,"title":{},"body":{"classes/CrudRoutesFactory.html":{}}}],["routes.factory.ts:381",{"_index":1067,"title":{},"body":{"classes/CrudRoutesFactory.html":{}}}],["routes.factory.ts:389",{"_index":1066,"title":{},"body":{"classes/CrudRoutesFactory.html":{}}}],["routes.factory.ts:400",{"_index":1073,"title":{},"body":{"classes/CrudRoutesFactory.html":{}}}],["routes.factory.ts:43",{"_index":1477,"title":{},"body":{"classes/R.html":{}}}],["routes.factory.ts:53",{"_index":1549,"title":{},"body":{"classes/Swagger.html":{}}}],["routes.factory.ts:77",{"_index":1550,"title":{},"body":{"classes/Swagger.html":{}}}],["routes.factory.ts:83",{"_index":1547,"title":{},"body":{"classes/Swagger.html":{}}}],["routes.factory.ts:89",{"_index":1548,"title":{},"body":{"classes/Swagger.html":{}}}],["routes.factory.ts:95",{"_index":1546,"title":{},"body":{"classes/Swagger.html":{}}}],["routesschema",{"_index":904,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["routesschema.foreach((route",{"_index":967,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["run",{"_index":677,"title":{},"body":{"injectables/CronService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["run(boot",{"_index":1833,"title":{},"body":{"miscellaneous/functions.html":{}}}],["rxjs",{"_index":1272,"title":{},"body":{"injectables/ExcludeNullUndefinedInterceptor.html":{},"controllers/HealthController.html":{},"guards/RequestGuard.html":{},"interfaces/Response.html":{},"guards/ResponseGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":1274,"title":{},"body":{"injectables/ExcludeNullUndefinedInterceptor.html":{},"controllers/HealthController.html":{},"interfaces/Response.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["saferequire",{"_index":1722,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["saferequire('@nestjs/swagger",{"_index":550,"title":{},"body":{"interfaces/BaseRoute.html":{},"interfaces/CrudOptions.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"miscellaneous/variables.html":{}}}],["saferequire('@nestjs/swagger/dist/constants",{"_index":552,"title":{},"body":{"interfaces/BaseRoute.html":{},"interfaces/CrudOptions.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"miscellaneous/variables.html":{}}}],["saferequire(path",{"_index":536,"title":{},"body":{"interfaces/BaseRoute.html":{},"interfaces/CrudOptions.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"miscellaneous/functions.html":{}}}],["salt",{"_index":438,"title":{},"body":{"classes/BaseModel.html":{},"interfaces/IBaseModel.html":{},"classes/Tag.html":{},"classes/User.html":{}}}],["saved",{"_index":1434,"title":{},"body":{"injectables/PersistedCronService.html":{}}}],["scalable",{"_index":1849,"title":{},"body":{"index.html":{}}}],["schedule",{"_index":706,"title":{},"body":{"injectables/CronService.html":{},"injectables/PersistedCronService.html":{}}}],["scheduled",{"_index":716,"title":{},"body":{"injectables/CronService.html":{}}}],["scheduleemail",{"_index":1204,"title":{},"body":{"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{}}}],["scheduleemail(@body",{"_index":1215,"title":{},"body":{"controllers/EmailSchedulingController.html":{}}}],["scheduleemail(emailschedule",{"_index":1205,"title":{},"body":{"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{}}}],["schedulemodule",{"_index":244,"title":{},"body":{"modules/AppModule.html":{}}}],["schedulemodule.forroot",{"_index":294,"title":{},"body":{"modules/AppModule.html":{}}}],["scheduler",{"_index":701,"title":{},"body":{"injectables/CronService.html":{},"injectables/EmailSchedulingService.html":{}}}],["schedulerregistry",{"_index":699,"title":{},"body":{"injectables/CronService.html":{},"injectables/EmailSchedulingService.html":{},"injectables/PersistedCronService.html":{}}}],["scheduling",{"_index":1214,"title":{},"body":{"controllers/EmailSchedulingController.html":{},"modules/EmailSchedulingModule.html":{}}}],["schema",{"_index":578,"title":{},"body":{"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"interfaces/ITag.html":{},"interfaces/IUser.html":{},"classes/QueryFailedFilter.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"classes/Tag.html":{},"classes/UpdateTagsDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["searchbyname(query",{"_index":639,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/IUser.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["second",{"_index":752,"title":{},"body":{"injectables/CronService.html":{},"controllers/HealthController.html":{}}}],["seconds",{"_index":703,"title":{},"body":{"injectables/CronService.html":{}}}],["secret",{"_index":384,"title":{},"body":{"modules/AuthModule.html":{}}}],["secretorkey",{"_index":1380,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["seed",{"_index":1737,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["seed(knex",{"_index":1841,"title":{},"body":{"miscellaneous/functions.html":{}}}],["semi",{"_index":628,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/IUser.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["sendmail",{"_index":1240,"title":{},"body":{"injectables/EmailService.html":{}}}],["sendmail(options",{"_index":1243,"title":{},"body":{"injectables/EmailService.html":{}}}],["sequence",{"_index":305,"title":{},"body":{"modules/AppModule.html":{}}}],["serialize",{"_index":528,"title":{},"body":{"interfaces/BaseRoute.html":{},"classes/CrudConfigService.html":{},"interfaces/CrudOptions.html":{},"classes/CrudRoutesFactory.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["serializehelper",{"_index":862,"title":{"classes/SerializeHelper.html":{}},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"coverage.html":{}}}],["serializehelper.creategetmanydto",{"_index":934,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["serializehelper.creategetmanydto(this.swaggermodels.get",{"_index":956,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["serializehelper.creategetoneresponsedto(this.modelname",{"_index":952,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["server",{"_index":192,"title":{},"body":{"classes/ApiException.html":{},"injectables/PersistedCronService.html":{},"dependencies.html":{},"index.html":{}}}],["service",{"_index":997,"title":{},"body":{"classes/CrudController.html":{},"classes/CrudService.html":{},"injectables/PersistedCronService.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["services",{"_index":1082,"title":{},"body":{"classes/CrudService.html":{},"interfaces/ICrudService.html":{}}}],["session",{"_index":1399,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["set",{"_index":809,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["set(metadatakey",{"_index":1475,"title":{},"body":{"classes/R.html":{}}}],["setextramodels",{"_index":1543,"title":{},"body":{"classes/Swagger.html":{}}}],["setextramodels(swaggermodels",{"_index":824,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["setinterval(callback",{"_index":779,"title":{},"body":{"injectables/CronService.html":{}}}],["setresponsemodels",{"_index":950,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["setresponseok",{"_index":1544,"title":{},"body":{"classes/Swagger.html":{}}}],["setresponseok(metadata",{"_index":839,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["setroute",{"_index":1472,"title":{},"body":{"classes/R.html":{}}}],["setroute(route",{"_index":814,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["sets",{"_index":820,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["setswaggerresponseok",{"_index":1059,"title":{},"body":{"classes/CrudRoutesFactory.html":{}}}],["setswaggerresponseok(name",{"_index":975,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["settimeout(callback",{"_index":788,"title":{},"body":{"injectables/CronService.html":{}}}],["setting",{"_index":79,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["setupinfra",{"_index":1746,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["setupinfra(app",{"_index":1835,"title":{},"body":{"miscellaneous/functions.html":{}}}],["setupmiddlewares",{"_index":1747,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["setupmiddlewares(app",{"_index":1836,"title":{},"body":{"miscellaneous/functions.html":{}}}],["setupswaggerdocs",{"_index":1748,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["setupswaggerdocs(app",{"_index":1837,"title":{},"body":{"miscellaneous/functions.html":{}}}],["shadow",{"_index":1281,"title":{},"body":{"injectables/ExcludeNullUndefinedInterceptor.html":{}}}],["showmycontacts",{"_index":80,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["showmynumber",{"_index":119,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["showremoveoption",{"_index":131,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["shutdown",{"_index":329,"title":{},"body":{"modules/AppModule.html":{},"controllers/HealthController.html":{}}}],["side",{"_index":1850,"title":{},"body":{"index.html":{}}}],["sign",{"_index":1961,"title":{},"body":{"miscellaneous/variables.html":{}}}],["signal",{"_index":235,"title":{},"body":{"modules/AppModule.html":{},"controllers/HealthController.html":{}}}],["signasync",{"_index":1962,"title":{},"body":{"miscellaneous/variables.html":{}}}],["signoptions",{"_index":386,"title":{},"body":{"modules/AuthModule.html":{}}}],["simply",{"_index":640,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/IUser.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["singlequerybuildertype",{"_index":1123,"title":{},"body":{"classes/CustomQueryBuilder.html":{}}}],["size",{"_index":1133,"title":{},"body":{"classes/CustomQueryBuilder.html":{},"interfaces/IPaginationResult.html":{},"classes/PaginationParams.html":{}}}],["snippets",{"_index":624,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/IUser.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["socket.io",{"_index":1769,"title":{},"body":{"dependencies.html":{}}}],["soft",{"_index":1019,"title":{},"body":{"classes/CrudController.html":{},"classes/CrudService.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["something",{"_index":1523,"title":{},"body":{"guards/ResponseGuard.html":{}}}],["source",{"_index":4,"title":{},"body":{"interfaces/APIResponse.html":{},"classes/ApiException.html":{},"controllers/AppController.html":{},"interfaces/AppLaunchAction.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseModel.html":{},"interfaces/BaseRoute.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"modules/CronModule.html":{},"injectables/CronService.html":{},"classes/CrudConfigService.html":{},"classes/CrudController.html":{},"interfaces/CrudOptions.html":{},"classes/CrudRoutesFactory.html":{},"classes/CrudService.html":{},"classes/CustomQueryBuilder.html":{},"modules/DatabaseModule.html":{},"modules/EmailModule.html":{},"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"modules/EmailSchedulingModule.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/ExcludeNullUndefinedInterceptor.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"controllers/HealthController.html":{},"interfaces/IBaseModel.html":{},"interfaces/ICrudService.html":{},"interfaces/IPaginationResult.html":{},"interfaces/ITag.html":{},"interfaces/IUser.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginCredsDto.html":{},"classes/PaginationParams.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"injectables/PersistedCronService.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"classes/QueryFailedFilter.html":{},"classes/R.html":{},"guards/RequestGuard.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Response.html":{},"guards/ResponseGuard.html":{},"interfaces/Result.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"classes/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"injectables/TimeoutInterceptor.html":{},"interfaces/TokenPayload.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateTagsDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/ValidationFailedFilter.html":{},"dependencies.html":{},"index.html":{}}}],["specified",{"_index":679,"title":{},"body":{"injectables/CronService.html":{}}}],["split",{"_index":631,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/IUser.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["sponsors",{"_index":1874,"title":{},"body":{"index.html":{}}}],["sqlite3",{"_index":1179,"title":{},"body":{"modules/DatabaseModule.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["src/.../01",{"_index":1831,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../02",{"_index":1832,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../20190609143930_createtag.ts",{"_index":1826,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../20190609143930_createuser.ts",{"_index":1827,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../20210128233543_updatetagmodel.ts",{"_index":1828,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../api",{"_index":1823,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../app.module.ts",{"_index":1911,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../checks.util.ts",{"_index":1915,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../crud.decorator.ts",{"_index":1912,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../database.module.ts",{"_index":1913,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../domain.ts",{"_index":1903,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../helpers.ts",{"_index":1829,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../main.ts",{"_index":1825,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../mocks.ts",{"_index":1916,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../moment",{"_index":1917,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../null",{"_index":1830,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../obj.util.ts",{"_index":1914,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../object",{"_index":1905,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../other.ts",{"_index":1824,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../pagination.ts",{"_index":1821,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../tag.model.ts",{"_index":1907,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../user.model.ts",{"_index":1908,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/app.controller.ts",{"_index":198,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:9",{"_index":201,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":228,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app.module.ts:75",{"_index":239,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.module.ts:79",{"_index":234,"title":{},"body":{"modules/AppModule.html":{}}}],["src/auth/auth.controller.ts",{"_index":331,"title":{},"body":{"controllers/AuthController.html":{},"classes/LoginCredsDto.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:14",{"_index":1404,"title":{},"body":{"classes/LoginCredsDto.html":{}}}],["src/auth/auth.controller.ts:18",{"_index":1406,"title":{},"body":{"classes/LoginCredsDto.html":{}}}],["src/auth/auth.controller.ts:33",{"_index":338,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module.ts",{"_index":373,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":391,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:15",{"_index":400,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:19",{"_index":404,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:23",{"_index":408,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:39",{"_index":406,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:9",{"_index":397,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/jwt.strategy.ts",{"_index":1364,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/auth/jwt.strategy.ts:11",{"_index":1366,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/jwt.strategy.ts:23",{"_index":1369,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/local.strategy.ts",{"_index":1388,"title":{},"body":{"injectables/LocalStrategy.html":{},"coverage.html":{}}}],["src/auth/local.strategy.ts:10",{"_index":1395,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/auth/local.strategy.ts:12",{"_index":1392,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/auth/local.strategy.ts:22",{"_index":1394,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/auth/spec/mocks.ts",{"_index":1683,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/tokenpayload.interface.ts",{"_index":1617,"title":{},"body":{"interfaces/TokenPayload.html":{},"coverage.html":{}}}],["src/base/crud/crud.controller.ts",{"_index":981,"title":{},"body":{"classes/CrudController.html":{},"coverage.html":{}}}],["src/base/crud/crud.controller.ts:102",{"_index":1022,"title":{},"body":{"classes/CrudController.html":{}}}],["src/base/crud/crud.controller.ts:124",{"_index":1006,"title":{},"body":{"classes/CrudController.html":{}}}],["src/base/crud/crud.controller.ts:146",{"_index":1027,"title":{},"body":{"classes/CrudController.html":{}}}],["src/base/crud/crud.controller.ts:26",{"_index":994,"title":{},"body":{"classes/CrudController.html":{}}}],["src/base/crud/crud.controller.ts:45",{"_index":1012,"title":{},"body":{"classes/CrudController.html":{}}}],["src/base/crud/crud.controller.ts:72",{"_index":1017,"title":{},"body":{"classes/CrudController.html":{}}}],["src/base/crud/crud.service.interface.ts",{"_index":1335,"title":{},"body":{"interfaces/ICrudService.html":{},"coverage.html":{}}}],["src/base/crud/crud.service.interface.ts:10",{"_index":1339,"title":{},"body":{"interfaces/ICrudService.html":{}}}],["src/base/crud/crud.service.interface.ts:15",{"_index":1341,"title":{},"body":{"interfaces/ICrudService.html":{}}}],["src/base/crud/crud.service.interface.ts:20",{"_index":1340,"title":{},"body":{"interfaces/ICrudService.html":{}}}],["src/base/crud/crud.service.interface.ts:25",{"_index":1342,"title":{},"body":{"interfaces/ICrudService.html":{}}}],["src/base/crud/crud.service.interface.ts:32",{"_index":1343,"title":{},"body":{"interfaces/ICrudService.html":{}}}],["src/base/crud/crud.service.interface.ts:37",{"_index":1338,"title":{},"body":{"interfaces/ICrudService.html":{}}}],["src/base/crud/crud.service.interface.ts:42",{"_index":1344,"title":{},"body":{"interfaces/ICrudService.html":{}}}],["src/base/crud/crud.service.ts",{"_index":1081,"title":{},"body":{"classes/CrudService.html":{},"coverage.html":{}}}],["src/base/crud/crud.service.ts:112",{"_index":1104,"title":{},"body":{"classes/CrudService.html":{}}}],["src/base/crud/crud.service.ts:15",{"_index":1088,"title":{},"body":{"classes/CrudService.html":{}}}],["src/base/crud/crud.service.ts:27",{"_index":1091,"title":{},"body":{"classes/CrudService.html":{}}}],["src/base/crud/crud.service.ts:38",{"_index":1101,"title":{},"body":{"classes/CrudService.html":{}}}],["src/base/crud/crud.service.ts:56",{"_index":1095,"title":{},"body":{"classes/CrudService.html":{}}}],["src/base/crud/crud.service.ts:67",{"_index":1099,"title":{},"body":{"classes/CrudService.html":{}}}],["src/base/crud/crud.service.ts:78",{"_index":1097,"title":{},"body":{"classes/CrudService.html":{}}}],["src/base/crud/crud.service.ts:89",{"_index":1102,"title":{},"body":{"classes/CrudService.html":{}}}],["src/base/crud/crud.service.ts:99",{"_index":1089,"title":{},"body":{"classes/CrudService.html":{}}}],["src/base/crud/pagination.ts",{"_index":1345,"title":{},"body":{"interfaces/IPaginationResult.html":{},"classes/PaginationParams.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/base/crud/pagination.ts:25",{"_index":1411,"title":{},"body":{"classes/PaginationParams.html":{}}}],["src/base/crud/pagination.ts:34",{"_index":1412,"title":{},"body":{"classes/PaginationParams.html":{}}}],["src/base/crud/pagination.ts:41",{"_index":1408,"title":{},"body":{"classes/PaginationParams.html":{}}}],["src/base/moment",{"_index":1692,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/base/swagger",{"_index":136,"title":{},"body":{"classes/ApiException.html":{},"interfaces/BaseRoute.html":{},"classes/CrudConfigService.html":{},"interfaces/CrudOptions.html":{},"classes/CrudRoutesFactory.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/cron/cron.module.ts",{"_index":669,"title":{},"body":{"modules/CronModule.html":{}}}],["src/cron/cron.service.ts",{"_index":673,"title":{},"body":{"injectables/CronService.html":{},"coverage.html":{}}}],["src/cron/cron.service.ts:112",{"_index":715,"title":{},"body":{"injectables/CronService.html":{}}}],["src/cron/cron.service.ts:126",{"_index":734,"title":{},"body":{"injectables/CronService.html":{}}}],["src/cron/cron.service.ts:136",{"_index":710,"title":{},"body":{"injectables/CronService.html":{}}}],["src/cron/cron.service.ts:151",{"_index":718,"title":{},"body":{"injectables/CronService.html":{}}}],["src/cron/cron.service.ts:164",{"_index":736,"title":{},"body":{"injectables/CronService.html":{}}}],["src/cron/cron.service.ts:174",{"_index":713,"title":{},"body":{"injectables/CronService.html":{}}}],["src/cron/cron.service.ts:187",{"_index":720,"title":{},"body":{"injectables/CronService.html":{}}}],["src/cron/cron.service.ts:22",{"_index":739,"title":{},"body":{"injectables/CronService.html":{}}}],["src/cron/cron.service.ts:24",{"_index":742,"title":{},"body":{"injectables/CronService.html":{}}}],["src/cron/cron.service.ts:26",{"_index":744,"title":{},"body":{"injectables/CronService.html":{}}}],["src/cron/cron.service.ts:28",{"_index":700,"title":{},"body":{"injectables/CronService.html":{}}}],["src/cron/cron.service.ts:32",{"_index":722,"title":{},"body":{"injectables/CronService.html":{}}}],["src/cron/cron.service.ts:38",{"_index":726,"title":{},"body":{"injectables/CronService.html":{}}}],["src/cron/cron.service.ts:52",{"_index":729,"title":{},"body":{"injectables/CronService.html":{}}}],["src/cron/cron.service.ts:63",{"_index":732,"title":{},"body":{"injectables/CronService.html":{}}}],["src/cron/cron.service.ts:76",{"_index":733,"title":{},"body":{"injectables/CronService.html":{}}}],["src/cron/cron.service.ts:97",{"_index":704,"title":{},"body":{"injectables/CronService.html":{}}}],["src/cron/persisted",{"_index":1415,"title":{},"body":{"injectables/PersistedCronService.html":{},"coverage.html":{}}}],["src/database/database.module.ts",{"_index":1166,"title":{},"body":{"modules/DatabaseModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/database/migrations/20190609143930_createtag.ts",{"_index":1727,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/database/migrations/20190609143930_createuser.ts",{"_index":1730,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/database/migrations/20210128233543_updatetagmodel.ts",{"_index":1731,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/database/models/base.model.ts",{"_index":424,"title":{},"body":{"classes/BaseModel.html":{},"interfaces/IBaseModel.html":{},"coverage.html":{}}}],["src/database/models/base.model.ts:25",{"_index":439,"title":{},"body":{"classes/BaseModel.html":{}}}],["src/database/models/base.model.ts:35",{"_index":442,"title":{},"body":{"classes/BaseModel.html":{}}}],["src/database/models/base.model.ts:37",{"_index":440,"title":{},"body":{"classes/BaseModel.html":{}}}],["src/database/models/base.model.ts:39",{"_index":434,"title":{},"body":{"classes/BaseModel.html":{}}}],["src/database/models/base.model.ts:41",{"_index":443,"title":{},"body":{"classes/BaseModel.html":{}}}],["src/database/models/base.model.ts:43",{"_index":435,"title":{},"body":{"classes/BaseModel.html":{}}}],["src/database/models/base.model.ts:47",{"_index":452,"title":{},"body":{"classes/BaseModel.html":{}}}],["src/database/models/base.model.ts:60",{"_index":447,"title":{},"body":{"classes/BaseModel.html":{}}}],["src/database/models/helpers.ts",{"_index":1119,"title":{},"body":{"classes/CustomQueryBuilder.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/database/models/helpers.ts:37",{"_index":1128,"title":{},"body":{"classes/CustomQueryBuilder.html":{}}}],["src/database/models/helpers.ts:39",{"_index":1131,"title":{},"body":{"classes/CustomQueryBuilder.html":{}}}],["src/database/models/helpers.ts:41",{"_index":1129,"title":{},"body":{"classes/CustomQueryBuilder.html":{}}}],["src/database/models/helpers.ts:43",{"_index":1130,"title":{},"body":{"classes/CustomQueryBuilder.html":{}}}],["src/database/models/helpers.ts:45",{"_index":1140,"title":{},"body":{"classes/CustomQueryBuilder.html":{}}}],["src/database/models/helpers.ts:61",{"_index":1137,"title":{},"body":{"classes/CustomQueryBuilder.html":{}}}],["src/database/models/helpers.ts:70",{"_index":1136,"title":{},"body":{"classes/CustomQueryBuilder.html":{}}}],["src/database/models/helpers.ts:75",{"_index":1134,"title":{},"body":{"classes/CustomQueryBuilder.html":{}}}],["src/database/seeds/01",{"_index":1735,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/database/seeds/02",{"_index":1738,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/domain.ts",{"_index":6,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/email/email.module.ts",{"_index":1190,"title":{},"body":{"modules/EmailModule.html":{}}}],["src/email/email.service.ts",{"_index":1239,"title":{},"body":{"injectables/EmailService.html":{},"coverage.html":{}}}],["src/email/email.service.ts:11",{"_index":1244,"title":{},"body":{"injectables/EmailService.html":{}}}],["src/email/email.service.ts:5",{"_index":1242,"title":{},"body":{"injectables/EmailService.html":{}}}],["src/emailscheduling/emailschedule.dto.ts",{"_index":1193,"title":{},"body":{"classes/EmailScheduleDto.html":{},"coverage.html":{}}}],["src/emailscheduling/emailschedule.dto.ts:13",{"_index":1197,"title":{},"body":{"classes/EmailScheduleDto.html":{}}}],["src/emailscheduling/emailschedule.dto.ts:16",{"_index":1199,"title":{},"body":{"classes/EmailScheduleDto.html":{}}}],["src/emailscheduling/emailschedule.dto.ts:5",{"_index":1200,"title":{},"body":{"classes/EmailScheduleDto.html":{}}}],["src/emailscheduling/emailschedule.dto.ts:9",{"_index":1201,"title":{},"body":{"classes/EmailScheduleDto.html":{}}}],["src/emailscheduling/emailscheduling.controller.ts",{"_index":1203,"title":{},"body":{"controllers/EmailSchedulingController.html":{},"coverage.html":{}}}],["src/emailscheduling/emailscheduling.controller.ts:15",{"_index":1207,"title":{},"body":{"controllers/EmailSchedulingController.html":{}}}],["src/emailscheduling/emailscheduling.module.ts",{"_index":1220,"title":{},"body":{"modules/EmailSchedulingModule.html":{}}}],["src/emailscheduling/emailscheduling.service.ts",{"_index":1223,"title":{},"body":{"injectables/EmailSchedulingService.html":{},"coverage.html":{}}}],["src/emailscheduling/emailscheduling.service.ts:11",{"_index":1225,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["src/emailscheduling/emailscheduling.service.ts:18",{"_index":1226,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["src/health/health.controller.ts",{"_index":1287,"title":{},"body":{"controllers/HealthController.html":{},"coverage.html":{}}}],["src/health/health.controller.ts:36",{"_index":1298,"title":{},"body":{"controllers/HealthController.html":{}}}],["src/health/health.controller.ts:55",{"_index":1291,"title":{},"body":{"controllers/HealthController.html":{}}}],["src/health/health.controller.ts:61",{"_index":1293,"title":{},"body":{"controllers/HealthController.html":{}}}],["src/health/health.controller.ts:80",{"_index":1296,"title":{},"body":{"controllers/HealthController.html":{}}}],["src/health/health.controller.ts:86",{"_index":1295,"title":{},"body":{"controllers/HealthController.html":{}}}],["src/infra/filters/query",{"_index":1442,"title":{},"body":{"classes/QueryFailedFilter.html":{},"coverage.html":{}}}],["src/infra/filters/validation",{"_index":1667,"title":{},"body":{"classes/ValidationFailedFilter.html":{},"coverage.html":{}}}],["src/infra/guards/req.ts",{"_index":1481,"title":{},"body":{"guards/RequestGuard.html":{},"coverage.html":{}}}],["src/infra/guards/req.ts:20",{"_index":1488,"title":{},"body":{"guards/RequestGuard.html":{}}}],["src/infra/guards/req.ts:33",{"_index":1485,"title":{},"body":{"guards/RequestGuard.html":{}}}],["src/infra/guards/res.ts",{"_index":1513,"title":{},"body":{"guards/ResponseGuard.html":{},"coverage.html":{}}}],["src/infra/guards/res.ts:19",{"_index":1517,"title":{},"body":{"guards/ResponseGuard.html":{}}}],["src/infra/guards/res.ts:32",{"_index":1516,"title":{},"body":{"guards/ResponseGuard.html":{}}}],["src/infra/interceptors/null",{"_index":1249,"title":{},"body":{"injectables/ExcludeNullUndefinedInterceptor.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/infra/interceptors/timeout.ts",{"_index":1602,"title":{},"body":{"injectables/TimeoutInterceptor.html":{},"coverage.html":{}}}],["src/infra/interceptors/timeout.ts:25",{"_index":1606,"title":{},"body":{"injectables/TimeoutInterceptor.html":{}}}],["src/infra/interceptors/transform.ts",{"_index":1508,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"coverage.html":{}}}],["src/infra/interceptors/transform.ts:28",{"_index":1618,"title":{},"body":{"injectables/TransformInterceptor.html":{}}}],["src/main.ts",{"_index":1745,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/tags/tag.model.ts",{"_index":563,"title":{},"body":{"classes/CreateTagsDto.html":{},"interfaces/ITag.html":{},"classes/Tag.html":{},"classes/UpdateTagsDto.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/tags/tag.model.ts:13",{"_index":1553,"title":{},"body":{"classes/Tag.html":{}}}],["src/tags/tag.model.ts:15",{"_index":1552,"title":{},"body":{"classes/Tag.html":{}}}],["src/tags/tag.model.ts:19",{"_index":1551,"title":{},"body":{"classes/Tag.html":{}}}],["src/tags/tag.model.ts:38",{"_index":566,"title":{},"body":{"classes/CreateTagsDto.html":{}}}],["src/tags/tags.controller.ts",{"_index":1564,"title":{},"body":{"controllers/TagsController.html":{},"coverage.html":{}}}],["src/tags/tags.controller.ts:32",{"_index":1565,"title":{},"body":{"controllers/TagsController.html":{}}}],["src/tags/tags.controller.ts:42",{"_index":1566,"title":{},"body":{"controllers/TagsController.html":{}}}],["src/tags/tags.module.ts",{"_index":1581,"title":{},"body":{"modules/TagsModule.html":{}}}],["src/tags/tags.service.ts",{"_index":1583,"title":{},"body":{"injectables/TagsService.html":{},"coverage.html":{}}}],["src/tags/tags.service.ts:14",{"_index":1585,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/tags.service.ts:9",{"_index":1584,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/users/user.model.ts",{"_index":603,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/IUser.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/users/user.model.ts:111",{"_index":616,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["src/users/user.model.ts:116",{"_index":608,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["src/users/user.model.ts:121",{"_index":615,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["src/users/user.model.ts:126",{"_index":610,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["src/users/user.model.ts:131",{"_index":613,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["src/users/user.model.ts:134",{"_index":612,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["src/users/user.model.ts:28",{"_index":1628,"title":{},"body":{"classes/User.html":{}}}],["src/users/user.model.ts:30",{"_index":1629,"title":{},"body":{"classes/User.html":{}}}],["src/users/user.model.ts:32",{"_index":1621,"title":{},"body":{"classes/User.html":{}}}],["src/users/user.model.ts:34",{"_index":1622,"title":{},"body":{"classes/User.html":{}}}],["src/users/user.model.ts:36",{"_index":1625,"title":{},"body":{"classes/User.html":{}}}],["src/users/user.model.ts:38",{"_index":1623,"title":{},"body":{"classes/User.html":{}}}],["src/users/user.model.ts:40",{"_index":1627,"title":{},"body":{"classes/User.html":{}}}],["src/users/user.model.ts:44",{"_index":1624,"title":{},"body":{"classes/User.html":{}}}],["src/users/user.model.ts:64",{"_index":1626,"title":{},"body":{"classes/User.html":{}}}],["src/users/user.model.ts:84",{"_index":1631,"title":{},"body":{"classes/User.html":{}}}],["src/users/user.model.ts:89",{"_index":1630,"title":{},"body":{"classes/User.html":{}}}],["src/users/users.controller.ts",{"_index":1633,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:33",{"_index":1638,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:42",{"_index":1636,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:56",{"_index":1641,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module.ts",{"_index":1651,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/users/users.service.ts",{"_index":1653,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/users.service.ts:10",{"_index":1654,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:15",{"_index":1660,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:19",{"_index":1658,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:27",{"_index":1659,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:35",{"_index":1656,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:39",{"_index":1661,"title":{},"body":{"injectables/UsersService.html":{}}}],["sse",{"_index":1289,"title":{},"body":{"controllers/HealthController.html":{}}}],["sse('sse",{"_index":1297,"title":{},"body":{"controllers/HealthController.html":{}}}],["stack",{"_index":141,"title":{},"body":{"classes/ApiException.html":{}}}],["start",{"_index":1858,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":1861,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":1862,"title":{},"body":{"index.html":{}}}],["started",{"_index":1843,"title":{"index.html":{}},"body":{}}],["starter",{"_index":1852,"title":{},"body":{"index.html":{}}}],["stat",{"_index":1323,"title":{},"body":{"controllers/HealthController.html":{}}}],["stat.load",{"_index":1330,"title":{},"body":{"controllers/HealthController.html":{}}}],["stat.memory",{"_index":1326,"title":{},"body":{"controllers/HealthController.html":{}}}],["stat.timestamp",{"_index":1328,"title":{},"body":{"controllers/HealthController.html":{}}}],["statements",{"_index":643,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/IUser.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"coverage.html":{}}}],["static",{"_index":206,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/BaseModel.html":{},"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"injectables/CronService.html":{},"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"controllers/EmailSchedulingController.html":{},"controllers/HealthController.html":{},"interfaces/IBaseModel.html":{},"interfaces/ITag.html":{},"interfaces/IUser.html":{},"injectables/LocalStrategy.html":{},"classes/LoginCredsDto.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"classes/Tag.html":{},"controllers/TagsController.html":{},"classes/UpdateTagsDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["status",{"_index":142,"title":{},"body":{"classes/ApiException.html":{},"classes/CrudController.html":{},"interfaces/IPaginationResult.html":{},"classes/PaginationParams.html":{},"classes/QueryFailedFilter.html":{},"guards/ResponseGuard.html":{},"classes/ValidationFailedFilter.html":{}}}],["statuscode",{"_index":16,"title":{},"body":{"interfaces/APIResponse.html":{},"classes/ApiException.html":{},"interfaces/AppLaunchAction.html":{},"controllers/AuthController.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"classes/CrudController.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/IPaginationResult.html":{},"classes/LoginCredsDto.html":{},"classes/PaginationParams.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"classes/QueryFailedFilter.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"controllers/TagsController.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{},"controllers/UsersController.html":{},"classes/ValidationFailedFilter.html":{}}}],["stay",{"_index":1882,"title":{},"body":{"index.html":{}}}],["stop",{"_index":1422,"title":{},"body":{"injectables/PersistedCronService.html":{}}}],["store",{"_index":1634,"title":{},"body":{"controllers/UsersController.html":{}}}],["strategy",{"_index":1373,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["stream",{"_index":1270,"title":{},"body":{"injectables/ExcludeNullUndefinedInterceptor.html":{},"interfaces/Response.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["string",{"_index":23,"title":{},"body":{"interfaces/APIResponse.html":{},"classes/ApiException.html":{},"controllers/AppController.html":{},"interfaces/AppLaunchAction.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BaseModel.html":{},"interfaces/BaseRoute.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"injectables/CronService.html":{},"classes/CrudConfigService.html":{},"interfaces/CrudOptions.html":{},"classes/CrudRoutesFactory.html":{},"classes/CrudService.html":{},"classes/EmailScheduleDto.html":{},"injectables/ExcludeNullUndefinedInterceptor.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"controllers/HealthController.html":{},"interfaces/IBaseModel.html":{},"interfaces/ICrudService.html":{},"interfaces/IPaginationResult.html":{},"interfaces/ITag.html":{},"interfaces/IUser.html":{},"injectables/LocalStrategy.html":{},"classes/LoginCredsDto.html":{},"classes/PaginationParams.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"classes/R.html":{},"guards/RequestGuard.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"guards/ResponseGuard.html":{},"interfaces/Result.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"classes/Tag.html":{},"injectables/TagsService.html":{},"interfaces/TokenPayload.html":{},"classes/UpdateTagsDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["string[]).every((v",{"_index":1930,"title":{},"body":{"miscellaneous/variables.html":{}}}],["strip",{"_index":1276,"title":{},"body":{"injectables/ExcludeNullUndefinedInterceptor.html":{},"miscellaneous/functions.html":{}}}],["subject",{"_index":52,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"classes/EmailScheduleDto.html":{},"injectables/EmailSchedulingService.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["success",{"_index":1519,"title":{},"body":{"guards/ResponseGuard.html":{}}}],["such",{"_index":987,"title":{},"body":{"classes/CrudController.html":{},"classes/CrudService.html":{}}}],["summary",{"_index":1036,"title":{},"body":{"classes/CrudController.html":{},"controllers/UsersController.html":{}}}],["super",{"_index":1378,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["super(model",{"_index":1595,"title":{},"body":{"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["super(service",{"_index":1576,"title":{},"body":{"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["super.$beforeinsert(querycontext",{"_index":657,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/IUser.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["super.$beforeupdate(opt",{"_index":484,"title":{},"body":{"classes/BaseModel.html":{},"classes/CreateUserDto.html":{},"interfaces/IBaseModel.html":{},"interfaces/IUser.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["super.create(data",{"_index":1600,"title":{},"body":{"injectables/TagsService.html":{}}}],["support",{"_index":1815,"title":{},"body":{"dependencies.html":{},"index.html":{},"modules.html":{}}}],["svg",{"_index":1893,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":549,"title":{"classes/Swagger.html":{}},"body":{"interfaces/BaseRoute.html":{},"classes/CrudConfigService.html":{},"classes/CrudController.html":{},"interfaces/CrudOptions.html":{},"classes/CrudRoutesFactory.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["swagger.apimodelproperty",{"_index":560,"title":{},"body":{"interfaces/BaseRoute.html":{},"interfaces/CrudOptions.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{}}}],["swagger.apiproperty",{"_index":559,"title":{},"body":{"interfaces/BaseRoute.html":{},"interfaces/CrudOptions.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{}}}],["swagger.createresponsemeta(name",{"_index":978,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["swagger.getextramodels(swaggermodels.get",{"_index":827,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["swagger.getresponseok(this.targetproto[name",{"_index":976,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["swagger.getschemapath",{"_index":856,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["swagger.getschemapath(dto.name",{"_index":861,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["swagger.setextramodels(this.swaggermodels",{"_index":965,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["swagger.setresponseok",{"_index":979,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["swaggerconst",{"_index":551,"title":{},"body":{"interfaces/BaseRoute.html":{},"classes/CrudConfigService.html":{},"interfaces/CrudOptions.html":{},"classes/CrudRoutesFactory.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["swaggerconst.decorators.api_extra_models",{"_index":837,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["swaggerenumtype",{"_index":496,"title":{},"body":{"interfaces/BaseRoute.html":{},"interfaces/CrudOptions.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{}}}],["swaggermodels",{"_index":846,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["swaggermodels.get",{"_index":838,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["swaggermodels.get.name",{"_index":835,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["swaggermodels.getmany",{"_index":852,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["swaggermodels.getmany.name",{"_index":857,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["swaggermodels[name",{"_index":831,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["swaggermodels[name.split('onebase')[0",{"_index":860,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["switch",{"_index":847,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"miscellaneous/variables.html":{}}}],["symbol",{"_index":557,"title":{},"body":{"interfaces/BaseRoute.html":{},"classes/CrudConfigService.html":{},"interfaces/CrudOptions.html":{},"classes/CrudRoutesFactory.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["synchronize",{"_index":286,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["syntax",{"_index":1503,"title":{},"body":{"guards/RequestGuard.html":{}}}],["t",{"_index":21,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/BaseRoute.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"classes/CrudConfigService.html":{},"classes/CrudController.html":{},"interfaces/CrudOptions.html":{},"classes/CrudRoutesFactory.html":{},"classes/CrudService.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/ICrudService.html":{},"interfaces/IPaginationResult.html":{},"classes/PaginationParams.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"classes/R.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Response.html":{},"interfaces/Result.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"injectables/TagsService.html":{},"injectables/TransformInterceptor.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["table",{"_index":1418,"title":{},"body":{"injectables/PersistedCronService.html":{},"classes/QueryFailedFilter.html":{},"coverage.html":{}}}],["tablename",{"_index":576,"title":{},"body":{"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"interfaces/ITag.html":{},"interfaces/IUser.html":{},"classes/Tag.html":{},"classes/UpdateTagsDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1755,"title":{},"body":{"coverage.html":{}}}],["tag",{"_index":575,"title":{"classes/Tag.html":{}},"body":{"classes/CreateTagsDto.html":{},"modules/DatabaseModule.html":{},"interfaces/ITag.html":{},"classes/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"classes/UpdateTagsDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["tag.model",{"_index":1569,"title":{},"body":{"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["tag.name",{"_index":1599,"title":{},"body":{"injectables/TagsService.html":{}}}],["tag.ts",{"_index":1739,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["tags",{"_index":1575,"title":{},"body":{"controllers/TagsController.html":{},"modules/TagsModule.html":{}}}],["tags.controller",{"_index":1582,"title":{},"body":{"modules/TagsModule.html":{}}}],["tags.service",{"_index":1571,"title":{},"body":{"controllers/TagsController.html":{},"modules/TagsModule.html":{}}}],["tags/tag.model",{"_index":1105,"title":{},"body":{"classes/CrudService.html":{},"modules/DatabaseModule.html":{}}}],["tags/tags.module",{"_index":258,"title":{},"body":{"modules/AppModule.html":{}}}],["tagscontroller",{"_index":1563,"title":{"controllers/TagsController.html":{}},"body":{"controllers/TagsController.html":{},"modules/TagsModule.html":{},"coverage.html":{}}}],["tagshape",{"_index":596,"title":{},"body":{"classes/CreateTagsDto.html":{},"interfaces/ITag.html":{},"classes/Tag.html":{},"classes/UpdateTagsDto.html":{},"miscellaneous/typealiases.html":{}}}],["tagsmodule",{"_index":223,"title":{"modules/TagsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/TagsModule.html":{},"modules.html":{},"overview.html":{}}}],["tagsservice",{"_index":1570,"title":{"injectables/TagsService.html":{}},"body":{"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"coverage.html":{},"overview.html":{}}}],["takes",{"_index":1604,"title":{},"body":{"injectables/TimeoutInterceptor.html":{}}}],["target",{"_index":555,"title":{},"body":{"interfaces/BaseRoute.html":{},"classes/CrudConfigService.html":{},"interfaces/CrudOptions.html":{},"classes/CrudRoutesFactory.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"miscellaneous/variables.html":{}}}],["targetproto",{"_index":897,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["template",{"_index":326,"title":{},"body":{"modules/AppModule.html":{},"injectables/CronService.html":{},"controllers/HealthController.html":{}}}],["terminate",{"_index":1603,"title":{},"body":{"injectables/TimeoutInterceptor.html":{}}}],["termination",{"_index":300,"title":{},"body":{"modules/AppModule.html":{}}}],["terminusmodule",{"_index":246,"title":{},"body":{"modules/AppModule.html":{}}}],["test",{"_index":278,"title":{},"body":{"modules/AppModule.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["test:covsupport",{"_index":1867,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":1866,"title":{},"body":{"index.html":{}}}],["tests",{"_index":1864,"title":{},"body":{"index.html":{}}}],["text",{"_index":1233,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["thanks",{"_index":1873,"title":{},"body":{"index.html":{}}}],["this.$fetchgraph(expression",{"_index":483,"title":{},"body":{"classes/BaseModel.html":{},"interfaces/IBaseModel.html":{}}}],["this.authservice.login(user",{"_index":366,"title":{},"body":{"controllers/AuthController.html":{},"classes/LoginCredsDto.html":{}}}],["this.authservice.validateuser(email",{"_index":1401,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["this.bindrequesthelpers(context.switchtohttp().getrequest",{"_index":1496,"title":{},"body":{"guards/RequestGuard.html":{}}}],["this.bindresponsehelpers(context.switchtohttp().getresponse",{"_index":1518,"title":{},"body":{"guards/ResponseGuard.html":{}}}],["this.collectosmetrics(metrics",{"_index":1315,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.comparepassword(password",{"_index":417,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.config.get('node_env",{"_index":1334,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.configservice.get('node_env",{"_index":1247,"title":{},"body":{"injectables/EmailService.html":{}}}],["this.count",{"_index":1156,"title":{},"body":{"classes/CustomQueryBuilder.html":{}}}],["this.create",{"_index":888,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["this.createroutes(routesschema",{"_index":908,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["this.dns.pingcheck('nestjs",{"_index":1318,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.emailschedulingservice.scheduleemail(emailschedule",{"_index":1216,"title":{},"body":{"controllers/EmailSchedulingController.html":{}}}],["this.emailservice.sendmail",{"_index":1231,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["this.enableroutes(routesschema",{"_index":909,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["this.error",{"_index":174,"title":{},"body":{"classes/ApiException.html":{}}}],["this.errors",{"_index":176,"title":{},"body":{"classes/ApiException.html":{}}}],["this.factorial(n",{"_index":748,"title":{},"body":{"injectables/CronService.html":{}}}],["this.findone",{"_index":1596,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.generatetoken(user",{"_index":422,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.hashpassword(this.password",{"_index":659,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/IUser.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["this.hashpassword(user.password",{"_index":1665,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.health.check",{"_index":1317,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.jwtservice.signasync(user",{"_index":411,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.logger.debug",{"_index":750,"title":{},"body":{"injectables/CronService.html":{}}}],["this.logger.log(`email",{"_index":1237,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["this.logger.log(`interval",{"_index":774,"title":{},"body":{"injectables/CronService.html":{}}}],["this.logger.log(`job",{"_index":760,"title":{},"body":{"injectables/CronService.html":{}}}],["this.logger.log(`timeout",{"_index":786,"title":{},"body":{"injectables/CronService.html":{}}}],["this.logger.warn",{"_index":776,"title":{},"body":{"injectables/CronService.html":{}}}],["this.logger.warn(`interval",{"_index":783,"title":{},"body":{"injectables/CronService.html":{}}}],["this.logger.warn(`job",{"_index":766,"title":{},"body":{"injectables/CronService.html":{}}}],["this.logger.warn(`time",{"_index":763,"title":{},"body":{"injectables/CronService.html":{}}}],["this.logger.warn(`timeout",{"_index":787,"title":{},"body":{"injectables/CronService.html":{}}}],["this.mergeoptions",{"_index":906,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["this.message",{"_index":173,"title":{},"body":{"classes/ApiException.html":{}}}],["this.model.query",{"_index":1107,"title":{},"body":{"classes/CrudService.html":{}}}],["this.model.query().findbyid(id).first",{"_index":1113,"title":{},"body":{"classes/CrudService.html":{},"injectables/UsersService.html":{}}}],["this.model.query().findone",{"_index":1114,"title":{},"body":{"classes/CrudService.html":{},"injectables/UsersService.html":{}}}],["this.model.query().findone(filter",{"_index":1112,"title":{},"body":{"classes/CrudService.html":{}}}],["this.model.query().insertandfetch(input",{"_index":1116,"title":{},"body":{"classes/CrudService.html":{}}}],["this.model.query().insertandfetch(user",{"_index":1663,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.model.query().page(page",{"_index":1109,"title":{},"body":{"classes/CrudService.html":{}}}],["this.model.query().patchandfetchbyid(id",{"_index":1118,"title":{},"body":{"classes/CrudService.html":{},"injectables/UsersService.html":{}}}],["this.modelname",{"_index":893,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["this.modeltype",{"_index":892,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["this.onlycount",{"_index":1158,"title":{},"body":{"classes/CustomQueryBuilder.html":{}}}],["this.options",{"_index":887,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["this.options.dto",{"_index":925,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["this.options.model.type",{"_index":902,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["this.options.model.type?.name",{"_index":900,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["this.options.query",{"_index":922,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["this.options.routes?.deleteonebase?.returndeleted",{"_index":946,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["this.options.serialize",{"_index":926,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["this.options.serialize.create",{"_index":935,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["this.options.serialize.delete",{"_index":944,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["this.options.serialize.get",{"_index":928,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["this.options.serialize.getmany",{"_index":931,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["this.options.serialize.replace",{"_index":941,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["this.options.serialize.update",{"_index":938,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["this.options.serialize?.create",{"_index":937,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["this.options.serialize?.delete",{"_index":947,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["this.options.serialize?.get",{"_index":930,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["this.options.serialize?.getmany",{"_index":933,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["this.options.serialize?.replace",{"_index":943,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["this.options.serialize?.update",{"_index":940,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["this.page(page",{"_index":1151,"title":{},"body":{"classes/CustomQueryBuilder.html":{}}}],["this.password",{"_index":658,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/IUser.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["this.path",{"_index":177,"title":{},"body":{"classes/ApiException.html":{}}}],["this.schedule.addcronjob(job.name",{"_index":1438,"title":{},"body":{"injectables/PersistedCronService.html":{}}}],["this.scheduler.addcronjob(`${date.now",{"_index":1236,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["this.scheduler.addcronjob(name",{"_index":764,"title":{},"body":{"injectables/CronService.html":{}}}],["this.scheduler.addinterval(name",{"_index":780,"title":{},"body":{"injectables/CronService.html":{}}}],["this.scheduler.addtimeout(name",{"_index":789,"title":{},"body":{"injectables/CronService.html":{}}}],["this.scheduler.deletecronjob(name",{"_index":770,"title":{},"body":{"injectables/CronService.html":{}}}],["this.scheduler.deleteinterval(name",{"_index":782,"title":{},"body":{"injectables/CronService.html":{}}}],["this.scheduler.deletetimeout(name",{"_index":791,"title":{},"body":{"injectables/CronService.html":{}}}],["this.scheduler.getcronjob(name",{"_index":769,"title":{},"body":{"injectables/CronService.html":{}}}],["this.scheduler.getinterval(name",{"_index":781,"title":{},"body":{"injectables/CronService.html":{}}}],["this.scheduler.getintervals",{"_index":772,"title":{},"body":{"injectables/CronService.html":{}}}],["this.scheduler.gettimeout(name",{"_index":790,"title":{},"body":{"injectables/CronService.html":{}}}],["this.scheduler.gettimeouts",{"_index":784,"title":{},"body":{"injectables/CronService.html":{}}}],["this.service.create(input",{"_index":1051,"title":{},"body":{"classes/CrudController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["this.service.findonebyemail(email",{"_index":1647,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.service.findonebyid(id",{"_index":1043,"title":{},"body":{"classes/CrudController.html":{}}}],["this.service.getone(req",{"_index":913,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["this.service.getonebase(req",{"_index":916,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["this.service.paginatedfindall",{"_index":1040,"title":{},"body":{"classes/CrudController.html":{}}}],["this.service.remove(id",{"_index":1048,"title":{},"body":{"classes/CrudController.html":{}}}],["this.service.update(id",{"_index":1055,"title":{},"body":{"classes/CrudController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["this.setresponsemodels",{"_index":907,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["this.setswaggerresponseok(route.name",{"_index":974,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["this.stack",{"_index":175,"title":{},"body":{"classes/ApiException.html":{}}}],["this.status",{"_index":182,"title":{},"body":{"classes/ApiException.html":{}}}],["this.statuscode",{"_index":181,"title":{},"body":{"classes/ApiException.html":{}}}],["this.swaggermodels",{"_index":894,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["this.swaggermodels.create",{"_index":957,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["this.swaggermodels.delete",{"_index":963,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["this.swaggermodels.get",{"_index":953,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["this.swaggermodels.getmany",{"_index":955,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["this.swaggermodels.replace",{"_index":961,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["this.swaggermodels.update",{"_index":959,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["this.target",{"_index":949,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["this.target.prototype",{"_index":898,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["this.targetproto",{"_index":891,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["this.targetproto[name",{"_index":911,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["this.targetproto[route.name",{"_index":971,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["this.timestamp",{"_index":178,"title":{},"body":{"classes/ApiException.html":{}}}],["this.update(id",{"_index":1115,"title":{},"body":{"classes/CrudService.html":{}}}],["this.updated_at",{"_index":485,"title":{},"body":{"classes/BaseModel.html":{},"interfaces/IBaseModel.html":{}}}],["this.userservice.findonebyemail(email",{"_index":412,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservice.findonebyemail(payload.email",{"_index":1384,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["this[expression.tostring",{"_index":482,"title":{},"body":{"classes/BaseModel.html":{},"interfaces/IBaseModel.html":{}}}],["this[route.name](route.name",{"_index":973,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["those",{"_index":637,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/IUser.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["throw",{"_index":1044,"title":{},"body":{"classes/CrudController.html":{}}}],["throwerror",{"_index":1608,"title":{},"body":{"injectables/TimeoutInterceptor.html":{}}}],["throwerror(e",{"_index":1616,"title":{},"body":{"injectables/TimeoutInterceptor.html":{}}}],["throwerror(new",{"_index":1615,"title":{},"body":{"injectables/TimeoutInterceptor.html":{}}}],["time",{"_index":778,"title":{},"body":{"injectables/CronService.html":{},"injectables/PersistedCronService.html":{}}}],["timeago",{"_index":95,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["timeout",{"_index":680,"title":{},"body":{"injectables/CronService.html":{},"injectables/TimeoutInterceptor.html":{}}}],["timeout('handletimeoutfn",{"_index":730,"title":{},"body":{"injectables/CronService.html":{}}}],["timeout(10000",{"_index":1611,"title":{},"body":{"injectables/TimeoutInterceptor.html":{}}}],["timeouterror",{"_index":1609,"title":{},"body":{"injectables/TimeoutInterceptor.html":{}}}],["timeoutinterceptor",{"_index":1601,"title":{"injectables/TimeoutInterceptor.html":{}},"body":{"injectables/TimeoutInterceptor.html":{},"coverage.html":{}}}],["timeouts",{"_index":737,"title":{},"body":{"injectables/CronService.html":{}}}],["timeouts.foreach((key",{"_index":785,"title":{},"body":{"injectables/CronService.html":{}}}],["times",{"_index":684,"title":{},"body":{"injectables/CronService.html":{}}}],["timestamp",{"_index":143,"title":{},"body":{"classes/ApiException.html":{},"controllers/HealthController.html":{},"classes/QueryFailedFilter.html":{},"classes/ValidationFailedFilter.html":{}}}],["todo",{"_index":1245,"title":{},"body":{"injectables/EmailService.html":{},"injectables/PersistedCronService.html":{}}}],["token_expiration",{"_index":283,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["tokenpayload",{"_index":1368,"title":{"interfaces/TokenPayload.html":{}},"body":{"injectables/JwtStrategy.html":{},"interfaces/TokenPayload.html":{},"coverage.html":{}}}],["tokenpayload.interface",{"_index":1376,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["tools",{"_index":1793,"title":{},"body":{"dependencies.html":{}}}],["total",{"_index":17,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/BaseRoute.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"classes/CrudConfigService.html":{},"interfaces/CrudOptions.html":{},"classes/CrudRoutesFactory.html":{},"classes/CrudService.html":{},"classes/CustomQueryBuilder.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/IPaginationResult.html":{},"classes/PaginationParams.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"classes/R.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["totalpages",{"_index":1110,"title":{},"body":{"classes/CrudService.html":{},"classes/CustomQueryBuilder.html":{},"interfaces/IPaginationResult.html":{},"classes/PaginationParams.html":{}}}],["touch",{"_index":1883,"title":{},"body":{"index.html":{}}}],["transform",{"_index":1252,"title":{},"body":{"injectables/ExcludeNullUndefinedInterceptor.html":{},"interfaces/IPaginationResult.html":{},"classes/PaginationParams.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["transform((val",{"_index":1359,"title":{},"body":{"interfaces/IPaginationResult.html":{},"classes/PaginationParams.html":{}}}],["transformer",{"_index":801,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"interfaces/IPaginationResult.html":{},"classes/PaginationParams.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"dependencies.html":{}}}],["transforminterceptor",{"_index":1510,"title":{"injectables/TransformInterceptor.html":{}},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"coverage.html":{}}}],["transformschema",{"_index":292,"title":{},"body":{"modules/AppModule.html":{}}}],["true",{"_index":263,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateUserDto.html":{},"injectables/CronService.html":{},"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/CustomQueryBuilder.html":{},"modules/DatabaseModule.html":{},"interfaces/IUser.html":{},"injectables/JwtStrategy.html":{},"classes/R.html":{},"guards/RequestGuard.html":{},"guards/ResponseGuard.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"miscellaneous/variables.html":{}}}],["try",{"_index":537,"title":{},"body":{"interfaces/BaseRoute.html":{},"classes/CreateUserDto.html":{},"injectables/CronService.html":{},"interfaces/CrudOptions.html":{},"classes/CrudService.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/IUser.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["ts",{"_index":480,"title":{},"body":{"classes/BaseModel.html":{},"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/CrudService.html":{},"injectables/ExcludeNullUndefinedInterceptor.html":{},"controllers/HealthController.html":{},"interfaces/IBaseModel.html":{},"classes/QueryFailedFilter.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"classes/ValidationFailedFilter.html":{},"miscellaneous/variables.html":{}}}],["twitter",{"_index":1889,"title":{},"body":{"index.html":{}}}],["type",{"_index":19,"title":{},"body":{"interfaces/APIResponse.html":{},"classes/ApiException.html":{},"interfaces/AppLaunchAction.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BaseModel.html":{},"interfaces/BaseRoute.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"injectables/CronService.html":{},"classes/CrudConfigService.html":{},"classes/CrudController.html":{},"interfaces/CrudOptions.html":{},"classes/CrudRoutesFactory.html":{},"classes/CrudService.html":{},"classes/CustomQueryBuilder.html":{},"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/ExcludeNullUndefinedInterceptor.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"controllers/HealthController.html":{},"interfaces/IBaseModel.html":{},"interfaces/ICrudService.html":{},"interfaces/IPaginationResult.html":{},"interfaces/ITag.html":{},"interfaces/IUser.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginCredsDto.html":{},"classes/PaginationParams.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"injectables/PersistedCronService.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"classes/QueryFailedFilter.html":{},"classes/R.html":{},"guards/RequestGuard.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Response.html":{},"guards/ResponseGuard.html":{},"interfaces/Result.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"classes/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/TimeoutInterceptor.html":{},"interfaces/TokenPayload.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateTagsDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/ValidationFailedFilter.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":1901,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeof",{"_index":478,"title":{},"body":{"classes/BaseModel.html":{},"classes/CustomQueryBuilder.html":{},"injectables/ExcludeNullUndefinedInterceptor.html":{},"interfaces/IBaseModel.html":{},"guards/RequestGuard.html":{},"guards/ResponseGuard.html":{},"miscellaneous/variables.html":{}}}],["types",{"_index":477,"title":{},"body":{"classes/BaseModel.html":{},"interfaces/BaseRoute.html":{},"interfaces/CrudOptions.html":{},"classes/CustomQueryBuilder.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/IBaseModel.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"dependencies.html":{}}}],["types/dotenv",{"_index":1776,"title":{},"body":{"dependencies.html":{}}}],["typescript",{"_index":324,"title":{},"body":{"modules/AppModule.html":{},"classes/BaseModel.html":{},"interfaces/BaseRoute.html":{},"injectables/CronService.html":{},"interfaces/CrudOptions.html":{},"classes/CustomQueryBuilder.html":{},"injectables/ExcludeNullUndefinedInterceptor.html":{},"interfaces/GetManyDefaultResponse.html":{},"controllers/HealthController.html":{},"interfaces/IBaseModel.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"index.html":{}}}],["ui",{"_index":1817,"title":{},"body":{"dependencies.html":{}}}],["unauthorized",{"_index":193,"title":{},"body":{"classes/ApiException.html":{}}}],["unauthorizedexception",{"_index":165,"title":{},"body":{"classes/ApiException.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["unauthorizedexception('credentials",{"_index":1400,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["unauthorizedexception('invalid",{"_index":420,"title":{},"body":{"injectables/AuthService.html":{}}}],["unauthorizedexception('unknown",{"_index":414,"title":{},"body":{"injectables/AuthService.html":{}}}],["undefined",{"_index":1004,"title":{},"body":{"classes/CrudController.html":{},"interfaces/CrudOptions.html":{},"injectables/ExcludeNullUndefinedInterceptor.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["uniqueviolationerror",{"_index":1453,"title":{},"body":{"classes/QueryFailedFilter.html":{}}}],["unit",{"_index":1863,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":146,"title":{},"body":{"classes/ApiException.html":{},"classes/CrudController.html":{},"classes/CrudService.html":{},"classes/CustomQueryBuilder.html":{},"injectables/ExcludeNullUndefinedInterceptor.html":{},"miscellaneous/functions.html":{}}}],["until",{"_index":316,"title":{},"body":{"modules/AppModule.html":{}}}],["up",{"_index":1729,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["up(knex",{"_index":1839,"title":{},"body":{"miscellaneous/functions.html":{}}}],["update",{"_index":533,"title":{},"body":{"interfaces/BaseRoute.html":{},"classes/CrudController.html":{},"interfaces/CrudOptions.html":{},"classes/CrudService.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ICrudService.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["update(@param('id",{"_index":1054,"title":{},"body":{"classes/CrudController.html":{}}}],["update(id",{"_index":1023,"title":{},"body":{"classes/CrudController.html":{},"classes/CrudService.html":{},"interfaces/ICrudService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["updated",{"_index":1025,"title":{},"body":{"classes/CrudController.html":{}}}],["updated_at",{"_index":431,"title":{},"body":{"classes/BaseModel.html":{},"interfaces/IBaseModel.html":{},"classes/Tag.html":{},"classes/User.html":{}}}],["updateonebase",{"_index":504,"title":{},"body":{"interfaces/BaseRoute.html":{},"interfaces/CrudOptions.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"miscellaneous/typealiases.html":{}}}],["updates",{"_index":1024,"title":{},"body":{"classes/CrudController.html":{},"classes/CrudService.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["updatetagsdto",{"_index":600,"title":{"classes/UpdateTagsDto.html":{}},"body":{"classes/CreateTagsDto.html":{},"interfaces/ITag.html":{},"classes/Tag.html":{},"controllers/TagsController.html":{},"classes/UpdateTagsDto.html":{},"coverage.html":{}}}],["updateuserdto",{"_index":663,"title":{"classes/UpdateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"interfaces/IUser.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["used",{"_index":582,"title":{},"body":{"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"interfaces/ITag.html":{},"interfaces/IUser.html":{},"classes/QueryFailedFilter.html":{},"classes/Tag.html":{},"classes/UpdateTagsDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/ValidationFailedFilter.html":{}}}],["usefactory",{"_index":383,"title":{},"body":{"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["useguards",{"_index":342,"title":{},"body":{"controllers/AuthController.html":{},"classes/LoginCredsDto.html":{},"controllers/TagsController.html":{}}}],["useguards(authguard('jwt",{"_index":1574,"title":{},"body":{"controllers/TagsController.html":{}}}],["useguards(authguard('local",{"_index":363,"title":{},"body":{"controllers/AuthController.html":{},"classes/LoginCredsDto.html":{}}}],["useguards(undefined)@post('login",{"_index":337,"title":{},"body":{"controllers/AuthController.html":{}}}],["usenullasdefault",{"_index":1180,"title":{},"body":{"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["user",{"_index":53,"title":{"classes/User.html":{}},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/IUser.html":{},"injectables/JwtStrategy.html":{},"classes/LoginCredsDto.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["user.model",{"_index":1642,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["user.password",{"_index":418,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["user.tojson",{"_index":421,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.ts",{"_index":1736,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["user?.password",{"_index":1664,"title":{},"body":{"injectables/UsersService.html":{}}}],["useraddress",{"_index":70,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["usercontacts",{"_index":71,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["useremail",{"_index":72,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["userid",{"_index":129,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["username",{"_index":73,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"classes/CreateUserDto.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/IUser.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["usernamefield",{"_index":1390,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["userpost",{"_index":85,"title":{"interfaces/UserPost.html":{}},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{},"coverage.html":{}}}],["userposts",{"_index":99,"title":{"interfaces/UserPosts.html":{}},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{},"coverage.html":{}}}],["users",{"_index":1639,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users.controller",{"_index":1652,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.service",{"_index":1643,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users/user.model",{"_index":1106,"title":{},"body":{"classes/CrudService.html":{},"modules/DatabaseModule.html":{}}}],["users/users.module",{"_index":259,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["users/users.service",{"_index":350,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/LoginCredsDto.html":{}}}],["userscontroller",{"_index":1632,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["userservice",{"_index":362,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/LoginCredsDto.html":{}}}],["usershape",{"_index":660,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/IUser.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"miscellaneous/typealiases.html":{}}}],["usersmodule",{"_index":224,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersservice",{"_index":349,"title":{"injectables/UsersService.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/LoginCredsDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["usesid",{"_index":54,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["usevalue",{"_index":1175,"title":{},"body":{"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["using",{"_index":633,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/IUser.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["utils",{"_index":807,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["uuid",{"_index":511,"title":{},"body":{"interfaces/BaseRoute.html":{},"interfaces/CrudOptions.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{}}}],["v",{"_index":1283,"title":{},"body":{"injectables/ExcludeNullUndefinedInterceptor.html":{}}}],["val",{"_index":1920,"title":{},"body":{"miscellaneous/variables.html":{}}}],["val.length",{"_index":1923,"title":{},"body":{"miscellaneous/variables.html":{}}}],["valid('development",{"_index":276,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["validate",{"_index":1365,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["validate(email",{"_index":1393,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["validate(payload",{"_index":1367,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validateuser",{"_index":394,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser(email",{"_index":407,"title":{},"body":{"injectables/AuthService.html":{}}}],["validation",{"_index":521,"title":{},"body":{"interfaces/BaseRoute.html":{},"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"interfaces/CrudOptions.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ITag.html":{},"interfaces/IUser.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"classes/Tag.html":{},"classes/UpdateTagsDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/ValidationFailedFilter.html":{}}}],["validationerror",{"_index":1668,"title":{},"body":{"classes/ValidationFailedFilter.html":{}}}],["validationerrorcode",{"_index":1671,"title":{},"body":{"classes/ValidationFailedFilter.html":{}}}],["validationerrortype",{"_index":1673,"title":{},"body":{"classes/ValidationFailedFilter.html":{}}}],["validationfailedfilter",{"_index":1666,"title":{"classes/ValidationFailedFilter.html":{}},"body":{"classes/ValidationFailedFilter.html":{},"coverage.html":{}}}],["validationoptions",{"_index":264,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["validationpipeoptions",{"_index":495,"title":{},"body":{"interfaces/BaseRoute.html":{},"interfaces/CrudOptions.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{}}}],["validationschema",{"_index":269,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["validator",{"_index":347,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"classes/EmailScheduleDto.html":{},"interfaces/IPaginationResult.html":{},"interfaces/ITag.html":{},"interfaces/IUser.html":{},"classes/LoginCredsDto.html":{},"classes/PaginationParams.html":{},"classes/Tag.html":{},"classes/UpdateTagsDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"dependencies.html":{}}}],["value",{"_index":437,"title":{},"body":{"classes/BaseModel.html":{},"injectables/CronService.html":{},"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/CrudService.html":{},"classes/CustomQueryBuilder.html":{},"injectables/EmailSchedulingService.html":{},"injectables/ExcludeNullUndefinedInterceptor.html":{},"injectables/LocalStrategy.html":{},"injectables/PersistedCronService.html":{},"classes/R.html":{},"guards/RequestGuard.html":{},"guards/ResponseGuard.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"classes/Tag.html":{},"injectables/TagsService.html":{},"injectables/TimeoutInterceptor.html":{},"classes/User.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["value.length",{"_index":1148,"title":{},"body":{"classes/CustomQueryBuilder.html":{}}}],["value.map(recursivelystripnullvalues",{"_index":1279,"title":{},"body":{"injectables/ExcludeNullUndefinedInterceptor.html":{}}}],["value.nextdates().todate",{"_index":756,"title":{},"body":{"injectables/CronService.html":{}}}],["value.trim",{"_index":1506,"title":{},"body":{"guards/RequestGuard.html":{}}}],["values",{"_index":1277,"title":{},"body":{"injectables/ExcludeNullUndefinedInterceptor.html":{},"miscellaneous/functions.html":{}}}],["var",{"_index":541,"title":{},"body":{"interfaces/BaseRoute.html":{},"interfaces/CrudOptions.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{}}}],["variable",{"_index":1678,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1910,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["various",{"_index":625,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/IUser.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["viewscont",{"_index":121,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["visibility",{"_index":462,"title":{},"body":{"classes/BaseModel.html":{},"interfaces/IBaseModel.html":{},"dependencies.html":{}}}],["visibilityplugin",{"_index":461,"title":{},"body":{"classes/BaseModel.html":{},"interfaces/IBaseModel.html":{}}}],["void",{"_index":237,"title":{},"body":{"modules/AppModule.html":{},"injectables/CronService.html":{},"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"injectables/EmailService.html":{},"controllers/HealthController.html":{},"classes/QueryFailedFilter.html":{},"classes/R.html":{},"classes/Swagger.html":{},"classes/ValidationFailedFilter.html":{}}}],["watch",{"_index":1859,"title":{},"body":{"index.html":{}}}],["website",{"_index":1887,"title":{},"body":{"index.html":{}}}],["went",{"_index":1524,"title":{},"body":{"guards/ResponseGuard.html":{}}}],["whenever",{"_index":583,"title":{},"body":{"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"interfaces/ITag.html":{},"interfaces/IUser.html":{},"classes/Tag.html":{},"classes/UpdateTagsDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["whether",{"_index":1493,"title":{},"body":{"guards/RequestGuard.html":{},"guards/ResponseGuard.html":{}}}],["whitespace",{"_index":634,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/IUser.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["withmeta",{"_index":1535,"title":{},"body":{"guards/ResponseGuard.html":{}}}],["withmeta(data",{"_index":1530,"title":{},"body":{"guards/ResponseGuard.html":{}}}],["without",{"_index":595,"title":{},"body":{"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"interfaces/ITag.html":{},"interfaces/IUser.html":{},"classes/Tag.html":{},"classes/UpdateTagsDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["withparams",{"_index":492,"title":{},"body":{"interfaces/BaseRoute.html":{},"classes/CrudConfigService.html":{},"interfaces/CrudOptions.html":{},"classes/CrudRoutesFactory.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["world",{"_index":208,"title":{},"body":{"controllers/AppController.html":{}}}],["writable",{"_index":868,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["wrong",{"_index":1525,"title":{},"body":{"guards/ResponseGuard.html":{}}}],["x",{"_index":825,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["yes",{"_index":236,"title":{},"body":{"modules/AppModule.html":{},"controllers/HealthController.html":{},"interfaces/ICrudService.html":{},"classes/R.html":{},"miscellaneous/functions.html":{}}}],["you'd",{"_index":1877,"title":{},"body":{"index.html":{}}}],["zoom",{"_index":225,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CronModule.html":{},"modules/EmailModule.html":{},"modules/EmailSchedulingModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"interfaces/APIResponse.html":{"url":"interfaces/APIResponse.html","title":"interface - APIResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  APIResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/domain.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        count\n                                \n                                \n                                        data\n                                \n                                \n                                            Optional\n                                        error\n                                \n                                \n                                            Optional\n                                        message\n                                \n                                \n                                            Optional\n                                        page\n                                \n                                \n                                            Optional\n                                        pageCount\n                                \n                                \n                                        statusCode\n                                \n                                \n                                            Optional\n                                        total\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        count\n                                    \n                                \n                                \n                                    \n                                        count:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                    \n                                \n                                \n                                    \n                                        data:     T\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        error\n                                    \n                                \n                                \n                                    \n                                        error:         APIError\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         APIError\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                    \n                                \n                                \n                                    \n                                        message:     string | string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string | string[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        page\n                                    \n                                \n                                \n                                    \n                                        page:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        pageCount\n                                    \n                                \n                                \n                                    \n                                        pageCount:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        statusCode\n                                    \n                                \n                                \n                                    \n                                        statusCode:     HttpStatus\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     HttpStatus\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        total\n                                    \n                                \n                                \n                                    \n                                        total:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { HttpStatus } from '@nestjs/common'\n\nexport type Results =\n    | GetAppLaunchData\n    | GetUserProfile\n    | GetUserPosts\n    | GetComments\n    | GetRescueList\n    | GetFollowers\n    | GetFollowing\n\nexport type APIError = Error | string | null\n\nexport interface Result {\n    data: T\n    error?: APIError\n    message?: string | string[]\n    statusCode: HttpStatus\n}\n\nexport interface APIResponse {\n    data: T\n    error?: APIError\n    message?: string | string[]\n    statusCode: HttpStatus\n\n    count?: number\n    page?: number\n    pageCount?: number\n    total?: number\n}\n\nexport interface GetAppLaunchData {\n    link: 'api:/'\n    response: APIResponse\n}\n\nexport interface GetUserProfile {\n    link: 'api:v1/user/getUserProfile?userId=25'\n    response: APIResponse\n}\n\nexport interface GetUserPosts {\n    link: 'api:v1/user/getUserPosts?pageNo=0&pageSize=25'\n    response: APIResponse\n}\n\nexport interface GetRescueList {\n    link: 'api:v1/rescue/getRescueList?pageNo=0&pageSize=10&status=pending|inProgress|completed|nearest'\n    response: APIResponse\n}\n\nexport interface GetComments {\n    link: 'api:v1/rescue/getComments?pageNo=0&pageSize=10&postId=1230'\n    response: APIResponse\n}\n\nexport interface GetFollowers {\n    link: 'api:v1/rescue/getUserFollowers?userId=1230'\n    response: APIResponse\n}\n\nexport interface GetFollowing {\n    link: 'api:v1/rescue/getUserFollowing?userId=1230'\n    response: APIResponse\n}\n\nexport interface AppLaunchAction {\n    actionId: number\n    action: string\n    isActive: boolean\n    subject?: string\n}\n\nexport interface User {\n    usesId: number\n\n    coverImage: string\n    following: boolean\n    gender: string\n    isOwnProfile: number\n    isRescuer: boolean\n    latitude: number\n    longitude: number\n    numberOfFollowers: number\n    numberOfFollowing: number\n    numberOfPosts: number\n    numberOfRescuesCompleted: number\n    numberOfRescuesCreated: number\n    numberOfRescuesInProgress: number\n    profileImage: string\n    rescuer: boolean\n    userAddress: string\n    userContacts: string\n    userEmail: string\n    userName: string\n    badge: {\n        badgeId: number\n        badgeName: string\n        badgeDescription: string\n        recuesCompletionNeeded: number\n    }\n    setting: {\n        showMyContacts: boolean\n        getNotifications: boolean\n    }\n}\n\nexport interface PostType {\n    postTypeId: number\n    postType: string\n}\n\nexport interface PostedByUser {\n    usesId: number\n    badgeName: string\n    following: boolean\n    profileImage: string\n    rescuer: boolean\n    userName: string\n}\n\nexport interface UserPost {\n    postId: number\n    commentsCount: number\n    isUserReactedToPost: boolean\n    ownPage: boolean\n    postBy: PostedByUser\n    postImage: string\n    postTime: string\n    postType: PostType\n    postVideo: string\n    reactionsCount: number\n    timeAgo: string\n\n    adCorporateLogoUrl: string | null\n    corporateDescription: string | null\n    corporateName: string | null\n}\n\nexport interface UserPosts {\n    isRecent: boolean\n    feed: UserPost[]\n}\n\nexport interface Rescues {\n    rescueId: number\n    animalImageUrl: string\n    distance: number\n    distanceAway: string\n    emergencyType: string\n    postedBy: string\n    postedMinAgo: string\n    rescueDate: Date\n    rescuedPetName: string\n    rescueLocality: string\n    rescuers: {\n        contact: number\n        name: string\n        profileId: number\n        profileImageUrl: string\n        rescues: boolean\n        showMyNumber: boolean\n    }\n    rescueStatus: string\n    viewsCont: number\n}\n\nexport interface RescueLists {\n    rescues: Rescues[]\n}\n\nexport interface Comment {\n    commentId: number\n    comment: string\n    commentedUseName: string\n    commentedUserId: number\n    timeAgo: string\n}\n\nexport interface Comments {\n    comments: Comment[]\n}\n\nexport interface Follower {\n    userId: number\n    userName: string\n    profileImage: string\n    areYouFollowing: boolean\n    showRemoveOption: boolean\n}\n\nexport type Following = Follower\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ApiException.html":{"url":"classes/ApiException.html","title":"class - ApiException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ApiException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/base/swagger-gen/api-errors.decorator.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                error\n                            \n                            \n                                    Optional\n                                errors\n                            \n                            \n                                    Optional\n                                message\n                            \n                            \n                                    Optional\n                                path\n                            \n                            \n                                    Optional\n                                stack\n                            \n                            \n                                    Optional\n                                status\n                            \n                            \n                                    Optional\n                                statusCode\n                            \n                            \n                                    Optional\n                                timestamp\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(message: string, error: string, stack: string, errors: unknown, path: string, statusCode: number)\n                    \n                \n                        \n                            \n                                Defined in src/base/swagger-gen/api-errors.decorator.ts:36\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        message\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        error\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        stack\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        errors\n                                                  \n                                                        \n                                                                    unknown\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        path\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        statusCode\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            error\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiPropertyOptional()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/base/swagger-gen/api-errors.decorator.ts:28\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            errors\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     unknown\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiPropertyOptional()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/base/swagger-gen/api-errors.decorator.ts:30\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            message\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiPropertyOptional()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/base/swagger-gen/api-errors.decorator.ts:24\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            path\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiPropertyOptional()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/base/swagger-gen/api-errors.decorator.ts:34\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            stack\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiPropertyOptional()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/base/swagger-gen/api-errors.decorator.ts:36\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            status\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiPropertyOptional()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/base/swagger-gen/api-errors.decorator.ts:26\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            statusCode\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiPropertyOptional()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/base/swagger-gen/api-errors.decorator.ts:22\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            timestamp\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiPropertyOptional()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/base/swagger-gen/api-errors.decorator.ts:32\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n    applyDecorators,\n    BadRequestException,\n    ConflictException,\n    ForbiddenException,\n    HttpStatus,\n    InternalServerErrorException,\n    NotFoundException,\n    UnauthorizedException,\n} from '@nestjs/common'\nimport {\n    ApiBadRequestResponse,\n    ApiForbiddenResponse,\n    ApiInternalServerErrorResponse,\n    ApiNotFoundResponse,\n    ApiUnauthorizedResponse,\n    ApiConflictResponse,\n    ApiPropertyOptional,\n} from '@nestjs/swagger'\n\nexport class ApiException {\n    @ApiPropertyOptional() statusCode?: number\n\n    @ApiPropertyOptional() message?: string\n\n    @ApiPropertyOptional() status?: string\n\n    @ApiPropertyOptional() error?: string\n\n    @ApiPropertyOptional() errors?: unknown\n\n    @ApiPropertyOptional() timestamp?: string\n\n    @ApiPropertyOptional() path?: string\n\n    @ApiPropertyOptional() stack?: string\n\n    constructor(\n        message: string,\n        error: string,\n        stack: string,\n        errors: unknown,\n        path: string,\n        statusCode: number,\n    ) {\n        this.message = message\n        this.error = error\n        this.stack = stack\n        this.errors = errors\n        this.path = path\n        this.timestamp = new Date().toISOString()\n        this.statusCode = statusCode\n        this.status = HttpStatus[statusCode]\n    }\n}\n\nexport function ApiErrors() {\n    return applyDecorators(\n        ApiBadRequestResponse({\n            type: BadRequestException,\n            description: 'BadRequestException',\n        }),\n        ApiInternalServerErrorResponse({\n            type: InternalServerErrorException,\n        }),\n        ApiUnauthorizedResponse({\n            type: UnauthorizedException,\n        }),\n        ApiForbiddenResponse({\n            type: ForbiddenException,\n        }),\n        ApiConflictResponse({\n            type: ConflictException,\n        }),\n        ApiNotFoundResponse({ type: NotFoundException, description: 'Not found' }),\n    )\n\n    return applyDecorators(\n        ApiNotFoundResponse({ type: ApiException, description: 'Not found' }),\n        ApiBadRequestResponse({ type: ApiException, description: 'Bad Request' }),\n        ApiInternalServerErrorResponse({\n            type: ApiException,\n            description: 'Internal Server Error',\n        }),\n        ApiUnauthorizedResponse({\n            type: ApiException,\n            description: 'Unauthorized',\n        }),\n        ApiForbiddenResponse({ type: ApiException, description: 'Forbidden' }),\n    )\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getHello\n                        \n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common'\nimport { ApiTags } from '@nestjs/swagger'\n\n@Controller(AppController.path)\n@ApiTags(AppController.name)\nexport class AppController {\n    static path = '/'\n\n    @Get() getHello() {\n        return 'Hello World!'\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/AppLaunchAction.html":{"url":"interfaces/AppLaunchAction.html","title":"interface - AppLaunchAction","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  AppLaunchAction\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/domain.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        action\n                                \n                                \n                                        actionId\n                                \n                                \n                                        isActive\n                                \n                                \n                                            Optional\n                                        subject\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        action\n                                    \n                                \n                                \n                                    \n                                        action:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        actionId\n                                    \n                                \n                                \n                                    \n                                        actionId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        isActive\n                                    \n                                \n                                \n                                    \n                                        isActive:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        subject\n                                    \n                                \n                                \n                                    \n                                        subject:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { HttpStatus } from '@nestjs/common'\n\nexport type Results =\n    | GetAppLaunchData\n    | GetUserProfile\n    | GetUserPosts\n    | GetComments\n    | GetRescueList\n    | GetFollowers\n    | GetFollowing\n\nexport type APIError = Error | string | null\n\nexport interface Result {\n    data: T\n    error?: APIError\n    message?: string | string[]\n    statusCode: HttpStatus\n}\n\nexport interface APIResponse {\n    data: T\n    error?: APIError\n    message?: string | string[]\n    statusCode: HttpStatus\n\n    count?: number\n    page?: number\n    pageCount?: number\n    total?: number\n}\n\nexport interface GetAppLaunchData {\n    link: 'api:/'\n    response: APIResponse\n}\n\nexport interface GetUserProfile {\n    link: 'api:v1/user/getUserProfile?userId=25'\n    response: APIResponse\n}\n\nexport interface GetUserPosts {\n    link: 'api:v1/user/getUserPosts?pageNo=0&pageSize=25'\n    response: APIResponse\n}\n\nexport interface GetRescueList {\n    link: 'api:v1/rescue/getRescueList?pageNo=0&pageSize=10&status=pending|inProgress|completed|nearest'\n    response: APIResponse\n}\n\nexport interface GetComments {\n    link: 'api:v1/rescue/getComments?pageNo=0&pageSize=10&postId=1230'\n    response: APIResponse\n}\n\nexport interface GetFollowers {\n    link: 'api:v1/rescue/getUserFollowers?userId=1230'\n    response: APIResponse\n}\n\nexport interface GetFollowing {\n    link: 'api:v1/rescue/getUserFollowing?userId=1230'\n    response: APIResponse\n}\n\nexport interface AppLaunchAction {\n    actionId: number\n    action: string\n    isActive: boolean\n    subject?: string\n}\n\nexport interface User {\n    usesId: number\n\n    coverImage: string\n    following: boolean\n    gender: string\n    isOwnProfile: number\n    isRescuer: boolean\n    latitude: number\n    longitude: number\n    numberOfFollowers: number\n    numberOfFollowing: number\n    numberOfPosts: number\n    numberOfRescuesCompleted: number\n    numberOfRescuesCreated: number\n    numberOfRescuesInProgress: number\n    profileImage: string\n    rescuer: boolean\n    userAddress: string\n    userContacts: string\n    userEmail: string\n    userName: string\n    badge: {\n        badgeId: number\n        badgeName: string\n        badgeDescription: string\n        recuesCompletionNeeded: number\n    }\n    setting: {\n        showMyContacts: boolean\n        getNotifications: boolean\n    }\n}\n\nexport interface PostType {\n    postTypeId: number\n    postType: string\n}\n\nexport interface PostedByUser {\n    usesId: number\n    badgeName: string\n    following: boolean\n    profileImage: string\n    rescuer: boolean\n    userName: string\n}\n\nexport interface UserPost {\n    postId: number\n    commentsCount: number\n    isUserReactedToPost: boolean\n    ownPage: boolean\n    postBy: PostedByUser\n    postImage: string\n    postTime: string\n    postType: PostType\n    postVideo: string\n    reactionsCount: number\n    timeAgo: string\n\n    adCorporateLogoUrl: string | null\n    corporateDescription: string | null\n    corporateName: string | null\n}\n\nexport interface UserPosts {\n    isRecent: boolean\n    feed: UserPost[]\n}\n\nexport interface Rescues {\n    rescueId: number\n    animalImageUrl: string\n    distance: number\n    distanceAway: string\n    emergencyType: string\n    postedBy: string\n    postedMinAgo: string\n    rescueDate: Date\n    rescuedPetName: string\n    rescueLocality: string\n    rescuers: {\n        contact: number\n        name: string\n        profileId: number\n        profileImageUrl: string\n        rescues: boolean\n        showMyNumber: boolean\n    }\n    rescueStatus: string\n    viewsCont: number\n}\n\nexport interface RescueLists {\n    rescues: Rescues[]\n}\n\nexport interface Comment {\n    commentId: number\n    comment: string\n    commentedUseName: string\n    commentedUserId: number\n    timeAgo: string\n}\n\nexport interface Comments {\n    comments: Comment[]\n}\n\nexport interface Follower {\n    userId: number\n    userName: string\n    profileImage: string\n    areYouFollowing: boolean\n    showRemoveOption: boolean\n}\n\nexport type Following = Follower\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\n\n\nEmailSchedulingModule\n\nEmailSchedulingModule\n\nAppModule -->\n\nEmailSchedulingModule->AppModule\n\n\n\n\n\nTagsModule\n\nTagsModule\n\nAppModule -->\n\nTagsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n        \n            Description\n        \n        \n            App module\n\n        \n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                        \n                            HealthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            DatabaseModule\n                        \n                        \n                            EmailSchedulingModule\n                        \n                        \n                            TagsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onApplicationShutdown\n                        \n                        \n                    \n                \n            \n            \n                \nonApplicationShutdown(signal?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app.module.ts:79\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    signal\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onModuleInit\n                        \n                        \n                    \n                \n            \n            \n                \nonModuleInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app.module.ts:75\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import { Module, OnApplicationShutdown, OnModuleInit } from '@nestjs/common'\nimport { ConfigModule } from '@nestjs/config'\nimport { GraphQLModule } from '@nestjs/graphql'\nimport { ScheduleModule } from '@nestjs/schedule'\nimport { TerminusModule } from '@nestjs/terminus'\n\nimport * as Joi from '@hapi/joi'\n\nimport { AppController } from './app.controller'\nimport { AuthModule } from './auth/auth.module'\nimport { CronModule } from './cron/cron.module'\nimport { DatabaseModule, graphQlSchema } from './database/database.module'\nimport { EmailSchedulingModule } from './emailScheduling/emailScheduling.module'\nimport { HealthController } from './health/health.controller'\nimport { TagsModule } from './tags/tags.module'\nimport { UsersModule } from './users/users.module'\n\nconst ConfigModuleOptions = {\n    isGlobal: true,\n    validationOptions: {\n        allowUnknown: true,\n        abortEarly: true,\n    },\n    /* eslint-disable */\n    validationSchema: Joi.object({\n        PORT: Joi.number().default(3000),\n        NODE_ENV: Joi.string()\n            .required()\n            .valid('development', 'production', 'test', 'provision')\n            .default('development'),\n\n        JWTKEY: Joi.string().required(),\n        TOKEN_EXPIRATION: Joi.string().required(),\n\n        database: Joi.string().required(),\n        type: Joi.string().required(),\n        logging: Joi.string().required(),\n        synchronize: Joi.string().required(),\n    }),\n    /* eslint-enable */\n}\n\n/**\n * App module\n */\n@Module({\n    controllers: [AppController, HealthController],\n    imports: [\n        ConfigModule.forRoot(ConfigModuleOptions),\n        DatabaseModule,\n        GraphQLModule.forRoot({\n            debug: true,\n            playground: true,\n            transformSchema: () => graphQlSchema,\n        }),\n        TerminusModule, // Health module\n        ScheduleModule.forRoot(), // CronModules deps\n        // CronModule,\n        EmailSchedulingModule,\n        AuthModule,\n        TagsModule,\n        UsersModule,\n    ],\n    providers: [],\n})\nexport class AppModule implements OnModuleInit, OnApplicationShutdown {\n    /*\n     * When the application receives a termination signal it will call any registered\n     * onModuleDestroy(), beforeApplicationShutdown(), then onApplicationShutdown() methods\n     * (in the sequence described above) with the corresponding signal as the first parameter.\n     * If a registered function awaits an asynchronous call (returns a promise), Nest will not\n     * continue in the sequence until the promise is resolved or rejected.\n     */\n\n    onModuleInit(): void {\n        console.info(`ModuleInit - AppModule has been initialized.`)\n    }\n\n    onApplicationShutdown(signal?: string): void {\n        console.error(\n            // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n            `ApplicationShutdown - AppModule has been shutdown with ${signal} signal`,\n        )\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            login\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    login(req: Request, loginCreds: LoginCredsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Post('login')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    loginCreds\n                                    \n                                                LoginCredsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, HttpStatus, Post, Req, UseGuards } from '@nestjs/common'\nimport { AuthGuard } from '@nestjs/passport'\nimport { ApiProperty, ApiTags } from '@nestjs/swagger'\n\nimport { IsNotEmpty } from 'class-validator'\nimport type { Request } from 'express'\n\nimport { UsersService } from '../users/users.service'\nimport { AuthService } from './auth.service'\n\nexport class LoginCredsDto {\n    @ApiProperty({ example: 'admin@demo.com' })\n    @IsNotEmpty()\n    readonly email!: string\n\n    @ApiProperty({ example: '12345678' })\n    @IsNotEmpty()\n    readonly password!: string\n}\n\n@Controller(AuthController.path)\n@ApiTags(AuthController.name)\nexport class AuthController {\n    static path = 'auth'\n\n    constructor(\n        readonly authService: AuthService,\n        readonly userService: UsersService,\n    ) {}\n\n    @UseGuards(AuthGuard('local'))\n    @Post('login')\n    async login(\n        @Req() req: Request,\n        @Body() loginCreds: LoginCredsDto,\n    ): Promise {\n        const { user } = req\n        const { email, password } = loginCreds\n\n        const data = await this.authService.login(user)\n\n        return {\n            data,\n            statusCode: HttpStatus.OK,\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_AuthModule_imports\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n        \n            Description\n        \n        \n            Auth module\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            LocalStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common'\nimport { ConfigModule, ConfigService } from '@nestjs/config'\nimport { JwtModule } from '@nestjs/jwt'\nimport { PassportModule } from '@nestjs/passport'\n\nimport { UsersModule } from '../users/users.module'\nimport { AuthController } from './auth.controller'\nimport { AuthService } from './auth.service'\nimport { JwtStrategy } from './jwt.strategy'\nimport { LocalStrategy } from './local.strategy'\n\n/**\n * Auth module\n */\n@Module({\n    imports: [\n        ConfigModule,\n        UsersModule,\n        PassportModule,\n        JwtModule.registerAsync({\n            imports: [ConfigModule],\n            inject: [ConfigService],\n            useFactory: async (\n                configService: ConfigService,\n            ) => ({\n                secret: configService.get('JWTKEY'),\n                signOptions: {\n                    expiresIn: configService.get('TOKEN_EXPIRATION'),\n                },\n            }),\n        }),\n    ],\n    providers: [AuthService, LocalStrategy, JwtStrategy],\n    controllers: [AuthController],\n    exports: [PassportModule, JwtModule],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                comparePassword\n                            \n                            \n                                    Async\n                                generateToken\n                            \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UsersService, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            comparePassword\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    comparePassword(enteredPassword: string, dbPassword: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    enteredPassword\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dbPassword\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            generateToken\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    generateToken(user: Record)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                Record\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            login\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    login(user: Record)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                Record\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validateUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validateUser(email: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common'\nimport { JwtService } from '@nestjs/jwt'\n\nimport * as bcrypt from 'bcrypt'\n\nimport { UsersService } from '../users/users.service'\n\n@Injectable()\nexport class AuthService {\n    constructor(\n        readonly userService: UsersService,\n        readonly jwtService: JwtService,\n    ) {}\n\n    async comparePassword(enteredPassword: string, dbPassword: string) {\n        return bcrypt.compare(enteredPassword, dbPassword)\n    }\n\n    async generateToken(user: Record) {\n        return this.jwtService.signAsync(user)\n    }\n\n    async validateUser(email: string, password: string) {\n        const user = await this.userService.findOneByEmail(email)\n\n        if (!user)\n            return Promise.reject(\n                new UnauthorizedException('Unknown User Credentials'),\n            )\n\n        const match = await this.comparePassword(password, user.password)\n\n        if (!match)\n            return Promise.reject(new UnauthorizedException('Invalid Credentials'))\n\n        return user.toJSON()\n    }\n\n    async login(user: Record) {\n        return this.generateToken(user)\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BaseModel.html":{"url":"classes/BaseModel.html","title":"class - BaseModel","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BaseModel\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/models/base.model.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                            IBaseModel\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                created_at\n                            \n                            \n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Static\n                                hidden\n                            \n                            \n                                id\n                            \n                            \n                                    Static\n                                QueryBuilder\n                            \n                            \n                                updated_at\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                $beforeUpdate\n                            \n                            \n                                    Async\n                                fetchRelation\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            created_at\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                        \n                            \n                                    Defined in src/database/models/base.model.ts:39\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            deleted_at\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     any | null\n\n                        \n                    \n                        \n                            \n                                    Defined in src/database/models/base.model.ts:43\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            hidden\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : [\n        'salt',\n        'password',\n        'created_at',\n        'updated_at',\n        // 'deleted_at'\n    ]\n                        \n                    \n                        \n                            \n                                    Defined in src/database/models/base.model.ts:25\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/database/models/base.model.ts:37\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            QueryBuilder\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : CustomQueryBuilder\n                        \n                    \n                        \n                            \n                                    Defined in src/database/models/base.model.ts:35\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updated_at\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                        \n                            \n                                    Defined in src/database/models/base.model.ts:41\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            $beforeUpdate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    $beforeUpdate(opt: ModelOptions, queryContext: QueryContext)\n                \n            \n\n\n            \n                \n                    Defined in src/database/models/base.model.ts:60\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    opt\n                                    \n                                            ModelOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    queryContext\n                                    \n                                            QueryContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            fetchRelation\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    fetchRelation(expression: string | Record, options: Objection.FetchGraphOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/database/models/base.model.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    expression\n                                    \n                                                string | Record\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                            Objection.FetchGraphOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import Objection, {\n    raw,\n    mixin,\n    Model,\n    ModelOptions,\n    QueryContext,\n    RelationExpression,\n} from 'objection'\nimport { DBErrors } from 'objection-db-errors'\nimport visibilityPlugin from 'objection-visibility'\n\nimport { CustomQueryBuilder } from './helpers'\n\nexport interface IBaseModel {\n    id: number\n    created_at: any\n    updated_at: any\n    deleted_at?: any\n}\n\nexport class BaseModel\n    extends mixin(Model, [visibilityPlugin, DBErrors])\n    implements IBaseModel {\n    // hidden fields to filter from query result\n    static hidden = [\n        'salt',\n        'password',\n        'created_at',\n        'updated_at',\n        // 'deleted_at'\n    ]\n\n    // QueryBuilderType!: CustomQueryBuilder // custom query builder for pagination\n\n    static QueryBuilder = CustomQueryBuilder\n\n    id!: number\n\n    created_at: any\n\n    updated_at: any\n\n    deleted_at?: any | null\n\n    // fetch data with relation mapping\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    async fetchRelation(\n        expression: string | Record,\n        options: Objection.FetchGraphOptions,\n    ) {\n        if (typeof expression === 'string' && expression.toString() in this) {\n            // @ts-ignore\n            if (this[expression.toString()]) return this\n        }\n\n        await this.$fetchGraph(expression, options)\n        return this\n    }\n\n    async $beforeUpdate(opt: ModelOptions, queryContext: QueryContext) {\n        await super.$beforeUpdate(opt, queryContext)\n\n        this.updated_at = raw('CURRENT_TIMESTAMP') // new Date().toISOString() // fn.now()\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/BaseRoute.html":{"url":"interfaces/BaseRoute.html","title":"interface - BaseRoute","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  BaseRoute\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/base/swagger-gen/utils/other.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        enable\n                                \n                                \n                                        method\n                                \n                                \n                                        name\n                                \n                                \n                                        override\n                                \n                                \n                                        path\n                                \n                                \n                                        withParams\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        enable\n                                    \n                                \n                                \n                                    \n                                        enable:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        method\n                                    \n                                \n                                \n                                    \n                                        method:         RequestMethod\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         RequestMethod\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                    \n                                \n                                \n                                    \n                                        name:         BaseRouteName\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         BaseRouteName\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        override\n                                    \n                                \n                                \n                                    \n                                        override:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        path\n                                    \n                                \n                                \n                                    \n                                        path:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        withParams\n                                    \n                                \n                                \n                                    \n                                        withParams:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { RequestMethod, ValidationPipeOptions } from '@nestjs/common'\nimport { SwaggerEnumType } from '@nestjs/swagger/dist/types/swagger-enum.type'\n\nexport declare type BaseRouteName =\n    | 'getManyBase'\n    | 'getOneBase'\n    | 'createOneBase'\n    | 'createManyBase'\n    | 'updateOneBase'\n    | 'replaceOneBase'\n    | 'deleteOneBase'\n    | 'getOne'\n\nexport interface BaseRoute {\n    name: BaseRouteName\n    path: string\n    method: RequestMethod\n    enable: boolean\n    override: boolean\n    withParams: boolean\n}\n\nexport interface GetManyDefaultResponse {\n    data: T[]\n    count: number\n    total: number\n    page: number\n    pageCount: number\n}\n\nexport interface ParamOption {\n    field?: string\n    type?: 'number' | 'string' | 'uuid'\n    enum?: SwaggerEnumType\n    primary?: boolean\n    disabled?: boolean\n}\n\nexport interface ParamsOptions {\n    [key: string]: ParamOption\n}\n\nexport interface CrudOptions {\n    model: {\n        type: { name: string }\n    }\n    dto?: {}\n    routes?: {\n        deleteOneBase?: { returnDeleted?: boolean }\n    }\n    validation?: ValidationPipeOptions | false\n    params?: ParamsOptions\n    query?: {\n        limit?: number\n        maxLimit?: number\n        cache?: number | false\n        alwaysPaginate?: boolean\n    }\n    serialize?: {\n        getMany?: false | object\n        get?: false | object\n        create?: false | object\n        createMany?: false | object\n        update?: false | object\n        replace?: false | object\n        delete?: false | object\n    }\n}\n\nexport function safeRequire(path: string): T | null {\n    try {\n        // eslint-disable-next-line global-require,@typescript-eslint/no-var-requires,import/no-dynamic-require\n        const pack = require(path)\n        return pack\n    } catch (_) {\n        return null\n    }\n}\n\nexport const swagger = safeRequire('@nestjs/swagger')\nexport const swaggerConst = safeRequire('@nestjs/swagger/dist/constants')\n\nexport function ApiProperty(options?: any): PropertyDecorator {\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    return (target: object, propertyKey: string | symbol) => {\n        if (swagger) {\n            const ApiPropertyDecorator =\n                swagger.ApiProperty || swagger.ApiModelProperty\n            ApiPropertyDecorator(options)(target, propertyKey)\n        }\n    }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Comment.html":{"url":"interfaces/Comment.html","title":"interface - Comment","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Comment\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/domain.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        comment\n                                \n                                \n                                        commentedUseName\n                                \n                                \n                                        commentedUserId\n                                \n                                \n                                        commentId\n                                \n                                \n                                        timeAgo\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        comment\n                                    \n                                \n                                \n                                    \n                                        comment:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        commentedUseName\n                                    \n                                \n                                \n                                    \n                                        commentedUseName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        commentedUserId\n                                    \n                                \n                                \n                                    \n                                        commentedUserId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        commentId\n                                    \n                                \n                                \n                                    \n                                        commentId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        timeAgo\n                                    \n                                \n                                \n                                    \n                                        timeAgo:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { HttpStatus } from '@nestjs/common'\n\nexport type Results =\n    | GetAppLaunchData\n    | GetUserProfile\n    | GetUserPosts\n    | GetComments\n    | GetRescueList\n    | GetFollowers\n    | GetFollowing\n\nexport type APIError = Error | string | null\n\nexport interface Result {\n    data: T\n    error?: APIError\n    message?: string | string[]\n    statusCode: HttpStatus\n}\n\nexport interface APIResponse {\n    data: T\n    error?: APIError\n    message?: string | string[]\n    statusCode: HttpStatus\n\n    count?: number\n    page?: number\n    pageCount?: number\n    total?: number\n}\n\nexport interface GetAppLaunchData {\n    link: 'api:/'\n    response: APIResponse\n}\n\nexport interface GetUserProfile {\n    link: 'api:v1/user/getUserProfile?userId=25'\n    response: APIResponse\n}\n\nexport interface GetUserPosts {\n    link: 'api:v1/user/getUserPosts?pageNo=0&pageSize=25'\n    response: APIResponse\n}\n\nexport interface GetRescueList {\n    link: 'api:v1/rescue/getRescueList?pageNo=0&pageSize=10&status=pending|inProgress|completed|nearest'\n    response: APIResponse\n}\n\nexport interface GetComments {\n    link: 'api:v1/rescue/getComments?pageNo=0&pageSize=10&postId=1230'\n    response: APIResponse\n}\n\nexport interface GetFollowers {\n    link: 'api:v1/rescue/getUserFollowers?userId=1230'\n    response: APIResponse\n}\n\nexport interface GetFollowing {\n    link: 'api:v1/rescue/getUserFollowing?userId=1230'\n    response: APIResponse\n}\n\nexport interface AppLaunchAction {\n    actionId: number\n    action: string\n    isActive: boolean\n    subject?: string\n}\n\nexport interface User {\n    usesId: number\n\n    coverImage: string\n    following: boolean\n    gender: string\n    isOwnProfile: number\n    isRescuer: boolean\n    latitude: number\n    longitude: number\n    numberOfFollowers: number\n    numberOfFollowing: number\n    numberOfPosts: number\n    numberOfRescuesCompleted: number\n    numberOfRescuesCreated: number\n    numberOfRescuesInProgress: number\n    profileImage: string\n    rescuer: boolean\n    userAddress: string\n    userContacts: string\n    userEmail: string\n    userName: string\n    badge: {\n        badgeId: number\n        badgeName: string\n        badgeDescription: string\n        recuesCompletionNeeded: number\n    }\n    setting: {\n        showMyContacts: boolean\n        getNotifications: boolean\n    }\n}\n\nexport interface PostType {\n    postTypeId: number\n    postType: string\n}\n\nexport interface PostedByUser {\n    usesId: number\n    badgeName: string\n    following: boolean\n    profileImage: string\n    rescuer: boolean\n    userName: string\n}\n\nexport interface UserPost {\n    postId: number\n    commentsCount: number\n    isUserReactedToPost: boolean\n    ownPage: boolean\n    postBy: PostedByUser\n    postImage: string\n    postTime: string\n    postType: PostType\n    postVideo: string\n    reactionsCount: number\n    timeAgo: string\n\n    adCorporateLogoUrl: string | null\n    corporateDescription: string | null\n    corporateName: string | null\n}\n\nexport interface UserPosts {\n    isRecent: boolean\n    feed: UserPost[]\n}\n\nexport interface Rescues {\n    rescueId: number\n    animalImageUrl: string\n    distance: number\n    distanceAway: string\n    emergencyType: string\n    postedBy: string\n    postedMinAgo: string\n    rescueDate: Date\n    rescuedPetName: string\n    rescueLocality: string\n    rescuers: {\n        contact: number\n        name: string\n        profileId: number\n        profileImageUrl: string\n        rescues: boolean\n        showMyNumber: boolean\n    }\n    rescueStatus: string\n    viewsCont: number\n}\n\nexport interface RescueLists {\n    rescues: Rescues[]\n}\n\nexport interface Comment {\n    commentId: number\n    comment: string\n    commentedUseName: string\n    commentedUserId: number\n    timeAgo: string\n}\n\nexport interface Comments {\n    comments: Comment[]\n}\n\nexport interface Follower {\n    userId: number\n    userName: string\n    profileImage: string\n    areYouFollowing: boolean\n    showRemoveOption: boolean\n}\n\nexport type Following = Follower\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Comments.html":{"url":"interfaces/Comments.html","title":"interface - Comments","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Comments\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/domain.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        comments\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        comments\n                                    \n                                \n                                \n                                    \n                                        comments:         Comment[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Comment[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { HttpStatus } from '@nestjs/common'\n\nexport type Results =\n    | GetAppLaunchData\n    | GetUserProfile\n    | GetUserPosts\n    | GetComments\n    | GetRescueList\n    | GetFollowers\n    | GetFollowing\n\nexport type APIError = Error | string | null\n\nexport interface Result {\n    data: T\n    error?: APIError\n    message?: string | string[]\n    statusCode: HttpStatus\n}\n\nexport interface APIResponse {\n    data: T\n    error?: APIError\n    message?: string | string[]\n    statusCode: HttpStatus\n\n    count?: number\n    page?: number\n    pageCount?: number\n    total?: number\n}\n\nexport interface GetAppLaunchData {\n    link: 'api:/'\n    response: APIResponse\n}\n\nexport interface GetUserProfile {\n    link: 'api:v1/user/getUserProfile?userId=25'\n    response: APIResponse\n}\n\nexport interface GetUserPosts {\n    link: 'api:v1/user/getUserPosts?pageNo=0&pageSize=25'\n    response: APIResponse\n}\n\nexport interface GetRescueList {\n    link: 'api:v1/rescue/getRescueList?pageNo=0&pageSize=10&status=pending|inProgress|completed|nearest'\n    response: APIResponse\n}\n\nexport interface GetComments {\n    link: 'api:v1/rescue/getComments?pageNo=0&pageSize=10&postId=1230'\n    response: APIResponse\n}\n\nexport interface GetFollowers {\n    link: 'api:v1/rescue/getUserFollowers?userId=1230'\n    response: APIResponse\n}\n\nexport interface GetFollowing {\n    link: 'api:v1/rescue/getUserFollowing?userId=1230'\n    response: APIResponse\n}\n\nexport interface AppLaunchAction {\n    actionId: number\n    action: string\n    isActive: boolean\n    subject?: string\n}\n\nexport interface User {\n    usesId: number\n\n    coverImage: string\n    following: boolean\n    gender: string\n    isOwnProfile: number\n    isRescuer: boolean\n    latitude: number\n    longitude: number\n    numberOfFollowers: number\n    numberOfFollowing: number\n    numberOfPosts: number\n    numberOfRescuesCompleted: number\n    numberOfRescuesCreated: number\n    numberOfRescuesInProgress: number\n    profileImage: string\n    rescuer: boolean\n    userAddress: string\n    userContacts: string\n    userEmail: string\n    userName: string\n    badge: {\n        badgeId: number\n        badgeName: string\n        badgeDescription: string\n        recuesCompletionNeeded: number\n    }\n    setting: {\n        showMyContacts: boolean\n        getNotifications: boolean\n    }\n}\n\nexport interface PostType {\n    postTypeId: number\n    postType: string\n}\n\nexport interface PostedByUser {\n    usesId: number\n    badgeName: string\n    following: boolean\n    profileImage: string\n    rescuer: boolean\n    userName: string\n}\n\nexport interface UserPost {\n    postId: number\n    commentsCount: number\n    isUserReactedToPost: boolean\n    ownPage: boolean\n    postBy: PostedByUser\n    postImage: string\n    postTime: string\n    postType: PostType\n    postVideo: string\n    reactionsCount: number\n    timeAgo: string\n\n    adCorporateLogoUrl: string | null\n    corporateDescription: string | null\n    corporateName: string | null\n}\n\nexport interface UserPosts {\n    isRecent: boolean\n    feed: UserPost[]\n}\n\nexport interface Rescues {\n    rescueId: number\n    animalImageUrl: string\n    distance: number\n    distanceAway: string\n    emergencyType: string\n    postedBy: string\n    postedMinAgo: string\n    rescueDate: Date\n    rescuedPetName: string\n    rescueLocality: string\n    rescuers: {\n        contact: number\n        name: string\n        profileId: number\n        profileImageUrl: string\n        rescues: boolean\n        showMyNumber: boolean\n    }\n    rescueStatus: string\n    viewsCont: number\n}\n\nexport interface RescueLists {\n    rescues: Rescues[]\n}\n\nexport interface Comment {\n    commentId: number\n    comment: string\n    commentedUseName: string\n    commentedUserId: number\n    timeAgo: string\n}\n\nexport interface Comments {\n    comments: Comment[]\n}\n\nexport interface Follower {\n    userId: number\n    userName: string\n    profileImage: string\n    areYouFollowing: boolean\n    showRemoveOption: boolean\n}\n\nexport type Following = Follower\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateTagsDto.html":{"url":"classes/CreateTagsDto.html","title":"class - CreateTagsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateTagsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/tag.model.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                            ITag\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@IsNotEmpty()@MinLength(2)@MaxLength(36)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tags/tag.model.ts:38\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger'\n\nimport { IsNotEmpty, IsString, MaxLength, MinLength } from 'class-validator'\nimport type { JSONSchema, ModelObject, PartialModelObject } from 'objection'\n\nimport { BaseModel } from '../database/models/base.model'\n\ninterface ITag {\n    name: string\n}\n\nexport class Tag extends BaseModel implements ITag {\n    static tableName = 'tag'\n\n    name!: string\n\n    // JSON schema is not the database schema! Nothing is generated based on this.\n    // This is only used for validation. Whenever a model instance is created it is checked against this schema.\n    static jsonSchema: JSONSchema = {\n        type: 'object',\n        required: ['name'],\n        properties: {\n            id: { type: 'integer' },\n            name: { type: 'string', minLength: 2, maxLength: 255 },\n        },\n    }\n}\n\n// The `ModelObject` generic gives you a clean interface that can be used on the frontend, without any of the objection Model class properties or methods.\nexport type TagShape = ModelObject\nexport type PartialTagShape = PartialModelObject\n\nexport class CreateTagsDto implements ITag {\n    @IsString()\n    @IsNotEmpty()\n    @MinLength(2)\n    @MaxLength(36)\n    name!: string\n}\n\nexport class UpdateTagsDto extends PartialType(CreateTagsDto) {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/user.model.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                            IUser\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                    Optional\n                                firstName\n                            \n                            \n                                isActive\n                            \n                            \n                                    Optional\n                                lastName\n                            \n                            \n                                password\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            email\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsEmail()@IsNotEmpty()@MinLength(2)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/user.model.ts:116\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            firstName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@IsNotEmpty()@MinLength(2)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/user.model.ts:126\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isActive\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsBoolean()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/user.model.ts:134\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            lastName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@IsNotEmpty()@MinLength(2)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/user.model.ts:131\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@IsNotEmpty()@MinLength(8)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/user.model.ts:121\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            username\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@IsNotEmpty()@MinLength(2)@MaxLength(36)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/user.model.ts:111\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger'\n\nimport * as bcrypt from 'bcrypt'\nimport {\n    IsString,\n    MinLength,\n    IsNotEmpty,\n    MaxLength,\n    IsEmail,\n    IsBoolean,\n} from 'class-validator'\nimport type { JSONSchema, Modifiers, PartialModelObject } from 'objection'\nimport { ModelObject, QueryContext } from 'objection'\n\nimport { BaseModel } from '../database/models/base.model'\n\ninterface IUser {\n    username: string\n    email: string\n    firstName?: string\n    lastName?: string\n    isActive: boolean\n    password: string\n}\n\nexport class User extends BaseModel implements IUser {\n    static tableName = 'user'\n\n    username!: string\n\n    email!: string\n\n    firstName?: string\n\n    lastName?: string\n\n    isActive!: boolean\n\n    password!: string\n\n    // JSON schema is not the database schema! Nothing is generated based on this.\n    // This is only used for validation. Whenever a model instance is created it is checked against this schema.\n    static jsonSchema: JSONSchema = {\n        type: 'object',\n        required: ['username', 'email', 'password'],\n        properties: {\n            id: { type: 'integer', readOnly: true },\n            username: { type: 'string', minLength: 3, maxLength: 255 },\n            email: {\n                type: 'string',\n                minLength: 3,\n                maxLength: 255,\n                format: 'email',\n            },\n            password: { type: 'string', minLength: 8, maxLength: 255 },\n            firstName: { type: 'string', minLength: 1, maxLength: 255 },\n            lastName: { type: 'string', minLength: 1, maxLength: 255 },\n            isActive: { type: 'boolean' },\n        },\n    }\n\n    // Modifiers are reusable query snippets that can be used in various places.\n    static modifiers: Modifiers = {\n        // Our example modifier is a a semi-dumb fuzzy name match. We split the name into pieces using whitespace\n        // and then try to partially match each of those pieces to both the `firstName` and the `lastName` fields.\n\n        searchByName(query, name: string) {\n            // This `where` simply creates parentheses so that other `where` statements don't get mixed with the these.\n\n            query.where((q) => {\n                for (const namePart of name.trim().split(/\\s+/)) {\n                    for (const column of ['firstName', 'lastName']) {\n                        q.orWhereRaw('lower(??) like ?', [\n                            column,\n                            `${namePart.toLowerCase()}%`,\n                        ])\n                    }\n                }\n            })\n        },\n    }\n\n    async hashPassword(password: string) {\n        const hash = await bcrypt.hash(password, 12)\n        return hash\n    }\n\n    async $beforeInsert(queryContext: QueryContext) {\n        await super.$beforeInsert(queryContext)\n        this.password = await this.hashPassword(this.password)\n    }\n\n    /*\n    async $beforeUpdate(opt: ModelOptions, queryContext: QueryContext) {\n        await super.$beforeUpdate(opt, queryContext)\n        this.password = await this.hashPassword(this.password)\n    }\n    */\n}\n\n// The `ModelObject` generic gives you a clean interface that can be used on the frontend, without any of the objection Model class properties or methods.\nexport type UserShape = ModelObject\nexport type PartialUserShape = PartialModelObject\n\nexport class CreateUserDto implements IUser {\n    @IsString()\n    @IsNotEmpty()\n    @MinLength(2)\n    @MaxLength(36)\n    username!: string\n\n    @IsEmail()\n    @IsNotEmpty()\n    @MinLength(2)\n    email!: string\n\n    @IsString()\n    @IsNotEmpty()\n    @MinLength(8)\n    password!: string\n\n    @IsString()\n    @IsNotEmpty()\n    @MinLength(2)\n    firstName?: string\n\n    @IsString()\n    @IsNotEmpty()\n    @MinLength(2)\n    lastName?: string\n\n    @IsBoolean()\n    isActive!: boolean\n}\n\nexport class UpdateUserDto extends PartialType(CreateUserDto) {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CronModule.html":{"url":"modules/CronModule.html","title":"module - CronModule","body":"\n                   \n\n\n\n\n    Modules\n    CronModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_CronModule\n\n\n\ncluster_CronModule_providers\n\n\n\n\nCronService\n\nCronService\n\n\n\nCronModule\n\nCronModule\n\nCronModule -->\n\nCronService->CronModule\n\n\n\n\n\nPersistedCronService\n\nPersistedCronService\n\nCronModule -->\n\nPersistedCronService->CronModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/cron/cron.module.ts\n        \n\n\n        \n            Description\n        \n        \n            Cron module\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CronService\n                        \n                        \n                            PersistedCronService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common'\n\nimport { CronService } from './cron.service'\nimport { PersistedCronService } from './persisted-cron.service'\n\n/**\n * Cron module\n */\n@Module({\n    providers: [CronService, PersistedCronService],\n})\nexport class CronModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CronService.html":{"url":"injectables/CronService.html","title":"injectable - CronService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  CronService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/cron/cron.service.ts\n        \n\n            \n                Description\n            \n            \n                @Cron are regular cron jobs\n@Interval To declare that a method should run at a (recurring) specified interval\n@Timeout To declare that a method should run (once) at a specified timeout\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                count\n                            \n                            \n                                fact16\n                            \n                            \n                                logger\n                            \n                            \n                                times\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addCronJob\n                            \n                            \n                                addInterval\n                            \n                            \n                                addTimeout\n                            \n                            \n                                deleteCron\n                            \n                            \n                                deleteInterval\n                            \n                            \n                                deleteTimeout\n                            \n                            \n                                factorial\n                            \n                            \n                                handleCron\n                            \n                            \n                                handleInterval\n                            \n                            \n                                handleTimeout\n                            \n                            \n                                logAllCrons\n                            \n                            \n                                logIntervals\n                            \n                            \n                                logTimeouts\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(scheduler: SchedulerRegistry)\n                    \n                \n                        \n                            \n                                Defined in src/cron/cron.service.ts:28\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        scheduler\n                                                  \n                                                        \n                                                                        SchedulerRegistry\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            addCronJob\n                        \n                        \n                    \n                \n            \n            \n                \naddCronJob(name: string, seconds: string)\n                \n            \n\n\n            \n                \n                    Defined in src/cron/cron.service.ts:97\n                \n            \n\n\n            \n                \n                    Dynamically schedule a name CRON job\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Job Name\n\n                                    \n                                \n                                \n                                    seconds\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Seconds\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            addInterval\n                        \n                        \n                    \n                \n            \n            \n                \naddInterval(name: string, milliseconds: number)\n                \n            \n\n\n            \n                \n                    Defined in src/cron/cron.service.ts:136\n                \n            \n\n\n            \n                \n                    Dynamically schedule a named Interval\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Interval Name\n\n                                    \n                                \n                                \n                                    milliseconds\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Milliseconds\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            addTimeout\n                        \n                        \n                    \n                \n            \n            \n                \naddTimeout(name: string, milliseconds: number)\n                \n            \n\n\n            \n                \n                    Defined in src/cron/cron.service.ts:174\n                \n            \n\n\n            \n                \n                    Dynamically schedule a named Timeout\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Timeout Name\n\n                                    \n                                \n                                \n                                    milliseconds\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Milliseconds\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            deleteCron\n                        \n                        \n                    \n                \n            \n            \n                \ndeleteCron(name: string)\n                \n            \n\n\n            \n                \n                    Defined in src/cron/cron.service.ts:112\n                \n            \n\n\n            \n                \n                    Dynamically delete a named scheduled CRON job\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Job Name\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            deleteInterval\n                        \n                        \n                    \n                \n            \n            \n                \ndeleteInterval(name: string)\n                \n            \n\n\n            \n                \n                    Defined in src/cron/cron.service.ts:151\n                \n            \n\n\n            \n                \n                    Dynamically delete a named Interval\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Interval Name\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            deleteTimeout\n                        \n                        \n                    \n                \n            \n            \n                \ndeleteTimeout(name: string)\n                \n            \n\n\n            \n                \n                    Defined in src/cron/cron.service.ts:187\n                \n            \n\n\n            \n                \n                    Dynamically delete a named Timeout\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Timeout Name\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            factorial\n                        \n                        \n                    \n                \n            \n            \n                \nfactorial(n: number)\n                \n            \n\n\n            \n                \n                    Defined in src/cron/cron.service.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    n\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            handleCron\n                        \n                        \n                    \n                \n            \n            \n                \nhandleCron()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Cron(CronExpression.EVERY_MINUTE, {name: 'handleCronFn'})\n                \n            \n\n            \n                \n                    Defined in src/cron/cron.service.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            handleInterval\n                        \n                        \n                    \n                \n            \n            \n                \nhandleInterval()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Interval('handleIntervalFn', 100000)\n                \n            \n\n            \n                \n                    Defined in src/cron/cron.service.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            handleTimeout\n                        \n                        \n                    \n                \n            \n            \n                \nhandleTimeout()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Timeout('handleTimeoutFn', 50000)\n                \n            \n\n            \n                \n                    Defined in src/cron/cron.service.ts:63\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            logAllCrons\n                        \n                        \n                    \n                \n            \n            \n                \nlogAllCrons()\n                \n            \n\n\n            \n                \n                    Defined in src/cron/cron.service.ts:76\n                \n            \n\n\n            \n                \n                    Get all of the CRON jobs\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            logIntervals\n                        \n                        \n                    \n                \n            \n            \n                \nlogIntervals()\n                \n            \n\n\n            \n                \n                    Defined in src/cron/cron.service.ts:126\n                \n            \n\n\n            \n                \n                    Get all of the Intervals\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            logTimeouts\n                        \n                        \n                    \n                \n            \n            \n                \nlogTimeouts()\n                \n            \n\n\n            \n                \n                    Defined in src/cron/cron.service.ts:164\n                \n            \n\n\n            \n                \n                    Get all of the Timeouts\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            count\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 0\n                        \n                    \n                        \n                            \n                                    Defined in src/cron/cron.service.ts:22\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            fact16\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 20922789888000\n                        \n                    \n                        \n                            \n                                    Defined in src/cron/cron.service.ts:28\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            logger\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Logger(CronService.name)\n                        \n                    \n                        \n                            \n                                    Defined in src/cron/cron.service.ts:24\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            times\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 50000000\n                        \n                    \n                        \n                            \n                                    Defined in src/cron/cron.service.ts:26\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable, Logger } from '@nestjs/common'\nimport {\n    Cron,\n    CronExpression,\n    Interval,\n    SchedulerRegistry,\n    Timeout,\n} from '@nestjs/schedule'\n\nimport { CronJob } from 'cron'\n\n/**\n * `@Cron` are regular cron jobs\n *\n * `@Interval` To declare that a method should run at a (recurring) specified interval\n *\n * `@Timeout` To declare that a method should run (once) at a specified timeout\n */\n@Injectable()\nexport class CronService {\n    static count = 0\n\n    logger = new Logger(CronService.name)\n\n    times = 50000000\n\n    fact16 = 20922789888000\n\n    constructor(readonly scheduler: SchedulerRegistry) {}\n\n    factorial(n: number): number {\n        if (n === 1) return 1\n        return n * this.factorial(n - 1)\n    }\n\n    @Cron(CronExpression.EVERY_MINUTE, { name: 'handleCronFn' })\n    handleCron() {\n        CronService.count += 1\n        this.logger.debug(\n            `Called when the second is 60, current count is ${CronService.count}`,\n        )\n\n        let ok = true\n        for (let i = 0; i  {\n            let next\n\n            try {\n                next = value.nextDates().toDate()\n            } catch (e) {\n                next = 'error: next fire date is in the past!'\n            }\n            // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n            this.logger.log(`job: ${key} -> next: ${next}`)\n        })\n    }\n\n    /**\n     * Dynamically schedule a name CRON job\n     * @param {string} name Job Name\n     * @param {Number} seconds Seconds\n     */\n    addCronJob(name: string, seconds: string) {\n        const job = new CronJob(`${seconds} * * * * *`, () => {\n            this.logger.warn(`time (${seconds}) for job ${name} to run!`)\n        })\n\n        this.scheduler.addCronJob(name, job)\n        job.start()\n\n        this.logger.warn(`job ${name} added for each minute at ${seconds} seconds!`)\n    }\n\n    /**\n     * Dynamically delete a named scheduled CRON job\n     * @param {string} name Job Name\n     */\n    deleteCron(name: string) {\n        const job = this.scheduler.getCronJob(name)\n\n        if (job) {\n            this.scheduler.deleteCronJob(name)\n            this.logger.warn(`job ${name} deleted!`)\n        } else {\n            this.logger.warn(`job ${name} not found!`)\n        }\n    }\n\n    /**\n     * Get all of the Intervals\n     */\n    logIntervals() {\n        const intervals = this.scheduler.getIntervals()\n        intervals.forEach((key) => this.logger.log(`Interval: ${key}`))\n    }\n\n    /**\n     * Dynamically schedule a named Interval\n     * @param {string} name Interval Name\n     * @param {Number} milliseconds Milliseconds\n     */\n    addInterval(name: string, milliseconds: number) {\n        const callback = () => {\n            this.logger.warn(\n                `Interval ${name} executing at time (${milliseconds})!`,\n            )\n        }\n\n        const interval = setInterval(callback, milliseconds)\n        this.scheduler.addInterval(name, interval)\n    }\n\n    /**\n     * Dynamically delete a named Interval\n     * @param {string} name Interval Name\n     */\n    deleteInterval(name: string) {\n        const interval = this.scheduler.getInterval(name)\n        if (interval) {\n            this.scheduler.deleteInterval(name)\n            this.logger.warn(`Interval ${name} deleted!`)\n        } else {\n            this.logger.warn(`Interval ${name} not found!`)\n        }\n    }\n\n    /**\n     * Get all of the Timeouts\n     */\n    logTimeouts() {\n        const timeouts = this.scheduler.getTimeouts()\n        timeouts.forEach((key) => this.logger.log(`Timeout: ${key}`))\n    }\n\n    /**\n     * Dynamically schedule a named Timeout\n     * @param {string} name Timeout Name\n     * @param {Number} milliseconds Milliseconds\n     */\n    addTimeout(name: string, milliseconds: number) {\n        const callback = () => {\n            this.logger.warn(`Timeout ${name} executing after (${milliseconds})!`)\n        }\n\n        const timeout = setTimeout(callback, milliseconds)\n        this.scheduler.addTimeout(name, timeout)\n    }\n\n    /**\n     * Dynamically delete a named Timeout\n     * @param {string} name Timeout Name\n     */\n    deleteTimeout(name: string) {\n        const timeout = this.scheduler.getTimeout(name)\n\n        if (timeout) {\n            this.scheduler.deleteTimeout(name)\n            this.logger.warn(`Timeout ${name} deleted!`)\n        } else {\n            this.logger.warn(`Timeout ${name} not found!`)\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CrudConfigService.html":{"url":"classes/CrudConfigService.html","title":"class - CrudConfigService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CrudConfigService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/base/swagger-gen/crud-routes.factory.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                config\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                load\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            config\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Partial\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        query: {\n            alwaysPaginate: false,\n        },\n    }\n                        \n                    \n                        \n                            \n                                    Defined in src/base/swagger-gen/crud-routes.factory.ts:201\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            load\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    load(config: Record)\n                \n            \n\n\n            \n                \n                    Defined in src/base/swagger-gen/crud-routes.factory.ts:207\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    config\n                                    \n                                                Record\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { HttpStatus, RequestMethod } from '@nestjs/common'\n\nimport { Type } from 'class-transformer'\nimport * as deepmerge from 'deepmerge'\n\nimport {\n    ApiProperty,\n    BaseRoute,\n    isFalse,\n    isFunction,\n    isObjectFull,\n    objKeys,\n    swagger,\n    swaggerConst,\n} from './utils'\nimport type { CrudOptions, GetManyDefaultResponse, BaseRouteName } from './utils'\n\nexport class R {\n    static set(\n        metadataKey: string,\n        metadataValue: any,\n        target: Object,\n        propertyKey?: string | symbol,\n    ) {\n        if (!propertyKey) {\n            Reflect.defineMetadata(metadataKey, metadataValue, target)\n        } else {\n            Reflect.defineMetadata(metadataKey, metadataValue, target, propertyKey)\n        }\n    }\n\n    static get(\n        metadataKey: any,\n        target: Object,\n        propertyKey?: string | symbol,\n    ): T {\n        if (!propertyKey) return Reflect.getMetadata(metadataKey, target)\n\n        return Reflect.getMetadata(metadataKey, target, propertyKey)\n    }\n\n    static setRoute(route: BaseRoute, func: Function) {\n        R.set('path', route.path, func)\n        R.set('method', route.method, func)\n    }\n}\n\nexport class Swagger {\n    /**\n     * Sets extra swagger metadata for GET Calls\n     */\n    static setExtraModels(swaggerModels: {\n        [x: string]: any\n        get: Record\n    }) {\n        if (swaggerConst) {\n            const meta = Swagger.getExtraModels(swaggerModels.get)\n            const models = [\n                ...meta,\n                ...objKeys(swaggerModels)\n                    .map((name) => swaggerModels[name])\n                    .filter((one) => one && one.name !== swaggerModels.get.name),\n            ]\n\n            R.set(\n                swaggerConst.DECORATORS.API_EXTRA_MODELS,\n                models,\n                swaggerModels.get,\n            )\n        }\n    }\n\n    /**\n     * Sets swagger metadata for response of GET Calls\n     */\n    static setResponseOk(metadata: any[], func: Function) {\n        if (swaggerConst) {\n            R.set(swaggerConst.DECORATORS.API_RESPONSE, metadata, func)\n        }\n    }\n\n    static getExtraModels(target: Record): any[] {\n        return swaggerConst\n            ? R.get(swaggerConst.API_EXTRA_MODELS, target) || []\n            : []\n    }\n\n    static getResponseOk(func: Function) {\n        return swaggerConst\n            ? R.get(swaggerConst.DECORATORS.API_RESPONSE, func) || {}\n            : {}\n    }\n\n    static createResponseMeta(\n        name: BaseRouteName,\n        options: CrudOptions,\n        swaggerModels: {\n            [x: string]: any\n            get: { name: any }\n            getMany: { name: any }\n        },\n    ) {\n        if (swagger) {\n            const { query } = options\n\n            switch (name) {\n                case 'getOneBase':\n                    return {\n                        [HttpStatus.OK]: {\n                            description: 'Get one base response',\n                            type: swaggerModels.get,\n                        },\n                    }\n                case 'getOne':\n                    return {\n                        [HttpStatus.OK]: query?.alwaysPaginate\n                            ? {\n                                  description: 'Get paginated response',\n                                  type: swaggerModels.getMany,\n                              }\n                            : {\n                                  description: 'Get many base response',\n                                  schema: {\n                                      oneOf: [\n                                          {\n                                              $ref: swagger.getSchemaPath(\n                                                  swaggerModels.getMany.name,\n                                              ),\n                                          },\n                                          {\n                                              type: 'array',\n                                              items: {\n                                                  $ref: swagger.getSchemaPath(\n                                                      swaggerModels.get.name,\n                                                  ),\n                                              },\n                                          },\n                                      ],\n                                  },\n                              },\n                    }\n                default:\n                    // eslint-disable-next-line no-case-declarations\n                    const dto = swaggerModels[name.split('OneBase')[0]]\n\n                    return {\n                        [HttpStatus.OK]: {\n                            description: 'Response',\n                            schema: { $ref: swagger.getSchemaPath(dto.name) },\n                        },\n                    }\n            }\n        } else {\n            return {}\n        }\n    }\n}\n\nexport class SerializeHelper {\n    static createGetManyDto(dto: any, resourceName: string): any {\n        class GetManyResponseDto implements GetManyDefaultResponse {\n            @ApiProperty({ type: dto, isArray: true })\n            @Type(() => dto)\n            data!: any[]\n\n            @ApiProperty({ type: 'number' })\n            count!: number\n\n            @ApiProperty({ type: 'number' })\n            total!: number\n\n            @ApiProperty({ type: 'number' })\n            page!: number\n\n            @ApiProperty({ type: 'number' })\n            pageCount!: number\n        }\n\n        Object.defineProperty(GetManyResponseDto, 'name', {\n            writable: false,\n            value: `GetMany${resourceName}ResponseDto`,\n        })\n\n        return GetManyResponseDto\n    }\n\n    static createGetOneResponseDto(resourceName: string): any {\n        class GetOneResponseDto {}\n\n        Object.defineProperty(GetOneResponseDto, 'name', {\n            writable: false,\n            value: `${resourceName}ResponseDto`,\n        })\n\n        return GetOneResponseDto\n    }\n}\n\nexport class CrudConfigService {\n    static config: Partial = {\n        query: {\n            alwaysPaginate: false,\n        },\n    }\n\n    static load(config: Record) {\n        const query = isObjectFull(config.query) ? config.query : {}\n        const params = isObjectFull(config.params) ? config.params : {}\n        const serialize = isObjectFull(config.serialize) ? config.serialize : {}\n\n        CrudConfigService.config = deepmerge(\n            CrudConfigService.config,\n            { query, params, serialize },\n            { arrayMerge: (a, b, c) => b },\n        )\n    }\n}\n\nexport class CrudRoutesFactory {\n    protected options\n\n    protected swaggerModels: any = {}\n\n    constructor(private target: Object, options: CrudOptions) {\n        this.options = options\n        this.create()\n\n        console.log(\n            'CrudRoutesFactory::constructor',\n            // { ...options },\n            // this.targetProto,\n            // this.modelType,\n            // this.modelName,\n            // this.swaggerModels,\n        )\n    }\n\n    static create(target: Object, options: CrudOptions): CrudRoutesFactory {\n        return new CrudRoutesFactory(target, options)\n    }\n\n    get targetProto() {\n        // @ts-ignore\n        return this.target.prototype\n    }\n\n    get modelName() {\n        return this.options.model.type?.name\n    }\n\n    get modelType() {\n        return this.options.model.type\n    }\n\n    private create() {\n        const routesSchema = CrudRoutesFactory.getRoutesSchema()\n        this.mergeOptions()\n        this.setResponseModels()\n        this.createRoutes(routesSchema)\n        this.enableRoutes(routesSchema)\n    }\n\n    getOne(name: BaseRouteName) {\n        this.targetProto[name] = function getOne(req: any) {\n            return this.service.getOne(req)\n        }\n    }\n\n    getOneBase(name: BaseRouteName) {\n        this.targetProto[name] = function getOneBase(req: any) {\n            return this.service.getOneBase(req)\n        }\n    }\n\n    static getRoutesSchema(): BaseRoute[] {\n        return [\n            {\n                name: 'getOneBase',\n                path: '/',\n                method: RequestMethod.GET,\n                enable: false,\n                override: false,\n                withParams: true,\n            },\n            {\n                name: 'getOne',\n                path: '/',\n                method: RequestMethod.GET,\n                enable: false,\n                override: false,\n                withParams: false,\n            },\n        ]\n    }\n\n    mergeOptions() {\n        // merge query config\n        const query = isObjectFull(this.options.query) ? this.options.query : {}\n        this.options.query = { ...CrudConfigService.config.query, ...query }\n\n        // set dto\n        if (!isObjectFull(this.options.dto)) {\n            this.options.dto = {}\n        }\n\n        // set serialize\n        this.options.serialize = {\n            ...CrudConfigService.config.serialize,\n            ...this.options.serialize,\n        }\n\n        this.options.serialize.get = isFalse(this.options.serialize?.get)\n            ? false\n            : this.options.serialize?.get || this.modelType\n\n        this.options.serialize.getMany = isFalse(this.options.serialize?.getMany)\n            ? false\n            : this.options.serialize?.getMany\n            ? this.options.serialize?.getMany\n            : isFalse(this.options.serialize?.get)\n            ? false\n            : SerializeHelper.createGetManyDto(\n                  this.options.serialize?.get,\n                  this.modelName,\n              )\n\n        this.options.serialize.create = isFalse(this.options.serialize?.create)\n            ? false\n            : this.options.serialize?.create || this.modelType\n\n        this.options.serialize.update = isFalse(this.options.serialize?.update)\n            ? false\n            : this.options.serialize?.update || this.modelType\n\n        this.options.serialize.replace = isFalse(this.options.serialize?.replace)\n            ? false\n            : this.options.serialize?.replace || this.modelType\n\n        this.options.serialize.delete =\n            isFalse(this.options.serialize?.delete) ||\n            !this.options.routes?.deleteOneBase?.returnDeleted\n                ? false\n                : this.options.serialize?.delete || this.modelType\n\n        R.set('CRUD_OPTIONS_METADATA', this.options, this.target)\n    }\n\n    setResponseModels() {\n        const modelType = isFunction(this.modelType)\n            ? this.modelType\n            : SerializeHelper.createGetOneResponseDto(this.modelName)\n\n        this.swaggerModels.get = isFunction(this.options.serialize?.get)\n            ? this.options.serialize?.get\n            : modelType\n\n        this.swaggerModels.getMany =\n            this.options.serialize?.getMany ||\n            SerializeHelper.createGetManyDto(this.swaggerModels.get, this.modelName)\n\n        this.swaggerModels.create = isFunction(this.options.serialize?.create)\n            ? this.options.serialize?.create\n            : modelType\n\n        this.swaggerModels.update = isFunction(this.options.serialize?.update)\n            ? this.options.serialize?.update\n            : modelType\n\n        this.swaggerModels.replace = isFunction(this.options.serialize?.replace)\n            ? this.options.serialize?.replace\n            : modelType\n\n        this.swaggerModels.delete = isFunction(this.options.serialize?.delete)\n            ? this.options.serialize?.delete\n            : modelType\n\n        Swagger.setExtraModels(this.swaggerModels)\n    }\n\n    enableRoutes(routesSchema: BaseRoute[]) {\n        routesSchema.forEach((route) => {\n            if (!route.override && route.enable) {\n                R.setRoute(route, this.targetProto[route.name])\n            }\n        })\n    }\n\n    createRoutes(routesSchema: BaseRoute[]) {\n        routesSchema.forEach((route) => {\n            // create base method\n            /* this[route.name](route.name) */\n            route.enable = true\n\n            // set metadata\n            this.setSwaggerResponseOk(route.name)\n        })\n    }\n\n    setSwaggerResponseOk(name: BaseRouteName) {\n        const metadata = Swagger.getResponseOk(this.targetProto[name]) || {}\n        const metadataToAdd =\n            Swagger.createResponseMeta(name, this.options, this.swaggerModels) || {}\n\n        Swagger.setResponseOk(\n            // @ts-ignore\n            { ...metadata, ...metadataToAdd },\n            this.targetProto[name],\n        )\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CrudController.html":{"url":"classes/CrudController.html","title":"class - CrudController","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CrudController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/base/crud/crud.controller.ts\n        \n\n            \n                Description\n            \n            \n                Abstract base controller of BaseModel that other controller can extend to\nprovide base CRUD functionality such as to create, find, update and delete data.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOneById\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Protected\n                        constructor(service: ICrudService)\n                    \n                \n                        \n                            \n                                Defined in src/base/crud/crud.controller.ts:26\n                            \n                        \n\n                \n                    \n                            The constructor must receive the injected service from the child controller\nin order to provide all the proper base functionality.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        service\n                                                  \n                                                        \n                                                                        ICrudService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe injected service.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            create\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    create(input: T)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Create one record', description: 'Creates one record'})@ApiResponse({status: undefined, description: 'Created one record', type: BaseModel})@Post(':id')\n                \n            \n\n            \n                \n                    Defined in src/base/crud/crud.controller.ts:124\n                \n            \n\n\n            \n                \n                    create\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    input\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(paginationParams: PaginationParams)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'find all', description: 'Get all of the records'})@ApiResponse({status: undefined, description: 'Found all records'})@Get()\n                \n            \n\n            \n                \n                    Defined in src/base/crud/crud.controller.ts:45\n                \n            \n\n\n            \n                \n                    findAll\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    paginationParams\n                                    \n                                                PaginationParams\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOneById\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneById(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Get one record by id', description: 'Get one record from database with provided by id'})@ApiResponse({status: undefined, description: 'Found one record', type: BaseModel})@Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/base/crud/crud.controller.ts:72\n                \n            \n\n\n            \n                \n                    findOneById\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            remove\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Soft-delete one record by id', description: 'Soft-delete one record from database with provided by id'})@ApiResponse({status: undefined, description: 'Deleted one record', type: BaseModel})@ApiResponse({status: undefined, description: 'Deleted one record'})@Delete(':id')\n                \n            \n\n            \n                \n                    Defined in src/base/crud/crud.controller.ts:102\n                \n            \n\n\n            \n                \n                    remove\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: number, input: Partial)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Update one record', description: 'Updates one record'})@ApiResponse({status: undefined, description: 'Updated one record', type: BaseModel})@Put(':id')\n                \n            \n\n            \n                \n                    Defined in src/base/crud/crud.controller.ts:146\n                \n            \n\n\n            \n                \n                    update\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    input\n                                    \n                                            Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n    Get,\n    Delete,\n    Param,\n    ParseIntPipe,\n    HttpStatus,\n    Query,\n    Body,\n    Put,\n    Post,\n    NotFoundException,\n} from '@nestjs/common'\nimport { ApiOperation, ApiResponse } from '@nestjs/swagger'\n\nimport { BaseModel } from '../../database/models/base.model'\nimport { Result } from '../../domain'\nimport { ApiErrors } from '../swagger-gen/api-errors.decorator'\nimport { ICrudService } from './crud.service.interface'\nimport { IPaginationResult, PaginationParams } from './pagination'\n\n/**\n * Abstract base controller of BaseModel that other controller can extend to\n * provide base CRUD functionality such as to create, find, update and delete data.\n */\n@ApiErrors()\nexport abstract class CrudController {\n    /**\n     * The constructor must receive the injected service from the child controller\n     * in order to provide all the proper base functionality.\n     *\n     * @param {ICrudService} service - The injected service.\n     */\n    protected constructor(protected readonly service: ICrudService) {}\n\n    /**\n     * findAll\n     */\n    @ApiOperation({ summary: 'find all', description: 'Get all of the records' })\n    @ApiResponse({\n        status: HttpStatus.OK,\n        description: 'Found all records',\n        // type: IPagination | BaseModel[]\n    })\n    @Get()\n    async findAll(\n        @Query() paginationParams: PaginationParams,\n    ): Promise> {\n        const { data, paging } = await this.service.paginatedFindAll(\n            paginationParams,\n        )\n\n        return ({\n            data,\n            paging,\n            statusCode: HttpStatus.OK,\n        } as unknown) as IPaginationResult\n    }\n\n    /**\n     * findOneById\n     */\n    @ApiOperation({\n        summary: 'Get one record by id',\n        description: 'Get one record from database with provided by id',\n    })\n    @ApiResponse({\n        status: HttpStatus.OK,\n        description: 'Found one record',\n        type: BaseModel, // type: T,\n    })\n    @Get(':id')\n    async findOneById(@Param('id', ParseIntPipe) id: number): Promise> {\n        const data = await this.service.findOneById(id)\n\n        if (!data) {\n            throw new NotFoundException()\n        }\n\n        return {\n            data,\n            statusCode: HttpStatus.OK,\n        }\n    }\n\n    /**\n     * remove\n     */\n    @ApiOperation({\n        summary: 'Soft-delete one record by id',\n        description: 'Soft-delete one record from database with provided by id',\n    })\n    @ApiResponse({\n        status: HttpStatus.OK,\n        description: 'Deleted one record',\n        type: BaseModel, // type: T,\n    })\n    @ApiResponse({\n        status: HttpStatus.NO_CONTENT,\n        description: 'Deleted one record',\n    })\n    @Delete(':id')\n    async remove(@Param('id', ParseIntPipe) id: number) {\n        const data = await this.service.remove(id)\n\n        return {\n            data,\n            statusCode: !data ? HttpStatus.NO_CONTENT : HttpStatus.OK,\n        }\n    }\n\n    /**\n     * create\n     */\n    @ApiOperation({\n        summary: 'Create one record',\n        description: 'Creates one record',\n    })\n    @ApiResponse({\n        status: HttpStatus.OK,\n        description: 'Created one record',\n        type: BaseModel, // type: T,\n    })\n    @Post(':id')\n    async create(@Body() input: T) {\n        const data = await this.service.create(input)\n\n        return {\n            data,\n            statusCode: HttpStatus.CREATED,\n        }\n    }\n\n    /**\n     * update\n     */\n    @ApiOperation({\n        summary: 'Update one record',\n        description: 'Updates one record',\n    })\n    @ApiResponse({\n        status: HttpStatus.OK,\n        description: 'Updated one record',\n        type: BaseModel, // type: T,\n    })\n    @Put(':id')\n    async update(@Param('id', ParseIntPipe) id: number, @Body() input: Partial) {\n        const data = await this.service.update(id, input)\n\n        return {\n            data,\n            statusCode: !data ? HttpStatus.NO_CONTENT : HttpStatus.OK,\n        }\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CrudOptions.html":{"url":"interfaces/CrudOptions.html","title":"interface - CrudOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  CrudOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/base/swagger-gen/utils/other.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        dto\n                                \n                                \n                                        model\n                                \n                                \n                                            Optional\n                                        params\n                                \n                                \n                                            Optional\n                                        query\n                                \n                                \n                                            Optional\n                                        routes\n                                \n                                \n                                            Optional\n                                        serialize\n                                \n                                \n                                            Optional\n                                        validation\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        dto\n                                    \n                                \n                                \n                                    \n                                        dto:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        model\n                                    \n                                \n                                \n                                    \n                                        model:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        params\n                                    \n                                \n                                \n                                    \n                                        params:         ParamsOptions\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ParamsOptions\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        query\n                                    \n                                \n                                \n                                    \n                                        query:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        routes\n                                    \n                                \n                                \n                                    \n                                        routes:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        serialize\n                                    \n                                \n                                \n                                    \n                                        serialize:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        validation\n                                    \n                                \n                                \n                                    \n                                        validation:     ValidationPipeOptions | \"undefined\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     ValidationPipeOptions | \"undefined\"\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { RequestMethod, ValidationPipeOptions } from '@nestjs/common'\nimport { SwaggerEnumType } from '@nestjs/swagger/dist/types/swagger-enum.type'\n\nexport declare type BaseRouteName =\n    | 'getManyBase'\n    | 'getOneBase'\n    | 'createOneBase'\n    | 'createManyBase'\n    | 'updateOneBase'\n    | 'replaceOneBase'\n    | 'deleteOneBase'\n    | 'getOne'\n\nexport interface BaseRoute {\n    name: BaseRouteName\n    path: string\n    method: RequestMethod\n    enable: boolean\n    override: boolean\n    withParams: boolean\n}\n\nexport interface GetManyDefaultResponse {\n    data: T[]\n    count: number\n    total: number\n    page: number\n    pageCount: number\n}\n\nexport interface ParamOption {\n    field?: string\n    type?: 'number' | 'string' | 'uuid'\n    enum?: SwaggerEnumType\n    primary?: boolean\n    disabled?: boolean\n}\n\nexport interface ParamsOptions {\n    [key: string]: ParamOption\n}\n\nexport interface CrudOptions {\n    model: {\n        type: { name: string }\n    }\n    dto?: {}\n    routes?: {\n        deleteOneBase?: { returnDeleted?: boolean }\n    }\n    validation?: ValidationPipeOptions | false\n    params?: ParamsOptions\n    query?: {\n        limit?: number\n        maxLimit?: number\n        cache?: number | false\n        alwaysPaginate?: boolean\n    }\n    serialize?: {\n        getMany?: false | object\n        get?: false | object\n        create?: false | object\n        createMany?: false | object\n        update?: false | object\n        replace?: false | object\n        delete?: false | object\n    }\n}\n\nexport function safeRequire(path: string): T | null {\n    try {\n        // eslint-disable-next-line global-require,@typescript-eslint/no-var-requires,import/no-dynamic-require\n        const pack = require(path)\n        return pack\n    } catch (_) {\n        return null\n    }\n}\n\nexport const swagger = safeRequire('@nestjs/swagger')\nexport const swaggerConst = safeRequire('@nestjs/swagger/dist/constants')\n\nexport function ApiProperty(options?: any): PropertyDecorator {\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    return (target: object, propertyKey: string | symbol) => {\n        if (swagger) {\n            const ApiPropertyDecorator =\n                swagger.ApiProperty || swagger.ApiModelProperty\n            ApiPropertyDecorator(options)(target, propertyKey)\n        }\n    }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CrudRoutesFactory.html":{"url":"classes/CrudRoutesFactory.html","title":"class - CrudRoutesFactory","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CrudRoutesFactory\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/base/swagger-gen/crud-routes.factory.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                options\n                            \n                            \n                                    Protected\n                                swaggerModels\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                create\n                            \n                            \n                                    Private\n                                create\n                            \n                            \n                                createRoutes\n                            \n                            \n                                enableRoutes\n                            \n                            \n                                getOne\n                            \n                            \n                                getOneBase\n                            \n                            \n                                    Static\n                                getRoutesSchema\n                            \n                            \n                                mergeOptions\n                            \n                            \n                                setResponseModels\n                            \n                            \n                                setSwaggerResponseOk\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    targetProto\n                                \n                                \n                                    modelName\n                                \n                                \n                                    modelType\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(target: Object, options: CrudOptions)\n                    \n                \n                        \n                            \n                                Defined in src/base/swagger-gen/crud-routes.factory.ts:223\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        target\n                                                  \n                                                        \n                                                                        Object\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        options\n                                                  \n                                                        \n                                                                        CrudOptions\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            options\n                            \n                        \n                    \n                \n                        \n                            \n                                    Defined in src/base/swagger-gen/crud-routes.factory.ts:221\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            swaggerModels\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                    \n                        \n                            Default value : {}\n                        \n                    \n                        \n                            \n                                    Defined in src/base/swagger-gen/crud-routes.factory.ts:223\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            create\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    create(target: Object, options: CrudOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/base/swagger-gen/crud-routes.factory.ts:239\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    target\n                                    \n                                                Object\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                CrudOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         CrudRoutesFactory\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            create\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    create()\n                \n            \n\n\n            \n                \n                    Defined in src/base/swagger-gen/crud-routes.factory.ts:256\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            createRoutes\n                        \n                        \n                    \n                \n            \n            \n                \ncreateRoutes(routesSchema: BaseRoute[])\n                \n            \n\n\n            \n                \n                    Defined in src/base/swagger-gen/crud-routes.factory.ts:389\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    routesSchema\n                                    \n                                                BaseRoute[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            enableRoutes\n                        \n                        \n                    \n                \n            \n            \n                \nenableRoutes(routesSchema: BaseRoute[])\n                \n            \n\n\n            \n                \n                    Defined in src/base/swagger-gen/crud-routes.factory.ts:381\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    routesSchema\n                                    \n                                                BaseRoute[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getOne\n                        \n                        \n                    \n                \n            \n            \n                \ngetOne(name: BaseRouteName)\n                \n            \n\n\n            \n                \n                    Defined in src/base/swagger-gen/crud-routes.factory.ts:264\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                BaseRouteName\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getOneBase\n                        \n                        \n                    \n                \n            \n            \n                \ngetOneBase(name: BaseRouteName)\n                \n            \n\n\n            \n                \n                    Defined in src/base/swagger-gen/crud-routes.factory.ts:270\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                BaseRouteName\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            getRoutesSchema\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getRoutesSchema()\n                \n            \n\n\n            \n                \n                    Defined in src/base/swagger-gen/crud-routes.factory.ts:276\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         BaseRoute[]\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            mergeOptions\n                        \n                        \n                    \n                \n            \n            \n                \nmergeOptions()\n                \n            \n\n\n            \n                \n                    Defined in src/base/swagger-gen/crud-routes.factory.ts:297\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setResponseModels\n                        \n                        \n                    \n                \n            \n            \n                \nsetResponseModels()\n                \n            \n\n\n            \n                \n                    Defined in src/base/swagger-gen/crud-routes.factory.ts:349\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setSwaggerResponseOk\n                        \n                        \n                    \n                \n            \n            \n                \nsetSwaggerResponseOk(name: BaseRouteName)\n                \n            \n\n\n            \n                \n                    Defined in src/base/swagger-gen/crud-routes.factory.ts:400\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                BaseRouteName\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        targetProto\n                    \n                \n\n                \n                    \n                        gettargetProto()\n                    \n                \n                            \n                                \n                                    Defined in src/base/swagger-gen/crud-routes.factory.ts:243\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        modelName\n                    \n                \n\n                \n                    \n                        getmodelName()\n                    \n                \n                            \n                                \n                                    Defined in src/base/swagger-gen/crud-routes.factory.ts:248\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        modelType\n                    \n                \n\n                \n                    \n                        getmodelType()\n                    \n                \n                            \n                                \n                                    Defined in src/base/swagger-gen/crud-routes.factory.ts:252\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { HttpStatus, RequestMethod } from '@nestjs/common'\n\nimport { Type } from 'class-transformer'\nimport * as deepmerge from 'deepmerge'\n\nimport {\n    ApiProperty,\n    BaseRoute,\n    isFalse,\n    isFunction,\n    isObjectFull,\n    objKeys,\n    swagger,\n    swaggerConst,\n} from './utils'\nimport type { CrudOptions, GetManyDefaultResponse, BaseRouteName } from './utils'\n\nexport class R {\n    static set(\n        metadataKey: string,\n        metadataValue: any,\n        target: Object,\n        propertyKey?: string | symbol,\n    ) {\n        if (!propertyKey) {\n            Reflect.defineMetadata(metadataKey, metadataValue, target)\n        } else {\n            Reflect.defineMetadata(metadataKey, metadataValue, target, propertyKey)\n        }\n    }\n\n    static get(\n        metadataKey: any,\n        target: Object,\n        propertyKey?: string | symbol,\n    ): T {\n        if (!propertyKey) return Reflect.getMetadata(metadataKey, target)\n\n        return Reflect.getMetadata(metadataKey, target, propertyKey)\n    }\n\n    static setRoute(route: BaseRoute, func: Function) {\n        R.set('path', route.path, func)\n        R.set('method', route.method, func)\n    }\n}\n\nexport class Swagger {\n    /**\n     * Sets extra swagger metadata for GET Calls\n     */\n    static setExtraModels(swaggerModels: {\n        [x: string]: any\n        get: Record\n    }) {\n        if (swaggerConst) {\n            const meta = Swagger.getExtraModels(swaggerModels.get)\n            const models = [\n                ...meta,\n                ...objKeys(swaggerModels)\n                    .map((name) => swaggerModels[name])\n                    .filter((one) => one && one.name !== swaggerModels.get.name),\n            ]\n\n            R.set(\n                swaggerConst.DECORATORS.API_EXTRA_MODELS,\n                models,\n                swaggerModels.get,\n            )\n        }\n    }\n\n    /**\n     * Sets swagger metadata for response of GET Calls\n     */\n    static setResponseOk(metadata: any[], func: Function) {\n        if (swaggerConst) {\n            R.set(swaggerConst.DECORATORS.API_RESPONSE, metadata, func)\n        }\n    }\n\n    static getExtraModels(target: Record): any[] {\n        return swaggerConst\n            ? R.get(swaggerConst.API_EXTRA_MODELS, target) || []\n            : []\n    }\n\n    static getResponseOk(func: Function) {\n        return swaggerConst\n            ? R.get(swaggerConst.DECORATORS.API_RESPONSE, func) || {}\n            : {}\n    }\n\n    static createResponseMeta(\n        name: BaseRouteName,\n        options: CrudOptions,\n        swaggerModels: {\n            [x: string]: any\n            get: { name: any }\n            getMany: { name: any }\n        },\n    ) {\n        if (swagger) {\n            const { query } = options\n\n            switch (name) {\n                case 'getOneBase':\n                    return {\n                        [HttpStatus.OK]: {\n                            description: 'Get one base response',\n                            type: swaggerModels.get,\n                        },\n                    }\n                case 'getOne':\n                    return {\n                        [HttpStatus.OK]: query?.alwaysPaginate\n                            ? {\n                                  description: 'Get paginated response',\n                                  type: swaggerModels.getMany,\n                              }\n                            : {\n                                  description: 'Get many base response',\n                                  schema: {\n                                      oneOf: [\n                                          {\n                                              $ref: swagger.getSchemaPath(\n                                                  swaggerModels.getMany.name,\n                                              ),\n                                          },\n                                          {\n                                              type: 'array',\n                                              items: {\n                                                  $ref: swagger.getSchemaPath(\n                                                      swaggerModels.get.name,\n                                                  ),\n                                              },\n                                          },\n                                      ],\n                                  },\n                              },\n                    }\n                default:\n                    // eslint-disable-next-line no-case-declarations\n                    const dto = swaggerModels[name.split('OneBase')[0]]\n\n                    return {\n                        [HttpStatus.OK]: {\n                            description: 'Response',\n                            schema: { $ref: swagger.getSchemaPath(dto.name) },\n                        },\n                    }\n            }\n        } else {\n            return {}\n        }\n    }\n}\n\nexport class SerializeHelper {\n    static createGetManyDto(dto: any, resourceName: string): any {\n        class GetManyResponseDto implements GetManyDefaultResponse {\n            @ApiProperty({ type: dto, isArray: true })\n            @Type(() => dto)\n            data!: any[]\n\n            @ApiProperty({ type: 'number' })\n            count!: number\n\n            @ApiProperty({ type: 'number' })\n            total!: number\n\n            @ApiProperty({ type: 'number' })\n            page!: number\n\n            @ApiProperty({ type: 'number' })\n            pageCount!: number\n        }\n\n        Object.defineProperty(GetManyResponseDto, 'name', {\n            writable: false,\n            value: `GetMany${resourceName}ResponseDto`,\n        })\n\n        return GetManyResponseDto\n    }\n\n    static createGetOneResponseDto(resourceName: string): any {\n        class GetOneResponseDto {}\n\n        Object.defineProperty(GetOneResponseDto, 'name', {\n            writable: false,\n            value: `${resourceName}ResponseDto`,\n        })\n\n        return GetOneResponseDto\n    }\n}\n\nexport class CrudConfigService {\n    static config: Partial = {\n        query: {\n            alwaysPaginate: false,\n        },\n    }\n\n    static load(config: Record) {\n        const query = isObjectFull(config.query) ? config.query : {}\n        const params = isObjectFull(config.params) ? config.params : {}\n        const serialize = isObjectFull(config.serialize) ? config.serialize : {}\n\n        CrudConfigService.config = deepmerge(\n            CrudConfigService.config,\n            { query, params, serialize },\n            { arrayMerge: (a, b, c) => b },\n        )\n    }\n}\n\nexport class CrudRoutesFactory {\n    protected options\n\n    protected swaggerModels: any = {}\n\n    constructor(private target: Object, options: CrudOptions) {\n        this.options = options\n        this.create()\n\n        console.log(\n            'CrudRoutesFactory::constructor',\n            // { ...options },\n            // this.targetProto,\n            // this.modelType,\n            // this.modelName,\n            // this.swaggerModels,\n        )\n    }\n\n    static create(target: Object, options: CrudOptions): CrudRoutesFactory {\n        return new CrudRoutesFactory(target, options)\n    }\n\n    get targetProto() {\n        // @ts-ignore\n        return this.target.prototype\n    }\n\n    get modelName() {\n        return this.options.model.type?.name\n    }\n\n    get modelType() {\n        return this.options.model.type\n    }\n\n    private create() {\n        const routesSchema = CrudRoutesFactory.getRoutesSchema()\n        this.mergeOptions()\n        this.setResponseModels()\n        this.createRoutes(routesSchema)\n        this.enableRoutes(routesSchema)\n    }\n\n    getOne(name: BaseRouteName) {\n        this.targetProto[name] = function getOne(req: any) {\n            return this.service.getOne(req)\n        }\n    }\n\n    getOneBase(name: BaseRouteName) {\n        this.targetProto[name] = function getOneBase(req: any) {\n            return this.service.getOneBase(req)\n        }\n    }\n\n    static getRoutesSchema(): BaseRoute[] {\n        return [\n            {\n                name: 'getOneBase',\n                path: '/',\n                method: RequestMethod.GET,\n                enable: false,\n                override: false,\n                withParams: true,\n            },\n            {\n                name: 'getOne',\n                path: '/',\n                method: RequestMethod.GET,\n                enable: false,\n                override: false,\n                withParams: false,\n            },\n        ]\n    }\n\n    mergeOptions() {\n        // merge query config\n        const query = isObjectFull(this.options.query) ? this.options.query : {}\n        this.options.query = { ...CrudConfigService.config.query, ...query }\n\n        // set dto\n        if (!isObjectFull(this.options.dto)) {\n            this.options.dto = {}\n        }\n\n        // set serialize\n        this.options.serialize = {\n            ...CrudConfigService.config.serialize,\n            ...this.options.serialize,\n        }\n\n        this.options.serialize.get = isFalse(this.options.serialize?.get)\n            ? false\n            : this.options.serialize?.get || this.modelType\n\n        this.options.serialize.getMany = isFalse(this.options.serialize?.getMany)\n            ? false\n            : this.options.serialize?.getMany\n            ? this.options.serialize?.getMany\n            : isFalse(this.options.serialize?.get)\n            ? false\n            : SerializeHelper.createGetManyDto(\n                  this.options.serialize?.get,\n                  this.modelName,\n              )\n\n        this.options.serialize.create = isFalse(this.options.serialize?.create)\n            ? false\n            : this.options.serialize?.create || this.modelType\n\n        this.options.serialize.update = isFalse(this.options.serialize?.update)\n            ? false\n            : this.options.serialize?.update || this.modelType\n\n        this.options.serialize.replace = isFalse(this.options.serialize?.replace)\n            ? false\n            : this.options.serialize?.replace || this.modelType\n\n        this.options.serialize.delete =\n            isFalse(this.options.serialize?.delete) ||\n            !this.options.routes?.deleteOneBase?.returnDeleted\n                ? false\n                : this.options.serialize?.delete || this.modelType\n\n        R.set('CRUD_OPTIONS_METADATA', this.options, this.target)\n    }\n\n    setResponseModels() {\n        const modelType = isFunction(this.modelType)\n            ? this.modelType\n            : SerializeHelper.createGetOneResponseDto(this.modelName)\n\n        this.swaggerModels.get = isFunction(this.options.serialize?.get)\n            ? this.options.serialize?.get\n            : modelType\n\n        this.swaggerModels.getMany =\n            this.options.serialize?.getMany ||\n            SerializeHelper.createGetManyDto(this.swaggerModels.get, this.modelName)\n\n        this.swaggerModels.create = isFunction(this.options.serialize?.create)\n            ? this.options.serialize?.create\n            : modelType\n\n        this.swaggerModels.update = isFunction(this.options.serialize?.update)\n            ? this.options.serialize?.update\n            : modelType\n\n        this.swaggerModels.replace = isFunction(this.options.serialize?.replace)\n            ? this.options.serialize?.replace\n            : modelType\n\n        this.swaggerModels.delete = isFunction(this.options.serialize?.delete)\n            ? this.options.serialize?.delete\n            : modelType\n\n        Swagger.setExtraModels(this.swaggerModels)\n    }\n\n    enableRoutes(routesSchema: BaseRoute[]) {\n        routesSchema.forEach((route) => {\n            if (!route.override && route.enable) {\n                R.setRoute(route, this.targetProto[route.name])\n            }\n        })\n    }\n\n    createRoutes(routesSchema: BaseRoute[]) {\n        routesSchema.forEach((route) => {\n            // create base method\n            /* this[route.name](route.name) */\n            route.enable = true\n\n            // set metadata\n            this.setSwaggerResponseOk(route.name)\n        })\n    }\n\n    setSwaggerResponseOk(name: BaseRouteName) {\n        const metadata = Swagger.getResponseOk(this.targetProto[name]) || {}\n        const metadataToAdd =\n            Swagger.createResponseMeta(name, this.options, this.swaggerModels) || {}\n\n        Swagger.setResponseOk(\n            // @ts-ignore\n            { ...metadata, ...metadataToAdd },\n            this.targetProto[name],\n        )\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CrudService.html":{"url":"classes/CrudService.html","title":"class - CrudService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CrudService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/base/crud/crud.service.ts\n        \n\n            \n                Description\n            \n            \n                Abstract base service that other services can extend to provide base CRUD\nfunctionality such as to create, find, update and delete data.\n\n            \n\n\n            \n                Implements\n            \n            \n                            ICrudService\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                findOneByEmail\n                            \n                            \n                                    Async\n                                findOneById\n                            \n                            \n                                    Async\n                                paginatedFindAll\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Protected\n                        constructor(model: ModelClass)\n                    \n                \n                        \n                            \n                                Defined in src/base/crud/crud.service.ts:15\n                            \n                        \n\n                \n                    \n                            The constructor must receive the injected model from the child service in\norder to provide all the proper base functionality.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        model\n                                                  \n                                                        \n                                                                    ModelClass\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe injected model.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            create\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    create(input: CreateUserDto | CreateTagsDto | T)\n                \n            \n\n\n            \n                \n                    Defined in src/base/crud/crud.service.ts:99\n                \n            \n\n\n            \n                \n                    Created a entry and return it\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    input\n                                    \n                                                CreateUserDto | CreateTagsDto | T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n\n            \n                \n                    Defined in src/base/crud/crud.service.ts:27\n                \n            \n\n\n            \n                \n                    Finds all entries and return the result\n\n\n                    \n                        Returns :     {}\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(filter: object)\n                \n            \n\n\n            \n                \n                    Defined in src/base/crud/crud.service.ts:56\n                \n            \n\n\n            \n                \n                    Finds one entry with where filter and return the result\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    filter\n                                    \n                                                object\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOneByEmail\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneByEmail(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/base/crud/crud.service.ts:78\n                \n            \n\n\n            \n                \n                    Finds onw entry by email and return the result\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOneById\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/base/crud/crud.service.ts:67\n                \n            \n\n\n            \n                \n                    Finds paginated entries and return the result\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            paginatedFindAll\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    paginatedFindAll(paginationParams: PaginationParams)\n                \n            \n\n\n            \n                \n                    Defined in src/base/crud/crud.service.ts:38\n                \n            \n\n\n            \n                \n                    Finds paginated entries and return the result\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    paginationParams\n                                    \n                                                PaginationParams\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            remove\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/base/crud/crud.service.ts:89\n                \n            \n\n\n            \n                \n                    Soft-deletes a entry and return it\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: number, input: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/base/crud/crud.service.ts:112\n                \n            \n\n\n            \n                \n                    Updates a entry and return it\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    input\n                                    \n                                            Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { NotFoundException } from '@nestjs/common'\n\nimport { ModelClass, raw } from 'objection'\n\nimport { BaseModel } from '../../database/models/base.model'\nimport { CreateTagsDto } from '../../tags/tag.model'\nimport { CreateUserDto } from '../../users/user.model'\nimport { ICrudService } from './crud.service.interface'\nimport { IPaginationResult, PaginationParams } from './pagination'\n\n/**\n * Abstract base service that other services can extend to provide base CRUD\n * functionality such as to create, find, update and delete data.\n */\nexport abstract class CrudService implements ICrudService {\n    /**\n     * The constructor must receive the injected model from the child service in\n     * order to provide all the proper base functionality.\n     *\n     * @param {Model} model - The injected model.\n     */\n    protected constructor(protected readonly model: ModelClass) {}\n\n    /**\n     * Finds all entries and return the result\n     */\n    async findAll() {\n        const data = await this.model.query()\n\n        if (data) return (data as unknown) as Promise\n\n        return Promise.reject(new NotFoundException())\n    }\n\n    /**\n     * Finds paginated entries and return the result\n     */\n    async paginatedFindAll(paginationParams: PaginationParams) {\n        const { page = 0, pageSize = 3, order } = paginationParams\n        const { results, total } = await this.model.query().page(page, pageSize)\n\n        return ({\n            data: results,\n            paging: {\n                pageSize,\n                page,\n                total,\n                totalPages: Math.ceil(total / pageSize),\n            },\n        } as unknown) as Promise>\n    }\n\n    /**\n     * Finds one entry with where filter and return the result\n     */\n    async findOne(filter = {}) {\n        const data = await this.model.query().findOne(filter)\n\n        if (data) return (data as unknown) as Promise\n\n        return Promise.reject(new NotFoundException())\n    }\n\n    /**\n     * Finds paginated entries and return the result\n     */\n    async findOneById(id: number) {\n        const data = await this.model.query().findById(id).first()\n\n        if (data) return (data as unknown) as Promise\n\n        return Promise.reject(new NotFoundException())\n    }\n\n    /**\n     * Finds onw entry by email and return the result\n     */\n    async findOneByEmail(email: string) {\n        const data = await this.model.query().findOne({ email })\n\n        if (data) return (data as unknown) as Promise\n\n        return Promise.reject(new NotFoundException())\n    }\n\n    /**\n     * Soft-deletes a entry and return it\n     */\n    async remove(id: number) {\n        // @ts-ignore\n        return this.update(id, {\n            deleted_at: raw('CURRENT_TIMESTAMP'),\n        })\n    }\n\n    /**\n     * Created a entry and return it\n     */\n    async create(input: CreateUserDto | CreateTagsDto | T) {\n        try {\n            const data = await this.model.query().insertAndFetch(input as T)\n\n            return (data as unknown) as Promise\n        } catch (e) {\n            return Promise.reject(e)\n        }\n    }\n\n    /**\n     * Updates a entry and return it\n     */\n    async update(id: number, input: Partial) {\n        try {\n            const data = await this.model.query().patchAndFetchById(id, input)\n\n            return (data as unknown) as Promise\n        } catch (e) {\n            return Promise.reject(e)\n        }\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CustomQueryBuilder.html":{"url":"classes/CustomQueryBuilder.html","title":"class - CustomQueryBuilder","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CustomQueryBuilder\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/models/helpers.ts\n        \n\n\n            \n                Extends\n            \n            \n                    QueryBuilder\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                ArrayQueryBuilderType\n                            \n                            \n                                NumberQueryBuilderType\n                            \n                            \n                                PageQueryBuilderType\n                            \n                            \n                                SingleQueryBuilderType\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                chunk\n                            \n                            \n                                    Async\n                                exists\n                            \n                            \n                                    Async\n                                onlyCount\n                            \n                            \n                                    Async\n                                paginate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ArrayQueryBuilderType\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         CustomQueryBuilder\n\n                        \n                    \n                        \n                            \n                                    Defined in src/database/models/helpers.ts:37\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            NumberQueryBuilderType\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         CustomQueryBuilder\n\n                        \n                    \n                        \n                            \n                                    Defined in src/database/models/helpers.ts:41\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            PageQueryBuilderType\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         CustomQueryBuilder>\n\n                        \n                    \n                        \n                            \n                                    Defined in src/database/models/helpers.ts:43\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            SingleQueryBuilderType\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         CustomQueryBuilder\n\n                        \n                    \n                        \n                            \n                                    Defined in src/database/models/helpers.ts:39\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            chunk\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    chunk(cb: Function, size: number)\n                \n            \n\n\n            \n                \n                    Defined in src/database/models/helpers.ts:75\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    cb\n                                    \n                                                Function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    size\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            exists\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    exists()\n                \n            \n\n\n            \n                \n                    Defined in src/database/models/helpers.ts:70\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     {}\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            onlyCount\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    onlyCount()\n                \n            \n\n\n            \n                \n                    Defined in src/database/models/helpers.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     {}\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            paginate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    paginate(page: number, perPage: number)\n                \n            \n\n\n            \n                \n                    Defined in src/database/models/helpers.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    page\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    perPage\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { cloneDeep } from 'lodash'\nimport { Model, Page, QueryBuilder } from 'objection'\n\n/**\n * Check if value is of type object.\n *\n * @param value\n */\nexport function isObject(value: any): boolean {\n    return typeof value === 'object' && value !== null\n}\n\n/**\n * Check if value is empty\n *\n * @param value\n */\nexport function isEmpty(value: any): boolean {\n    if (Array.isArray(value) && value.length  extends QueryBuilder {\n    ArrayQueryBuilderType!: CustomQueryBuilder\n\n    SingleQueryBuilderType!: CustomQueryBuilder\n\n    NumberQueryBuilderType!: CustomQueryBuilder\n\n    PageQueryBuilderType!: CustomQueryBuilder>\n\n    async paginate(page: number, perPage: number) {\n        page = +page ? +page : 1 // eslint-disable-line no-param-reassign\n        perPage = +perPage ? +perPage : 15 // eslint-disable-line no-param-reassign\n\n        const result = await this.page(page - 1, perPage)\n        return {\n            pagination: {\n                currentPage: page,\n                totalPages: Math.ceil(result.total / perPage),\n                perPage,\n                total: result.total,\n            },\n            data: result.results,\n        }\n    }\n\n    async onlyCount() {\n        const result: { c: unknown }[] = ((await this.count({\n            c: '*',\n        })) as unknown) as {\n            c: unknown\n        }[]\n        return result[0].c\n    }\n\n    async exists() {\n        return !!(await this.onlyCount())\n    }\n\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    async chunk(cb: Function, size: number): Promise {\n        let offset = 0\n        let hasMore = true\n\n        while (!offset || hasMore) {\n            const query = cloneDeep(this)\n            const records = await query.offset(offset).limit(size) // eslint-disable-line no-await-in-loop\n\n            hasMore = isNotEmpty(records)\n\n            if (!hasMore) return\n\n            await cb(records) // eslint-disable-line no-await-in-loop\n\n            offset += size\n        }\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/DatabaseModule.html":{"url":"modules/DatabaseModule.html","title":"module - DatabaseModule","body":"\n                   \n\n\n\n\n    Modules\n    DatabaseModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/database/database.module.ts\n        \n\n\n        \n            Description\n        \n        \n            Database module\n\n        \n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Global, Module } from '@nestjs/common'\n\nimport { graphql } from 'graphql'\nimport * as Knex from 'knex'\nimport { Model } from 'objection'\nimport { builder as graphQlBuilder } from 'objection-graphql'\n\nimport { Tag } from '../tags/tag.model'\nimport { User } from '../users/user.model'\n\nconst models = [Tag, User]\n\nexport const graphQlSchema = graphQlBuilder().allModels(models).build()\n\nconsole.info({ graphQlSchema })\n\nexport const modelProviders = models.map((model) => {\n    return {\n        provide: model.name,\n        useValue: model,\n    }\n})\n\nexport const databaseProviders = [\n    ...modelProviders,\n    {\n        provide: 'KnexConnection',\n        useFactory: async () => {\n            const knex = Knex({\n                client: 'sqlite3',\n                useNullAsDefault: true,\n                connection: {\n                    filename: './knex.sqlite',\n                },\n                debug: true,\n            })\n\n            Model.knex(knex)\n            return knex\n        },\n    },\n]\n\n/**\n * Database module\n */\n@Global()\n@Module({\n    providers: [...databaseProviders],\n    exports: [...databaseProviders],\n})\nexport class DatabaseModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/EmailModule.html":{"url":"modules/EmailModule.html","title":"module - EmailModule","body":"\n                   \n\n\n\n\n    Modules\n    EmailModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_EmailModule\n\n\n\ncluster_EmailModule_providers\n\n\n\ncluster_EmailModule_exports\n\n\n\n\nEmailService \n\nEmailService \n\n\n\nEmailModule\n\nEmailModule\n\nEmailService  -->\n\nEmailModule->EmailService \n\n\n\n\n\nEmailService\n\nEmailService\n\nEmailModule -->\n\nEmailService->EmailModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/email/email.module.ts\n        \n\n\n        \n            Description\n        \n        \n            Email module\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            EmailService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            EmailService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common'\nimport { ConfigModule } from '@nestjs/config'\n\nimport EmailService from './email.service'\n\n/**\n * Email module\n */\n@Module({\n    imports: [ConfigModule],\n    controllers: [],\n    providers: [EmailService],\n    exports: [EmailService],\n})\nexport class EmailModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EmailScheduleDto.html":{"url":"classes/EmailScheduleDto.html","title":"class - EmailScheduleDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EmailScheduleDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/emailScheduling/emailSchedule.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                content\n                            \n                            \n                                date\n                            \n                            \n                                recipient\n                            \n                            \n                                subject\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            content\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/emailScheduling/emailSchedule.dto.ts:13\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            date\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsDateString()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/emailScheduling/emailSchedule.dto.ts:16\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            recipient\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsEmail()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/emailScheduling/emailSchedule.dto.ts:5\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            subject\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/emailScheduling/emailSchedule.dto.ts:9\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsNotEmpty, IsDateString, IsEmail } from 'class-validator'\n\nexport class EmailScheduleDto {\n    @IsEmail()\n    recipient!: string\n\n    @IsString()\n    @IsNotEmpty()\n    subject!: string\n\n    @IsString()\n    @IsNotEmpty()\n    content!: string\n\n    @IsDateString()\n    date!: string\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/EmailSchedulingController.html":{"url":"controllers/EmailSchedulingController.html","title":"controller - EmailSchedulingController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  EmailSchedulingController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/emailScheduling/emailScheduling.controller.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                scheduleEmail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            scheduleEmail\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    scheduleEmail(emailSchedule: EmailScheduleDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('schedule')\n                \n            \n\n            \n                \n                    Defined in src/emailScheduling/emailScheduling.controller.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    emailSchedule\n                                    \n                                                EmailScheduleDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post } from '@nestjs/common'\nimport { ApiTags } from '@nestjs/swagger'\n\nimport { EmailScheduleDto } from './emailSchedule.dto'\nimport EmailSchedulingService from './emailScheduling.service'\n\n@ApiTags(EmailSchedulingController.name)\n@Controller(EmailSchedulingController.path)\nexport default class EmailSchedulingController {\n    static path = 'email-scheduling'\n\n    constructor(readonly emailSchedulingService: EmailSchedulingService) {}\n\n    @Post('schedule')\n    async scheduleEmail(@Body() emailSchedule: EmailScheduleDto) {\n        await this.emailSchedulingService.scheduleEmail(emailSchedule)\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/EmailSchedulingModule.html":{"url":"modules/EmailSchedulingModule.html","title":"module - EmailSchedulingModule","body":"\n                   \n\n\n\n\n    Modules\n    EmailSchedulingModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_EmailSchedulingModule\n\n\n\ncluster_EmailSchedulingModule_providers\n\n\n\ncluster_EmailSchedulingModule_imports\n\n\n\n\nEmailModule\n\nEmailModule\n\n\n\nEmailSchedulingModule\n\nEmailSchedulingModule\n\nEmailSchedulingModule -->\n\nEmailModule->EmailSchedulingModule\n\n\n\n\n\nEmailSchedulingService\n\nEmailSchedulingService\n\nEmailSchedulingModule -->\n\nEmailSchedulingService->EmailSchedulingModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/emailScheduling/emailScheduling.module.ts\n        \n\n\n        \n            Description\n        \n        \n            Email scheduling module\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            EmailSchedulingService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            EmailSchedulingController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            EmailModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common'\n\nimport { EmailModule } from '../email/email.module'\nimport EmailSchedulingController from './emailScheduling.controller'\nimport EmailSchedulingService from './emailScheduling.service'\n\n/**\n * Email scheduling module\n */\n@Module({\n    imports: [EmailModule],\n    controllers: [EmailSchedulingController],\n    providers: [EmailSchedulingService],\n})\nexport class EmailSchedulingModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/EmailSchedulingService.html":{"url":"injectables/EmailSchedulingService.html","title":"injectable - EmailSchedulingService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  EmailSchedulingService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/emailScheduling/emailScheduling.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                scheduleEmail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(emailService: EmailService, scheduler: SchedulerRegistry)\n                    \n                \n                        \n                            \n                                Defined in src/emailScheduling/emailScheduling.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        emailService\n                                                  \n                                                        \n                                                                        EmailService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        scheduler\n                                                  \n                                                        \n                                                                        SchedulerRegistry\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            scheduleEmail\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    scheduleEmail(emailSchedule: EmailScheduleDto)\n                \n            \n\n\n            \n                \n                    Defined in src/emailScheduling/emailScheduling.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    emailSchedule\n                                    \n                                                EmailScheduleDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            logger\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Logger(EmailSchedulingService.name)\n                        \n                    \n                        \n                            \n                                    Defined in src/emailScheduling/emailScheduling.service.ts:11\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable, Logger } from '@nestjs/common'\nimport { SchedulerRegistry } from '@nestjs/schedule'\n\nimport { CronJob } from 'cron'\n\nimport EmailService from '../email/email.service'\nimport { EmailScheduleDto } from './emailSchedule.dto'\n\n@Injectable()\nexport default class EmailSchedulingService {\n    logger = new Logger(EmailSchedulingService.name)\n\n    constructor(\n        readonly emailService: EmailService,\n        readonly scheduler: SchedulerRegistry,\n    ) {}\n\n    async scheduleEmail(emailSchedule: EmailScheduleDto) {\n        const date = new Date(emailSchedule.date)\n\n        const job = new CronJob(date, () => {\n            this.emailService.sendMail({\n                subject: emailSchedule.subject,\n                text: emailSchedule.content,\n                to: emailSchedule.recipient,\n            })\n        })\n\n        this.scheduler.addCronJob(`${Date.now()}-${emailSchedule.subject}`, job)\n\n        job.start()\n        this.logger.log(`email job added at ${date.toLocaleDateString()}!`)\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/EmailService.html":{"url":"injectables/EmailService.html","title":"injectable - EmailService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  EmailService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/email/email.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                sendMail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/email/email.service.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            sendMail\n                        \n                        \n                    \n                \n            \n            \n                \nsendMail(options)\n                \n            \n\n\n            \n                \n                    Defined in src/email/email.service.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common'\nimport { ConfigService } from '@nestjs/config'\n\n@Injectable()\nexport default class EmailService {\n    constructor(\n        private readonly configService: ConfigService,\n    ) {}\n\n    // TODO: Implement this\n    sendMail(options) {\n        console.log({ options, config: this.configService.get('NODE_ENV') })\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ExcludeNullUndefinedInterceptor.html":{"url":"injectables/ExcludeNullUndefinedInterceptor.html","title":"injectable - ExcludeNullUndefinedInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ExcludeNullUndefinedInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infra/interceptors/null-undefined-override.ts\n        \n\n            \n                Description\n            \n            \n                Interceptors to transform each occurrence of a null value to an empty string ''\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            intercept\n                        \n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n            \n                \n                    Defined in src/infra/interceptors/null-undefined-override.ts:51\n                \n            \n\n\n            \n                \n                    Interceptor Method to implement a custom interceptor.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        an ExecutionContext object providing methods to access the\nroute handler and class about to be invoked.\n\n                                    \n                                \n                                \n                                    next\n                                    \n                                            CallHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        a reference to the CallHandler, which provides access to an\nObservable representing the response stream from the route handler.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n    Injectable,\n    NestInterceptor,\n    ExecutionContext,\n    CallHandler,\n} from '@nestjs/common'\n\nimport { Observable } from 'rxjs'\nimport { map } from 'rxjs/operators'\n\n/**\n * Recursively Strip Null Values\n */\nfunction recursivelyStripNullValues(value: unknown): unknown {\n    if (Array.isArray(value)) {\n        return value.map(recursivelyStripNullValues)\n    }\n\n    if (value !== null && typeof value === 'object') {\n        // @ts-ignore\n        return Object.fromEntries(\n            // @ts-ignore\n            // eslint-disable-next-line @typescript-eslint/no-shadow\n            Object.entries(value).map(([k, v]) => [\n                k,\n                recursivelyStripNullValues(v),\n            ]),\n        )\n    }\n\n    if (value !== null) {\n        return value\n    }\n\n    return ''\n}\n\n/**\n * Interceptors to transform each occurrence of a null value to an empty string ''\n */\n@Injectable()\nexport class ExcludeNullUndefinedInterceptor implements NestInterceptor {\n    /**\n     * Interceptor Method to implement a custom interceptor.\n     *\n     * @param context an `ExecutionContext` object providing methods to access the\n     * route handler and class about to be invoked.\n     * @param next a reference to the `CallHandler`, which provides access to an\n     * `Observable` representing the response stream from the route handler.\n     */\n    intercept(context: ExecutionContext, next: CallHandler): Observable {\n        return next.handle().pipe(\n            map(\n                (value) => value ?? '', // recursivelyStripNullValues(value),\n            ),\n        )\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Follower.html":{"url":"interfaces/Follower.html","title":"interface - Follower","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Follower\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/domain.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        areYouFollowing\n                                \n                                \n                                        profileImage\n                                \n                                \n                                        showRemoveOption\n                                \n                                \n                                        userId\n                                \n                                \n                                        userName\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        areYouFollowing\n                                    \n                                \n                                \n                                    \n                                        areYouFollowing:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        profileImage\n                                    \n                                \n                                \n                                    \n                                        profileImage:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        showRemoveOption\n                                    \n                                \n                                \n                                    \n                                        showRemoveOption:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        userId\n                                    \n                                \n                                \n                                    \n                                        userId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        userName\n                                    \n                                \n                                \n                                    \n                                        userName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { HttpStatus } from '@nestjs/common'\n\nexport type Results =\n    | GetAppLaunchData\n    | GetUserProfile\n    | GetUserPosts\n    | GetComments\n    | GetRescueList\n    | GetFollowers\n    | GetFollowing\n\nexport type APIError = Error | string | null\n\nexport interface Result {\n    data: T\n    error?: APIError\n    message?: string | string[]\n    statusCode: HttpStatus\n}\n\nexport interface APIResponse {\n    data: T\n    error?: APIError\n    message?: string | string[]\n    statusCode: HttpStatus\n\n    count?: number\n    page?: number\n    pageCount?: number\n    total?: number\n}\n\nexport interface GetAppLaunchData {\n    link: 'api:/'\n    response: APIResponse\n}\n\nexport interface GetUserProfile {\n    link: 'api:v1/user/getUserProfile?userId=25'\n    response: APIResponse\n}\n\nexport interface GetUserPosts {\n    link: 'api:v1/user/getUserPosts?pageNo=0&pageSize=25'\n    response: APIResponse\n}\n\nexport interface GetRescueList {\n    link: 'api:v1/rescue/getRescueList?pageNo=0&pageSize=10&status=pending|inProgress|completed|nearest'\n    response: APIResponse\n}\n\nexport interface GetComments {\n    link: 'api:v1/rescue/getComments?pageNo=0&pageSize=10&postId=1230'\n    response: APIResponse\n}\n\nexport interface GetFollowers {\n    link: 'api:v1/rescue/getUserFollowers?userId=1230'\n    response: APIResponse\n}\n\nexport interface GetFollowing {\n    link: 'api:v1/rescue/getUserFollowing?userId=1230'\n    response: APIResponse\n}\n\nexport interface AppLaunchAction {\n    actionId: number\n    action: string\n    isActive: boolean\n    subject?: string\n}\n\nexport interface User {\n    usesId: number\n\n    coverImage: string\n    following: boolean\n    gender: string\n    isOwnProfile: number\n    isRescuer: boolean\n    latitude: number\n    longitude: number\n    numberOfFollowers: number\n    numberOfFollowing: number\n    numberOfPosts: number\n    numberOfRescuesCompleted: number\n    numberOfRescuesCreated: number\n    numberOfRescuesInProgress: number\n    profileImage: string\n    rescuer: boolean\n    userAddress: string\n    userContacts: string\n    userEmail: string\n    userName: string\n    badge: {\n        badgeId: number\n        badgeName: string\n        badgeDescription: string\n        recuesCompletionNeeded: number\n    }\n    setting: {\n        showMyContacts: boolean\n        getNotifications: boolean\n    }\n}\n\nexport interface PostType {\n    postTypeId: number\n    postType: string\n}\n\nexport interface PostedByUser {\n    usesId: number\n    badgeName: string\n    following: boolean\n    profileImage: string\n    rescuer: boolean\n    userName: string\n}\n\nexport interface UserPost {\n    postId: number\n    commentsCount: number\n    isUserReactedToPost: boolean\n    ownPage: boolean\n    postBy: PostedByUser\n    postImage: string\n    postTime: string\n    postType: PostType\n    postVideo: string\n    reactionsCount: number\n    timeAgo: string\n\n    adCorporateLogoUrl: string | null\n    corporateDescription: string | null\n    corporateName: string | null\n}\n\nexport interface UserPosts {\n    isRecent: boolean\n    feed: UserPost[]\n}\n\nexport interface Rescues {\n    rescueId: number\n    animalImageUrl: string\n    distance: number\n    distanceAway: string\n    emergencyType: string\n    postedBy: string\n    postedMinAgo: string\n    rescueDate: Date\n    rescuedPetName: string\n    rescueLocality: string\n    rescuers: {\n        contact: number\n        name: string\n        profileId: number\n        profileImageUrl: string\n        rescues: boolean\n        showMyNumber: boolean\n    }\n    rescueStatus: string\n    viewsCont: number\n}\n\nexport interface RescueLists {\n    rescues: Rescues[]\n}\n\nexport interface Comment {\n    commentId: number\n    comment: string\n    commentedUseName: string\n    commentedUserId: number\n    timeAgo: string\n}\n\nexport interface Comments {\n    comments: Comment[]\n}\n\nexport interface Follower {\n    userId: number\n    userName: string\n    profileImage: string\n    areYouFollowing: boolean\n    showRemoveOption: boolean\n}\n\nexport type Following = Follower\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/GetAppLaunchData.html":{"url":"interfaces/GetAppLaunchData.html","title":"interface - GetAppLaunchData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  GetAppLaunchData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/domain.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        link\n                                \n                                \n                                        response\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        link\n                                    \n                                \n                                \n                                    \n                                        link:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        response\n                                    \n                                \n                                \n                                    \n                                        response:         APIResponse\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         APIResponse\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { HttpStatus } from '@nestjs/common'\n\nexport type Results =\n    | GetAppLaunchData\n    | GetUserProfile\n    | GetUserPosts\n    | GetComments\n    | GetRescueList\n    | GetFollowers\n    | GetFollowing\n\nexport type APIError = Error | string | null\n\nexport interface Result {\n    data: T\n    error?: APIError\n    message?: string | string[]\n    statusCode: HttpStatus\n}\n\nexport interface APIResponse {\n    data: T\n    error?: APIError\n    message?: string | string[]\n    statusCode: HttpStatus\n\n    count?: number\n    page?: number\n    pageCount?: number\n    total?: number\n}\n\nexport interface GetAppLaunchData {\n    link: 'api:/'\n    response: APIResponse\n}\n\nexport interface GetUserProfile {\n    link: 'api:v1/user/getUserProfile?userId=25'\n    response: APIResponse\n}\n\nexport interface GetUserPosts {\n    link: 'api:v1/user/getUserPosts?pageNo=0&pageSize=25'\n    response: APIResponse\n}\n\nexport interface GetRescueList {\n    link: 'api:v1/rescue/getRescueList?pageNo=0&pageSize=10&status=pending|inProgress|completed|nearest'\n    response: APIResponse\n}\n\nexport interface GetComments {\n    link: 'api:v1/rescue/getComments?pageNo=0&pageSize=10&postId=1230'\n    response: APIResponse\n}\n\nexport interface GetFollowers {\n    link: 'api:v1/rescue/getUserFollowers?userId=1230'\n    response: APIResponse\n}\n\nexport interface GetFollowing {\n    link: 'api:v1/rescue/getUserFollowing?userId=1230'\n    response: APIResponse\n}\n\nexport interface AppLaunchAction {\n    actionId: number\n    action: string\n    isActive: boolean\n    subject?: string\n}\n\nexport interface User {\n    usesId: number\n\n    coverImage: string\n    following: boolean\n    gender: string\n    isOwnProfile: number\n    isRescuer: boolean\n    latitude: number\n    longitude: number\n    numberOfFollowers: number\n    numberOfFollowing: number\n    numberOfPosts: number\n    numberOfRescuesCompleted: number\n    numberOfRescuesCreated: number\n    numberOfRescuesInProgress: number\n    profileImage: string\n    rescuer: boolean\n    userAddress: string\n    userContacts: string\n    userEmail: string\n    userName: string\n    badge: {\n        badgeId: number\n        badgeName: string\n        badgeDescription: string\n        recuesCompletionNeeded: number\n    }\n    setting: {\n        showMyContacts: boolean\n        getNotifications: boolean\n    }\n}\n\nexport interface PostType {\n    postTypeId: number\n    postType: string\n}\n\nexport interface PostedByUser {\n    usesId: number\n    badgeName: string\n    following: boolean\n    profileImage: string\n    rescuer: boolean\n    userName: string\n}\n\nexport interface UserPost {\n    postId: number\n    commentsCount: number\n    isUserReactedToPost: boolean\n    ownPage: boolean\n    postBy: PostedByUser\n    postImage: string\n    postTime: string\n    postType: PostType\n    postVideo: string\n    reactionsCount: number\n    timeAgo: string\n\n    adCorporateLogoUrl: string | null\n    corporateDescription: string | null\n    corporateName: string | null\n}\n\nexport interface UserPosts {\n    isRecent: boolean\n    feed: UserPost[]\n}\n\nexport interface Rescues {\n    rescueId: number\n    animalImageUrl: string\n    distance: number\n    distanceAway: string\n    emergencyType: string\n    postedBy: string\n    postedMinAgo: string\n    rescueDate: Date\n    rescuedPetName: string\n    rescueLocality: string\n    rescuers: {\n        contact: number\n        name: string\n        profileId: number\n        profileImageUrl: string\n        rescues: boolean\n        showMyNumber: boolean\n    }\n    rescueStatus: string\n    viewsCont: number\n}\n\nexport interface RescueLists {\n    rescues: Rescues[]\n}\n\nexport interface Comment {\n    commentId: number\n    comment: string\n    commentedUseName: string\n    commentedUserId: number\n    timeAgo: string\n}\n\nexport interface Comments {\n    comments: Comment[]\n}\n\nexport interface Follower {\n    userId: number\n    userName: string\n    profileImage: string\n    areYouFollowing: boolean\n    showRemoveOption: boolean\n}\n\nexport type Following = Follower\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/GetComments.html":{"url":"interfaces/GetComments.html","title":"interface - GetComments","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  GetComments\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/domain.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        link\n                                \n                                \n                                        response\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        link\n                                    \n                                \n                                \n                                    \n                                        link:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        response\n                                    \n                                \n                                \n                                    \n                                        response:         APIResponse\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         APIResponse\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { HttpStatus } from '@nestjs/common'\n\nexport type Results =\n    | GetAppLaunchData\n    | GetUserProfile\n    | GetUserPosts\n    | GetComments\n    | GetRescueList\n    | GetFollowers\n    | GetFollowing\n\nexport type APIError = Error | string | null\n\nexport interface Result {\n    data: T\n    error?: APIError\n    message?: string | string[]\n    statusCode: HttpStatus\n}\n\nexport interface APIResponse {\n    data: T\n    error?: APIError\n    message?: string | string[]\n    statusCode: HttpStatus\n\n    count?: number\n    page?: number\n    pageCount?: number\n    total?: number\n}\n\nexport interface GetAppLaunchData {\n    link: 'api:/'\n    response: APIResponse\n}\n\nexport interface GetUserProfile {\n    link: 'api:v1/user/getUserProfile?userId=25'\n    response: APIResponse\n}\n\nexport interface GetUserPosts {\n    link: 'api:v1/user/getUserPosts?pageNo=0&pageSize=25'\n    response: APIResponse\n}\n\nexport interface GetRescueList {\n    link: 'api:v1/rescue/getRescueList?pageNo=0&pageSize=10&status=pending|inProgress|completed|nearest'\n    response: APIResponse\n}\n\nexport interface GetComments {\n    link: 'api:v1/rescue/getComments?pageNo=0&pageSize=10&postId=1230'\n    response: APIResponse\n}\n\nexport interface GetFollowers {\n    link: 'api:v1/rescue/getUserFollowers?userId=1230'\n    response: APIResponse\n}\n\nexport interface GetFollowing {\n    link: 'api:v1/rescue/getUserFollowing?userId=1230'\n    response: APIResponse\n}\n\nexport interface AppLaunchAction {\n    actionId: number\n    action: string\n    isActive: boolean\n    subject?: string\n}\n\nexport interface User {\n    usesId: number\n\n    coverImage: string\n    following: boolean\n    gender: string\n    isOwnProfile: number\n    isRescuer: boolean\n    latitude: number\n    longitude: number\n    numberOfFollowers: number\n    numberOfFollowing: number\n    numberOfPosts: number\n    numberOfRescuesCompleted: number\n    numberOfRescuesCreated: number\n    numberOfRescuesInProgress: number\n    profileImage: string\n    rescuer: boolean\n    userAddress: string\n    userContacts: string\n    userEmail: string\n    userName: string\n    badge: {\n        badgeId: number\n        badgeName: string\n        badgeDescription: string\n        recuesCompletionNeeded: number\n    }\n    setting: {\n        showMyContacts: boolean\n        getNotifications: boolean\n    }\n}\n\nexport interface PostType {\n    postTypeId: number\n    postType: string\n}\n\nexport interface PostedByUser {\n    usesId: number\n    badgeName: string\n    following: boolean\n    profileImage: string\n    rescuer: boolean\n    userName: string\n}\n\nexport interface UserPost {\n    postId: number\n    commentsCount: number\n    isUserReactedToPost: boolean\n    ownPage: boolean\n    postBy: PostedByUser\n    postImage: string\n    postTime: string\n    postType: PostType\n    postVideo: string\n    reactionsCount: number\n    timeAgo: string\n\n    adCorporateLogoUrl: string | null\n    corporateDescription: string | null\n    corporateName: string | null\n}\n\nexport interface UserPosts {\n    isRecent: boolean\n    feed: UserPost[]\n}\n\nexport interface Rescues {\n    rescueId: number\n    animalImageUrl: string\n    distance: number\n    distanceAway: string\n    emergencyType: string\n    postedBy: string\n    postedMinAgo: string\n    rescueDate: Date\n    rescuedPetName: string\n    rescueLocality: string\n    rescuers: {\n        contact: number\n        name: string\n        profileId: number\n        profileImageUrl: string\n        rescues: boolean\n        showMyNumber: boolean\n    }\n    rescueStatus: string\n    viewsCont: number\n}\n\nexport interface RescueLists {\n    rescues: Rescues[]\n}\n\nexport interface Comment {\n    commentId: number\n    comment: string\n    commentedUseName: string\n    commentedUserId: number\n    timeAgo: string\n}\n\nexport interface Comments {\n    comments: Comment[]\n}\n\nexport interface Follower {\n    userId: number\n    userName: string\n    profileImage: string\n    areYouFollowing: boolean\n    showRemoveOption: boolean\n}\n\nexport type Following = Follower\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/GetFollowers.html":{"url":"interfaces/GetFollowers.html","title":"interface - GetFollowers","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  GetFollowers\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/domain.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        link\n                                \n                                \n                                        response\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        link\n                                    \n                                \n                                \n                                    \n                                        link:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        response\n                                    \n                                \n                                \n                                    \n                                        response:         APIResponse\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         APIResponse\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { HttpStatus } from '@nestjs/common'\n\nexport type Results =\n    | GetAppLaunchData\n    | GetUserProfile\n    | GetUserPosts\n    | GetComments\n    | GetRescueList\n    | GetFollowers\n    | GetFollowing\n\nexport type APIError = Error | string | null\n\nexport interface Result {\n    data: T\n    error?: APIError\n    message?: string | string[]\n    statusCode: HttpStatus\n}\n\nexport interface APIResponse {\n    data: T\n    error?: APIError\n    message?: string | string[]\n    statusCode: HttpStatus\n\n    count?: number\n    page?: number\n    pageCount?: number\n    total?: number\n}\n\nexport interface GetAppLaunchData {\n    link: 'api:/'\n    response: APIResponse\n}\n\nexport interface GetUserProfile {\n    link: 'api:v1/user/getUserProfile?userId=25'\n    response: APIResponse\n}\n\nexport interface GetUserPosts {\n    link: 'api:v1/user/getUserPosts?pageNo=0&pageSize=25'\n    response: APIResponse\n}\n\nexport interface GetRescueList {\n    link: 'api:v1/rescue/getRescueList?pageNo=0&pageSize=10&status=pending|inProgress|completed|nearest'\n    response: APIResponse\n}\n\nexport interface GetComments {\n    link: 'api:v1/rescue/getComments?pageNo=0&pageSize=10&postId=1230'\n    response: APIResponse\n}\n\nexport interface GetFollowers {\n    link: 'api:v1/rescue/getUserFollowers?userId=1230'\n    response: APIResponse\n}\n\nexport interface GetFollowing {\n    link: 'api:v1/rescue/getUserFollowing?userId=1230'\n    response: APIResponse\n}\n\nexport interface AppLaunchAction {\n    actionId: number\n    action: string\n    isActive: boolean\n    subject?: string\n}\n\nexport interface User {\n    usesId: number\n\n    coverImage: string\n    following: boolean\n    gender: string\n    isOwnProfile: number\n    isRescuer: boolean\n    latitude: number\n    longitude: number\n    numberOfFollowers: number\n    numberOfFollowing: number\n    numberOfPosts: number\n    numberOfRescuesCompleted: number\n    numberOfRescuesCreated: number\n    numberOfRescuesInProgress: number\n    profileImage: string\n    rescuer: boolean\n    userAddress: string\n    userContacts: string\n    userEmail: string\n    userName: string\n    badge: {\n        badgeId: number\n        badgeName: string\n        badgeDescription: string\n        recuesCompletionNeeded: number\n    }\n    setting: {\n        showMyContacts: boolean\n        getNotifications: boolean\n    }\n}\n\nexport interface PostType {\n    postTypeId: number\n    postType: string\n}\n\nexport interface PostedByUser {\n    usesId: number\n    badgeName: string\n    following: boolean\n    profileImage: string\n    rescuer: boolean\n    userName: string\n}\n\nexport interface UserPost {\n    postId: number\n    commentsCount: number\n    isUserReactedToPost: boolean\n    ownPage: boolean\n    postBy: PostedByUser\n    postImage: string\n    postTime: string\n    postType: PostType\n    postVideo: string\n    reactionsCount: number\n    timeAgo: string\n\n    adCorporateLogoUrl: string | null\n    corporateDescription: string | null\n    corporateName: string | null\n}\n\nexport interface UserPosts {\n    isRecent: boolean\n    feed: UserPost[]\n}\n\nexport interface Rescues {\n    rescueId: number\n    animalImageUrl: string\n    distance: number\n    distanceAway: string\n    emergencyType: string\n    postedBy: string\n    postedMinAgo: string\n    rescueDate: Date\n    rescuedPetName: string\n    rescueLocality: string\n    rescuers: {\n        contact: number\n        name: string\n        profileId: number\n        profileImageUrl: string\n        rescues: boolean\n        showMyNumber: boolean\n    }\n    rescueStatus: string\n    viewsCont: number\n}\n\nexport interface RescueLists {\n    rescues: Rescues[]\n}\n\nexport interface Comment {\n    commentId: number\n    comment: string\n    commentedUseName: string\n    commentedUserId: number\n    timeAgo: string\n}\n\nexport interface Comments {\n    comments: Comment[]\n}\n\nexport interface Follower {\n    userId: number\n    userName: string\n    profileImage: string\n    areYouFollowing: boolean\n    showRemoveOption: boolean\n}\n\nexport type Following = Follower\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/GetFollowing.html":{"url":"interfaces/GetFollowing.html","title":"interface - GetFollowing","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  GetFollowing\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/domain.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        link\n                                \n                                \n                                        response\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        link\n                                    \n                                \n                                \n                                    \n                                        link:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        response\n                                    \n                                \n                                \n                                    \n                                        response:         APIResponse\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         APIResponse\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { HttpStatus } from '@nestjs/common'\n\nexport type Results =\n    | GetAppLaunchData\n    | GetUserProfile\n    | GetUserPosts\n    | GetComments\n    | GetRescueList\n    | GetFollowers\n    | GetFollowing\n\nexport type APIError = Error | string | null\n\nexport interface Result {\n    data: T\n    error?: APIError\n    message?: string | string[]\n    statusCode: HttpStatus\n}\n\nexport interface APIResponse {\n    data: T\n    error?: APIError\n    message?: string | string[]\n    statusCode: HttpStatus\n\n    count?: number\n    page?: number\n    pageCount?: number\n    total?: number\n}\n\nexport interface GetAppLaunchData {\n    link: 'api:/'\n    response: APIResponse\n}\n\nexport interface GetUserProfile {\n    link: 'api:v1/user/getUserProfile?userId=25'\n    response: APIResponse\n}\n\nexport interface GetUserPosts {\n    link: 'api:v1/user/getUserPosts?pageNo=0&pageSize=25'\n    response: APIResponse\n}\n\nexport interface GetRescueList {\n    link: 'api:v1/rescue/getRescueList?pageNo=0&pageSize=10&status=pending|inProgress|completed|nearest'\n    response: APIResponse\n}\n\nexport interface GetComments {\n    link: 'api:v1/rescue/getComments?pageNo=0&pageSize=10&postId=1230'\n    response: APIResponse\n}\n\nexport interface GetFollowers {\n    link: 'api:v1/rescue/getUserFollowers?userId=1230'\n    response: APIResponse\n}\n\nexport interface GetFollowing {\n    link: 'api:v1/rescue/getUserFollowing?userId=1230'\n    response: APIResponse\n}\n\nexport interface AppLaunchAction {\n    actionId: number\n    action: string\n    isActive: boolean\n    subject?: string\n}\n\nexport interface User {\n    usesId: number\n\n    coverImage: string\n    following: boolean\n    gender: string\n    isOwnProfile: number\n    isRescuer: boolean\n    latitude: number\n    longitude: number\n    numberOfFollowers: number\n    numberOfFollowing: number\n    numberOfPosts: number\n    numberOfRescuesCompleted: number\n    numberOfRescuesCreated: number\n    numberOfRescuesInProgress: number\n    profileImage: string\n    rescuer: boolean\n    userAddress: string\n    userContacts: string\n    userEmail: string\n    userName: string\n    badge: {\n        badgeId: number\n        badgeName: string\n        badgeDescription: string\n        recuesCompletionNeeded: number\n    }\n    setting: {\n        showMyContacts: boolean\n        getNotifications: boolean\n    }\n}\n\nexport interface PostType {\n    postTypeId: number\n    postType: string\n}\n\nexport interface PostedByUser {\n    usesId: number\n    badgeName: string\n    following: boolean\n    profileImage: string\n    rescuer: boolean\n    userName: string\n}\n\nexport interface UserPost {\n    postId: number\n    commentsCount: number\n    isUserReactedToPost: boolean\n    ownPage: boolean\n    postBy: PostedByUser\n    postImage: string\n    postTime: string\n    postType: PostType\n    postVideo: string\n    reactionsCount: number\n    timeAgo: string\n\n    adCorporateLogoUrl: string | null\n    corporateDescription: string | null\n    corporateName: string | null\n}\n\nexport interface UserPosts {\n    isRecent: boolean\n    feed: UserPost[]\n}\n\nexport interface Rescues {\n    rescueId: number\n    animalImageUrl: string\n    distance: number\n    distanceAway: string\n    emergencyType: string\n    postedBy: string\n    postedMinAgo: string\n    rescueDate: Date\n    rescuedPetName: string\n    rescueLocality: string\n    rescuers: {\n        contact: number\n        name: string\n        profileId: number\n        profileImageUrl: string\n        rescues: boolean\n        showMyNumber: boolean\n    }\n    rescueStatus: string\n    viewsCont: number\n}\n\nexport interface RescueLists {\n    rescues: Rescues[]\n}\n\nexport interface Comment {\n    commentId: number\n    comment: string\n    commentedUseName: string\n    commentedUserId: number\n    timeAgo: string\n}\n\nexport interface Comments {\n    comments: Comment[]\n}\n\nexport interface Follower {\n    userId: number\n    userName: string\n    profileImage: string\n    areYouFollowing: boolean\n    showRemoveOption: boolean\n}\n\nexport type Following = Follower\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/GetManyDefaultResponse.html":{"url":"interfaces/GetManyDefaultResponse.html","title":"interface - GetManyDefaultResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  GetManyDefaultResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/base/swagger-gen/utils/other.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        count\n                                \n                                \n                                        data\n                                \n                                \n                                        page\n                                \n                                \n                                        pageCount\n                                \n                                \n                                        total\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        count\n                                    \n                                \n                                \n                                    \n                                        count:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                    \n                                \n                                \n                                    \n                                        data:     T[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        page\n                                    \n                                \n                                \n                                    \n                                        page:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        pageCount\n                                    \n                                \n                                \n                                    \n                                        pageCount:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        total\n                                    \n                                \n                                \n                                    \n                                        total:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { RequestMethod, ValidationPipeOptions } from '@nestjs/common'\nimport { SwaggerEnumType } from '@nestjs/swagger/dist/types/swagger-enum.type'\n\nexport declare type BaseRouteName =\n    | 'getManyBase'\n    | 'getOneBase'\n    | 'createOneBase'\n    | 'createManyBase'\n    | 'updateOneBase'\n    | 'replaceOneBase'\n    | 'deleteOneBase'\n    | 'getOne'\n\nexport interface BaseRoute {\n    name: BaseRouteName\n    path: string\n    method: RequestMethod\n    enable: boolean\n    override: boolean\n    withParams: boolean\n}\n\nexport interface GetManyDefaultResponse {\n    data: T[]\n    count: number\n    total: number\n    page: number\n    pageCount: number\n}\n\nexport interface ParamOption {\n    field?: string\n    type?: 'number' | 'string' | 'uuid'\n    enum?: SwaggerEnumType\n    primary?: boolean\n    disabled?: boolean\n}\n\nexport interface ParamsOptions {\n    [key: string]: ParamOption\n}\n\nexport interface CrudOptions {\n    model: {\n        type: { name: string }\n    }\n    dto?: {}\n    routes?: {\n        deleteOneBase?: { returnDeleted?: boolean }\n    }\n    validation?: ValidationPipeOptions | false\n    params?: ParamsOptions\n    query?: {\n        limit?: number\n        maxLimit?: number\n        cache?: number | false\n        alwaysPaginate?: boolean\n    }\n    serialize?: {\n        getMany?: false | object\n        get?: false | object\n        create?: false | object\n        createMany?: false | object\n        update?: false | object\n        replace?: false | object\n        delete?: false | object\n    }\n}\n\nexport function safeRequire(path: string): T | null {\n    try {\n        // eslint-disable-next-line global-require,@typescript-eslint/no-var-requires,import/no-dynamic-require\n        const pack = require(path)\n        return pack\n    } catch (_) {\n        return null\n    }\n}\n\nexport const swagger = safeRequire('@nestjs/swagger')\nexport const swaggerConst = safeRequire('@nestjs/swagger/dist/constants')\n\nexport function ApiProperty(options?: any): PropertyDecorator {\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    return (target: object, propertyKey: string | symbol) => {\n        if (swagger) {\n            const ApiPropertyDecorator =\n                swagger.ApiProperty || swagger.ApiModelProperty\n            ApiPropertyDecorator(options)(target, propertyKey)\n        }\n    }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/GetRescueList.html":{"url":"interfaces/GetRescueList.html","title":"interface - GetRescueList","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  GetRescueList\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/domain.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        link\n                                \n                                \n                                        response\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        link\n                                    \n                                \n                                \n                                    \n                                        link:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        response\n                                    \n                                \n                                \n                                    \n                                        response:         APIResponse\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         APIResponse\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { HttpStatus } from '@nestjs/common'\n\nexport type Results =\n    | GetAppLaunchData\n    | GetUserProfile\n    | GetUserPosts\n    | GetComments\n    | GetRescueList\n    | GetFollowers\n    | GetFollowing\n\nexport type APIError = Error | string | null\n\nexport interface Result {\n    data: T\n    error?: APIError\n    message?: string | string[]\n    statusCode: HttpStatus\n}\n\nexport interface APIResponse {\n    data: T\n    error?: APIError\n    message?: string | string[]\n    statusCode: HttpStatus\n\n    count?: number\n    page?: number\n    pageCount?: number\n    total?: number\n}\n\nexport interface GetAppLaunchData {\n    link: 'api:/'\n    response: APIResponse\n}\n\nexport interface GetUserProfile {\n    link: 'api:v1/user/getUserProfile?userId=25'\n    response: APIResponse\n}\n\nexport interface GetUserPosts {\n    link: 'api:v1/user/getUserPosts?pageNo=0&pageSize=25'\n    response: APIResponse\n}\n\nexport interface GetRescueList {\n    link: 'api:v1/rescue/getRescueList?pageNo=0&pageSize=10&status=pending|inProgress|completed|nearest'\n    response: APIResponse\n}\n\nexport interface GetComments {\n    link: 'api:v1/rescue/getComments?pageNo=0&pageSize=10&postId=1230'\n    response: APIResponse\n}\n\nexport interface GetFollowers {\n    link: 'api:v1/rescue/getUserFollowers?userId=1230'\n    response: APIResponse\n}\n\nexport interface GetFollowing {\n    link: 'api:v1/rescue/getUserFollowing?userId=1230'\n    response: APIResponse\n}\n\nexport interface AppLaunchAction {\n    actionId: number\n    action: string\n    isActive: boolean\n    subject?: string\n}\n\nexport interface User {\n    usesId: number\n\n    coverImage: string\n    following: boolean\n    gender: string\n    isOwnProfile: number\n    isRescuer: boolean\n    latitude: number\n    longitude: number\n    numberOfFollowers: number\n    numberOfFollowing: number\n    numberOfPosts: number\n    numberOfRescuesCompleted: number\n    numberOfRescuesCreated: number\n    numberOfRescuesInProgress: number\n    profileImage: string\n    rescuer: boolean\n    userAddress: string\n    userContacts: string\n    userEmail: string\n    userName: string\n    badge: {\n        badgeId: number\n        badgeName: string\n        badgeDescription: string\n        recuesCompletionNeeded: number\n    }\n    setting: {\n        showMyContacts: boolean\n        getNotifications: boolean\n    }\n}\n\nexport interface PostType {\n    postTypeId: number\n    postType: string\n}\n\nexport interface PostedByUser {\n    usesId: number\n    badgeName: string\n    following: boolean\n    profileImage: string\n    rescuer: boolean\n    userName: string\n}\n\nexport interface UserPost {\n    postId: number\n    commentsCount: number\n    isUserReactedToPost: boolean\n    ownPage: boolean\n    postBy: PostedByUser\n    postImage: string\n    postTime: string\n    postType: PostType\n    postVideo: string\n    reactionsCount: number\n    timeAgo: string\n\n    adCorporateLogoUrl: string | null\n    corporateDescription: string | null\n    corporateName: string | null\n}\n\nexport interface UserPosts {\n    isRecent: boolean\n    feed: UserPost[]\n}\n\nexport interface Rescues {\n    rescueId: number\n    animalImageUrl: string\n    distance: number\n    distanceAway: string\n    emergencyType: string\n    postedBy: string\n    postedMinAgo: string\n    rescueDate: Date\n    rescuedPetName: string\n    rescueLocality: string\n    rescuers: {\n        contact: number\n        name: string\n        profileId: number\n        profileImageUrl: string\n        rescues: boolean\n        showMyNumber: boolean\n    }\n    rescueStatus: string\n    viewsCont: number\n}\n\nexport interface RescueLists {\n    rescues: Rescues[]\n}\n\nexport interface Comment {\n    commentId: number\n    comment: string\n    commentedUseName: string\n    commentedUserId: number\n    timeAgo: string\n}\n\nexport interface Comments {\n    comments: Comment[]\n}\n\nexport interface Follower {\n    userId: number\n    userName: string\n    profileImage: string\n    areYouFollowing: boolean\n    showRemoveOption: boolean\n}\n\nexport type Following = Follower\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/GetUserPosts.html":{"url":"interfaces/GetUserPosts.html","title":"interface - GetUserPosts","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  GetUserPosts\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/domain.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        link\n                                \n                                \n                                        response\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        link\n                                    \n                                \n                                \n                                    \n                                        link:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        response\n                                    \n                                \n                                \n                                    \n                                        response:     APIResponse\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     APIResponse\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { HttpStatus } from '@nestjs/common'\n\nexport type Results =\n    | GetAppLaunchData\n    | GetUserProfile\n    | GetUserPosts\n    | GetComments\n    | GetRescueList\n    | GetFollowers\n    | GetFollowing\n\nexport type APIError = Error | string | null\n\nexport interface Result {\n    data: T\n    error?: APIError\n    message?: string | string[]\n    statusCode: HttpStatus\n}\n\nexport interface APIResponse {\n    data: T\n    error?: APIError\n    message?: string | string[]\n    statusCode: HttpStatus\n\n    count?: number\n    page?: number\n    pageCount?: number\n    total?: number\n}\n\nexport interface GetAppLaunchData {\n    link: 'api:/'\n    response: APIResponse\n}\n\nexport interface GetUserProfile {\n    link: 'api:v1/user/getUserProfile?userId=25'\n    response: APIResponse\n}\n\nexport interface GetUserPosts {\n    link: 'api:v1/user/getUserPosts?pageNo=0&pageSize=25'\n    response: APIResponse\n}\n\nexport interface GetRescueList {\n    link: 'api:v1/rescue/getRescueList?pageNo=0&pageSize=10&status=pending|inProgress|completed|nearest'\n    response: APIResponse\n}\n\nexport interface GetComments {\n    link: 'api:v1/rescue/getComments?pageNo=0&pageSize=10&postId=1230'\n    response: APIResponse\n}\n\nexport interface GetFollowers {\n    link: 'api:v1/rescue/getUserFollowers?userId=1230'\n    response: APIResponse\n}\n\nexport interface GetFollowing {\n    link: 'api:v1/rescue/getUserFollowing?userId=1230'\n    response: APIResponse\n}\n\nexport interface AppLaunchAction {\n    actionId: number\n    action: string\n    isActive: boolean\n    subject?: string\n}\n\nexport interface User {\n    usesId: number\n\n    coverImage: string\n    following: boolean\n    gender: string\n    isOwnProfile: number\n    isRescuer: boolean\n    latitude: number\n    longitude: number\n    numberOfFollowers: number\n    numberOfFollowing: number\n    numberOfPosts: number\n    numberOfRescuesCompleted: number\n    numberOfRescuesCreated: number\n    numberOfRescuesInProgress: number\n    profileImage: string\n    rescuer: boolean\n    userAddress: string\n    userContacts: string\n    userEmail: string\n    userName: string\n    badge: {\n        badgeId: number\n        badgeName: string\n        badgeDescription: string\n        recuesCompletionNeeded: number\n    }\n    setting: {\n        showMyContacts: boolean\n        getNotifications: boolean\n    }\n}\n\nexport interface PostType {\n    postTypeId: number\n    postType: string\n}\n\nexport interface PostedByUser {\n    usesId: number\n    badgeName: string\n    following: boolean\n    profileImage: string\n    rescuer: boolean\n    userName: string\n}\n\nexport interface UserPost {\n    postId: number\n    commentsCount: number\n    isUserReactedToPost: boolean\n    ownPage: boolean\n    postBy: PostedByUser\n    postImage: string\n    postTime: string\n    postType: PostType\n    postVideo: string\n    reactionsCount: number\n    timeAgo: string\n\n    adCorporateLogoUrl: string | null\n    corporateDescription: string | null\n    corporateName: string | null\n}\n\nexport interface UserPosts {\n    isRecent: boolean\n    feed: UserPost[]\n}\n\nexport interface Rescues {\n    rescueId: number\n    animalImageUrl: string\n    distance: number\n    distanceAway: string\n    emergencyType: string\n    postedBy: string\n    postedMinAgo: string\n    rescueDate: Date\n    rescuedPetName: string\n    rescueLocality: string\n    rescuers: {\n        contact: number\n        name: string\n        profileId: number\n        profileImageUrl: string\n        rescues: boolean\n        showMyNumber: boolean\n    }\n    rescueStatus: string\n    viewsCont: number\n}\n\nexport interface RescueLists {\n    rescues: Rescues[]\n}\n\nexport interface Comment {\n    commentId: number\n    comment: string\n    commentedUseName: string\n    commentedUserId: number\n    timeAgo: string\n}\n\nexport interface Comments {\n    comments: Comment[]\n}\n\nexport interface Follower {\n    userId: number\n    userName: string\n    profileImage: string\n    areYouFollowing: boolean\n    showRemoveOption: boolean\n}\n\nexport type Following = Follower\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/GetUserProfile.html":{"url":"interfaces/GetUserProfile.html","title":"interface - GetUserProfile","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  GetUserProfile\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/domain.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        link\n                                \n                                \n                                        response\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        link\n                                    \n                                \n                                \n                                    \n                                        link:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        response\n                                    \n                                \n                                \n                                    \n                                        response:     APIResponse\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     APIResponse\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { HttpStatus } from '@nestjs/common'\n\nexport type Results =\n    | GetAppLaunchData\n    | GetUserProfile\n    | GetUserPosts\n    | GetComments\n    | GetRescueList\n    | GetFollowers\n    | GetFollowing\n\nexport type APIError = Error | string | null\n\nexport interface Result {\n    data: T\n    error?: APIError\n    message?: string | string[]\n    statusCode: HttpStatus\n}\n\nexport interface APIResponse {\n    data: T\n    error?: APIError\n    message?: string | string[]\n    statusCode: HttpStatus\n\n    count?: number\n    page?: number\n    pageCount?: number\n    total?: number\n}\n\nexport interface GetAppLaunchData {\n    link: 'api:/'\n    response: APIResponse\n}\n\nexport interface GetUserProfile {\n    link: 'api:v1/user/getUserProfile?userId=25'\n    response: APIResponse\n}\n\nexport interface GetUserPosts {\n    link: 'api:v1/user/getUserPosts?pageNo=0&pageSize=25'\n    response: APIResponse\n}\n\nexport interface GetRescueList {\n    link: 'api:v1/rescue/getRescueList?pageNo=0&pageSize=10&status=pending|inProgress|completed|nearest'\n    response: APIResponse\n}\n\nexport interface GetComments {\n    link: 'api:v1/rescue/getComments?pageNo=0&pageSize=10&postId=1230'\n    response: APIResponse\n}\n\nexport interface GetFollowers {\n    link: 'api:v1/rescue/getUserFollowers?userId=1230'\n    response: APIResponse\n}\n\nexport interface GetFollowing {\n    link: 'api:v1/rescue/getUserFollowing?userId=1230'\n    response: APIResponse\n}\n\nexport interface AppLaunchAction {\n    actionId: number\n    action: string\n    isActive: boolean\n    subject?: string\n}\n\nexport interface User {\n    usesId: number\n\n    coverImage: string\n    following: boolean\n    gender: string\n    isOwnProfile: number\n    isRescuer: boolean\n    latitude: number\n    longitude: number\n    numberOfFollowers: number\n    numberOfFollowing: number\n    numberOfPosts: number\n    numberOfRescuesCompleted: number\n    numberOfRescuesCreated: number\n    numberOfRescuesInProgress: number\n    profileImage: string\n    rescuer: boolean\n    userAddress: string\n    userContacts: string\n    userEmail: string\n    userName: string\n    badge: {\n        badgeId: number\n        badgeName: string\n        badgeDescription: string\n        recuesCompletionNeeded: number\n    }\n    setting: {\n        showMyContacts: boolean\n        getNotifications: boolean\n    }\n}\n\nexport interface PostType {\n    postTypeId: number\n    postType: string\n}\n\nexport interface PostedByUser {\n    usesId: number\n    badgeName: string\n    following: boolean\n    profileImage: string\n    rescuer: boolean\n    userName: string\n}\n\nexport interface UserPost {\n    postId: number\n    commentsCount: number\n    isUserReactedToPost: boolean\n    ownPage: boolean\n    postBy: PostedByUser\n    postImage: string\n    postTime: string\n    postType: PostType\n    postVideo: string\n    reactionsCount: number\n    timeAgo: string\n\n    adCorporateLogoUrl: string | null\n    corporateDescription: string | null\n    corporateName: string | null\n}\n\nexport interface UserPosts {\n    isRecent: boolean\n    feed: UserPost[]\n}\n\nexport interface Rescues {\n    rescueId: number\n    animalImageUrl: string\n    distance: number\n    distanceAway: string\n    emergencyType: string\n    postedBy: string\n    postedMinAgo: string\n    rescueDate: Date\n    rescuedPetName: string\n    rescueLocality: string\n    rescuers: {\n        contact: number\n        name: string\n        profileId: number\n        profileImageUrl: string\n        rescues: boolean\n        showMyNumber: boolean\n    }\n    rescueStatus: string\n    viewsCont: number\n}\n\nexport interface RescueLists {\n    rescues: Rescues[]\n}\n\nexport interface Comment {\n    commentId: number\n    comment: string\n    commentedUseName: string\n    commentedUserId: number\n    timeAgo: string\n}\n\nexport interface Comments {\n    comments: Comment[]\n}\n\nexport interface Follower {\n    userId: number\n    userName: string\n    profileImage: string\n    areYouFollowing: boolean\n    showRemoveOption: boolean\n}\n\nexport type Following = Follower\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/HealthController.html":{"url":"controllers/HealthController.html","title":"controller - HealthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  HealthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/health/health.controller.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                check\n                            \n                            \n                                collectOsMetrics\n                            \n                            \n                                onApplicationShutdown\n                            \n                            \n                                onModuleInit\n                            \n                            \n                                sse\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            check\n                        \n                        \n                    \n                \n            \n            \n                \ncheck()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@HttpCode(200)@HealthCheck()\n                \n            \n\n            \n                \n                    Defined in src/health/health.controller.ts:55\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            collectOsMetrics\n                        \n                        \n                    \n                \n            \n            \n                \ncollectOsMetrics(metrics: literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/health/health.controller.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    metrics\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onApplicationShutdown\n                        \n                        \n                    \n                \n            \n            \n                \nonApplicationShutdown(signal?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/health/health.controller.ts:86\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    signal\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onModuleInit\n                        \n                        \n                    \n                \n            \n            \n                \nonModuleInit()\n                \n            \n\n\n            \n                \n                    Defined in src/health/health.controller.ts:80\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            sse\n                        \n                        \n                    \n                \n            \n            \n                \nsse()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Sse('sse')\n                \n            \n\n            \n                \n                    Defined in src/health/health.controller.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Observable\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Controller,\n    Get,\n    HttpCode,\n    OnApplicationShutdown,\n    OnModuleInit,\n    MessageEvent,\n    Sse,\n} from '@nestjs/common'\nimport { ConfigService } from '@nestjs/config'\nimport { ApiTags } from '@nestjs/swagger'\nimport {\n    DNSHealthIndicator,\n    HealthCheck,\n    HealthCheckService,\n} from '@nestjs/terminus'\n\nimport * as os from 'os'\n// @ts-ignore\nimport * as pidusage from 'pidusage'\nimport { interval, Observable } from 'rxjs'\nimport { map } from 'rxjs/operators'\n\n@ApiTags(HealthController.name)\n@Controller(HealthController.path)\nexport class HealthController implements OnModuleInit, OnApplicationShutdown {\n    static path = 'health'\n\n    constructor(\n        readonly health: HealthCheckService,\n        readonly dns: DNSHealthIndicator,\n        readonly config: ConfigService,\n    ) {}\n\n    @Sse('sse')\n    sse(): Observable {\n        const metrics = {\n            os: {},\n            interval: 1, // Every 1 second\n            retention: 60, // Keep 60 datapoints in memory\n        }\n\n        return interval(5000).pipe(\n            map((_) => {\n                this.collectOsMetrics(metrics)\n\n                return { data: metrics }\n            }),\n        )\n    }\n\n    @Get()\n    @HttpCode(200)\n    @HealthCheck()\n    check() {\n        return this.health.check([\n            () => this.dns.pingCheck('nestjs-docs', 'https://docs.nestjs.com'),\n        ])\n    }\n\n    collectOsMetrics(metrics: { os: any; interval?: number; retention?: number }) {\n        pidusage(\n            process.pid,\n            (\n                err: any,\n                stat: { memory: number; timestamp: number; load: number[] },\n            ) => {\n                if (err) return\n\n                // Convert from B to MB\n                stat.memory = stat.memory / 1024 / 1024 // eslint-disable-line no-param-reassign\n                stat.timestamp = Date.now() // eslint-disable-line no-param-reassign\n                stat.load = os.loadavg() // eslint-disable-line no-param-reassign\n\n                metrics.os = stat // eslint-disable-line no-param-reassign\n            },\n        )\n    }\n\n    onModuleInit() {\n        console.log(`ModuleInit - HealthController has been initialized.`, {\n            config: this.config.get('NODE_ENV'),\n        })\n    }\n\n    onApplicationShutdown(signal?: string) {\n        console.log(\n            // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n            `ApplicationShutdown - HealthController has been shutdown with ${signal} signal`,\n        )\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IBaseModel.html":{"url":"interfaces/IBaseModel.html","title":"interface - IBaseModel","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IBaseModel\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/models/base.model.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        created_at\n                                \n                                \n                                            Optional\n                                        deleted_at\n                                \n                                \n                                        id\n                                \n                                \n                                        updated_at\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        created_at\n                                    \n                                \n                                \n                                    \n                                        created_at:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        deleted_at\n                                    \n                                \n                                \n                                    \n                                        deleted_at:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                    \n                                \n                                \n                                    \n                                        id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        updated_at\n                                    \n                                \n                                \n                                    \n                                        updated_at:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import Objection, {\n    raw,\n    mixin,\n    Model,\n    ModelOptions,\n    QueryContext,\n    RelationExpression,\n} from 'objection'\nimport { DBErrors } from 'objection-db-errors'\nimport visibilityPlugin from 'objection-visibility'\n\nimport { CustomQueryBuilder } from './helpers'\n\nexport interface IBaseModel {\n    id: number\n    created_at: any\n    updated_at: any\n    deleted_at?: any\n}\n\nexport class BaseModel\n    extends mixin(Model, [visibilityPlugin, DBErrors])\n    implements IBaseModel {\n    // hidden fields to filter from query result\n    static hidden = [\n        'salt',\n        'password',\n        'created_at',\n        'updated_at',\n        // 'deleted_at'\n    ]\n\n    // QueryBuilderType!: CustomQueryBuilder // custom query builder for pagination\n\n    static QueryBuilder = CustomQueryBuilder\n\n    id!: number\n\n    created_at: any\n\n    updated_at: any\n\n    deleted_at?: any | null\n\n    // fetch data with relation mapping\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    async fetchRelation(\n        expression: string | Record,\n        options: Objection.FetchGraphOptions,\n    ) {\n        if (typeof expression === 'string' && expression.toString() in this) {\n            // @ts-ignore\n            if (this[expression.toString()]) return this\n        }\n\n        await this.$fetchGraph(expression, options)\n        return this\n    }\n\n    async $beforeUpdate(opt: ModelOptions, queryContext: QueryContext) {\n        await super.$beforeUpdate(opt, queryContext)\n\n        this.updated_at = raw('CURRENT_TIMESTAMP') // new Date().toISOString() // fn.now()\n    }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ICrudService.html":{"url":"interfaces/ICrudService.html","title":"interface - ICrudService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ICrudService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/base/crud/crud.service.interface.ts\n        \n\n            \n                Description\n            \n            \n                Interface to enforce on the CRUD services\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    create\n                                \n                                \n                                    findAll\n                                \n                                \n                                    findOneByEmail\n                                \n                                \n                                    findOneById\n                                \n                                \n                                    paginatedFindAll\n                                \n                                \n                                    remove\n                                \n                                \n                                    update\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            create\n                        \n                        \n                    \n                \n            \n            \n                \ncreate(data: T)\n                \n            \n\n\n            \n                \n                    Defined in src/base/crud/crud.service.interface.ts:37\n                \n            \n\n\n            \n                \n                    create\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n            \n                \n                    Defined in src/base/crud/crud.service.interface.ts:10\n                \n            \n\n\n            \n                \n                    findAll\n\n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findOneByEmail\n                        \n                        \n                    \n                \n            \n            \n                \nfindOneByEmail(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/base/crud/crud.service.interface.ts:20\n                \n            \n\n\n            \n                \n                    findOneByEmail\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findOneById\n                        \n                        \n                    \n                \n            \n            \n                \nfindOneById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/base/crud/crud.service.interface.ts:15\n                \n            \n\n\n            \n                \n                    findOneById\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            paginatedFindAll\n                        \n                        \n                    \n                \n            \n            \n                \npaginatedFindAll(paginationParams?: PaginationParams)\n                \n            \n\n\n            \n                \n                    Defined in src/base/crud/crud.service.interface.ts:25\n                \n            \n\n\n            \n                \n                    paginatedFindAll\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    paginationParams\n                                    \n                                                PaginationParams\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            remove\n                        \n                        \n                    \n                \n            \n            \n                \nremove(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/base/crud/crud.service.interface.ts:32\n                \n            \n\n\n            \n                \n                    remove\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            update\n                        \n                        \n                    \n                \n            \n            \n                \nupdate(id: number, data: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/base/crud/crud.service.interface.ts:42\n                \n            \n\n\n            \n                \n                    update\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n                                    \n                                            Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { IPaginationResult, PaginationParams } from './pagination'\n\n/**\n * Interface to enforce on the CRUD services\n */\nexport interface ICrudService {\n    /**\n     * findAll\n     */\n    findAll(): Promise\n\n    /**\n     * findOneById\n     */\n    findOneById(id: number): Promise\n\n    /**\n     * findOneByEmail\n     */\n    findOneByEmail(email: string): Promise\n\n    /**\n     * paginatedFindAll\n     */\n    paginatedFindAll(\n        paginationParams?: PaginationParams,\n    ): Promise>\n\n    /**\n     * remove\n     */\n    remove(id: number): Promise\n\n    /**\n     * create\n     */\n    create(data: T): Promise\n\n    /**\n     * update\n     */\n    update(id: number, data: Partial): Promise\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IPaginationResult.html":{"url":"interfaces/IPaginationResult.html","title":"interface - IPaginationResult","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IPaginationResult\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/base/crud/pagination.ts\n        \n\n            \n                Description\n            \n            \n                Generic pagination response interface\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        data\n                                \n                                \n                                            Optional\n                                        error\n                                \n                                \n                                            Optional\n                                        message\n                                \n                                \n                                        paging\n                                \n                                \n                                        statusCode\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                    \n                                \n                                \n                                    \n                                        data:     T[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Items included in the current listing\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        error\n                                    \n                                \n                                \n                                    \n                                        error:         APIError\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         APIError\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Error if any\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                    \n                                \n                                \n                                    \n                                        message:     string | string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string | string[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Message if anu\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        paging\n                                    \n                                \n                                \n                                    \n                                        paging:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Paging metadata\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        statusCode\n                                    \n                                \n                                \n                                    \n                                        statusCode:     HttpStatus\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     HttpStatus\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Http status code\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { HttpStatus } from '@nestjs/common'\nimport { ApiPropertyOptional } from '@nestjs/swagger'\n\nimport { Transform } from 'class-transformer'\nimport { IsOptional, Min } from 'class-validator'\n\nimport { APIError } from '../../domain'\n\nexport enum OrderType {\n    DESC = 'DESC',\n    ASC = 'ASC',\n}\n\n/**\n * Describes generic pagination params\n */\nexport abstract class PaginationParams {\n    /**\n     * page\n     */\n    @ApiPropertyOptional({ type: Number, minimum: 0 })\n    @IsOptional()\n    @Min(0)\n    @Transform((val: string) => parseInt(val, 10))\n    readonly page?: number // = 0\n\n    /**\n     * page size\n     */\n    @ApiPropertyOptional({ type: Number, minimum: 0 })\n    @IsOptional()\n    @Min(0)\n    @Transform((val: string) => parseInt(val, 10))\n    readonly pageSize?: number // = 10\n\n    /**\n     * order\n     */\n    @ApiPropertyOptional()\n    @IsOptional()\n    abstract readonly order?: { [P in keyof T]?: OrderType }\n}\n\n/**\n * Generic pagination response interface\n */\nexport interface IPaginationResult {\n    /**\n     * Items included in the current listing\n     */\n    readonly data: T[]\n\n    /**\n     * Paging metadata\n     */\n    readonly paging: {\n        pageSize: number\n        page: number\n        total: number\n        totalPages: number\n    }\n\n    /**\n     * Error if any\n     */ error?: APIError\n\n    /**\n     * Message if anu\n     */\n    message?: string | string[]\n\n    /**\n     * Http status code\n     */\n    statusCode: HttpStatus\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ITag.html":{"url":"interfaces/ITag.html","title":"interface - ITag","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ITag\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/tag.model.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        name\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger'\n\nimport { IsNotEmpty, IsString, MaxLength, MinLength } from 'class-validator'\nimport type { JSONSchema, ModelObject, PartialModelObject } from 'objection'\n\nimport { BaseModel } from '../database/models/base.model'\n\ninterface ITag {\n    name: string\n}\n\nexport class Tag extends BaseModel implements ITag {\n    static tableName = 'tag'\n\n    name!: string\n\n    // JSON schema is not the database schema! Nothing is generated based on this.\n    // This is only used for validation. Whenever a model instance is created it is checked against this schema.\n    static jsonSchema: JSONSchema = {\n        type: 'object',\n        required: ['name'],\n        properties: {\n            id: { type: 'integer' },\n            name: { type: 'string', minLength: 2, maxLength: 255 },\n        },\n    }\n}\n\n// The `ModelObject` generic gives you a clean interface that can be used on the frontend, without any of the objection Model class properties or methods.\nexport type TagShape = ModelObject\nexport type PartialTagShape = PartialModelObject\n\nexport class CreateTagsDto implements ITag {\n    @IsString()\n    @IsNotEmpty()\n    @MinLength(2)\n    @MaxLength(36)\n    name!: string\n}\n\nexport class UpdateTagsDto extends PartialType(CreateTagsDto) {}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IUser.html":{"url":"interfaces/IUser.html","title":"interface - IUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/user.model.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        email\n                                \n                                \n                                            Optional\n                                        firstName\n                                \n                                \n                                        isActive\n                                \n                                \n                                            Optional\n                                        lastName\n                                \n                                \n                                        password\n                                \n                                \n                                        username\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        firstName\n                                    \n                                \n                                \n                                    \n                                        firstName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        isActive\n                                    \n                                \n                                \n                                    \n                                        isActive:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        lastName\n                                    \n                                \n                                \n                                    \n                                        lastName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        password\n                                    \n                                \n                                \n                                    \n                                        password:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        username\n                                    \n                                \n                                \n                                    \n                                        username:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger'\n\nimport * as bcrypt from 'bcrypt'\nimport {\n    IsString,\n    MinLength,\n    IsNotEmpty,\n    MaxLength,\n    IsEmail,\n    IsBoolean,\n} from 'class-validator'\nimport type { JSONSchema, Modifiers, PartialModelObject } from 'objection'\nimport { ModelObject, QueryContext } from 'objection'\n\nimport { BaseModel } from '../database/models/base.model'\n\ninterface IUser {\n    username: string\n    email: string\n    firstName?: string\n    lastName?: string\n    isActive: boolean\n    password: string\n}\n\nexport class User extends BaseModel implements IUser {\n    static tableName = 'user'\n\n    username!: string\n\n    email!: string\n\n    firstName?: string\n\n    lastName?: string\n\n    isActive!: boolean\n\n    password!: string\n\n    // JSON schema is not the database schema! Nothing is generated based on this.\n    // This is only used for validation. Whenever a model instance is created it is checked against this schema.\n    static jsonSchema: JSONSchema = {\n        type: 'object',\n        required: ['username', 'email', 'password'],\n        properties: {\n            id: { type: 'integer', readOnly: true },\n            username: { type: 'string', minLength: 3, maxLength: 255 },\n            email: {\n                type: 'string',\n                minLength: 3,\n                maxLength: 255,\n                format: 'email',\n            },\n            password: { type: 'string', minLength: 8, maxLength: 255 },\n            firstName: { type: 'string', minLength: 1, maxLength: 255 },\n            lastName: { type: 'string', minLength: 1, maxLength: 255 },\n            isActive: { type: 'boolean' },\n        },\n    }\n\n    // Modifiers are reusable query snippets that can be used in various places.\n    static modifiers: Modifiers = {\n        // Our example modifier is a a semi-dumb fuzzy name match. We split the name into pieces using whitespace\n        // and then try to partially match each of those pieces to both the `firstName` and the `lastName` fields.\n\n        searchByName(query, name: string) {\n            // This `where` simply creates parentheses so that other `where` statements don't get mixed with the these.\n\n            query.where((q) => {\n                for (const namePart of name.trim().split(/\\s+/)) {\n                    for (const column of ['firstName', 'lastName']) {\n                        q.orWhereRaw('lower(??) like ?', [\n                            column,\n                            `${namePart.toLowerCase()}%`,\n                        ])\n                    }\n                }\n            })\n        },\n    }\n\n    async hashPassword(password: string) {\n        const hash = await bcrypt.hash(password, 12)\n        return hash\n    }\n\n    async $beforeInsert(queryContext: QueryContext) {\n        await super.$beforeInsert(queryContext)\n        this.password = await this.hashPassword(this.password)\n    }\n\n    /*\n    async $beforeUpdate(opt: ModelOptions, queryContext: QueryContext) {\n        await super.$beforeUpdate(opt, queryContext)\n        this.password = await this.hashPassword(this.password)\n    }\n    */\n}\n\n// The `ModelObject` generic gives you a clean interface that can be used on the frontend, without any of the objection Model class properties or methods.\nexport type UserShape = ModelObject\nexport type PartialUserShape = PartialModelObject\n\nexport class CreateUserDto implements IUser {\n    @IsString()\n    @IsNotEmpty()\n    @MinLength(2)\n    @MaxLength(36)\n    username!: string\n\n    @IsEmail()\n    @IsNotEmpty()\n    @MinLength(2)\n    email!: string\n\n    @IsString()\n    @IsNotEmpty()\n    @MinLength(8)\n    password!: string\n\n    @IsString()\n    @IsNotEmpty()\n    @MinLength(2)\n    firstName?: string\n\n    @IsString()\n    @IsNotEmpty()\n    @MinLength(2)\n    lastName?: string\n\n    @IsBoolean()\n    isActive!: boolean\n}\n\nexport class UpdateUserDto extends PartialType(CreateUserDto) {}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt.strategy.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, userService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/jwt.strategy.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: TokenPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/jwt.strategy.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                TokenPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common'\nimport { ConfigService } from '@nestjs/config'\nimport { PassportStrategy } from '@nestjs/passport'\n\nimport { ExtractJwt, Strategy } from 'passport-jwt'\n\nimport { UsersService } from '../users/users.service'\nimport TokenPayload from './tokenPayload.interface'\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n    constructor(\n        readonly configService: ConfigService,\n        readonly userService: UsersService,\n    ) {\n        super({\n            ignoreExpiration: true,\n            secretOrKey: configService.get('JWTKEY'),\n            jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n        })\n    }\n\n    async validate(payload: TokenPayload) {\n        if (!payload.email) return Promise.reject(new UnauthorizedException())\n\n        const user = await this.userService.findOneByEmail(payload.email)\n\n        if (!user)\n            return Promise.reject(\n                new UnauthorizedException(\n                    'You are not authorized to perform the operation',\n                ),\n            )\n\n        return payload\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalStrategy.html":{"url":"injectables/LocalStrategy.html","title":"injectable - LocalStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  LocalStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/local.strategy.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                passwordField\n                            \n                            \n                                    Static\n                                usernameField\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/local.strategy.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(email: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/local.strategy.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            passwordField\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'password'\n                        \n                    \n                        \n                            \n                                    Defined in src/auth/local.strategy.ts:12\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            usernameField\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'email'\n                        \n                    \n                        \n                            \n                                    Defined in src/auth/local.strategy.ts:10\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common'\nimport { PassportStrategy } from '@nestjs/passport'\n\nimport { Strategy } from 'passport-local'\n\nimport { AuthService } from './auth.service'\n\n@Injectable()\nexport class LocalStrategy extends PassportStrategy(Strategy) {\n    static usernameField = 'email'\n\n    static passwordField = 'password'\n\n    constructor(readonly authService: AuthService) {\n        super({\n            usernameField: LocalStrategy.usernameField,\n            passwordField: LocalStrategy.passwordField,\n            session: false,\n        })\n    }\n\n    async validate(email: string, password: string) {\n        if (!email || !password)\n            return Promise.reject(\n                new UnauthorizedException('Credentials cannot be empty'),\n            )\n\n        return this.authService.validateUser(email, password)\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginCredsDto.html":{"url":"classes/LoginCredsDto.html","title":"class - LoginCredsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginCredsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                email\n                            \n                            \n                                    Readonly\n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            email\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'admin@demo.com'})@IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auth/auth.controller.ts:14\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: '12345678'})@IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auth/auth.controller.ts:18\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Body, Controller, HttpStatus, Post, Req, UseGuards } from '@nestjs/common'\nimport { AuthGuard } from '@nestjs/passport'\nimport { ApiProperty, ApiTags } from '@nestjs/swagger'\n\nimport { IsNotEmpty } from 'class-validator'\nimport type { Request } from 'express'\n\nimport { UsersService } from '../users/users.service'\nimport { AuthService } from './auth.service'\n\nexport class LoginCredsDto {\n    @ApiProperty({ example: 'admin@demo.com' })\n    @IsNotEmpty()\n    readonly email!: string\n\n    @ApiProperty({ example: '12345678' })\n    @IsNotEmpty()\n    readonly password!: string\n}\n\n@Controller(AuthController.path)\n@ApiTags(AuthController.name)\nexport class AuthController {\n    static path = 'auth'\n\n    constructor(\n        readonly authService: AuthService,\n        readonly userService: UsersService,\n    ) {}\n\n    @UseGuards(AuthGuard('local'))\n    @Post('login')\n    async login(\n        @Req() req: Request,\n        @Body() loginCreds: LoginCredsDto,\n    ): Promise {\n        const { user } = req\n        const { email, password } = loginCreds\n\n        const data = await this.authService.login(user)\n\n        return {\n            data,\n            statusCode: HttpStatus.OK,\n        }\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PaginationParams.html":{"url":"classes/PaginationParams.html","title":"class - PaginationParams","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PaginationParams\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/base/crud/pagination.ts\n        \n\n            \n                Description\n            \n            \n                Describes generic pagination params\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Abstract\n                                    Readonly\n                                    Optional\n                                order\n                            \n                            \n                                    Readonly\n                                    Optional\n                                page\n                            \n                            \n                                    Readonly\n                                    Optional\n                                pageSize\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Abstract\n                                Readonly\n                                Optional\n                            order\n                            \n                        \n                    \n                \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiPropertyOptional()@IsOptional()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/base/crud/pagination.ts:41\n                            \n                        \n\n                \n                    \n                        order\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                                Optional\n                            page\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiPropertyOptional({type: Number, minimum: 0})@IsOptional()@Min(0)@Transform(undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/base/crud/pagination.ts:25\n                            \n                        \n\n                \n                    \n                        page\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                                Optional\n                            pageSize\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiPropertyOptional({type: Number, minimum: 0})@IsOptional()@Min(0)@Transform(undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/base/crud/pagination.ts:34\n                            \n                        \n\n                \n                    \n                        page size\n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { HttpStatus } from '@nestjs/common'\nimport { ApiPropertyOptional } from '@nestjs/swagger'\n\nimport { Transform } from 'class-transformer'\nimport { IsOptional, Min } from 'class-validator'\n\nimport { APIError } from '../../domain'\n\nexport enum OrderType {\n    DESC = 'DESC',\n    ASC = 'ASC',\n}\n\n/**\n * Describes generic pagination params\n */\nexport abstract class PaginationParams {\n    /**\n     * page\n     */\n    @ApiPropertyOptional({ type: Number, minimum: 0 })\n    @IsOptional()\n    @Min(0)\n    @Transform((val: string) => parseInt(val, 10))\n    readonly page?: number // = 0\n\n    /**\n     * page size\n     */\n    @ApiPropertyOptional({ type: Number, minimum: 0 })\n    @IsOptional()\n    @Min(0)\n    @Transform((val: string) => parseInt(val, 10))\n    readonly pageSize?: number // = 10\n\n    /**\n     * order\n     */\n    @ApiPropertyOptional()\n    @IsOptional()\n    abstract readonly order?: { [P in keyof T]?: OrderType }\n}\n\n/**\n * Generic pagination response interface\n */\nexport interface IPaginationResult {\n    /**\n     * Items included in the current listing\n     */\n    readonly data: T[]\n\n    /**\n     * Paging metadata\n     */\n    readonly paging: {\n        pageSize: number\n        page: number\n        total: number\n        totalPages: number\n    }\n\n    /**\n     * Error if any\n     */ error?: APIError\n\n    /**\n     * Message if anu\n     */\n    message?: string | string[]\n\n    /**\n     * Http status code\n     */\n    statusCode: HttpStatus\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ParamOption.html":{"url":"interfaces/ParamOption.html","title":"interface - ParamOption","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ParamOption\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/base/swagger-gen/utils/other.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        disabled\n                                \n                                \n                                            Optional\n                                        enum\n                                \n                                \n                                            Optional\n                                        field\n                                \n                                \n                                            Optional\n                                        primary\n                                \n                                \n                                            Optional\n                                        type\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        disabled\n                                    \n                                \n                                \n                                    \n                                        disabled:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        enum\n                                    \n                                \n                                \n                                    \n                                        enum:         SwaggerEnumType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         SwaggerEnumType\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        field\n                                    \n                                \n                                \n                                    \n                                        field:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        primary\n                                    \n                                \n                                \n                                    \n                                        primary:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                    \n                                \n                                \n                                    \n                                        type:     \"number\" | \"string\" | \"uuid\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"number\" | \"string\" | \"uuid\"\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { RequestMethod, ValidationPipeOptions } from '@nestjs/common'\nimport { SwaggerEnumType } from '@nestjs/swagger/dist/types/swagger-enum.type'\n\nexport declare type BaseRouteName =\n    | 'getManyBase'\n    | 'getOneBase'\n    | 'createOneBase'\n    | 'createManyBase'\n    | 'updateOneBase'\n    | 'replaceOneBase'\n    | 'deleteOneBase'\n    | 'getOne'\n\nexport interface BaseRoute {\n    name: BaseRouteName\n    path: string\n    method: RequestMethod\n    enable: boolean\n    override: boolean\n    withParams: boolean\n}\n\nexport interface GetManyDefaultResponse {\n    data: T[]\n    count: number\n    total: number\n    page: number\n    pageCount: number\n}\n\nexport interface ParamOption {\n    field?: string\n    type?: 'number' | 'string' | 'uuid'\n    enum?: SwaggerEnumType\n    primary?: boolean\n    disabled?: boolean\n}\n\nexport interface ParamsOptions {\n    [key: string]: ParamOption\n}\n\nexport interface CrudOptions {\n    model: {\n        type: { name: string }\n    }\n    dto?: {}\n    routes?: {\n        deleteOneBase?: { returnDeleted?: boolean }\n    }\n    validation?: ValidationPipeOptions | false\n    params?: ParamsOptions\n    query?: {\n        limit?: number\n        maxLimit?: number\n        cache?: number | false\n        alwaysPaginate?: boolean\n    }\n    serialize?: {\n        getMany?: false | object\n        get?: false | object\n        create?: false | object\n        createMany?: false | object\n        update?: false | object\n        replace?: false | object\n        delete?: false | object\n    }\n}\n\nexport function safeRequire(path: string): T | null {\n    try {\n        // eslint-disable-next-line global-require,@typescript-eslint/no-var-requires,import/no-dynamic-require\n        const pack = require(path)\n        return pack\n    } catch (_) {\n        return null\n    }\n}\n\nexport const swagger = safeRequire('@nestjs/swagger')\nexport const swaggerConst = safeRequire('@nestjs/swagger/dist/constants')\n\nexport function ApiProperty(options?: any): PropertyDecorator {\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    return (target: object, propertyKey: string | symbol) => {\n        if (swagger) {\n            const ApiPropertyDecorator =\n                swagger.ApiProperty || swagger.ApiModelProperty\n            ApiPropertyDecorator(options)(target, propertyKey)\n        }\n    }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ParamsOptions.html":{"url":"interfaces/ParamsOptions.html","title":"interface - ParamsOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ParamsOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/base/swagger-gen/utils/other.ts\n        \n\n\n\n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:        ParamOption\n\n                    \n                \n                        \n                            \n                                Defined in src/base/swagger-gen/utils/other.ts:40\n                            \n                        \n            \n        \n\n\n    \n\n\n    \n        import { RequestMethod, ValidationPipeOptions } from '@nestjs/common'\nimport { SwaggerEnumType } from '@nestjs/swagger/dist/types/swagger-enum.type'\n\nexport declare type BaseRouteName =\n    | 'getManyBase'\n    | 'getOneBase'\n    | 'createOneBase'\n    | 'createManyBase'\n    | 'updateOneBase'\n    | 'replaceOneBase'\n    | 'deleteOneBase'\n    | 'getOne'\n\nexport interface BaseRoute {\n    name: BaseRouteName\n    path: string\n    method: RequestMethod\n    enable: boolean\n    override: boolean\n    withParams: boolean\n}\n\nexport interface GetManyDefaultResponse {\n    data: T[]\n    count: number\n    total: number\n    page: number\n    pageCount: number\n}\n\nexport interface ParamOption {\n    field?: string\n    type?: 'number' | 'string' | 'uuid'\n    enum?: SwaggerEnumType\n    primary?: boolean\n    disabled?: boolean\n}\n\nexport interface ParamsOptions {\n    [key: string]: ParamOption\n}\n\nexport interface CrudOptions {\n    model: {\n        type: { name: string }\n    }\n    dto?: {}\n    routes?: {\n        deleteOneBase?: { returnDeleted?: boolean }\n    }\n    validation?: ValidationPipeOptions | false\n    params?: ParamsOptions\n    query?: {\n        limit?: number\n        maxLimit?: number\n        cache?: number | false\n        alwaysPaginate?: boolean\n    }\n    serialize?: {\n        getMany?: false | object\n        get?: false | object\n        create?: false | object\n        createMany?: false | object\n        update?: false | object\n        replace?: false | object\n        delete?: false | object\n    }\n}\n\nexport function safeRequire(path: string): T | null {\n    try {\n        // eslint-disable-next-line global-require,@typescript-eslint/no-var-requires,import/no-dynamic-require\n        const pack = require(path)\n        return pack\n    } catch (_) {\n        return null\n    }\n}\n\nexport const swagger = safeRequire('@nestjs/swagger')\nexport const swaggerConst = safeRequire('@nestjs/swagger/dist/constants')\n\nexport function ApiProperty(options?: any): PropertyDecorator {\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    return (target: object, propertyKey: string | symbol) => {\n        if (swagger) {\n            const ApiPropertyDecorator =\n                swagger.ApiProperty || swagger.ApiModelProperty\n            ApiPropertyDecorator(options)(target, propertyKey)\n        }\n    }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PersistedCronService.html":{"url":"injectables/PersistedCronService.html","title":"injectable - PersistedCronService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  PersistedCronService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/cron/persisted-cron.service.ts\n        \n\n            \n                Description\n            \n            \n                Each time the server restarts, this service finds the jobs from the table and restored them\nTODO: make a service to gracefully stop cron jobs on ApplicationShutdown\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                onApplicationBootstrap\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(schedule: SchedulerRegistry)\n                    \n                \n                        \n                            \n                                Defined in src/cron/persisted-cron.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        schedule\n                                                  \n                                                        \n                                                                        SchedulerRegistry\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            onApplicationBootstrap\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    onApplicationBootstrap()\n                \n            \n\n\n            \n                \n                    Defined in src/cron/persisted-cron.service.ts:18\n                \n            \n\n\n            \n                \n                    NestJs hook invoked when the app bootstrapped\n\n\n                    \n                        Returns :     {}\n\n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            logger\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Logger(PersistedCronService.name)\n                        \n                    \n                        \n                            \n                                    Defined in src/cron/persisted-cron.service.ts:11\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable, Logger, OnApplicationBootstrap } from '@nestjs/common'\nimport { SchedulerRegistry } from '@nestjs/schedule'\n\n/**\n * Each time the server restarts, this service finds the jobs from the table and restored them\n *\n * TODO: make a service to gracefully stop cron jobs on ApplicationShutdown\n */\n@Injectable()\nexport class PersistedCronService implements OnApplicationBootstrap {\n    logger = new Logger(PersistedCronService.name)\n\n    constructor(readonly schedule: SchedulerRegistry) {}\n\n    /**\n     * NestJs hook invoked when the app bootstrapped\n     */\n    async onApplicationBootstrap() {\n        // TODO: Implement commented out flow\n\n        /*\n        const jobs = await Job.find() // the jobs are all saved in `Job` table.\n\n        jobs.forEach((job) => {\n            const cron = new CronJob(job.time, () => {}) // You can define the handler for each job type\n            this.schedule.addCronJob(job.name, cron)\n            cron.start()\n        })\n        */\n\n        return Promise.resolve()\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PostType.html":{"url":"interfaces/PostType.html","title":"interface - PostType","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  PostType\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/domain.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        postType\n                                \n                                \n                                        postTypeId\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        postType\n                                    \n                                \n                                \n                                    \n                                        postType:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        postTypeId\n                                    \n                                \n                                \n                                    \n                                        postTypeId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { HttpStatus } from '@nestjs/common'\n\nexport type Results =\n    | GetAppLaunchData\n    | GetUserProfile\n    | GetUserPosts\n    | GetComments\n    | GetRescueList\n    | GetFollowers\n    | GetFollowing\n\nexport type APIError = Error | string | null\n\nexport interface Result {\n    data: T\n    error?: APIError\n    message?: string | string[]\n    statusCode: HttpStatus\n}\n\nexport interface APIResponse {\n    data: T\n    error?: APIError\n    message?: string | string[]\n    statusCode: HttpStatus\n\n    count?: number\n    page?: number\n    pageCount?: number\n    total?: number\n}\n\nexport interface GetAppLaunchData {\n    link: 'api:/'\n    response: APIResponse\n}\n\nexport interface GetUserProfile {\n    link: 'api:v1/user/getUserProfile?userId=25'\n    response: APIResponse\n}\n\nexport interface GetUserPosts {\n    link: 'api:v1/user/getUserPosts?pageNo=0&pageSize=25'\n    response: APIResponse\n}\n\nexport interface GetRescueList {\n    link: 'api:v1/rescue/getRescueList?pageNo=0&pageSize=10&status=pending|inProgress|completed|nearest'\n    response: APIResponse\n}\n\nexport interface GetComments {\n    link: 'api:v1/rescue/getComments?pageNo=0&pageSize=10&postId=1230'\n    response: APIResponse\n}\n\nexport interface GetFollowers {\n    link: 'api:v1/rescue/getUserFollowers?userId=1230'\n    response: APIResponse\n}\n\nexport interface GetFollowing {\n    link: 'api:v1/rescue/getUserFollowing?userId=1230'\n    response: APIResponse\n}\n\nexport interface AppLaunchAction {\n    actionId: number\n    action: string\n    isActive: boolean\n    subject?: string\n}\n\nexport interface User {\n    usesId: number\n\n    coverImage: string\n    following: boolean\n    gender: string\n    isOwnProfile: number\n    isRescuer: boolean\n    latitude: number\n    longitude: number\n    numberOfFollowers: number\n    numberOfFollowing: number\n    numberOfPosts: number\n    numberOfRescuesCompleted: number\n    numberOfRescuesCreated: number\n    numberOfRescuesInProgress: number\n    profileImage: string\n    rescuer: boolean\n    userAddress: string\n    userContacts: string\n    userEmail: string\n    userName: string\n    badge: {\n        badgeId: number\n        badgeName: string\n        badgeDescription: string\n        recuesCompletionNeeded: number\n    }\n    setting: {\n        showMyContacts: boolean\n        getNotifications: boolean\n    }\n}\n\nexport interface PostType {\n    postTypeId: number\n    postType: string\n}\n\nexport interface PostedByUser {\n    usesId: number\n    badgeName: string\n    following: boolean\n    profileImage: string\n    rescuer: boolean\n    userName: string\n}\n\nexport interface UserPost {\n    postId: number\n    commentsCount: number\n    isUserReactedToPost: boolean\n    ownPage: boolean\n    postBy: PostedByUser\n    postImage: string\n    postTime: string\n    postType: PostType\n    postVideo: string\n    reactionsCount: number\n    timeAgo: string\n\n    adCorporateLogoUrl: string | null\n    corporateDescription: string | null\n    corporateName: string | null\n}\n\nexport interface UserPosts {\n    isRecent: boolean\n    feed: UserPost[]\n}\n\nexport interface Rescues {\n    rescueId: number\n    animalImageUrl: string\n    distance: number\n    distanceAway: string\n    emergencyType: string\n    postedBy: string\n    postedMinAgo: string\n    rescueDate: Date\n    rescuedPetName: string\n    rescueLocality: string\n    rescuers: {\n        contact: number\n        name: string\n        profileId: number\n        profileImageUrl: string\n        rescues: boolean\n        showMyNumber: boolean\n    }\n    rescueStatus: string\n    viewsCont: number\n}\n\nexport interface RescueLists {\n    rescues: Rescues[]\n}\n\nexport interface Comment {\n    commentId: number\n    comment: string\n    commentedUseName: string\n    commentedUserId: number\n    timeAgo: string\n}\n\nexport interface Comments {\n    comments: Comment[]\n}\n\nexport interface Follower {\n    userId: number\n    userName: string\n    profileImage: string\n    areYouFollowing: boolean\n    showRemoveOption: boolean\n}\n\nexport type Following = Follower\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PostedByUser.html":{"url":"interfaces/PostedByUser.html","title":"interface - PostedByUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  PostedByUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/domain.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        badgeName\n                                \n                                \n                                        following\n                                \n                                \n                                        profileImage\n                                \n                                \n                                        rescuer\n                                \n                                \n                                        userName\n                                \n                                \n                                        usesId\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        badgeName\n                                    \n                                \n                                \n                                    \n                                        badgeName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        following\n                                    \n                                \n                                \n                                    \n                                        following:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        profileImage\n                                    \n                                \n                                \n                                    \n                                        profileImage:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        rescuer\n                                    \n                                \n                                \n                                    \n                                        rescuer:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        userName\n                                    \n                                \n                                \n                                    \n                                        userName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        usesId\n                                    \n                                \n                                \n                                    \n                                        usesId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { HttpStatus } from '@nestjs/common'\n\nexport type Results =\n    | GetAppLaunchData\n    | GetUserProfile\n    | GetUserPosts\n    | GetComments\n    | GetRescueList\n    | GetFollowers\n    | GetFollowing\n\nexport type APIError = Error | string | null\n\nexport interface Result {\n    data: T\n    error?: APIError\n    message?: string | string[]\n    statusCode: HttpStatus\n}\n\nexport interface APIResponse {\n    data: T\n    error?: APIError\n    message?: string | string[]\n    statusCode: HttpStatus\n\n    count?: number\n    page?: number\n    pageCount?: number\n    total?: number\n}\n\nexport interface GetAppLaunchData {\n    link: 'api:/'\n    response: APIResponse\n}\n\nexport interface GetUserProfile {\n    link: 'api:v1/user/getUserProfile?userId=25'\n    response: APIResponse\n}\n\nexport interface GetUserPosts {\n    link: 'api:v1/user/getUserPosts?pageNo=0&pageSize=25'\n    response: APIResponse\n}\n\nexport interface GetRescueList {\n    link: 'api:v1/rescue/getRescueList?pageNo=0&pageSize=10&status=pending|inProgress|completed|nearest'\n    response: APIResponse\n}\n\nexport interface GetComments {\n    link: 'api:v1/rescue/getComments?pageNo=0&pageSize=10&postId=1230'\n    response: APIResponse\n}\n\nexport interface GetFollowers {\n    link: 'api:v1/rescue/getUserFollowers?userId=1230'\n    response: APIResponse\n}\n\nexport interface GetFollowing {\n    link: 'api:v1/rescue/getUserFollowing?userId=1230'\n    response: APIResponse\n}\n\nexport interface AppLaunchAction {\n    actionId: number\n    action: string\n    isActive: boolean\n    subject?: string\n}\n\nexport interface User {\n    usesId: number\n\n    coverImage: string\n    following: boolean\n    gender: string\n    isOwnProfile: number\n    isRescuer: boolean\n    latitude: number\n    longitude: number\n    numberOfFollowers: number\n    numberOfFollowing: number\n    numberOfPosts: number\n    numberOfRescuesCompleted: number\n    numberOfRescuesCreated: number\n    numberOfRescuesInProgress: number\n    profileImage: string\n    rescuer: boolean\n    userAddress: string\n    userContacts: string\n    userEmail: string\n    userName: string\n    badge: {\n        badgeId: number\n        badgeName: string\n        badgeDescription: string\n        recuesCompletionNeeded: number\n    }\n    setting: {\n        showMyContacts: boolean\n        getNotifications: boolean\n    }\n}\n\nexport interface PostType {\n    postTypeId: number\n    postType: string\n}\n\nexport interface PostedByUser {\n    usesId: number\n    badgeName: string\n    following: boolean\n    profileImage: string\n    rescuer: boolean\n    userName: string\n}\n\nexport interface UserPost {\n    postId: number\n    commentsCount: number\n    isUserReactedToPost: boolean\n    ownPage: boolean\n    postBy: PostedByUser\n    postImage: string\n    postTime: string\n    postType: PostType\n    postVideo: string\n    reactionsCount: number\n    timeAgo: string\n\n    adCorporateLogoUrl: string | null\n    corporateDescription: string | null\n    corporateName: string | null\n}\n\nexport interface UserPosts {\n    isRecent: boolean\n    feed: UserPost[]\n}\n\nexport interface Rescues {\n    rescueId: number\n    animalImageUrl: string\n    distance: number\n    distanceAway: string\n    emergencyType: string\n    postedBy: string\n    postedMinAgo: string\n    rescueDate: Date\n    rescuedPetName: string\n    rescueLocality: string\n    rescuers: {\n        contact: number\n        name: string\n        profileId: number\n        profileImageUrl: string\n        rescues: boolean\n        showMyNumber: boolean\n    }\n    rescueStatus: string\n    viewsCont: number\n}\n\nexport interface RescueLists {\n    rescues: Rescues[]\n}\n\nexport interface Comment {\n    commentId: number\n    comment: string\n    commentedUseName: string\n    commentedUserId: number\n    timeAgo: string\n}\n\nexport interface Comments {\n    comments: Comment[]\n}\n\nexport interface Follower {\n    userId: number\n    userName: string\n    profileImage: string\n    areYouFollowing: boolean\n    showRemoveOption: boolean\n}\n\nexport type Following = Follower\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/QueryFailedFilter.html":{"url":"classes/QueryFailedFilter.html","title":"class - QueryFailedFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  QueryFailedFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infra/filters/query-failed.filter.ts\n        \n\n            \n                Description\n            \n            \n                Query Failed Exception Filter\n\n            \n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            catch\n                        \n                        \n                    \n                \n            \n            \n                \ncatch(exception: CheckViolationError | ConstraintViolationError | DataError | ForeignKeyViolationError | NotNullViolationError | UniqueViolationError | NotFoundError, host: ArgumentsHost)\n                \n            \n\n\n            \n                \n                    Defined in src/infra/filters/query-failed.filter.ts:33\n                \n            \n\n\n            \n                \n                    Method to implement a custom exception filter.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                            CheckViolationError | ConstraintViolationError | DataError | ForeignKeyViolationError | NotNullViolationError | UniqueViolationError | NotFoundError\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the class of the exception being handled\n\n                                    \n                                \n                                \n                                    host\n                                    \n                                            ArgumentsHost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        used to access an array of arguments for\nthe in-flight request\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ArgumentsHost, Catch, ExceptionFilter, HttpStatus } from '@nestjs/common'\n\nimport { NotFoundError } from 'objection'\nimport {\n    UniqueViolationError,\n    NotNullViolationError,\n    ForeignKeyViolationError,\n    ConstraintViolationError,\n    CheckViolationError,\n    DataError,\n} from 'objection-db-errors'\n\n/**\n * Query Failed Exception Filter\n */\n@Catch(\n    CheckViolationError,\n    ConstraintViolationError,\n    DataError,\n    ForeignKeyViolationError,\n    NotNullViolationError,\n    UniqueViolationError,\n    NotFoundError,\n)\nexport class QueryFailedFilter implements ExceptionFilter {\n    /**\n     * Method to implement a custom exception filter.\n     *\n     * @param exception the class of the exception being handled\n     * @param host used to access an array of arguments for\n     * the in-flight request\n     */\n    catch(\n        exception:\n            | CheckViolationError\n            | ConstraintViolationError\n            | DataError\n            | ForeignKeyViolationError\n            | NotNullViolationError\n            | UniqueViolationError\n            | NotFoundError,\n        host: ArgumentsHost,\n    ) {\n        const ctx = host.switchToHttp()\n        const response = ctx.getResponse()\n        const request = ctx.getRequest()\n        const status = HttpStatus.PRECONDITION_FAILED\n\n        const {\n            name, // @ts-ignore\n            data, // @ts-ignore\n            type, // @ts-ignore\n            table, // @ts-ignore\n            column, // @ts-ignore\n            schema, // @ts-ignore\n            message, // @ts-ignore\n            columns, // @ts-ignore\n            database, // @ts-ignore\n            constraint, // @ts-ignore\n            nativeError, // @ts-ignore\n        } = exception\n\n        // @ts-ignore\n        response.status(status).json({\n            statusCode: status,\n            message,\n\n            name,\n            table,\n            schema,\n            database,\n            constraint,\n            nativeError,\n            columns: column ? [column] : columns,\n\n            data,\n            type,\n\n            path: request.url,\n            timestamp: new Date().toISOString(),\n        })\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/R.html":{"url":"classes/R.html","title":"class - R","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  R\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/base/swagger-gen/crud-routes.factory.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                get\n                            \n                            \n                                    Static\n                                set\n                            \n                            \n                                    Static\n                                setRoute\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            get\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    get(metadataKey: any, target: Object, propertyKey?: string | symbol)\n                \n            \n\n\n            \n                \n                    Defined in src/base/swagger-gen/crud-routes.factory.ts:33\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    metadataKey\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    target\n                                    \n                                                Object\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    propertyKey\n                                    \n                                            string | symbol\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            set\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    set(metadataKey: string, metadataValue: any, target: Object, propertyKey?: string | symbol)\n                \n            \n\n\n            \n                \n                    Defined in src/base/swagger-gen/crud-routes.factory.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    metadataKey\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    metadataValue\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    target\n                                    \n                                                Object\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    propertyKey\n                                    \n                                            string | symbol\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            setRoute\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setRoute(route: BaseRoute, func: Function)\n                \n            \n\n\n            \n                \n                    Defined in src/base/swagger-gen/crud-routes.factory.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    route\n                                    \n                                                BaseRoute\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    func\n                                    \n                                                Function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { HttpStatus, RequestMethod } from '@nestjs/common'\n\nimport { Type } from 'class-transformer'\nimport * as deepmerge from 'deepmerge'\n\nimport {\n    ApiProperty,\n    BaseRoute,\n    isFalse,\n    isFunction,\n    isObjectFull,\n    objKeys,\n    swagger,\n    swaggerConst,\n} from './utils'\nimport type { CrudOptions, GetManyDefaultResponse, BaseRouteName } from './utils'\n\nexport class R {\n    static set(\n        metadataKey: string,\n        metadataValue: any,\n        target: Object,\n        propertyKey?: string | symbol,\n    ) {\n        if (!propertyKey) {\n            Reflect.defineMetadata(metadataKey, metadataValue, target)\n        } else {\n            Reflect.defineMetadata(metadataKey, metadataValue, target, propertyKey)\n        }\n    }\n\n    static get(\n        metadataKey: any,\n        target: Object,\n        propertyKey?: string | symbol,\n    ): T {\n        if (!propertyKey) return Reflect.getMetadata(metadataKey, target)\n\n        return Reflect.getMetadata(metadataKey, target, propertyKey)\n    }\n\n    static setRoute(route: BaseRoute, func: Function) {\n        R.set('path', route.path, func)\n        R.set('method', route.method, func)\n    }\n}\n\nexport class Swagger {\n    /**\n     * Sets extra swagger metadata for GET Calls\n     */\n    static setExtraModels(swaggerModels: {\n        [x: string]: any\n        get: Record\n    }) {\n        if (swaggerConst) {\n            const meta = Swagger.getExtraModels(swaggerModels.get)\n            const models = [\n                ...meta,\n                ...objKeys(swaggerModels)\n                    .map((name) => swaggerModels[name])\n                    .filter((one) => one && one.name !== swaggerModels.get.name),\n            ]\n\n            R.set(\n                swaggerConst.DECORATORS.API_EXTRA_MODELS,\n                models,\n                swaggerModels.get,\n            )\n        }\n    }\n\n    /**\n     * Sets swagger metadata for response of GET Calls\n     */\n    static setResponseOk(metadata: any[], func: Function) {\n        if (swaggerConst) {\n            R.set(swaggerConst.DECORATORS.API_RESPONSE, metadata, func)\n        }\n    }\n\n    static getExtraModels(target: Record): any[] {\n        return swaggerConst\n            ? R.get(swaggerConst.API_EXTRA_MODELS, target) || []\n            : []\n    }\n\n    static getResponseOk(func: Function) {\n        return swaggerConst\n            ? R.get(swaggerConst.DECORATORS.API_RESPONSE, func) || {}\n            : {}\n    }\n\n    static createResponseMeta(\n        name: BaseRouteName,\n        options: CrudOptions,\n        swaggerModels: {\n            [x: string]: any\n            get: { name: any }\n            getMany: { name: any }\n        },\n    ) {\n        if (swagger) {\n            const { query } = options\n\n            switch (name) {\n                case 'getOneBase':\n                    return {\n                        [HttpStatus.OK]: {\n                            description: 'Get one base response',\n                            type: swaggerModels.get,\n                        },\n                    }\n                case 'getOne':\n                    return {\n                        [HttpStatus.OK]: query?.alwaysPaginate\n                            ? {\n                                  description: 'Get paginated response',\n                                  type: swaggerModels.getMany,\n                              }\n                            : {\n                                  description: 'Get many base response',\n                                  schema: {\n                                      oneOf: [\n                                          {\n                                              $ref: swagger.getSchemaPath(\n                                                  swaggerModels.getMany.name,\n                                              ),\n                                          },\n                                          {\n                                              type: 'array',\n                                              items: {\n                                                  $ref: swagger.getSchemaPath(\n                                                      swaggerModels.get.name,\n                                                  ),\n                                              },\n                                          },\n                                      ],\n                                  },\n                              },\n                    }\n                default:\n                    // eslint-disable-next-line no-case-declarations\n                    const dto = swaggerModels[name.split('OneBase')[0]]\n\n                    return {\n                        [HttpStatus.OK]: {\n                            description: 'Response',\n                            schema: { $ref: swagger.getSchemaPath(dto.name) },\n                        },\n                    }\n            }\n        } else {\n            return {}\n        }\n    }\n}\n\nexport class SerializeHelper {\n    static createGetManyDto(dto: any, resourceName: string): any {\n        class GetManyResponseDto implements GetManyDefaultResponse {\n            @ApiProperty({ type: dto, isArray: true })\n            @Type(() => dto)\n            data!: any[]\n\n            @ApiProperty({ type: 'number' })\n            count!: number\n\n            @ApiProperty({ type: 'number' })\n            total!: number\n\n            @ApiProperty({ type: 'number' })\n            page!: number\n\n            @ApiProperty({ type: 'number' })\n            pageCount!: number\n        }\n\n        Object.defineProperty(GetManyResponseDto, 'name', {\n            writable: false,\n            value: `GetMany${resourceName}ResponseDto`,\n        })\n\n        return GetManyResponseDto\n    }\n\n    static createGetOneResponseDto(resourceName: string): any {\n        class GetOneResponseDto {}\n\n        Object.defineProperty(GetOneResponseDto, 'name', {\n            writable: false,\n            value: `${resourceName}ResponseDto`,\n        })\n\n        return GetOneResponseDto\n    }\n}\n\nexport class CrudConfigService {\n    static config: Partial = {\n        query: {\n            alwaysPaginate: false,\n        },\n    }\n\n    static load(config: Record) {\n        const query = isObjectFull(config.query) ? config.query : {}\n        const params = isObjectFull(config.params) ? config.params : {}\n        const serialize = isObjectFull(config.serialize) ? config.serialize : {}\n\n        CrudConfigService.config = deepmerge(\n            CrudConfigService.config,\n            { query, params, serialize },\n            { arrayMerge: (a, b, c) => b },\n        )\n    }\n}\n\nexport class CrudRoutesFactory {\n    protected options\n\n    protected swaggerModels: any = {}\n\n    constructor(private target: Object, options: CrudOptions) {\n        this.options = options\n        this.create()\n\n        console.log(\n            'CrudRoutesFactory::constructor',\n            // { ...options },\n            // this.targetProto,\n            // this.modelType,\n            // this.modelName,\n            // this.swaggerModels,\n        )\n    }\n\n    static create(target: Object, options: CrudOptions): CrudRoutesFactory {\n        return new CrudRoutesFactory(target, options)\n    }\n\n    get targetProto() {\n        // @ts-ignore\n        return this.target.prototype\n    }\n\n    get modelName() {\n        return this.options.model.type?.name\n    }\n\n    get modelType() {\n        return this.options.model.type\n    }\n\n    private create() {\n        const routesSchema = CrudRoutesFactory.getRoutesSchema()\n        this.mergeOptions()\n        this.setResponseModels()\n        this.createRoutes(routesSchema)\n        this.enableRoutes(routesSchema)\n    }\n\n    getOne(name: BaseRouteName) {\n        this.targetProto[name] = function getOne(req: any) {\n            return this.service.getOne(req)\n        }\n    }\n\n    getOneBase(name: BaseRouteName) {\n        this.targetProto[name] = function getOneBase(req: any) {\n            return this.service.getOneBase(req)\n        }\n    }\n\n    static getRoutesSchema(): BaseRoute[] {\n        return [\n            {\n                name: 'getOneBase',\n                path: '/',\n                method: RequestMethod.GET,\n                enable: false,\n                override: false,\n                withParams: true,\n            },\n            {\n                name: 'getOne',\n                path: '/',\n                method: RequestMethod.GET,\n                enable: false,\n                override: false,\n                withParams: false,\n            },\n        ]\n    }\n\n    mergeOptions() {\n        // merge query config\n        const query = isObjectFull(this.options.query) ? this.options.query : {}\n        this.options.query = { ...CrudConfigService.config.query, ...query }\n\n        // set dto\n        if (!isObjectFull(this.options.dto)) {\n            this.options.dto = {}\n        }\n\n        // set serialize\n        this.options.serialize = {\n            ...CrudConfigService.config.serialize,\n            ...this.options.serialize,\n        }\n\n        this.options.serialize.get = isFalse(this.options.serialize?.get)\n            ? false\n            : this.options.serialize?.get || this.modelType\n\n        this.options.serialize.getMany = isFalse(this.options.serialize?.getMany)\n            ? false\n            : this.options.serialize?.getMany\n            ? this.options.serialize?.getMany\n            : isFalse(this.options.serialize?.get)\n            ? false\n            : SerializeHelper.createGetManyDto(\n                  this.options.serialize?.get,\n                  this.modelName,\n              )\n\n        this.options.serialize.create = isFalse(this.options.serialize?.create)\n            ? false\n            : this.options.serialize?.create || this.modelType\n\n        this.options.serialize.update = isFalse(this.options.serialize?.update)\n            ? false\n            : this.options.serialize?.update || this.modelType\n\n        this.options.serialize.replace = isFalse(this.options.serialize?.replace)\n            ? false\n            : this.options.serialize?.replace || this.modelType\n\n        this.options.serialize.delete =\n            isFalse(this.options.serialize?.delete) ||\n            !this.options.routes?.deleteOneBase?.returnDeleted\n                ? false\n                : this.options.serialize?.delete || this.modelType\n\n        R.set('CRUD_OPTIONS_METADATA', this.options, this.target)\n    }\n\n    setResponseModels() {\n        const modelType = isFunction(this.modelType)\n            ? this.modelType\n            : SerializeHelper.createGetOneResponseDto(this.modelName)\n\n        this.swaggerModels.get = isFunction(this.options.serialize?.get)\n            ? this.options.serialize?.get\n            : modelType\n\n        this.swaggerModels.getMany =\n            this.options.serialize?.getMany ||\n            SerializeHelper.createGetManyDto(this.swaggerModels.get, this.modelName)\n\n        this.swaggerModels.create = isFunction(this.options.serialize?.create)\n            ? this.options.serialize?.create\n            : modelType\n\n        this.swaggerModels.update = isFunction(this.options.serialize?.update)\n            ? this.options.serialize?.update\n            : modelType\n\n        this.swaggerModels.replace = isFunction(this.options.serialize?.replace)\n            ? this.options.serialize?.replace\n            : modelType\n\n        this.swaggerModels.delete = isFunction(this.options.serialize?.delete)\n            ? this.options.serialize?.delete\n            : modelType\n\n        Swagger.setExtraModels(this.swaggerModels)\n    }\n\n    enableRoutes(routesSchema: BaseRoute[]) {\n        routesSchema.forEach((route) => {\n            if (!route.override && route.enable) {\n                R.setRoute(route, this.targetProto[route.name])\n            }\n        })\n    }\n\n    createRoutes(routesSchema: BaseRoute[]) {\n        routesSchema.forEach((route) => {\n            // create base method\n            /* this[route.name](route.name) */\n            route.enable = true\n\n            // set metadata\n            this.setSwaggerResponseOk(route.name)\n        })\n    }\n\n    setSwaggerResponseOk(name: BaseRouteName) {\n        const metadata = Swagger.getResponseOk(this.targetProto[name]) || {}\n        const metadataToAdd =\n            Swagger.createResponseMeta(name, this.options, this.swaggerModels) || {}\n\n        Swagger.setResponseOk(\n            // @ts-ignore\n            { ...metadata, ...metadataToAdd },\n            this.targetProto[name],\n        )\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/RequestGuard.html":{"url":"guards/RequestGuard.html","title":"guard - RequestGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n    Guards\n    RequestGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/infra/guards/req.ts\n            \n\n                \n                Description\n                \n                \n                    Request Guard\n\n                \n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                bindRequestHelpers\n                            \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            bindRequestHelpers\n                        \n                        \n                    \n                \n            \n            \n                \nbindRequestHelpers(request: any)\n                \n            \n\n\n            \n                \n                    Defined in src/infra/guards/req.ts:33\n                \n            \n\n\n            \n                \n                    Bind Request Helpers\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            canActivate\n                        \n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/infra/guards/req.ts:20\n                \n            \n\n\n            \n                \n                    Guard Method\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Current execution context. Provides access to details about\nthe current request pipeline.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     boolean | Promise | Observable\n\n                    \n                    \n                        Value indicating whether or not the current request is allowed to\nproceed.\n\n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { Injectable, CanActivate, ExecutionContext } from '@nestjs/common'\n\nimport { Observable } from 'rxjs'\n\n/**\n * Request Guard\n */\n@Injectable()\nexport class RequestGuard implements CanActivate {\n    /**\n     * Guard Method\n     *\n     * @param context Current execution context. Provides access to details about\n     * the current request pipeline.\n     *\n     * @returns Value indicating whether or not the current request is allowed to\n     * proceed.\n     */\n    canActivate(\n        context: ExecutionContext,\n    ): boolean | Promise | Observable {\n        this.bindRequestHelpers(context.switchToHttp().getRequest())\n\n        return true\n    }\n\n    /**\n     * Bind Request Helpers\n     *\n     * @param request\n     */\n    bindRequestHelpers(request: any): any {\n        function all(): Record {\n            const inputs = { ...request.query, ...request.body, ...request.params }\n\n            // eslint-disable-next-line guard-for-in,no-restricted-syntax\n            for (const key in inputs) {\n                const value = inputs[key]\n\n                if (typeof value === 'string' || value instanceof String) {\n                    inputs[key] = value.trim()\n                }\n            }\n\n            return inputs\n        }\n\n        request.all = all\n\n        return request\n    }\n}\n\n        \n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RescueLists.html":{"url":"interfaces/RescueLists.html","title":"interface - RescueLists","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  RescueLists\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/domain.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        rescues\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        rescues\n                                    \n                                \n                                \n                                    \n                                        rescues:         Rescues[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Rescues[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { HttpStatus } from '@nestjs/common'\n\nexport type Results =\n    | GetAppLaunchData\n    | GetUserProfile\n    | GetUserPosts\n    | GetComments\n    | GetRescueList\n    | GetFollowers\n    | GetFollowing\n\nexport type APIError = Error | string | null\n\nexport interface Result {\n    data: T\n    error?: APIError\n    message?: string | string[]\n    statusCode: HttpStatus\n}\n\nexport interface APIResponse {\n    data: T\n    error?: APIError\n    message?: string | string[]\n    statusCode: HttpStatus\n\n    count?: number\n    page?: number\n    pageCount?: number\n    total?: number\n}\n\nexport interface GetAppLaunchData {\n    link: 'api:/'\n    response: APIResponse\n}\n\nexport interface GetUserProfile {\n    link: 'api:v1/user/getUserProfile?userId=25'\n    response: APIResponse\n}\n\nexport interface GetUserPosts {\n    link: 'api:v1/user/getUserPosts?pageNo=0&pageSize=25'\n    response: APIResponse\n}\n\nexport interface GetRescueList {\n    link: 'api:v1/rescue/getRescueList?pageNo=0&pageSize=10&status=pending|inProgress|completed|nearest'\n    response: APIResponse\n}\n\nexport interface GetComments {\n    link: 'api:v1/rescue/getComments?pageNo=0&pageSize=10&postId=1230'\n    response: APIResponse\n}\n\nexport interface GetFollowers {\n    link: 'api:v1/rescue/getUserFollowers?userId=1230'\n    response: APIResponse\n}\n\nexport interface GetFollowing {\n    link: 'api:v1/rescue/getUserFollowing?userId=1230'\n    response: APIResponse\n}\n\nexport interface AppLaunchAction {\n    actionId: number\n    action: string\n    isActive: boolean\n    subject?: string\n}\n\nexport interface User {\n    usesId: number\n\n    coverImage: string\n    following: boolean\n    gender: string\n    isOwnProfile: number\n    isRescuer: boolean\n    latitude: number\n    longitude: number\n    numberOfFollowers: number\n    numberOfFollowing: number\n    numberOfPosts: number\n    numberOfRescuesCompleted: number\n    numberOfRescuesCreated: number\n    numberOfRescuesInProgress: number\n    profileImage: string\n    rescuer: boolean\n    userAddress: string\n    userContacts: string\n    userEmail: string\n    userName: string\n    badge: {\n        badgeId: number\n        badgeName: string\n        badgeDescription: string\n        recuesCompletionNeeded: number\n    }\n    setting: {\n        showMyContacts: boolean\n        getNotifications: boolean\n    }\n}\n\nexport interface PostType {\n    postTypeId: number\n    postType: string\n}\n\nexport interface PostedByUser {\n    usesId: number\n    badgeName: string\n    following: boolean\n    profileImage: string\n    rescuer: boolean\n    userName: string\n}\n\nexport interface UserPost {\n    postId: number\n    commentsCount: number\n    isUserReactedToPost: boolean\n    ownPage: boolean\n    postBy: PostedByUser\n    postImage: string\n    postTime: string\n    postType: PostType\n    postVideo: string\n    reactionsCount: number\n    timeAgo: string\n\n    adCorporateLogoUrl: string | null\n    corporateDescription: string | null\n    corporateName: string | null\n}\n\nexport interface UserPosts {\n    isRecent: boolean\n    feed: UserPost[]\n}\n\nexport interface Rescues {\n    rescueId: number\n    animalImageUrl: string\n    distance: number\n    distanceAway: string\n    emergencyType: string\n    postedBy: string\n    postedMinAgo: string\n    rescueDate: Date\n    rescuedPetName: string\n    rescueLocality: string\n    rescuers: {\n        contact: number\n        name: string\n        profileId: number\n        profileImageUrl: string\n        rescues: boolean\n        showMyNumber: boolean\n    }\n    rescueStatus: string\n    viewsCont: number\n}\n\nexport interface RescueLists {\n    rescues: Rescues[]\n}\n\nexport interface Comment {\n    commentId: number\n    comment: string\n    commentedUseName: string\n    commentedUserId: number\n    timeAgo: string\n}\n\nexport interface Comments {\n    comments: Comment[]\n}\n\nexport interface Follower {\n    userId: number\n    userName: string\n    profileImage: string\n    areYouFollowing: boolean\n    showRemoveOption: boolean\n}\n\nexport type Following = Follower\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Rescues.html":{"url":"interfaces/Rescues.html","title":"interface - Rescues","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Rescues\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/domain.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        animalImageUrl\n                                \n                                \n                                        distance\n                                \n                                \n                                        distanceAway\n                                \n                                \n                                        emergencyType\n                                \n                                \n                                        postedBy\n                                \n                                \n                                        postedMinAgo\n                                \n                                \n                                        rescueDate\n                                \n                                \n                                        rescuedPetName\n                                \n                                \n                                        rescueId\n                                \n                                \n                                        rescueLocality\n                                \n                                \n                                        rescuers\n                                \n                                \n                                        rescueStatus\n                                \n                                \n                                        viewsCont\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        animalImageUrl\n                                    \n                                \n                                \n                                    \n                                        animalImageUrl:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        distance\n                                    \n                                \n                                \n                                    \n                                        distance:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        distanceAway\n                                    \n                                \n                                \n                                    \n                                        distanceAway:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        emergencyType\n                                    \n                                \n                                \n                                    \n                                        emergencyType:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        postedBy\n                                    \n                                \n                                \n                                    \n                                        postedBy:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        postedMinAgo\n                                    \n                                \n                                \n                                    \n                                        postedMinAgo:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        rescueDate\n                                    \n                                \n                                \n                                    \n                                        rescueDate:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        rescuedPetName\n                                    \n                                \n                                \n                                    \n                                        rescuedPetName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        rescueId\n                                    \n                                \n                                \n                                    \n                                        rescueId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        rescueLocality\n                                    \n                                \n                                \n                                    \n                                        rescueLocality:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        rescuers\n                                    \n                                \n                                \n                                    \n                                        rescuers:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        rescueStatus\n                                    \n                                \n                                \n                                    \n                                        rescueStatus:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        viewsCont\n                                    \n                                \n                                \n                                    \n                                        viewsCont:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { HttpStatus } from '@nestjs/common'\n\nexport type Results =\n    | GetAppLaunchData\n    | GetUserProfile\n    | GetUserPosts\n    | GetComments\n    | GetRescueList\n    | GetFollowers\n    | GetFollowing\n\nexport type APIError = Error | string | null\n\nexport interface Result {\n    data: T\n    error?: APIError\n    message?: string | string[]\n    statusCode: HttpStatus\n}\n\nexport interface APIResponse {\n    data: T\n    error?: APIError\n    message?: string | string[]\n    statusCode: HttpStatus\n\n    count?: number\n    page?: number\n    pageCount?: number\n    total?: number\n}\n\nexport interface GetAppLaunchData {\n    link: 'api:/'\n    response: APIResponse\n}\n\nexport interface GetUserProfile {\n    link: 'api:v1/user/getUserProfile?userId=25'\n    response: APIResponse\n}\n\nexport interface GetUserPosts {\n    link: 'api:v1/user/getUserPosts?pageNo=0&pageSize=25'\n    response: APIResponse\n}\n\nexport interface GetRescueList {\n    link: 'api:v1/rescue/getRescueList?pageNo=0&pageSize=10&status=pending|inProgress|completed|nearest'\n    response: APIResponse\n}\n\nexport interface GetComments {\n    link: 'api:v1/rescue/getComments?pageNo=0&pageSize=10&postId=1230'\n    response: APIResponse\n}\n\nexport interface GetFollowers {\n    link: 'api:v1/rescue/getUserFollowers?userId=1230'\n    response: APIResponse\n}\n\nexport interface GetFollowing {\n    link: 'api:v1/rescue/getUserFollowing?userId=1230'\n    response: APIResponse\n}\n\nexport interface AppLaunchAction {\n    actionId: number\n    action: string\n    isActive: boolean\n    subject?: string\n}\n\nexport interface User {\n    usesId: number\n\n    coverImage: string\n    following: boolean\n    gender: string\n    isOwnProfile: number\n    isRescuer: boolean\n    latitude: number\n    longitude: number\n    numberOfFollowers: number\n    numberOfFollowing: number\n    numberOfPosts: number\n    numberOfRescuesCompleted: number\n    numberOfRescuesCreated: number\n    numberOfRescuesInProgress: number\n    profileImage: string\n    rescuer: boolean\n    userAddress: string\n    userContacts: string\n    userEmail: string\n    userName: string\n    badge: {\n        badgeId: number\n        badgeName: string\n        badgeDescription: string\n        recuesCompletionNeeded: number\n    }\n    setting: {\n        showMyContacts: boolean\n        getNotifications: boolean\n    }\n}\n\nexport interface PostType {\n    postTypeId: number\n    postType: string\n}\n\nexport interface PostedByUser {\n    usesId: number\n    badgeName: string\n    following: boolean\n    profileImage: string\n    rescuer: boolean\n    userName: string\n}\n\nexport interface UserPost {\n    postId: number\n    commentsCount: number\n    isUserReactedToPost: boolean\n    ownPage: boolean\n    postBy: PostedByUser\n    postImage: string\n    postTime: string\n    postType: PostType\n    postVideo: string\n    reactionsCount: number\n    timeAgo: string\n\n    adCorporateLogoUrl: string | null\n    corporateDescription: string | null\n    corporateName: string | null\n}\n\nexport interface UserPosts {\n    isRecent: boolean\n    feed: UserPost[]\n}\n\nexport interface Rescues {\n    rescueId: number\n    animalImageUrl: string\n    distance: number\n    distanceAway: string\n    emergencyType: string\n    postedBy: string\n    postedMinAgo: string\n    rescueDate: Date\n    rescuedPetName: string\n    rescueLocality: string\n    rescuers: {\n        contact: number\n        name: string\n        profileId: number\n        profileImageUrl: string\n        rescues: boolean\n        showMyNumber: boolean\n    }\n    rescueStatus: string\n    viewsCont: number\n}\n\nexport interface RescueLists {\n    rescues: Rescues[]\n}\n\nexport interface Comment {\n    commentId: number\n    comment: string\n    commentedUseName: string\n    commentedUserId: number\n    timeAgo: string\n}\n\nexport interface Comments {\n    comments: Comment[]\n}\n\nexport interface Follower {\n    userId: number\n    userName: string\n    profileImage: string\n    areYouFollowing: boolean\n    showRemoveOption: boolean\n}\n\nexport type Following = Follower\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Response.html":{"url":"interfaces/Response.html","title":"interface - Response","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Response\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infra/interceptors/transform.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        data\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                    \n                                \n                                \n                                    \n                                        data:     T\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n    Injectable,\n    NestInterceptor,\n    ExecutionContext,\n    CallHandler,\n} from '@nestjs/common'\n\nimport { Observable } from 'rxjs'\nimport { map } from 'rxjs/operators'\n\nexport interface Response {\n    data: T\n}\n\n/**\n * Transform interceptor is Observer which transform response\n */\n@Injectable()\nexport class TransformInterceptor implements NestInterceptor> {\n    /**\n     * Interceptor Method to implement a custom interceptor.\n     *\n     * @param context an `ExecutionContext` object providing methods to access the\n     * route handler and class about to be invoked.\n     * @param next a reference to the `CallHandler`, which provides access to an\n     * `Observable` representing the response stream from the route handler.\n     */\n    intercept(\n        context: ExecutionContext,\n        next: CallHandler,\n    ): Observable> {\n        return next.handle().pipe(map((data) => ({ data })))\n    }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/ResponseGuard.html":{"url":"guards/ResponseGuard.html","title":"guard - ResponseGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n    Guards\n    ResponseGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/infra/guards/res.ts\n            \n\n                \n                Description\n                \n                \n                    Response Guard\n\n                \n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                bindResponseHelpers\n                            \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            bindResponseHelpers\n                        \n                        \n                    \n                \n            \n            \n                \nbindResponseHelpers(response: any)\n                \n            \n\n\n            \n                \n                    Defined in src/infra/guards/res.ts:32\n                \n            \n\n\n            \n                \n                    Bind Response Helpers\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    response\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            canActivate\n                        \n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/infra/guards/res.ts:19\n                \n            \n\n\n            \n                \n                    Guard Method\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Current execution context. Provides access to details about\nthe current request pipeline.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     boolean | Promise | Observable\n\n                    \n                    \n                        Value indicating whether or not the current request is allowed to\nproceed.\n\n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { Injectable, CanActivate, ExecutionContext } from '@nestjs/common'\n\nimport { Observable } from 'rxjs'\n\n/**\n * Response Guard\n */\n@Injectable()\nexport class ResponseGuard implements CanActivate {\n    /**\n     * Guard Method\n     *\n     * @param context Current execution context. Provides access to details about\n     * the current request pipeline.\n     *\n     * @returns Value indicating whether or not the current request is allowed to\n     * proceed.\n     */\n    canActivate(\n        context: ExecutionContext,\n    ): boolean | Promise | Observable {\n        this.bindResponseHelpers(context.switchToHttp().getResponse())\n\n        return true\n    }\n\n    /**\n     * Bind Response Helpers\n     *\n     * @param response\n     */\n    bindResponseHelpers(response: any): any {\n        function success(\n            data: Record | Array | string,\n            status = 200,\n        ) {\n            return response.status(status).json({\n                success: true,\n                code: status,\n                data,\n            })\n        }\n\n        function error(err: Record | string, status = 401) {\n            let message = 'Something went wrong!'\n            let errors = null\n\n            if (typeof err === 'string') {\n                message = err\n            } else {\n                message = err.message\n                errors = err.errors\n            }\n\n            return response.status(status).json({\n                success: false,\n                code: status,\n                message,\n                errors,\n            })\n        }\n\n        function noContent() {\n            return response.status(204).end()\n        }\n\n        function withMeta(data: Record, status = 200) {\n            const { data: dataObj, ...meta } = data\n\n            return response.status(status).json({\n                success: true,\n                code: status,\n                data: dataObj,\n                meta,\n            })\n        }\n\n        response.error = error\n        response.success = success\n        response.withMeta = withMeta\n        response.noContent = noContent\n\n        return response\n    }\n}\n\n        \n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Result.html":{"url":"interfaces/Result.html","title":"interface - Result","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Result\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/domain.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        data\n                                \n                                \n                                            Optional\n                                        error\n                                \n                                \n                                            Optional\n                                        message\n                                \n                                \n                                        statusCode\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                    \n                                \n                                \n                                    \n                                        data:     T\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        error\n                                    \n                                \n                                \n                                    \n                                        error:         APIError\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         APIError\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                    \n                                \n                                \n                                    \n                                        message:     string | string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string | string[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        statusCode\n                                    \n                                \n                                \n                                    \n                                        statusCode:     HttpStatus\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     HttpStatus\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { HttpStatus } from '@nestjs/common'\n\nexport type Results =\n    | GetAppLaunchData\n    | GetUserProfile\n    | GetUserPosts\n    | GetComments\n    | GetRescueList\n    | GetFollowers\n    | GetFollowing\n\nexport type APIError = Error | string | null\n\nexport interface Result {\n    data: T\n    error?: APIError\n    message?: string | string[]\n    statusCode: HttpStatus\n}\n\nexport interface APIResponse {\n    data: T\n    error?: APIError\n    message?: string | string[]\n    statusCode: HttpStatus\n\n    count?: number\n    page?: number\n    pageCount?: number\n    total?: number\n}\n\nexport interface GetAppLaunchData {\n    link: 'api:/'\n    response: APIResponse\n}\n\nexport interface GetUserProfile {\n    link: 'api:v1/user/getUserProfile?userId=25'\n    response: APIResponse\n}\n\nexport interface GetUserPosts {\n    link: 'api:v1/user/getUserPosts?pageNo=0&pageSize=25'\n    response: APIResponse\n}\n\nexport interface GetRescueList {\n    link: 'api:v1/rescue/getRescueList?pageNo=0&pageSize=10&status=pending|inProgress|completed|nearest'\n    response: APIResponse\n}\n\nexport interface GetComments {\n    link: 'api:v1/rescue/getComments?pageNo=0&pageSize=10&postId=1230'\n    response: APIResponse\n}\n\nexport interface GetFollowers {\n    link: 'api:v1/rescue/getUserFollowers?userId=1230'\n    response: APIResponse\n}\n\nexport interface GetFollowing {\n    link: 'api:v1/rescue/getUserFollowing?userId=1230'\n    response: APIResponse\n}\n\nexport interface AppLaunchAction {\n    actionId: number\n    action: string\n    isActive: boolean\n    subject?: string\n}\n\nexport interface User {\n    usesId: number\n\n    coverImage: string\n    following: boolean\n    gender: string\n    isOwnProfile: number\n    isRescuer: boolean\n    latitude: number\n    longitude: number\n    numberOfFollowers: number\n    numberOfFollowing: number\n    numberOfPosts: number\n    numberOfRescuesCompleted: number\n    numberOfRescuesCreated: number\n    numberOfRescuesInProgress: number\n    profileImage: string\n    rescuer: boolean\n    userAddress: string\n    userContacts: string\n    userEmail: string\n    userName: string\n    badge: {\n        badgeId: number\n        badgeName: string\n        badgeDescription: string\n        recuesCompletionNeeded: number\n    }\n    setting: {\n        showMyContacts: boolean\n        getNotifications: boolean\n    }\n}\n\nexport interface PostType {\n    postTypeId: number\n    postType: string\n}\n\nexport interface PostedByUser {\n    usesId: number\n    badgeName: string\n    following: boolean\n    profileImage: string\n    rescuer: boolean\n    userName: string\n}\n\nexport interface UserPost {\n    postId: number\n    commentsCount: number\n    isUserReactedToPost: boolean\n    ownPage: boolean\n    postBy: PostedByUser\n    postImage: string\n    postTime: string\n    postType: PostType\n    postVideo: string\n    reactionsCount: number\n    timeAgo: string\n\n    adCorporateLogoUrl: string | null\n    corporateDescription: string | null\n    corporateName: string | null\n}\n\nexport interface UserPosts {\n    isRecent: boolean\n    feed: UserPost[]\n}\n\nexport interface Rescues {\n    rescueId: number\n    animalImageUrl: string\n    distance: number\n    distanceAway: string\n    emergencyType: string\n    postedBy: string\n    postedMinAgo: string\n    rescueDate: Date\n    rescuedPetName: string\n    rescueLocality: string\n    rescuers: {\n        contact: number\n        name: string\n        profileId: number\n        profileImageUrl: string\n        rescues: boolean\n        showMyNumber: boolean\n    }\n    rescueStatus: string\n    viewsCont: number\n}\n\nexport interface RescueLists {\n    rescues: Rescues[]\n}\n\nexport interface Comment {\n    commentId: number\n    comment: string\n    commentedUseName: string\n    commentedUserId: number\n    timeAgo: string\n}\n\nexport interface Comments {\n    comments: Comment[]\n}\n\nexport interface Follower {\n    userId: number\n    userName: string\n    profileImage: string\n    areYouFollowing: boolean\n    showRemoveOption: boolean\n}\n\nexport type Following = Follower\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SerializeHelper.html":{"url":"classes/SerializeHelper.html","title":"class - SerializeHelper","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SerializeHelper\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/base/swagger-gen/crud-routes.factory.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                createGetManyDto\n                            \n                            \n                                    Static\n                                createGetOneResponseDto\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            createGetManyDto\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createGetManyDto(dto: any, resourceName: string)\n                \n            \n\n\n            \n                \n                    Defined in src/base/swagger-gen/crud-routes.factory.ts:161\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    resourceName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            createGetOneResponseDto\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createGetOneResponseDto(resourceName: string)\n                \n            \n\n\n            \n                \n                    Defined in src/base/swagger-gen/crud-routes.factory.ts:188\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    resourceName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { HttpStatus, RequestMethod } from '@nestjs/common'\n\nimport { Type } from 'class-transformer'\nimport * as deepmerge from 'deepmerge'\n\nimport {\n    ApiProperty,\n    BaseRoute,\n    isFalse,\n    isFunction,\n    isObjectFull,\n    objKeys,\n    swagger,\n    swaggerConst,\n} from './utils'\nimport type { CrudOptions, GetManyDefaultResponse, BaseRouteName } from './utils'\n\nexport class R {\n    static set(\n        metadataKey: string,\n        metadataValue: any,\n        target: Object,\n        propertyKey?: string | symbol,\n    ) {\n        if (!propertyKey) {\n            Reflect.defineMetadata(metadataKey, metadataValue, target)\n        } else {\n            Reflect.defineMetadata(metadataKey, metadataValue, target, propertyKey)\n        }\n    }\n\n    static get(\n        metadataKey: any,\n        target: Object,\n        propertyKey?: string | symbol,\n    ): T {\n        if (!propertyKey) return Reflect.getMetadata(metadataKey, target)\n\n        return Reflect.getMetadata(metadataKey, target, propertyKey)\n    }\n\n    static setRoute(route: BaseRoute, func: Function) {\n        R.set('path', route.path, func)\n        R.set('method', route.method, func)\n    }\n}\n\nexport class Swagger {\n    /**\n     * Sets extra swagger metadata for GET Calls\n     */\n    static setExtraModels(swaggerModels: {\n        [x: string]: any\n        get: Record\n    }) {\n        if (swaggerConst) {\n            const meta = Swagger.getExtraModels(swaggerModels.get)\n            const models = [\n                ...meta,\n                ...objKeys(swaggerModels)\n                    .map((name) => swaggerModels[name])\n                    .filter((one) => one && one.name !== swaggerModels.get.name),\n            ]\n\n            R.set(\n                swaggerConst.DECORATORS.API_EXTRA_MODELS,\n                models,\n                swaggerModels.get,\n            )\n        }\n    }\n\n    /**\n     * Sets swagger metadata for response of GET Calls\n     */\n    static setResponseOk(metadata: any[], func: Function) {\n        if (swaggerConst) {\n            R.set(swaggerConst.DECORATORS.API_RESPONSE, metadata, func)\n        }\n    }\n\n    static getExtraModels(target: Record): any[] {\n        return swaggerConst\n            ? R.get(swaggerConst.API_EXTRA_MODELS, target) || []\n            : []\n    }\n\n    static getResponseOk(func: Function) {\n        return swaggerConst\n            ? R.get(swaggerConst.DECORATORS.API_RESPONSE, func) || {}\n            : {}\n    }\n\n    static createResponseMeta(\n        name: BaseRouteName,\n        options: CrudOptions,\n        swaggerModels: {\n            [x: string]: any\n            get: { name: any }\n            getMany: { name: any }\n        },\n    ) {\n        if (swagger) {\n            const { query } = options\n\n            switch (name) {\n                case 'getOneBase':\n                    return {\n                        [HttpStatus.OK]: {\n                            description: 'Get one base response',\n                            type: swaggerModels.get,\n                        },\n                    }\n                case 'getOne':\n                    return {\n                        [HttpStatus.OK]: query?.alwaysPaginate\n                            ? {\n                                  description: 'Get paginated response',\n                                  type: swaggerModels.getMany,\n                              }\n                            : {\n                                  description: 'Get many base response',\n                                  schema: {\n                                      oneOf: [\n                                          {\n                                              $ref: swagger.getSchemaPath(\n                                                  swaggerModels.getMany.name,\n                                              ),\n                                          },\n                                          {\n                                              type: 'array',\n                                              items: {\n                                                  $ref: swagger.getSchemaPath(\n                                                      swaggerModels.get.name,\n                                                  ),\n                                              },\n                                          },\n                                      ],\n                                  },\n                              },\n                    }\n                default:\n                    // eslint-disable-next-line no-case-declarations\n                    const dto = swaggerModels[name.split('OneBase')[0]]\n\n                    return {\n                        [HttpStatus.OK]: {\n                            description: 'Response',\n                            schema: { $ref: swagger.getSchemaPath(dto.name) },\n                        },\n                    }\n            }\n        } else {\n            return {}\n        }\n    }\n}\n\nexport class SerializeHelper {\n    static createGetManyDto(dto: any, resourceName: string): any {\n        class GetManyResponseDto implements GetManyDefaultResponse {\n            @ApiProperty({ type: dto, isArray: true })\n            @Type(() => dto)\n            data!: any[]\n\n            @ApiProperty({ type: 'number' })\n            count!: number\n\n            @ApiProperty({ type: 'number' })\n            total!: number\n\n            @ApiProperty({ type: 'number' })\n            page!: number\n\n            @ApiProperty({ type: 'number' })\n            pageCount!: number\n        }\n\n        Object.defineProperty(GetManyResponseDto, 'name', {\n            writable: false,\n            value: `GetMany${resourceName}ResponseDto`,\n        })\n\n        return GetManyResponseDto\n    }\n\n    static createGetOneResponseDto(resourceName: string): any {\n        class GetOneResponseDto {}\n\n        Object.defineProperty(GetOneResponseDto, 'name', {\n            writable: false,\n            value: `${resourceName}ResponseDto`,\n        })\n\n        return GetOneResponseDto\n    }\n}\n\nexport class CrudConfigService {\n    static config: Partial = {\n        query: {\n            alwaysPaginate: false,\n        },\n    }\n\n    static load(config: Record) {\n        const query = isObjectFull(config.query) ? config.query : {}\n        const params = isObjectFull(config.params) ? config.params : {}\n        const serialize = isObjectFull(config.serialize) ? config.serialize : {}\n\n        CrudConfigService.config = deepmerge(\n            CrudConfigService.config,\n            { query, params, serialize },\n            { arrayMerge: (a, b, c) => b },\n        )\n    }\n}\n\nexport class CrudRoutesFactory {\n    protected options\n\n    protected swaggerModels: any = {}\n\n    constructor(private target: Object, options: CrudOptions) {\n        this.options = options\n        this.create()\n\n        console.log(\n            'CrudRoutesFactory::constructor',\n            // { ...options },\n            // this.targetProto,\n            // this.modelType,\n            // this.modelName,\n            // this.swaggerModels,\n        )\n    }\n\n    static create(target: Object, options: CrudOptions): CrudRoutesFactory {\n        return new CrudRoutesFactory(target, options)\n    }\n\n    get targetProto() {\n        // @ts-ignore\n        return this.target.prototype\n    }\n\n    get modelName() {\n        return this.options.model.type?.name\n    }\n\n    get modelType() {\n        return this.options.model.type\n    }\n\n    private create() {\n        const routesSchema = CrudRoutesFactory.getRoutesSchema()\n        this.mergeOptions()\n        this.setResponseModels()\n        this.createRoutes(routesSchema)\n        this.enableRoutes(routesSchema)\n    }\n\n    getOne(name: BaseRouteName) {\n        this.targetProto[name] = function getOne(req: any) {\n            return this.service.getOne(req)\n        }\n    }\n\n    getOneBase(name: BaseRouteName) {\n        this.targetProto[name] = function getOneBase(req: any) {\n            return this.service.getOneBase(req)\n        }\n    }\n\n    static getRoutesSchema(): BaseRoute[] {\n        return [\n            {\n                name: 'getOneBase',\n                path: '/',\n                method: RequestMethod.GET,\n                enable: false,\n                override: false,\n                withParams: true,\n            },\n            {\n                name: 'getOne',\n                path: '/',\n                method: RequestMethod.GET,\n                enable: false,\n                override: false,\n                withParams: false,\n            },\n        ]\n    }\n\n    mergeOptions() {\n        // merge query config\n        const query = isObjectFull(this.options.query) ? this.options.query : {}\n        this.options.query = { ...CrudConfigService.config.query, ...query }\n\n        // set dto\n        if (!isObjectFull(this.options.dto)) {\n            this.options.dto = {}\n        }\n\n        // set serialize\n        this.options.serialize = {\n            ...CrudConfigService.config.serialize,\n            ...this.options.serialize,\n        }\n\n        this.options.serialize.get = isFalse(this.options.serialize?.get)\n            ? false\n            : this.options.serialize?.get || this.modelType\n\n        this.options.serialize.getMany = isFalse(this.options.serialize?.getMany)\n            ? false\n            : this.options.serialize?.getMany\n            ? this.options.serialize?.getMany\n            : isFalse(this.options.serialize?.get)\n            ? false\n            : SerializeHelper.createGetManyDto(\n                  this.options.serialize?.get,\n                  this.modelName,\n              )\n\n        this.options.serialize.create = isFalse(this.options.serialize?.create)\n            ? false\n            : this.options.serialize?.create || this.modelType\n\n        this.options.serialize.update = isFalse(this.options.serialize?.update)\n            ? false\n            : this.options.serialize?.update || this.modelType\n\n        this.options.serialize.replace = isFalse(this.options.serialize?.replace)\n            ? false\n            : this.options.serialize?.replace || this.modelType\n\n        this.options.serialize.delete =\n            isFalse(this.options.serialize?.delete) ||\n            !this.options.routes?.deleteOneBase?.returnDeleted\n                ? false\n                : this.options.serialize?.delete || this.modelType\n\n        R.set('CRUD_OPTIONS_METADATA', this.options, this.target)\n    }\n\n    setResponseModels() {\n        const modelType = isFunction(this.modelType)\n            ? this.modelType\n            : SerializeHelper.createGetOneResponseDto(this.modelName)\n\n        this.swaggerModels.get = isFunction(this.options.serialize?.get)\n            ? this.options.serialize?.get\n            : modelType\n\n        this.swaggerModels.getMany =\n            this.options.serialize?.getMany ||\n            SerializeHelper.createGetManyDto(this.swaggerModels.get, this.modelName)\n\n        this.swaggerModels.create = isFunction(this.options.serialize?.create)\n            ? this.options.serialize?.create\n            : modelType\n\n        this.swaggerModels.update = isFunction(this.options.serialize?.update)\n            ? this.options.serialize?.update\n            : modelType\n\n        this.swaggerModels.replace = isFunction(this.options.serialize?.replace)\n            ? this.options.serialize?.replace\n            : modelType\n\n        this.swaggerModels.delete = isFunction(this.options.serialize?.delete)\n            ? this.options.serialize?.delete\n            : modelType\n\n        Swagger.setExtraModels(this.swaggerModels)\n    }\n\n    enableRoutes(routesSchema: BaseRoute[]) {\n        routesSchema.forEach((route) => {\n            if (!route.override && route.enable) {\n                R.setRoute(route, this.targetProto[route.name])\n            }\n        })\n    }\n\n    createRoutes(routesSchema: BaseRoute[]) {\n        routesSchema.forEach((route) => {\n            // create base method\n            /* this[route.name](route.name) */\n            route.enable = true\n\n            // set metadata\n            this.setSwaggerResponseOk(route.name)\n        })\n    }\n\n    setSwaggerResponseOk(name: BaseRouteName) {\n        const metadata = Swagger.getResponseOk(this.targetProto[name]) || {}\n        const metadataToAdd =\n            Swagger.createResponseMeta(name, this.options, this.swaggerModels) || {}\n\n        Swagger.setResponseOk(\n            // @ts-ignore\n            { ...metadata, ...metadataToAdd },\n            this.targetProto[name],\n        )\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Swagger.html":{"url":"classes/Swagger.html","title":"class - Swagger","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Swagger\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/base/swagger-gen/crud-routes.factory.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                createResponseMeta\n                            \n                            \n                                    Static\n                                getExtraModels\n                            \n                            \n                                    Static\n                                getResponseOk\n                            \n                            \n                                    Static\n                                setExtraModels\n                            \n                            \n                                    Static\n                                setResponseOk\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            createResponseMeta\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createResponseMeta(name: BaseRouteName, options: CrudOptions, swaggerModels: literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/base/swagger-gen/crud-routes.factory.ts:95\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                BaseRouteName\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                CrudOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    swaggerModels\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     { [x: number]: any; }\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            getExtraModels\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getExtraModels(target: Record)\n                \n            \n\n\n            \n                \n                    Defined in src/base/swagger-gen/crud-routes.factory.ts:83\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    target\n                                    \n                                                Record\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     any[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            getResponseOk\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getResponseOk(func: Function)\n                \n            \n\n\n            \n                \n                    Defined in src/base/swagger-gen/crud-routes.factory.ts:89\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    func\n                                    \n                                                Function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            setExtraModels\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setExtraModels(swaggerModels: literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/base/swagger-gen/crud-routes.factory.ts:53\n                \n            \n\n\n            \n                \n                    Sets extra swagger metadata for GET Calls\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    swaggerModels\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            setResponseOk\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setResponseOk(metadata: any[], func: Function)\n                \n            \n\n\n            \n                \n                    Defined in src/base/swagger-gen/crud-routes.factory.ts:77\n                \n            \n\n\n            \n                \n                    Sets swagger metadata for response of GET Calls\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    metadata\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    func\n                                    \n                                                Function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { HttpStatus, RequestMethod } from '@nestjs/common'\n\nimport { Type } from 'class-transformer'\nimport * as deepmerge from 'deepmerge'\n\nimport {\n    ApiProperty,\n    BaseRoute,\n    isFalse,\n    isFunction,\n    isObjectFull,\n    objKeys,\n    swagger,\n    swaggerConst,\n} from './utils'\nimport type { CrudOptions, GetManyDefaultResponse, BaseRouteName } from './utils'\n\nexport class R {\n    static set(\n        metadataKey: string,\n        metadataValue: any,\n        target: Object,\n        propertyKey?: string | symbol,\n    ) {\n        if (!propertyKey) {\n            Reflect.defineMetadata(metadataKey, metadataValue, target)\n        } else {\n            Reflect.defineMetadata(metadataKey, metadataValue, target, propertyKey)\n        }\n    }\n\n    static get(\n        metadataKey: any,\n        target: Object,\n        propertyKey?: string | symbol,\n    ): T {\n        if (!propertyKey) return Reflect.getMetadata(metadataKey, target)\n\n        return Reflect.getMetadata(metadataKey, target, propertyKey)\n    }\n\n    static setRoute(route: BaseRoute, func: Function) {\n        R.set('path', route.path, func)\n        R.set('method', route.method, func)\n    }\n}\n\nexport class Swagger {\n    /**\n     * Sets extra swagger metadata for GET Calls\n     */\n    static setExtraModels(swaggerModels: {\n        [x: string]: any\n        get: Record\n    }) {\n        if (swaggerConst) {\n            const meta = Swagger.getExtraModels(swaggerModels.get)\n            const models = [\n                ...meta,\n                ...objKeys(swaggerModels)\n                    .map((name) => swaggerModels[name])\n                    .filter((one) => one && one.name !== swaggerModels.get.name),\n            ]\n\n            R.set(\n                swaggerConst.DECORATORS.API_EXTRA_MODELS,\n                models,\n                swaggerModels.get,\n            )\n        }\n    }\n\n    /**\n     * Sets swagger metadata for response of GET Calls\n     */\n    static setResponseOk(metadata: any[], func: Function) {\n        if (swaggerConst) {\n            R.set(swaggerConst.DECORATORS.API_RESPONSE, metadata, func)\n        }\n    }\n\n    static getExtraModels(target: Record): any[] {\n        return swaggerConst\n            ? R.get(swaggerConst.API_EXTRA_MODELS, target) || []\n            : []\n    }\n\n    static getResponseOk(func: Function) {\n        return swaggerConst\n            ? R.get(swaggerConst.DECORATORS.API_RESPONSE, func) || {}\n            : {}\n    }\n\n    static createResponseMeta(\n        name: BaseRouteName,\n        options: CrudOptions,\n        swaggerModels: {\n            [x: string]: any\n            get: { name: any }\n            getMany: { name: any }\n        },\n    ) {\n        if (swagger) {\n            const { query } = options\n\n            switch (name) {\n                case 'getOneBase':\n                    return {\n                        [HttpStatus.OK]: {\n                            description: 'Get one base response',\n                            type: swaggerModels.get,\n                        },\n                    }\n                case 'getOne':\n                    return {\n                        [HttpStatus.OK]: query?.alwaysPaginate\n                            ? {\n                                  description: 'Get paginated response',\n                                  type: swaggerModels.getMany,\n                              }\n                            : {\n                                  description: 'Get many base response',\n                                  schema: {\n                                      oneOf: [\n                                          {\n                                              $ref: swagger.getSchemaPath(\n                                                  swaggerModels.getMany.name,\n                                              ),\n                                          },\n                                          {\n                                              type: 'array',\n                                              items: {\n                                                  $ref: swagger.getSchemaPath(\n                                                      swaggerModels.get.name,\n                                                  ),\n                                              },\n                                          },\n                                      ],\n                                  },\n                              },\n                    }\n                default:\n                    // eslint-disable-next-line no-case-declarations\n                    const dto = swaggerModels[name.split('OneBase')[0]]\n\n                    return {\n                        [HttpStatus.OK]: {\n                            description: 'Response',\n                            schema: { $ref: swagger.getSchemaPath(dto.name) },\n                        },\n                    }\n            }\n        } else {\n            return {}\n        }\n    }\n}\n\nexport class SerializeHelper {\n    static createGetManyDto(dto: any, resourceName: string): any {\n        class GetManyResponseDto implements GetManyDefaultResponse {\n            @ApiProperty({ type: dto, isArray: true })\n            @Type(() => dto)\n            data!: any[]\n\n            @ApiProperty({ type: 'number' })\n            count!: number\n\n            @ApiProperty({ type: 'number' })\n            total!: number\n\n            @ApiProperty({ type: 'number' })\n            page!: number\n\n            @ApiProperty({ type: 'number' })\n            pageCount!: number\n        }\n\n        Object.defineProperty(GetManyResponseDto, 'name', {\n            writable: false,\n            value: `GetMany${resourceName}ResponseDto`,\n        })\n\n        return GetManyResponseDto\n    }\n\n    static createGetOneResponseDto(resourceName: string): any {\n        class GetOneResponseDto {}\n\n        Object.defineProperty(GetOneResponseDto, 'name', {\n            writable: false,\n            value: `${resourceName}ResponseDto`,\n        })\n\n        return GetOneResponseDto\n    }\n}\n\nexport class CrudConfigService {\n    static config: Partial = {\n        query: {\n            alwaysPaginate: false,\n        },\n    }\n\n    static load(config: Record) {\n        const query = isObjectFull(config.query) ? config.query : {}\n        const params = isObjectFull(config.params) ? config.params : {}\n        const serialize = isObjectFull(config.serialize) ? config.serialize : {}\n\n        CrudConfigService.config = deepmerge(\n            CrudConfigService.config,\n            { query, params, serialize },\n            { arrayMerge: (a, b, c) => b },\n        )\n    }\n}\n\nexport class CrudRoutesFactory {\n    protected options\n\n    protected swaggerModels: any = {}\n\n    constructor(private target: Object, options: CrudOptions) {\n        this.options = options\n        this.create()\n\n        console.log(\n            'CrudRoutesFactory::constructor',\n            // { ...options },\n            // this.targetProto,\n            // this.modelType,\n            // this.modelName,\n            // this.swaggerModels,\n        )\n    }\n\n    static create(target: Object, options: CrudOptions): CrudRoutesFactory {\n        return new CrudRoutesFactory(target, options)\n    }\n\n    get targetProto() {\n        // @ts-ignore\n        return this.target.prototype\n    }\n\n    get modelName() {\n        return this.options.model.type?.name\n    }\n\n    get modelType() {\n        return this.options.model.type\n    }\n\n    private create() {\n        const routesSchema = CrudRoutesFactory.getRoutesSchema()\n        this.mergeOptions()\n        this.setResponseModels()\n        this.createRoutes(routesSchema)\n        this.enableRoutes(routesSchema)\n    }\n\n    getOne(name: BaseRouteName) {\n        this.targetProto[name] = function getOne(req: any) {\n            return this.service.getOne(req)\n        }\n    }\n\n    getOneBase(name: BaseRouteName) {\n        this.targetProto[name] = function getOneBase(req: any) {\n            return this.service.getOneBase(req)\n        }\n    }\n\n    static getRoutesSchema(): BaseRoute[] {\n        return [\n            {\n                name: 'getOneBase',\n                path: '/',\n                method: RequestMethod.GET,\n                enable: false,\n                override: false,\n                withParams: true,\n            },\n            {\n                name: 'getOne',\n                path: '/',\n                method: RequestMethod.GET,\n                enable: false,\n                override: false,\n                withParams: false,\n            },\n        ]\n    }\n\n    mergeOptions() {\n        // merge query config\n        const query = isObjectFull(this.options.query) ? this.options.query : {}\n        this.options.query = { ...CrudConfigService.config.query, ...query }\n\n        // set dto\n        if (!isObjectFull(this.options.dto)) {\n            this.options.dto = {}\n        }\n\n        // set serialize\n        this.options.serialize = {\n            ...CrudConfigService.config.serialize,\n            ...this.options.serialize,\n        }\n\n        this.options.serialize.get = isFalse(this.options.serialize?.get)\n            ? false\n            : this.options.serialize?.get || this.modelType\n\n        this.options.serialize.getMany = isFalse(this.options.serialize?.getMany)\n            ? false\n            : this.options.serialize?.getMany\n            ? this.options.serialize?.getMany\n            : isFalse(this.options.serialize?.get)\n            ? false\n            : SerializeHelper.createGetManyDto(\n                  this.options.serialize?.get,\n                  this.modelName,\n              )\n\n        this.options.serialize.create = isFalse(this.options.serialize?.create)\n            ? false\n            : this.options.serialize?.create || this.modelType\n\n        this.options.serialize.update = isFalse(this.options.serialize?.update)\n            ? false\n            : this.options.serialize?.update || this.modelType\n\n        this.options.serialize.replace = isFalse(this.options.serialize?.replace)\n            ? false\n            : this.options.serialize?.replace || this.modelType\n\n        this.options.serialize.delete =\n            isFalse(this.options.serialize?.delete) ||\n            !this.options.routes?.deleteOneBase?.returnDeleted\n                ? false\n                : this.options.serialize?.delete || this.modelType\n\n        R.set('CRUD_OPTIONS_METADATA', this.options, this.target)\n    }\n\n    setResponseModels() {\n        const modelType = isFunction(this.modelType)\n            ? this.modelType\n            : SerializeHelper.createGetOneResponseDto(this.modelName)\n\n        this.swaggerModels.get = isFunction(this.options.serialize?.get)\n            ? this.options.serialize?.get\n            : modelType\n\n        this.swaggerModels.getMany =\n            this.options.serialize?.getMany ||\n            SerializeHelper.createGetManyDto(this.swaggerModels.get, this.modelName)\n\n        this.swaggerModels.create = isFunction(this.options.serialize?.create)\n            ? this.options.serialize?.create\n            : modelType\n\n        this.swaggerModels.update = isFunction(this.options.serialize?.update)\n            ? this.options.serialize?.update\n            : modelType\n\n        this.swaggerModels.replace = isFunction(this.options.serialize?.replace)\n            ? this.options.serialize?.replace\n            : modelType\n\n        this.swaggerModels.delete = isFunction(this.options.serialize?.delete)\n            ? this.options.serialize?.delete\n            : modelType\n\n        Swagger.setExtraModels(this.swaggerModels)\n    }\n\n    enableRoutes(routesSchema: BaseRoute[]) {\n        routesSchema.forEach((route) => {\n            if (!route.override && route.enable) {\n                R.setRoute(route, this.targetProto[route.name])\n            }\n        })\n    }\n\n    createRoutes(routesSchema: BaseRoute[]) {\n        routesSchema.forEach((route) => {\n            // create base method\n            /* this[route.name](route.name) */\n            route.enable = true\n\n            // set metadata\n            this.setSwaggerResponseOk(route.name)\n        })\n    }\n\n    setSwaggerResponseOk(name: BaseRouteName) {\n        const metadata = Swagger.getResponseOk(this.targetProto[name]) || {}\n        const metadataToAdd =\n            Swagger.createResponseMeta(name, this.options, this.swaggerModels) || {}\n\n        Swagger.setResponseOk(\n            // @ts-ignore\n            { ...metadata, ...metadataToAdd },\n            this.targetProto[name],\n        )\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Tag.html":{"url":"classes/Tag.html","title":"class - Tag","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Tag\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/tag.model.ts\n        \n\n\n            \n                Extends\n            \n            \n                        BaseModel\n            \n\n            \n                Implements\n            \n            \n                            ITag\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                jsonSchema\n                            \n                            \n                                name\n                            \n                            \n                                    Static\n                                tableName\n                            \n                            \n                                created_at\n                            \n                            \n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Static\n                                hidden\n                            \n                            \n                                id\n                            \n                            \n                                    Static\n                                QueryBuilder\n                            \n                            \n                                updated_at\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                $beforeUpdate\n                            \n                            \n                                    Async\n                                fetchRelation\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            jsonSchema\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     JSONSchema\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        type: 'object',\n        required: ['name'],\n        properties: {\n            id: { type: 'integer' },\n            name: { type: 'string', minLength: 2, maxLength: 255 },\n        },\n    }\n                        \n                    \n                        \n                            \n                                    Defined in src/tags/tag.model.ts:19\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/tags/tag.model.ts:15\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            tableName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'tag'\n                        \n                    \n                        \n                            \n                                    Defined in src/tags/tag.model.ts:13\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            created_at\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                            \n                                \n                                    Inherited from         BaseModel\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseModel:39\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            deleted_at\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     any | null\n\n                        \n                    \n                            \n                                \n                                    Inherited from         BaseModel\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseModel:43\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            hidden\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : [\n        'salt',\n        'password',\n        'created_at',\n        'updated_at',\n        // 'deleted_at'\n    ]\n                        \n                    \n                            \n                                \n                                    Inherited from         BaseModel\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseModel:25\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                            \n                                \n                                    Inherited from         BaseModel\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseModel:37\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            QueryBuilder\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : CustomQueryBuilder\n                        \n                    \n                            \n                                \n                                    Inherited from         BaseModel\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseModel:35\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updated_at\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                            \n                                \n                                    Inherited from         BaseModel\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseModel:41\n\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            $beforeUpdate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    $beforeUpdate(opt: ModelOptions, queryContext: QueryContext)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseModel\n\n                \n            \n            \n                \n                        Defined in         BaseModel:60\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    opt\n                                    \n                                            ModelOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    queryContext\n                                    \n                                            QueryContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            fetchRelation\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    fetchRelation(expression: string | Record, options: Objection.FetchGraphOptions)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseModel\n\n                \n            \n            \n                \n                        Defined in         BaseModel:47\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    expression\n                                    \n                                                string | Record\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                            Objection.FetchGraphOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger'\n\nimport { IsNotEmpty, IsString, MaxLength, MinLength } from 'class-validator'\nimport type { JSONSchema, ModelObject, PartialModelObject } from 'objection'\n\nimport { BaseModel } from '../database/models/base.model'\n\ninterface ITag {\n    name: string\n}\n\nexport class Tag extends BaseModel implements ITag {\n    static tableName = 'tag'\n\n    name!: string\n\n    // JSON schema is not the database schema! Nothing is generated based on this.\n    // This is only used for validation. Whenever a model instance is created it is checked against this schema.\n    static jsonSchema: JSONSchema = {\n        type: 'object',\n        required: ['name'],\n        properties: {\n            id: { type: 'integer' },\n            name: { type: 'string', minLength: 2, maxLength: 255 },\n        },\n    }\n}\n\n// The `ModelObject` generic gives you a clean interface that can be used on the frontend, without any of the objection Model class properties or methods.\nexport type TagShape = ModelObject\nexport type PartialTagShape = PartialModelObject\n\nexport class CreateTagsDto implements ITag {\n    @IsString()\n    @IsNotEmpty()\n    @MinLength(2)\n    @MaxLength(36)\n    name!: string\n}\n\nexport class UpdateTagsDto extends PartialType(CreateTagsDto) {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TagsController.html":{"url":"controllers/TagsController.html","title":"controller - TagsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  TagsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/tags.controller.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            create\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    create(input: CreateTagsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n            \n                \n                    Defined in src/tags/tags.controller.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    input\n                                    \n                                                CreateTagsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: number, input: UpdateTagsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put(':id')\n                \n            \n\n            \n                \n                    Defined in src/tags/tags.controller.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    input\n                                    \n                                                UpdateTagsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Body,\n    Controller,\n    Delete,\n    Get,\n    HttpStatus,\n    Param,\n    ParseIntPipe,\n    Post,\n    Put,\n    UseGuards,\n} from '@nestjs/common'\nimport { AuthGuard } from '@nestjs/passport'\nimport { ApiBearerAuth, ApiTags } from '@nestjs/swagger'\n\nimport { CrudController } from '../base/crud'\nimport { CreateTagsDto, Tag, UpdateTagsDto } from './tag.model'\nimport { TagsService } from './tags.service'\n\n@Controller(TagsController.path)\n@ApiTags(TagsController.name)\n@ApiBearerAuth()\n@UseGuards(AuthGuard('jwt'))\nexport class TagsController extends CrudController {\n    static path = 'tags'\n\n    constructor(readonly service: TagsService) {\n        super(service)\n    }\n\n    @Post()\n    async create(@Body() input: CreateTagsDto) {\n        const data = await this.service.create(input)\n\n        return {\n            data,\n            statusCode: HttpStatus.CREATED,\n        }\n    }\n\n    @Put(':id')\n    async update(\n        @Param('id', ParseIntPipe) id: number,\n        @Body() input: UpdateTagsDto,\n    ) {\n        const data = await this.service.update(id, input)\n\n        return {\n            data,\n            statusCode: !data ? HttpStatus.NO_CONTENT : HttpStatus.OK,\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TagsModule.html":{"url":"modules/TagsModule.html","title":"module - TagsModule","body":"\n                   \n\n\n\n\n    Modules\n    TagsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_TagsModule\n\n\n\ncluster_TagsModule_providers\n\n\n\ncluster_TagsModule_exports\n\n\n\n\nTagsService \n\nTagsService \n\n\n\nTagsModule\n\nTagsModule\n\nTagsService  -->\n\nTagsModule->TagsService \n\n\n\n\n\nTagsService\n\nTagsService\n\nTagsModule -->\n\nTagsService->TagsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/tags/tags.module.ts\n        \n\n\n        \n            Description\n        \n        \n            Tags module\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            TagsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            TagsController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            TagsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common'\n\nimport { TagsController } from './tags.controller'\nimport { TagsService } from './tags.service'\n\n/**\n * Tags module\n */\n@Module({\n    controllers: [TagsController],\n    providers: [TagsService],\n    exports: [TagsService],\n})\nexport class TagsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TagsService.html":{"url":"injectables/TagsService.html","title":"injectable - TagsService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  TagsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/tags.service.ts\n        \n\n\n            \n                Extends\n            \n            \n                        CrudService\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                findOneByEmail\n                            \n                            \n                                    Async\n                                findOneById\n                            \n                            \n                                    Async\n                                paginatedFindAll\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(model: ModelClass)\n                    \n                \n                        \n                            \n                                Defined in src/tags/tags.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        model\n                                                  \n                                                        \n                                                                        ModelClass\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            create\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    create(data: CreateTagsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/tags/tags.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                CreateTagsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            create\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    create(input: CreateUserDto | CreateTagsDto | T)\n                \n            \n\n\n            \n                \n                    Inherited from         CrudService\n\n                \n            \n            \n                \n                        Defined in         CrudService:99\n\n                \n            \n\n\n            \n                \n                    Created a entry and return it\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    input\n                                    \n                                                CreateUserDto | CreateTagsDto | T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n\n            \n                \n                    Inherited from         CrudService\n\n                \n            \n            \n                \n                        Defined in         CrudService:27\n\n                \n            \n\n\n            \n                \n                    Finds all entries and return the result\n\n\n                    \n                        Returns :     {}\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(filter: object)\n                \n            \n\n\n            \n                \n                    Inherited from         CrudService\n\n                \n            \n            \n                \n                        Defined in         CrudService:56\n\n                \n            \n\n\n            \n                \n                    Finds one entry with where filter and return the result\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    filter\n                                    \n                                                object\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOneByEmail\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneByEmail(email: string)\n                \n            \n\n\n            \n                \n                    Inherited from         CrudService\n\n                \n            \n            \n                \n                        Defined in         CrudService:78\n\n                \n            \n\n\n            \n                \n                    Finds onw entry by email and return the result\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOneById\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneById(id: number)\n                \n            \n\n\n            \n                \n                    Inherited from         CrudService\n\n                \n            \n            \n                \n                        Defined in         CrudService:67\n\n                \n            \n\n\n            \n                \n                    Finds paginated entries and return the result\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            paginatedFindAll\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    paginatedFindAll(paginationParams: PaginationParams)\n                \n            \n\n\n            \n                \n                    Inherited from         CrudService\n\n                \n            \n            \n                \n                        Defined in         CrudService:38\n\n                \n            \n\n\n            \n                \n                    Finds paginated entries and return the result\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    paginationParams\n                                    \n                                                PaginationParams\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            remove\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: number)\n                \n            \n\n\n            \n                \n                    Inherited from         CrudService\n\n                \n            \n            \n                \n                        Defined in         CrudService:89\n\n                \n            \n\n\n            \n                \n                    Soft-deletes a entry and return it\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: number, input: Partial)\n                \n            \n\n\n            \n                \n                    Inherited from         CrudService\n\n                \n            \n            \n                \n                        Defined in         CrudService:112\n\n                \n            \n\n\n            \n                \n                    Updates a entry and return it\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    input\n                                    \n                                            Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, Inject, Injectable } from '@nestjs/common'\n\nimport { ModelClass } from 'objection'\n\nimport { CrudService } from '../base/crud'\nimport { CreateTagsDto, Tag } from './tag.model'\n\n@Injectable()\nexport class TagsService extends CrudService {\n    constructor(@Inject(Tag.name) readonly model: ModelClass) {\n        super(model)\n    }\n\n    async create(data: CreateTagsDto) {\n        const tag = await this.findOne({ name: data.name })\n\n        if (tag)\n            return Promise.reject(\n                new BadRequestException([`Duplicate tag name: ${tag.name}`]),\n            )\n\n        return super.create(data)\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TimeoutInterceptor.html":{"url":"injectables/TimeoutInterceptor.html","title":"injectable - TimeoutInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  TimeoutInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infra/interceptors/timeout.ts\n        \n\n            \n                Description\n            \n            \n                Timeout interceptor is Observer which terminate request if it takes more than timeout value\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            intercept\n                        \n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n            \n                \n                    Defined in src/infra/interceptors/timeout.ts:25\n                \n            \n\n\n            \n                \n                    Interceptor Method to implement a custom interceptor.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        an ExecutionContext object providing methods to access the\nroute handler and class about to be invoked.\n\n                                    \n                                \n                                \n                                    next\n                                    \n                                            CallHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        a reference to the CallHandler, which provides access to an\nObservable representing the response stream from the route handler.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n    Injectable,\n    NestInterceptor,\n    ExecutionContext,\n    CallHandler,\n    RequestTimeoutException,\n} from '@nestjs/common'\n\nimport { Observable, throwError, TimeoutError } from 'rxjs'\nimport { catchError, timeout } from 'rxjs/operators'\n\n/**\n * Timeout interceptor is Observer which terminate request if it takes more than timeout value\n */\n@Injectable()\nexport class TimeoutInterceptor implements NestInterceptor {\n    /**\n     * Interceptor Method to implement a custom interceptor.\n     *\n     * @param context an `ExecutionContext` object providing methods to access the\n     * route handler and class about to be invoked.\n     * @param next a reference to the `CallHandler`, which provides access to an\n     * `Observable` representing the response stream from the route handler.\n     */\n    intercept(context: ExecutionContext, next: CallHandler): Observable {\n        return next.handle().pipe(\n            timeout(10000), // end request after 10_000 milliseconds\n\n            catchError((e) => {\n                if (e instanceof TimeoutError) {\n                    return throwError(new RequestTimeoutException())\n                }\n\n                return throwError(e)\n            }),\n        )\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TokenPayload.html":{"url":"interfaces/TokenPayload.html","title":"interface - TokenPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  TokenPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/tokenPayload.interface.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        email\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        interface TokenPayload {\n    email: string\n}\n\nexport default TokenPayload\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TransformInterceptor.html":{"url":"injectables/TransformInterceptor.html","title":"injectable - TransformInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  TransformInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infra/interceptors/transform.ts\n        \n\n            \n                Description\n            \n            \n                Transform interceptor is Observer which transform response\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            intercept\n                        \n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n            \n                \n                    Defined in src/infra/interceptors/transform.ts:28\n                \n            \n\n\n            \n                \n                    Interceptor Method to implement a custom interceptor.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        an ExecutionContext object providing methods to access the\nroute handler and class about to be invoked.\n\n                                    \n                                \n                                \n                                    next\n                                    \n                                            CallHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        a reference to the CallHandler, which provides access to an\nObservable representing the response stream from the route handler.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n    Injectable,\n    NestInterceptor,\n    ExecutionContext,\n    CallHandler,\n} from '@nestjs/common'\n\nimport { Observable } from 'rxjs'\nimport { map } from 'rxjs/operators'\n\nexport interface Response {\n    data: T\n}\n\n/**\n * Transform interceptor is Observer which transform response\n */\n@Injectable()\nexport class TransformInterceptor implements NestInterceptor> {\n    /**\n     * Interceptor Method to implement a custom interceptor.\n     *\n     * @param context an `ExecutionContext` object providing methods to access the\n     * route handler and class about to be invoked.\n     * @param next a reference to the `CallHandler`, which provides access to an\n     * `Observable` representing the response stream from the route handler.\n     */\n    intercept(\n        context: ExecutionContext,\n        next: CallHandler,\n    ): Observable> {\n        return next.handle().pipe(map((data) => ({ data })))\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateTagsDto.html":{"url":"classes/UpdateTagsDto.html","title":"class - UpdateTagsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateTagsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/tag.model.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger'\n\nimport { IsNotEmpty, IsString, MaxLength, MinLength } from 'class-validator'\nimport type { JSONSchema, ModelObject, PartialModelObject } from 'objection'\n\nimport { BaseModel } from '../database/models/base.model'\n\ninterface ITag {\n    name: string\n}\n\nexport class Tag extends BaseModel implements ITag {\n    static tableName = 'tag'\n\n    name!: string\n\n    // JSON schema is not the database schema! Nothing is generated based on this.\n    // This is only used for validation. Whenever a model instance is created it is checked against this schema.\n    static jsonSchema: JSONSchema = {\n        type: 'object',\n        required: ['name'],\n        properties: {\n            id: { type: 'integer' },\n            name: { type: 'string', minLength: 2, maxLength: 255 },\n        },\n    }\n}\n\n// The `ModelObject` generic gives you a clean interface that can be used on the frontend, without any of the objection Model class properties or methods.\nexport type TagShape = ModelObject\nexport type PartialTagShape = PartialModelObject\n\nexport class CreateTagsDto implements ITag {\n    @IsString()\n    @IsNotEmpty()\n    @MinLength(2)\n    @MaxLength(36)\n    name!: string\n}\n\nexport class UpdateTagsDto extends PartialType(CreateTagsDto) {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/user.model.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger'\n\nimport * as bcrypt from 'bcrypt'\nimport {\n    IsString,\n    MinLength,\n    IsNotEmpty,\n    MaxLength,\n    IsEmail,\n    IsBoolean,\n} from 'class-validator'\nimport type { JSONSchema, Modifiers, PartialModelObject } from 'objection'\nimport { ModelObject, QueryContext } from 'objection'\n\nimport { BaseModel } from '../database/models/base.model'\n\ninterface IUser {\n    username: string\n    email: string\n    firstName?: string\n    lastName?: string\n    isActive: boolean\n    password: string\n}\n\nexport class User extends BaseModel implements IUser {\n    static tableName = 'user'\n\n    username!: string\n\n    email!: string\n\n    firstName?: string\n\n    lastName?: string\n\n    isActive!: boolean\n\n    password!: string\n\n    // JSON schema is not the database schema! Nothing is generated based on this.\n    // This is only used for validation. Whenever a model instance is created it is checked against this schema.\n    static jsonSchema: JSONSchema = {\n        type: 'object',\n        required: ['username', 'email', 'password'],\n        properties: {\n            id: { type: 'integer', readOnly: true },\n            username: { type: 'string', minLength: 3, maxLength: 255 },\n            email: {\n                type: 'string',\n                minLength: 3,\n                maxLength: 255,\n                format: 'email',\n            },\n            password: { type: 'string', minLength: 8, maxLength: 255 },\n            firstName: { type: 'string', minLength: 1, maxLength: 255 },\n            lastName: { type: 'string', minLength: 1, maxLength: 255 },\n            isActive: { type: 'boolean' },\n        },\n    }\n\n    // Modifiers are reusable query snippets that can be used in various places.\n    static modifiers: Modifiers = {\n        // Our example modifier is a a semi-dumb fuzzy name match. We split the name into pieces using whitespace\n        // and then try to partially match each of those pieces to both the `firstName` and the `lastName` fields.\n\n        searchByName(query, name: string) {\n            // This `where` simply creates parentheses so that other `where` statements don't get mixed with the these.\n\n            query.where((q) => {\n                for (const namePart of name.trim().split(/\\s+/)) {\n                    for (const column of ['firstName', 'lastName']) {\n                        q.orWhereRaw('lower(??) like ?', [\n                            column,\n                            `${namePart.toLowerCase()}%`,\n                        ])\n                    }\n                }\n            })\n        },\n    }\n\n    async hashPassword(password: string) {\n        const hash = await bcrypt.hash(password, 12)\n        return hash\n    }\n\n    async $beforeInsert(queryContext: QueryContext) {\n        await super.$beforeInsert(queryContext)\n        this.password = await this.hashPassword(this.password)\n    }\n\n    /*\n    async $beforeUpdate(opt: ModelOptions, queryContext: QueryContext) {\n        await super.$beforeUpdate(opt, queryContext)\n        this.password = await this.hashPassword(this.password)\n    }\n    */\n}\n\n// The `ModelObject` generic gives you a clean interface that can be used on the frontend, without any of the objection Model class properties or methods.\nexport type UserShape = ModelObject\nexport type PartialUserShape = PartialModelObject\n\nexport class CreateUserDto implements IUser {\n    @IsString()\n    @IsNotEmpty()\n    @MinLength(2)\n    @MaxLength(36)\n    username!: string\n\n    @IsEmail()\n    @IsNotEmpty()\n    @MinLength(2)\n    email!: string\n\n    @IsString()\n    @IsNotEmpty()\n    @MinLength(8)\n    password!: string\n\n    @IsString()\n    @IsNotEmpty()\n    @MinLength(2)\n    firstName?: string\n\n    @IsString()\n    @IsNotEmpty()\n    @MinLength(2)\n    lastName?: string\n\n    @IsBoolean()\n    isActive!: boolean\n}\n\nexport class UpdateUserDto extends PartialType(CreateUserDto) {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/User.html":{"url":"classes/User.html","title":"class - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/user.model.ts\n        \n\n\n            \n                Extends\n            \n            \n                        BaseModel\n            \n\n            \n                Implements\n            \n            \n                            IUser\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                    Optional\n                                firstName\n                            \n                            \n                                isActive\n                            \n                            \n                                    Static\n                                jsonSchema\n                            \n                            \n                                    Optional\n                                lastName\n                            \n                            \n                                    Static\n                                modifiers\n                            \n                            \n                                password\n                            \n                            \n                                    Static\n                                tableName\n                            \n                            \n                                username\n                            \n                            \n                                created_at\n                            \n                            \n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Static\n                                hidden\n                            \n                            \n                                id\n                            \n                            \n                                    Static\n                                QueryBuilder\n                            \n                            \n                                updated_at\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                $beforeInsert\n                            \n                            \n                                    Async\n                                hashPassword\n                            \n                            \n                                    Async\n                                $beforeUpdate\n                            \n                            \n                                    Async\n                                fetchRelation\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            email\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/users/user.model.ts:32\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            firstName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/users/user.model.ts:34\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isActive\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in src/users/user.model.ts:38\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            jsonSchema\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     JSONSchema\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        type: 'object',\n        required: ['username', 'email', 'password'],\n        properties: {\n            id: { type: 'integer', readOnly: true },\n            username: { type: 'string', minLength: 3, maxLength: 255 },\n            email: {\n                type: 'string',\n                minLength: 3,\n                maxLength: 255,\n                format: 'email',\n            },\n            password: { type: 'string', minLength: 8, maxLength: 255 },\n            firstName: { type: 'string', minLength: 1, maxLength: 255 },\n            lastName: { type: 'string', minLength: 1, maxLength: 255 },\n            isActive: { type: 'boolean' },\n        },\n    }\n                        \n                    \n                        \n                            \n                                    Defined in src/users/user.model.ts:44\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            lastName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/users/user.model.ts:36\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            modifiers\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Modifiers\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        // Our example modifier is a a semi-dumb fuzzy name match. We split the name into pieces using whitespace\n        // and then try to partially match each of those pieces to both the `firstName` and the `lastName` fields.\n\n        searchByName(query, name: string) {\n            // This `where` simply creates parentheses so that other `where` statements don't get mixed with the these.\n\n            query.where((q) => {\n                for (const namePart of name.trim().split(/\\s+/)) {\n                    for (const column of ['firstName', 'lastName']) {\n                        q.orWhereRaw('lower(??) like ?', [\n                            column,\n                            `${namePart.toLowerCase()}%`,\n                        ])\n                    }\n                }\n            })\n        },\n    }\n                        \n                    \n                        \n                            \n                                    Defined in src/users/user.model.ts:64\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/users/user.model.ts:40\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            tableName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'user'\n                        \n                    \n                        \n                            \n                                    Defined in src/users/user.model.ts:28\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            username\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/users/user.model.ts:30\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            created_at\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                            \n                                \n                                    Inherited from         BaseModel\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseModel:39\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            deleted_at\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     any | null\n\n                        \n                    \n                            \n                                \n                                    Inherited from         BaseModel\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseModel:43\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            hidden\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : [\n        'salt',\n        'password',\n        'created_at',\n        'updated_at',\n        // 'deleted_at'\n    ]\n                        \n                    \n                            \n                                \n                                    Inherited from         BaseModel\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseModel:25\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                            \n                                \n                                    Inherited from         BaseModel\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseModel:37\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            QueryBuilder\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : CustomQueryBuilder\n                        \n                    \n                            \n                                \n                                    Inherited from         BaseModel\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseModel:35\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updated_at\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                            \n                                \n                                    Inherited from         BaseModel\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseModel:41\n\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            $beforeInsert\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    $beforeInsert(queryContext: QueryContext)\n                \n            \n\n\n            \n                \n                    Defined in src/users/user.model.ts:89\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryContext\n                                    \n                                            QueryContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            hashPassword\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    hashPassword(password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/user.model.ts:84\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            $beforeUpdate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    $beforeUpdate(opt: ModelOptions, queryContext: QueryContext)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseModel\n\n                \n            \n            \n                \n                        Defined in         BaseModel:60\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    opt\n                                    \n                                            ModelOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    queryContext\n                                    \n                                            QueryContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            fetchRelation\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    fetchRelation(expression: string | Record, options: Objection.FetchGraphOptions)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseModel\n\n                \n            \n            \n                \n                        Defined in         BaseModel:47\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    expression\n                                    \n                                                string | Record\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                            Objection.FetchGraphOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger'\n\nimport * as bcrypt from 'bcrypt'\nimport {\n    IsString,\n    MinLength,\n    IsNotEmpty,\n    MaxLength,\n    IsEmail,\n    IsBoolean,\n} from 'class-validator'\nimport type { JSONSchema, Modifiers, PartialModelObject } from 'objection'\nimport { ModelObject, QueryContext } from 'objection'\n\nimport { BaseModel } from '../database/models/base.model'\n\ninterface IUser {\n    username: string\n    email: string\n    firstName?: string\n    lastName?: string\n    isActive: boolean\n    password: string\n}\n\nexport class User extends BaseModel implements IUser {\n    static tableName = 'user'\n\n    username!: string\n\n    email!: string\n\n    firstName?: string\n\n    lastName?: string\n\n    isActive!: boolean\n\n    password!: string\n\n    // JSON schema is not the database schema! Nothing is generated based on this.\n    // This is only used for validation. Whenever a model instance is created it is checked against this schema.\n    static jsonSchema: JSONSchema = {\n        type: 'object',\n        required: ['username', 'email', 'password'],\n        properties: {\n            id: { type: 'integer', readOnly: true },\n            username: { type: 'string', minLength: 3, maxLength: 255 },\n            email: {\n                type: 'string',\n                minLength: 3,\n                maxLength: 255,\n                format: 'email',\n            },\n            password: { type: 'string', minLength: 8, maxLength: 255 },\n            firstName: { type: 'string', minLength: 1, maxLength: 255 },\n            lastName: { type: 'string', minLength: 1, maxLength: 255 },\n            isActive: { type: 'boolean' },\n        },\n    }\n\n    // Modifiers are reusable query snippets that can be used in various places.\n    static modifiers: Modifiers = {\n        // Our example modifier is a a semi-dumb fuzzy name match. We split the name into pieces using whitespace\n        // and then try to partially match each of those pieces to both the `firstName` and the `lastName` fields.\n\n        searchByName(query, name: string) {\n            // This `where` simply creates parentheses so that other `where` statements don't get mixed with the these.\n\n            query.where((q) => {\n                for (const namePart of name.trim().split(/\\s+/)) {\n                    for (const column of ['firstName', 'lastName']) {\n                        q.orWhereRaw('lower(??) like ?', [\n                            column,\n                            `${namePart.toLowerCase()}%`,\n                        ])\n                    }\n                }\n            })\n        },\n    }\n\n    async hashPassword(password: string) {\n        const hash = await bcrypt.hash(password, 12)\n        return hash\n    }\n\n    async $beforeInsert(queryContext: QueryContext) {\n        await super.$beforeInsert(queryContext)\n        this.password = await this.hashPassword(this.password)\n    }\n\n    /*\n    async $beforeUpdate(opt: ModelOptions, queryContext: QueryContext) {\n        await super.$beforeUpdate(opt, queryContext)\n        this.password = await this.hashPassword(this.password)\n    }\n    */\n}\n\n// The `ModelObject` generic gives you a clean interface that can be used on the frontend, without any of the objection Model class properties or methods.\nexport type UserShape = ModelObject\nexport type PartialUserShape = PartialModelObject\n\nexport class CreateUserDto implements IUser {\n    @IsString()\n    @IsNotEmpty()\n    @MinLength(2)\n    @MaxLength(36)\n    username!: string\n\n    @IsEmail()\n    @IsNotEmpty()\n    @MinLength(2)\n    email!: string\n\n    @IsString()\n    @IsNotEmpty()\n    @MinLength(8)\n    password!: string\n\n    @IsString()\n    @IsNotEmpty()\n    @MinLength(2)\n    firstName?: string\n\n    @IsString()\n    @IsNotEmpty()\n    @MinLength(2)\n    lastName?: string\n\n    @IsBoolean()\n    isActive!: boolean\n}\n\nexport class UpdateUserDto extends PartialType(CreateUserDto) {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/UserPost.html":{"url":"interfaces/UserPost.html","title":"interface - UserPost","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  UserPost\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/domain.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        adCorporateLogoUrl\n                                \n                                \n                                        commentsCount\n                                \n                                \n                                        corporateDescription\n                                \n                                \n                                        corporateName\n                                \n                                \n                                        isUserReactedToPost\n                                \n                                \n                                        ownPage\n                                \n                                \n                                        postBy\n                                \n                                \n                                        postId\n                                \n                                \n                                        postImage\n                                \n                                \n                                        postTime\n                                \n                                \n                                        postType\n                                \n                                \n                                        postVideo\n                                \n                                \n                                        reactionsCount\n                                \n                                \n                                        timeAgo\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        adCorporateLogoUrl\n                                    \n                                \n                                \n                                    \n                                        adCorporateLogoUrl:     string | null\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string | null\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        commentsCount\n                                    \n                                \n                                \n                                    \n                                        commentsCount:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        corporateDescription\n                                    \n                                \n                                \n                                    \n                                        corporateDescription:     string | null\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string | null\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        corporateName\n                                    \n                                \n                                \n                                    \n                                        corporateName:     string | null\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string | null\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        isUserReactedToPost\n                                    \n                                \n                                \n                                    \n                                        isUserReactedToPost:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        ownPage\n                                    \n                                \n                                \n                                    \n                                        ownPage:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        postBy\n                                    \n                                \n                                \n                                    \n                                        postBy:         PostedByUser\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         PostedByUser\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        postId\n                                    \n                                \n                                \n                                    \n                                        postId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        postImage\n                                    \n                                \n                                \n                                    \n                                        postImage:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        postTime\n                                    \n                                \n                                \n                                    \n                                        postTime:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        postType\n                                    \n                                \n                                \n                                    \n                                        postType:         PostType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         PostType\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        postVideo\n                                    \n                                \n                                \n                                    \n                                        postVideo:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        reactionsCount\n                                    \n                                \n                                \n                                    \n                                        reactionsCount:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        timeAgo\n                                    \n                                \n                                \n                                    \n                                        timeAgo:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { HttpStatus } from '@nestjs/common'\n\nexport type Results =\n    | GetAppLaunchData\n    | GetUserProfile\n    | GetUserPosts\n    | GetComments\n    | GetRescueList\n    | GetFollowers\n    | GetFollowing\n\nexport type APIError = Error | string | null\n\nexport interface Result {\n    data: T\n    error?: APIError\n    message?: string | string[]\n    statusCode: HttpStatus\n}\n\nexport interface APIResponse {\n    data: T\n    error?: APIError\n    message?: string | string[]\n    statusCode: HttpStatus\n\n    count?: number\n    page?: number\n    pageCount?: number\n    total?: number\n}\n\nexport interface GetAppLaunchData {\n    link: 'api:/'\n    response: APIResponse\n}\n\nexport interface GetUserProfile {\n    link: 'api:v1/user/getUserProfile?userId=25'\n    response: APIResponse\n}\n\nexport interface GetUserPosts {\n    link: 'api:v1/user/getUserPosts?pageNo=0&pageSize=25'\n    response: APIResponse\n}\n\nexport interface GetRescueList {\n    link: 'api:v1/rescue/getRescueList?pageNo=0&pageSize=10&status=pending|inProgress|completed|nearest'\n    response: APIResponse\n}\n\nexport interface GetComments {\n    link: 'api:v1/rescue/getComments?pageNo=0&pageSize=10&postId=1230'\n    response: APIResponse\n}\n\nexport interface GetFollowers {\n    link: 'api:v1/rescue/getUserFollowers?userId=1230'\n    response: APIResponse\n}\n\nexport interface GetFollowing {\n    link: 'api:v1/rescue/getUserFollowing?userId=1230'\n    response: APIResponse\n}\n\nexport interface AppLaunchAction {\n    actionId: number\n    action: string\n    isActive: boolean\n    subject?: string\n}\n\nexport interface User {\n    usesId: number\n\n    coverImage: string\n    following: boolean\n    gender: string\n    isOwnProfile: number\n    isRescuer: boolean\n    latitude: number\n    longitude: number\n    numberOfFollowers: number\n    numberOfFollowing: number\n    numberOfPosts: number\n    numberOfRescuesCompleted: number\n    numberOfRescuesCreated: number\n    numberOfRescuesInProgress: number\n    profileImage: string\n    rescuer: boolean\n    userAddress: string\n    userContacts: string\n    userEmail: string\n    userName: string\n    badge: {\n        badgeId: number\n        badgeName: string\n        badgeDescription: string\n        recuesCompletionNeeded: number\n    }\n    setting: {\n        showMyContacts: boolean\n        getNotifications: boolean\n    }\n}\n\nexport interface PostType {\n    postTypeId: number\n    postType: string\n}\n\nexport interface PostedByUser {\n    usesId: number\n    badgeName: string\n    following: boolean\n    profileImage: string\n    rescuer: boolean\n    userName: string\n}\n\nexport interface UserPost {\n    postId: number\n    commentsCount: number\n    isUserReactedToPost: boolean\n    ownPage: boolean\n    postBy: PostedByUser\n    postImage: string\n    postTime: string\n    postType: PostType\n    postVideo: string\n    reactionsCount: number\n    timeAgo: string\n\n    adCorporateLogoUrl: string | null\n    corporateDescription: string | null\n    corporateName: string | null\n}\n\nexport interface UserPosts {\n    isRecent: boolean\n    feed: UserPost[]\n}\n\nexport interface Rescues {\n    rescueId: number\n    animalImageUrl: string\n    distance: number\n    distanceAway: string\n    emergencyType: string\n    postedBy: string\n    postedMinAgo: string\n    rescueDate: Date\n    rescuedPetName: string\n    rescueLocality: string\n    rescuers: {\n        contact: number\n        name: string\n        profileId: number\n        profileImageUrl: string\n        rescues: boolean\n        showMyNumber: boolean\n    }\n    rescueStatus: string\n    viewsCont: number\n}\n\nexport interface RescueLists {\n    rescues: Rescues[]\n}\n\nexport interface Comment {\n    commentId: number\n    comment: string\n    commentedUseName: string\n    commentedUserId: number\n    timeAgo: string\n}\n\nexport interface Comments {\n    comments: Comment[]\n}\n\nexport interface Follower {\n    userId: number\n    userName: string\n    profileImage: string\n    areYouFollowing: boolean\n    showRemoveOption: boolean\n}\n\nexport type Following = Follower\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/UserPosts.html":{"url":"interfaces/UserPosts.html","title":"interface - UserPosts","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  UserPosts\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/domain.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        feed\n                                \n                                \n                                        isRecent\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        feed\n                                    \n                                \n                                \n                                    \n                                        feed:         UserPost[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         UserPost[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        isRecent\n                                    \n                                \n                                \n                                    \n                                        isRecent:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { HttpStatus } from '@nestjs/common'\n\nexport type Results =\n    | GetAppLaunchData\n    | GetUserProfile\n    | GetUserPosts\n    | GetComments\n    | GetRescueList\n    | GetFollowers\n    | GetFollowing\n\nexport type APIError = Error | string | null\n\nexport interface Result {\n    data: T\n    error?: APIError\n    message?: string | string[]\n    statusCode: HttpStatus\n}\n\nexport interface APIResponse {\n    data: T\n    error?: APIError\n    message?: string | string[]\n    statusCode: HttpStatus\n\n    count?: number\n    page?: number\n    pageCount?: number\n    total?: number\n}\n\nexport interface GetAppLaunchData {\n    link: 'api:/'\n    response: APIResponse\n}\n\nexport interface GetUserProfile {\n    link: 'api:v1/user/getUserProfile?userId=25'\n    response: APIResponse\n}\n\nexport interface GetUserPosts {\n    link: 'api:v1/user/getUserPosts?pageNo=0&pageSize=25'\n    response: APIResponse\n}\n\nexport interface GetRescueList {\n    link: 'api:v1/rescue/getRescueList?pageNo=0&pageSize=10&status=pending|inProgress|completed|nearest'\n    response: APIResponse\n}\n\nexport interface GetComments {\n    link: 'api:v1/rescue/getComments?pageNo=0&pageSize=10&postId=1230'\n    response: APIResponse\n}\n\nexport interface GetFollowers {\n    link: 'api:v1/rescue/getUserFollowers?userId=1230'\n    response: APIResponse\n}\n\nexport interface GetFollowing {\n    link: 'api:v1/rescue/getUserFollowing?userId=1230'\n    response: APIResponse\n}\n\nexport interface AppLaunchAction {\n    actionId: number\n    action: string\n    isActive: boolean\n    subject?: string\n}\n\nexport interface User {\n    usesId: number\n\n    coverImage: string\n    following: boolean\n    gender: string\n    isOwnProfile: number\n    isRescuer: boolean\n    latitude: number\n    longitude: number\n    numberOfFollowers: number\n    numberOfFollowing: number\n    numberOfPosts: number\n    numberOfRescuesCompleted: number\n    numberOfRescuesCreated: number\n    numberOfRescuesInProgress: number\n    profileImage: string\n    rescuer: boolean\n    userAddress: string\n    userContacts: string\n    userEmail: string\n    userName: string\n    badge: {\n        badgeId: number\n        badgeName: string\n        badgeDescription: string\n        recuesCompletionNeeded: number\n    }\n    setting: {\n        showMyContacts: boolean\n        getNotifications: boolean\n    }\n}\n\nexport interface PostType {\n    postTypeId: number\n    postType: string\n}\n\nexport interface PostedByUser {\n    usesId: number\n    badgeName: string\n    following: boolean\n    profileImage: string\n    rescuer: boolean\n    userName: string\n}\n\nexport interface UserPost {\n    postId: number\n    commentsCount: number\n    isUserReactedToPost: boolean\n    ownPage: boolean\n    postBy: PostedByUser\n    postImage: string\n    postTime: string\n    postType: PostType\n    postVideo: string\n    reactionsCount: number\n    timeAgo: string\n\n    adCorporateLogoUrl: string | null\n    corporateDescription: string | null\n    corporateName: string | null\n}\n\nexport interface UserPosts {\n    isRecent: boolean\n    feed: UserPost[]\n}\n\nexport interface Rescues {\n    rescueId: number\n    animalImageUrl: string\n    distance: number\n    distanceAway: string\n    emergencyType: string\n    postedBy: string\n    postedMinAgo: string\n    rescueDate: Date\n    rescuedPetName: string\n    rescueLocality: string\n    rescuers: {\n        contact: number\n        name: string\n        profileId: number\n        profileImageUrl: string\n        rescues: boolean\n        showMyNumber: boolean\n    }\n    rescueStatus: string\n    viewsCont: number\n}\n\nexport interface RescueLists {\n    rescues: Rescues[]\n}\n\nexport interface Comment {\n    commentId: number\n    comment: string\n    commentedUseName: string\n    commentedUserId: number\n    timeAgo: string\n}\n\nexport interface Comments {\n    comments: Comment[]\n}\n\nexport interface Follower {\n    userId: number\n    userName: string\n    profileImage: string\n    areYouFollowing: boolean\n    showRemoveOption: boolean\n}\n\nexport type Following = Follower\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findOneByEmail\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            create\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    create(input: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Create a User', description: 'Create a new User and store it in database'})@Post()\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    input\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOneByEmail\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneByEmail(email: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Get one record by email', description: 'Get one record from database with provided by email'})@Get()\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: number, input: UpdateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Update one users by id', description: 'Update one users by id'})@Put(':id')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    input\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Controller,\n    Get,\n    Post,\n    Body,\n    Put,\n    Param,\n    Delete,\n    ParseIntPipe,\n    Query,\n    HttpStatus,\n} from '@nestjs/common'\nimport { ApiOperation, ApiTags } from '@nestjs/swagger'\n\nimport { CrudController } from '../base/crud'\nimport { CreateUserDto, UpdateUserDto, User } from './user.model'\nimport { UsersService } from './users.service'\n\n@Controller(UsersController.path)\n@ApiTags(UsersController.name)\nexport class UsersController extends CrudController {\n    static path = 'users'\n\n    constructor(readonly service: UsersService) {\n        super(service)\n    }\n\n    @ApiOperation({\n        summary: 'Get one record by email',\n        description: 'Get one record from database with provided by email',\n    })\n    @Get()\n    async findOneByEmail(@Query() email: string) {\n        return this.service.findOneByEmail(email)\n    }\n\n    @ApiOperation({\n        summary: 'Create a User',\n        description: 'Create a new User and store it in database',\n    })\n    @Post()\n    async create(@Body() input: CreateUserDto) {\n        const data = await this.service.create(input)\n\n        return {\n            data,\n            statusCode: HttpStatus.CREATED,\n        }\n    }\n\n    @ApiOperation({\n        summary: 'Update one users by id',\n        description: 'Update one users by id',\n    })\n    @Put(':id')\n    async update(\n        @Param('id', ParseIntPipe) id: number,\n        @Body() input: UpdateUserDto,\n    ) {\n        const data = await this.service.update(id, input)\n\n        return {\n            data,\n            statusCode: !data ? HttpStatus.NO_CONTENT : HttpStatus.OK,\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_providers\n\n\n\ncluster_UsersModule_exports\n\n\n\n\nUsersService \n\nUsersService \n\n\n\nUsersModule\n\nUsersModule\n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n        \n            Description\n        \n        \n            Users module\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common'\n\nimport { UsersController } from './users.controller'\nimport { UsersService } from './users.service'\n\n/**\n * Users module\n */\n@Module({\n    controllers: [UsersController],\n    providers: [UsersService],\n    exports: [UsersService],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.service.ts\n        \n\n\n            \n                Extends\n            \n            \n                        CrudService\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                findOneByEmail\n                            \n                            \n                                    Async\n                                hashPassword\n                            \n                            \n                                    Async\n                                update\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                findOneByEmail\n                            \n                            \n                                    Async\n                                findOneById\n                            \n                            \n                                    Async\n                                paginatedFindAll\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(model: ModelClass)\n                    \n                \n                        \n                            \n                                Defined in src/users/users.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        model\n                                                  \n                                                        \n                                                                        ModelClass\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            create\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    create(user: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: string | number)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            string | number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOneByEmail\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneByEmail(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            hashPassword\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    hashPassword(password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: number, user: UpdateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            create\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    create(input: CreateUserDto | CreateTagsDto | T)\n                \n            \n\n\n            \n                \n                    Inherited from         CrudService\n\n                \n            \n            \n                \n                        Defined in         CrudService:99\n\n                \n            \n\n\n            \n                \n                    Created a entry and return it\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    input\n                                    \n                                                CreateUserDto | CreateTagsDto | T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n\n            \n                \n                    Inherited from         CrudService\n\n                \n            \n            \n                \n                        Defined in         CrudService:27\n\n                \n            \n\n\n            \n                \n                    Finds all entries and return the result\n\n\n                    \n                        Returns :     {}\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(filter: object)\n                \n            \n\n\n            \n                \n                    Inherited from         CrudService\n\n                \n            \n            \n                \n                        Defined in         CrudService:56\n\n                \n            \n\n\n            \n                \n                    Finds one entry with where filter and return the result\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    filter\n                                    \n                                                object\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOneByEmail\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneByEmail(email: string)\n                \n            \n\n\n            \n                \n                    Inherited from         CrudService\n\n                \n            \n            \n                \n                        Defined in         CrudService:78\n\n                \n            \n\n\n            \n                \n                    Finds onw entry by email and return the result\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOneById\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneById(id: number)\n                \n            \n\n\n            \n                \n                    Inherited from         CrudService\n\n                \n            \n            \n                \n                        Defined in         CrudService:67\n\n                \n            \n\n\n            \n                \n                    Finds paginated entries and return the result\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            paginatedFindAll\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    paginatedFindAll(paginationParams: PaginationParams)\n                \n            \n\n\n            \n                \n                    Inherited from         CrudService\n\n                \n            \n            \n                \n                        Defined in         CrudService:38\n\n                \n            \n\n\n            \n                \n                    Finds paginated entries and return the result\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    paginationParams\n                                    \n                                                PaginationParams\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            remove\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: number)\n                \n            \n\n\n            \n                \n                    Inherited from         CrudService\n\n                \n            \n            \n                \n                        Defined in         CrudService:89\n\n                \n            \n\n\n            \n                \n                    Soft-deletes a entry and return it\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: number, input: Partial)\n                \n            \n\n\n            \n                \n                    Inherited from         CrudService\n\n                \n            \n            \n                \n                        Defined in         CrudService:112\n\n                \n            \n\n\n            \n                \n                    Updates a entry and return it\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    input\n                                    \n                                            Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable, NotFoundException } from '@nestjs/common'\n\nimport * as bcrypt from 'bcrypt'\nimport { ModelClass } from 'objection'\n\nimport { CrudService } from '../base/crud'\nimport { CreateUserDto, UpdateUserDto, User } from './user.model'\n\n@Injectable()\nexport class UsersService extends CrudService {\n    constructor(@Inject(User.name) readonly model: ModelClass) {\n        super(model)\n    }\n\n    async hashPassword(password: string) {\n        return await bcrypt.hash(password, 12)\n    }\n\n    async findOne(id: string | number) {\n        const data = await this.model.query().findById(id).first()\n\n        if (data) return data\n\n        return Promise.reject(new NotFoundException())\n    }\n\n    async findOneByEmail(email: string) {\n        const data = await this.model.query().findOne({ email })\n\n        if (data) return data\n\n        return Promise.reject(new NotFoundException())\n    }\n\n    async create(user: CreateUserDto) {\n        return this.model.query().insertAndFetch(user)\n    }\n\n    async update(id: number, user: UpdateUserDto) {\n        if (user?.password) user.password = await this.hashPassword(user.password) // eslint-disable-line no-param-reassign\n\n        return this.model.query().patchAndFetchById(id, user)\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ValidationFailedFilter.html":{"url":"classes/ValidationFailedFilter.html","title":"class - ValidationFailedFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ValidationFailedFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infra/filters/validation-failed.filter.ts\n        \n\n            \n                Description\n            \n            \n                Validation Failed Exception Filter\n\n            \n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            catch\n                        \n                        \n                    \n                \n            \n            \n                \ncatch(exception: ValidationError, host: ArgumentsHost)\n                \n            \n\n\n            \n                \n                    Defined in src/infra/filters/validation-failed.filter.ts:17\n                \n            \n\n\n            \n                \n                    Method to implement a custom exception filter.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                            ValidationError\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the class of the exception being handled\n\n                                    \n                                \n                                \n                                    host\n                                    \n                                            ArgumentsHost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        used to access an array of arguments for\nthe in-flight request\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ArgumentsHost, Catch, ExceptionFilter, HttpStatus } from '@nestjs/common'\n\nimport { ValidationError } from 'objection'\n\n/**\n * Validation Failed Exception Filter\n */\n@Catch(ValidationError)\nexport class ValidationFailedFilter implements ExceptionFilter {\n    /**\n     * Method to implement a custom exception filter.\n     *\n     * @param exception the class of the exception being handled\n     * @param host used to access an array of arguments for\n     * the in-flight request\n     */\n    catch(exception: ValidationError, host: ArgumentsHost) {\n        const ctx = host.switchToHttp()\n        const response = ctx.getResponse()\n        const request = ctx.getRequest()\n        const status = HttpStatus.PRECONDITION_FAILED\n\n        const {\n            statusCode: validationErrorCode,\n            message,\n            data, // ErrorHash?\n            type, // ValidationErrorType\n        } = exception\n\n        // @ts-ignore\n        response.status(status).json({\n            data,\n            type,\n            message,\n            validationErrorCode,\n\n            statusCode: status,\n\n            path: request.url,\n            timestamp: new Date().toISOString(),\n        })\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.module.ts\n            \n            variable\n            ConfigModuleOptions\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            class\n            LoginCredsDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/auth/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/local.strategy.ts\n            \n            injectable\n            LocalStrategy\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/auth/spec/mocks.ts\n            \n            variable\n            mockedConfigService\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/spec/mocks.ts\n            \n            variable\n            mockedJwtService\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/tokenPayload.interface.ts\n            \n            interface\n            TokenPayload\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/base/crud/crud.controller.ts\n            \n            class\n            CrudController\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/base/crud/crud.service.interface.ts\n            \n            interface\n            ICrudService\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                src/base/crud/crud.service.ts\n            \n            class\n            CrudService\n            \n                100 %\n                (10/10)\n            \n        \n        \n            \n                \n                src/base/crud/pagination.ts\n            \n            class\n            PaginationParams\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/base/crud/pagination.ts\n            \n            interface\n            IPaginationResult\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/base/moment-extend.ts\n            \n            variable\n            moment\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/base/swagger-gen/api-errors.decorator.ts\n            \n            class\n            ApiException\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/base/swagger-gen/api-errors.decorator.ts\n            \n            function\n            ApiErrors\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/base/swagger-gen/crud-routes.factory.ts\n            \n            class\n            CrudConfigService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/base/swagger-gen/crud-routes.factory.ts\n            \n            class\n            CrudRoutesFactory\n            \n                0 %\n                (0/14)\n            \n        \n        \n            \n                \n                src/base/swagger-gen/crud-routes.factory.ts\n            \n            class\n            R\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/base/swagger-gen/crud-routes.factory.ts\n            \n            class\n            SerializeHelper\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/base/swagger-gen/crud-routes.factory.ts\n            \n            class\n            Swagger\n            \n                33 %\n                (2/6)\n            \n        \n        \n            \n                \n                src/base/swagger-gen/crud.decorator.ts\n            \n            variable\n            Crud\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/base/swagger-gen/utils/checks.util.ts\n            \n            variable\n            hasLength\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/base/swagger-gen/utils/checks.util.ts\n            \n            variable\n            hasValue\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/base/swagger-gen/utils/checks.util.ts\n            \n            variable\n            isArrayFull\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/base/swagger-gen/utils/checks.util.ts\n            \n            variable\n            isArrayStrings\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/base/swagger-gen/utils/checks.util.ts\n            \n            variable\n            isBoolean\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/base/swagger-gen/utils/checks.util.ts\n            \n            variable\n            isDate\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/base/swagger-gen/utils/checks.util.ts\n            \n            variable\n            isDateString\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/base/swagger-gen/utils/checks.util.ts\n            \n            variable\n            isEqual\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/base/swagger-gen/utils/checks.util.ts\n            \n            variable\n            isFalse\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/base/swagger-gen/utils/checks.util.ts\n            \n            variable\n            isFunction\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/base/swagger-gen/utils/checks.util.ts\n            \n            variable\n            isIn\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/base/swagger-gen/utils/checks.util.ts\n            \n            variable\n            isNil\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/base/swagger-gen/utils/checks.util.ts\n            \n            variable\n            isNull\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/base/swagger-gen/utils/checks.util.ts\n            \n            variable\n            isNumber\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/base/swagger-gen/utils/checks.util.ts\n            \n            variable\n            isNumeric\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/base/swagger-gen/utils/checks.util.ts\n            \n            variable\n            isObject\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/base/swagger-gen/utils/checks.util.ts\n            \n            variable\n            isObjectFull\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/base/swagger-gen/utils/checks.util.ts\n            \n            variable\n            isString\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/base/swagger-gen/utils/checks.util.ts\n            \n            variable\n            isStringFull\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/base/swagger-gen/utils/checks.util.ts\n            \n            variable\n            isTrue\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/base/swagger-gen/utils/checks.util.ts\n            \n            variable\n            isUndefined\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/base/swagger-gen/utils/checks.util.ts\n            \n            variable\n            isValue\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/base/swagger-gen/utils/obj.util.ts\n            \n            variable\n            getOwnPropNames\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/base/swagger-gen/utils/obj.util.ts\n            \n            variable\n            objKeys\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/base/swagger-gen/utils/other.ts\n            \n            interface\n            BaseRoute\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/base/swagger-gen/utils/other.ts\n            \n            interface\n            CrudOptions\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/base/swagger-gen/utils/other.ts\n            \n            interface\n            GetManyDefaultResponse\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/base/swagger-gen/utils/other.ts\n            \n            interface\n            ParamOption\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/base/swagger-gen/utils/other.ts\n            \n            interface\n            ParamsOptions\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/base/swagger-gen/utils/other.ts\n            \n            function\n            ApiProperty\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/base/swagger-gen/utils/other.ts\n            \n            function\n            safeRequire\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/base/swagger-gen/utils/other.ts\n            \n            variable\n            swagger\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/base/swagger-gen/utils/other.ts\n            \n            variable\n            swaggerConst\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/cron/cron.service.ts\n            \n            injectable\n            CronService\n            \n                52 %\n                (10/19)\n            \n        \n        \n            \n                \n                src/cron/persisted-cron.service.ts\n            \n            injectable\n            PersistedCronService\n            \n                50 %\n                (2/4)\n            \n        \n        \n            \n                \n                src/database/database.module.ts\n            \n            variable\n            databaseProviders\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/database.module.ts\n            \n            variable\n            graphQlSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/database.module.ts\n            \n            variable\n            modelProviders\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/database.module.ts\n            \n            variable\n            models\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/migrations/20190609143930_CreateTag.ts\n            \n            function\n            down\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/migrations/20190609143930_CreateTag.ts\n            \n            function\n            up\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/migrations/20190609143930_CreateTag.ts\n            \n            variable\n            tableName\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/migrations/20190609143930_CreateUser.ts\n            \n            function\n            down\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/migrations/20190609143930_CreateUser.ts\n            \n            function\n            up\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/migrations/20190609143930_CreateUser.ts\n            \n            variable\n            tableName\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/migrations/20210128233543_UpdateTagModel.ts\n            \n            function\n            down\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/migrations/20210128233543_UpdateTagModel.ts\n            \n            function\n            up\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/migrations/20210128233543_UpdateTagModel.ts\n            \n            variable\n            tableName\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/models/base.model.ts\n            \n            class\n            BaseModel\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/database/models/base.model.ts\n            \n            interface\n            IBaseModel\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/database/models/helpers.ts\n            \n            class\n            CustomQueryBuilder\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/database/models/helpers.ts\n            \n            function\n            isEmpty\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/database/models/helpers.ts\n            \n            function\n            isNotEmpty\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/database/models/helpers.ts\n            \n            function\n            isObject\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/database/seeds/01-User.ts\n            \n            function\n            seed\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/seeds/02-Tag.ts\n            \n            function\n            seed\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/domain.ts\n            \n            interface\n            APIResponse\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/domain.ts\n            \n            interface\n            AppLaunchAction\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/domain.ts\n            \n            interface\n            Comment\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/domain.ts\n            \n            interface\n            Comments\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/domain.ts\n            \n            interface\n            Follower\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/domain.ts\n            \n            interface\n            GetAppLaunchData\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/domain.ts\n            \n            interface\n            GetComments\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/domain.ts\n            \n            interface\n            GetFollowers\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/domain.ts\n            \n            interface\n            GetFollowing\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/domain.ts\n            \n            interface\n            GetRescueList\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/domain.ts\n            \n            interface\n            GetUserPosts\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/domain.ts\n            \n            interface\n            GetUserProfile\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/domain.ts\n            \n            interface\n            PostedByUser\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/domain.ts\n            \n            interface\n            PostType\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/domain.ts\n            \n            interface\n            RescueLists\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/domain.ts\n            \n            interface\n            Rescues\n            \n                0 %\n                (0/14)\n            \n        \n        \n            \n                \n                src/domain.ts\n            \n            interface\n            Result\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/domain.ts\n            \n            interface\n            User\n            \n                0 %\n                (0/23)\n            \n        \n        \n            \n                \n                src/domain.ts\n            \n            interface\n            UserPost\n            \n                0 %\n                (0/15)\n            \n        \n        \n            \n                \n                src/domain.ts\n            \n            interface\n            UserPosts\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/email/email.service.ts\n            \n            injectable\n            EmailService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/emailScheduling/emailSchedule.dto.ts\n            \n            class\n            EmailScheduleDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/emailScheduling/emailScheduling.controller.ts\n            \n            controller\n            EmailSchedulingController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/emailScheduling/emailScheduling.service.ts\n            \n            injectable\n            EmailSchedulingService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/health/health.controller.ts\n            \n            controller\n            HealthController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/infra/filters/query-failed.filter.ts\n            \n            class\n            QueryFailedFilter\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/infra/filters/validation-failed.filter.ts\n            \n            class\n            ValidationFailedFilter\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/infra/guards/req.ts\n            \n            guard\n            RequestGuard\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/infra/guards/res.ts\n            \n            guard\n            ResponseGuard\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/infra/interceptors/null-undefined-override.ts\n            \n            injectable\n            ExcludeNullUndefinedInterceptor\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/infra/interceptors/null-undefined-override.ts\n            \n            function\n            recursivelyStripNullValues\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/infra/interceptors/timeout.ts\n            \n            injectable\n            TimeoutInterceptor\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/infra/interceptors/transform.ts\n            \n            injectable\n            TransformInterceptor\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/infra/interceptors/transform.ts\n            \n            interface\n            Response\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            run\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            setupInfra\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            setupMiddlewares\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            setupSwaggerDocs\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/tags/tag.model.ts\n            \n            class\n            CreateTagsDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/tags/tag.model.ts\n            \n            class\n            Tag\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/tags/tag.model.ts\n            \n            class\n            UpdateTagsDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/tags/tag.model.ts\n            \n            interface\n            ITag\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/tags/tags.controller.ts\n            \n            controller\n            TagsController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/tags/tags.service.ts\n            \n            injectable\n            TagsService\n            \n                72 %\n                (8/11)\n            \n        \n        \n            \n                \n                src/users/user.model.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/users/user.model.ts\n            \n            class\n            UpdateUserDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/user.model.ts\n            \n            class\n            User\n            \n                0 %\n                (0/20)\n            \n        \n        \n            \n                \n                src/users/user.model.ts\n            \n            interface\n            IUser\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                53 %\n                (8/15)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @hapi/joi : ^17.1.1\n        \n            @nestjs/bull : ^0.3.1\n        \n            @nestjs/common : ^7.5.1\n        \n            @nestjs/config : ^0.6.1\n        \n            @nestjs/core : ^7.5.1\n        \n            @nestjs/graphql : ^7.9.8\n        \n            @nestjs/jwt : ^7.2.0\n        \n            @nestjs/mapped-types : ^0.1.1\n        \n            @nestjs/passport : ^7.1.5\n        \n            @nestjs/platform-express : ^7.5.1\n        \n            @nestjs/platform-socket.io : ^7.6.5\n        \n            @nestjs/schedule : ^0.4.1\n        \n            @nestjs/serve-static : ^2.1.4\n        \n            @nestjs/swagger : ^4.7.5\n        \n            @nestjs/terminus : ^7.0.1\n        \n            @types/dotenv : ^8.2.0\n        \n            apollo-server-express : ^2.19.2\n        \n            bcrypt : ^5.0.0\n        \n            blocked-at : ^1.2.0\n        \n            bull : ^3.20.0\n        \n            class-transformer : ^0.3.1\n        \n            class-validator : ^0.12.2\n        \n            cron : ^1.8.2\n        \n            deepmerge : ^4.2.2\n        \n            dotenv : ^8.2.0\n        \n            express : ^4.17.1\n        \n            express-rate-limit : ^5.2.3\n        \n            graphql : ^15.5.0\n        \n            graphql-tools : ^7.0.2\n        \n            helmet : ^4.2.0\n        \n            knex : ^0.21.15\n        \n            lodash : ^4.17.20\n        \n            moment : ^2.29.1\n        \n            moment-range : ^4.0.2\n        \n            objection : ^2.2.6\n        \n            objection-db-errors : ^1.1.2\n        \n            objection-find : ^3.0.1\n        \n            objection-graphql : ^0.4.5\n        \n            objection-visibility : ^1.1.0\n        \n            passport : ^0.4.1\n        \n            passport-jwt : ^4.0.0\n        \n            passport-local : ^1.0.0\n        \n            pidusage : ^2.0.21\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^6.6.3\n        \n            source-map-support : ^0.5.19\n        \n            sqlite3 : ^5.0.0\n        \n            swagger-ui-express : ^4.1.5\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            OrderType   (src/.../pagination.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/base/crud/pagination.ts\n    \n        \n            \n                \n                    \n                        \n                        OrderType\n                    \n                \n                        \n                            \n                                 DESC\n                            \n                        \n                        \n                            \n                                Value : DESC\n                            \n                        \n                        \n                            \n                                 ASC\n                            \n                        \n                        \n                            \n                                Value : ASC\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ApiErrors   (src/.../api-errors.decorator.ts)\n                        \n                        \n                            ApiProperty   (src/.../other.ts)\n                        \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            down   (src/.../20190609143930_CreateTag.ts)\n                        \n                        \n                            down   (src/.../20190609143930_CreateUser.ts)\n                        \n                        \n                            down   (src/.../20210128233543_UpdateTagModel.ts)\n                        \n                        \n                            isEmpty   (src/.../helpers.ts)\n                        \n                        \n                            isNotEmpty   (src/.../helpers.ts)\n                        \n                        \n                            isObject   (src/.../helpers.ts)\n                        \n                        \n                            recursivelyStripNullValues   (src/.../null-undefined-override.ts)\n                        \n                        \n                            run   (src/.../main.ts)\n                        \n                        \n                            safeRequire   (src/.../other.ts)\n                        \n                        \n                            seed   (src/.../01-User.ts)\n                        \n                        \n                            seed   (src/.../02-Tag.ts)\n                        \n                        \n                            setupInfra   (src/.../main.ts)\n                        \n                        \n                            setupMiddlewares   (src/.../main.ts)\n                        \n                        \n                            setupSwaggerDocs   (src/.../main.ts)\n                        \n                        \n                            up   (src/.../20190609143930_CreateTag.ts)\n                        \n                        \n                            up   (src/.../20190609143930_CreateUser.ts)\n                        \n                        \n                            up   (src/.../20210128233543_UpdateTagModel.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/base/swagger-gen/api-errors.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            ApiErrors\n                        \n                        \n                    \n                \n            \n            \n                \nApiErrors()\n                \n            \n\n\n\n\n        \n    \n    src/base/swagger-gen/utils/other.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            ApiProperty\n                        \n                        \n                    \n                \n            \n            \n                \nApiProperty(options?: any)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                any\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     PropertyDecorator\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            safeRequire\n                        \n                        \n                    \n                \n            \n            \n                \nsafeRequire(path)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    path\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T | null\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            bootstrap\n                        \n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            run\n                        \n                        \n                    \n                \n            \n            \n                \nrun(boot, options: object)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    boot\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                object\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setupInfra\n                        \n                        \n                    \n                \n            \n            \n                \nsetupInfra(app)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    app\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setupMiddlewares\n                        \n                        \n                    \n                \n            \n            \n                \nsetupMiddlewares(app)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    app\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setupSwaggerDocs\n                        \n                        \n                    \n                \n            \n            \n                \nsetupSwaggerDocs(app)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    app\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/database/migrations/20190609143930_CreateTag.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            down\n                        \n                        \n                    \n                \n            \n            \n                \ndown(knex)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    knex\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            up\n                        \n                        \n                    \n                \n            \n            \n                \nup(knex)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    knex\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/database/migrations/20190609143930_CreateUser.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            down\n                        \n                        \n                    \n                \n            \n            \n                \ndown(knex)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    knex\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            up\n                        \n                        \n                    \n                \n            \n            \n                \nup(knex)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    knex\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    src/database/migrations/20210128233543_UpdateTagModel.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            down\n                        \n                        \n                    \n                \n            \n            \n                \ndown(knex)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    knex\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            up\n                        \n                        \n                    \n                \n            \n            \n                \nup(knex)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    knex\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/database/models/helpers.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            isEmpty\n                        \n                        \n                    \n                \n            \n            \n                \nisEmpty(value: any)\n                \n            \n\n\n\n\n            \n                \n                    Check if value is empty\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            isNotEmpty\n                        \n                        \n                    \n                \n            \n            \n                \nisNotEmpty(value: any)\n                \n            \n\n\n\n\n            \n                \n                    Check if value is not empty\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            isObject\n                        \n                        \n                    \n                \n            \n            \n                \nisObject(value: any)\n                \n            \n\n\n\n\n            \n                \n                    Check if value is of type object.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    src/infra/interceptors/null-undefined-override.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            recursivelyStripNullValues\n                        \n                        \n                    \n                \n            \n            \n                \nrecursivelyStripNullValues(value)\n                \n            \n\n\n\n\n            \n                \n                    Recursively Strip Null Values\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    src/database/seeds/01-User.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            seed\n                        \n                        \n                    \n                \n            \n            \n                \nseed(knex)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    knex\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    src/database/seeds/02-Tag.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            seed\n                        \n                        \n                    \n                \n            \n            \n                \nseed(knex)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    knex\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\n$ npm installRunning the app\n# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CronModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        DatabaseModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        EmailModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        EmailSchedulingModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TagsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_CronModule\n\n\n\ncluster_CronModule_providers\n\n\n\ncluster_EmailModule\n\n\n\ncluster_EmailModule_exports\n\n\n\ncluster_EmailModule_providers\n\n\n\ncluster_EmailSchedulingModule\n\n\n\ncluster_EmailSchedulingModule_providers\n\n\n\ncluster_TagsModule\n\n\n\ncluster_TagsModule_exports\n\n\n\ncluster_TagsModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\n\n\nEmailSchedulingModule\n\nEmailSchedulingModule\n\nAppModule -->\n\nEmailSchedulingModule->AppModule\n\n\n\n\n\nTagsModule\n\nTagsModule\n\nAppModule -->\n\nTagsModule->AppModule\n\n\n\n\n\nTagsService \n\nTagsService \n\nTagsService  -->\n\nTagsModule->TagsService \n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\nCronService\n\nCronService\n\n\n\nCronModule\n\nCronModule\n\nCronModule -->\n\nCronService->CronModule\n\n\n\n\n\nPersistedCronService\n\nPersistedCronService\n\nCronModule -->\n\nPersistedCronService->CronModule\n\n\n\n\n\nEmailService \n\nEmailService \n\n\n\nEmailModule\n\nEmailModule\n\nEmailSchedulingModule -->\n\nEmailModule->EmailSchedulingModule\n\n\n\nEmailService  -->\n\nEmailModule->EmailService \n\n\n\n\n\nEmailService\n\nEmailService\n\nEmailModule -->\n\nEmailService->EmailModule\n\n\n\n\n\nEmailSchedulingService\n\nEmailSchedulingService\n\nEmailSchedulingModule -->\n\nEmailSchedulingService->EmailSchedulingModule\n\n\n\n\n\nTagsService\n\nTagsService\n\nTagsModule -->\n\nTagsService->TagsModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        8 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    6 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    12 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    21 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    2 Guards\n                \n            \n        \n        \n            \n                \n                    \n                    32 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            APIError   (src/.../domain.ts)\n                        \n                        \n                            BaseRouteName   (src/.../other.ts)\n                        \n                        \n                            Following   (src/.../domain.ts)\n                        \n                        \n                            ObjectLiteral   (src/.../object-literal.type.ts)\n                        \n                        \n                            PartialTagShape   (src/.../tag.model.ts)\n                        \n                        \n                            PartialUserShape   (src/.../user.model.ts)\n                        \n                        \n                            Results   (src/.../domain.ts)\n                        \n                        \n                            TagShape   (src/.../tag.model.ts)\n                        \n                        \n                            UserShape   (src/.../user.model.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/domain.ts\n    \n    \n        \n            \n                \n                    \n                    APIError\n                \n            \n            \n                \n                        Error | string | null\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Following\n                \n            \n            \n                \n                            Follower\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Results\n                \n            \n            \n                \n                            GetAppLaunchData | GetUserProfile | GetUserPosts | GetComments | GetRescueList | GetFollowers | GetFollowing\n\n                \n            \n        \n    \n    src/base/swagger-gen/utils/other.ts\n    \n    \n        \n            \n                \n                    \n                    BaseRouteName\n                \n            \n            \n                \n                        \"getManyBase\" | \"getOneBase\" | \"createOneBase\" | \"createManyBase\" | \"updateOneBase\" | \"replaceOneBase\" | \"deleteOneBase\" | \"getOne\"\n\n                \n            \n        \n    \n    src/base/swagger-gen/utils/types/object-literal.type.ts\n    \n    \n        \n            \n                \n                    \n                    ObjectLiteral\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/tags/tag.model.ts\n    \n    \n        \n            \n                \n                    \n                    PartialTagShape\n                \n            \n            \n                \n                            PartialModelObject\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    TagShape\n                \n            \n            \n                \n                            ModelObject\n\n                \n            \n        \n    \n    src/users/user.model.ts\n    \n    \n        \n            \n                \n                    \n                    PartialUserShape\n                \n            \n            \n                \n                            PartialModelObject\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    UserShape\n                \n            \n            \n                \n                            ModelObject\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ConfigModuleOptions   (src/.../app.module.ts)\n                        \n                        \n                            Crud   (src/.../crud.decorator.ts)\n                        \n                        \n                            databaseProviders   (src/.../database.module.ts)\n                        \n                        \n                            getOwnPropNames   (src/.../obj.util.ts)\n                        \n                        \n                            graphQlSchema   (src/.../database.module.ts)\n                        \n                        \n                            hasLength   (src/.../checks.util.ts)\n                        \n                        \n                            hasValue   (src/.../checks.util.ts)\n                        \n                        \n                            isArrayFull   (src/.../checks.util.ts)\n                        \n                        \n                            isArrayStrings   (src/.../checks.util.ts)\n                        \n                        \n                            isBoolean   (src/.../checks.util.ts)\n                        \n                        \n                            isDate   (src/.../checks.util.ts)\n                        \n                        \n                            isDateString   (src/.../checks.util.ts)\n                        \n                        \n                            isEqual   (src/.../checks.util.ts)\n                        \n                        \n                            isFalse   (src/.../checks.util.ts)\n                        \n                        \n                            isFunction   (src/.../checks.util.ts)\n                        \n                        \n                            isIn   (src/.../checks.util.ts)\n                        \n                        \n                            isNil   (src/.../checks.util.ts)\n                        \n                        \n                            isNull   (src/.../checks.util.ts)\n                        \n                        \n                            isNumber   (src/.../checks.util.ts)\n                        \n                        \n                            isNumeric   (src/.../checks.util.ts)\n                        \n                        \n                            isObject   (src/.../checks.util.ts)\n                        \n                        \n                            isObjectFull   (src/.../checks.util.ts)\n                        \n                        \n                            isString   (src/.../checks.util.ts)\n                        \n                        \n                            isStringFull   (src/.../checks.util.ts)\n                        \n                        \n                            isTrue   (src/.../checks.util.ts)\n                        \n                        \n                            isUndefined   (src/.../checks.util.ts)\n                        \n                        \n                            isValue   (src/.../checks.util.ts)\n                        \n                        \n                            mockedConfigService   (src/.../mocks.ts)\n                        \n                        \n                            mockedJwtService   (src/.../mocks.ts)\n                        \n                        \n                            modelProviders   (src/.../database.module.ts)\n                        \n                        \n                            models   (src/.../database.module.ts)\n                        \n                        \n                            moment   (src/.../moment-extend.ts)\n                        \n                        \n                            objKeys   (src/.../obj.util.ts)\n                        \n                        \n                            swagger   (src/.../other.ts)\n                        \n                        \n                            swaggerConst   (src/.../other.ts)\n                        \n                        \n                            tableName   (src/.../20190609143930_CreateTag.ts)\n                        \n                        \n                            tableName   (src/.../20190609143930_CreateUser.ts)\n                        \n                        \n                            tableName   (src/.../20210128233543_UpdateTagModel.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app.module.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            ConfigModuleOptions\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n    isGlobal: true,\n    validationOptions: {\n        allowUnknown: true,\n        abortEarly: true,\n    },\n    /* eslint-disable */\n    validationSchema: Joi.object({\n        PORT: Joi.number().default(3000),\n        NODE_ENV: Joi.string()\n            .required()\n            .valid('development', 'production', 'test', 'provision')\n            .default('development'),\n\n        JWTKEY: Joi.string().required(),\n        TOKEN_EXPIRATION: Joi.string().required(),\n\n        database: Joi.string().required(),\n        type: Joi.string().required(),\n        logging: Joi.string().required(),\n        synchronize: Joi.string().required(),\n    }),\n    /* eslint-enable */\n}\n                        \n                    \n\n\n            \n        \n\n    src/base/swagger-gen/crud.decorator.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            Crud\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (options: any) => (target: Object) => {\n    let factory = CrudRoutesFactory.create(target, options)\n    // @ts-ignore\n    factory = undefined\n}\n                        \n                    \n\n\n            \n        \n\n    src/database/database.module.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            databaseProviders\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : [\n    ...modelProviders,\n    {\n        provide: 'KnexConnection',\n        useFactory: async () => {\n            const knex = Knex({\n                client: 'sqlite3',\n                useNullAsDefault: true,\n                connection: {\n                    filename: './knex.sqlite',\n                },\n                debug: true,\n            })\n\n            Model.knex(knex)\n            return knex\n        },\n    },\n]\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            graphQlSchema\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : graphQlBuilder().allModels(models).build()\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            modelProviders\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : models.map((model) => {\n    return {\n        provide: model.name,\n        useValue: model,\n    }\n})\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            models\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : [Tag, User]\n                        \n                    \n\n\n            \n        \n\n    src/base/swagger-gen/utils/obj.util.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            getOwnPropNames\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (val: any): string[] =>\n    Object.getOwnPropertyNames(val)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            objKeys\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (val: any): string[] => Object.keys(val)\n                        \n                    \n\n\n            \n        \n\n    src/base/swagger-gen/utils/checks.util.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            hasLength\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (val: any): boolean => val.length > 0\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            hasValue\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (val: any): boolean =>\n    isArrayFull(val) ? (val as any[]).every((o) => isValue(o)) : isValue(val)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isArrayFull\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (val: any): boolean =>\n    Array.isArray(val) && hasLength(val)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isArrayStrings\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (val: any): boolean =>\n    isArrayFull(val) && (val as string[]).every((v) => isStringFull(v))\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isBoolean\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (val: any): boolean => typeof val === 'boolean'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isDate\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (val: any): val is Date => val instanceof Date\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isDateString\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (val: any): boolean =>\n    isStringFull(val) &&\n    /^\\d{4}-[01]\\d-[0-3]\\d(?:T[0-2]\\d:[0-5]\\d:[0-5]\\d(?:\\.\\d+)?(?:Z|[-+][0-2]\\d(?::?[0-5]\\d)?)?)?$/g.test(\n        val,\n    )\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isEqual\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (val: any, eq: any): boolean => val === eq\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isFalse\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (val: any): boolean => val === false\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isFunction\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (val: any): boolean => typeof val === 'function'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isIn\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (val: any, arr: any[] = []): boolean =>\n    arr.some((o) => isEqual(val, o))\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isNil\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (val: any): boolean => isUndefined(val) || isNull(val)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isNull\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (val: any): boolean => val === null\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isNumber\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (val: any): boolean =>\n    typeof val === 'number' && !Number.isNaN(val) && Number.isFinite(val)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isNumeric\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (val: any): boolean =>\n    /^[+-]?([0-9]*[.])?[0-9]+$/.test(val)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isObject\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (val: any): boolean =>\n    typeof val === 'object' && !isNull(val)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isObjectFull\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (val: any) => isObject(val) && hasLength(objKeys(val))\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isString\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (val: any): boolean => typeof val === 'string'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isStringFull\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (val: any): boolean => isString(val) && hasLength(val)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isTrue\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (val: any): boolean => val === true\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isUndefined\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (val: any): boolean => typeof val === 'undefined'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isValue\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (val: any): boolean =>\n    isStringFull(val) || isNumber(val) || isBoolean(val) || isDate(val)\n                        \n                    \n\n\n            \n        \n\n    src/auth/spec/mocks.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            mockedConfigService\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n    get(key: string) {\n        switch (key) {\n            case 'JWT_ACCESS_TOKEN_EXPIRATION_TIME':\n                return '3600'\n            default:\n                return ''\n        }\n    },\n}\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            mockedJwtService\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n    sign: () => '',\n    signAsync: async () => Promise.resolve(''),\n}\n                        \n                    \n\n\n            \n        \n\n    src/base/moment-extend.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            moment\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : extendMoment(momentDefault)\n                        \n                    \n\n\n            \n        \n\n    src/base/swagger-gen/utils/other.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            swagger\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : safeRequire('@nestjs/swagger')\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            swaggerConst\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : safeRequire('@nestjs/swagger/dist/constants')\n                        \n                    \n\n\n            \n        \n\n    src/database/migrations/20190609143930_CreateTag.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            tableName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'tag'\n                        \n                    \n\n\n            \n        \n\n    src/database/migrations/20190609143930_CreateUser.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            tableName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'user'\n                        \n                    \n\n\n            \n        \n\n    src/database/migrations/20210128233543_UpdateTagModel.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            tableName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'tag'\n                        \n                    \n\n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"routes.html":{"url":"routes.html","title":"routes - routes","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Routes\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
