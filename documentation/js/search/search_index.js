var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.465,1,1.993]],["body/controllers/AppController.html",[0,2.195,1,2.985,2,1.692,3,0.382,4,0.33,5,0.33,6,3.002,7,0.493,8,1.674,9,4.573,10,1.291,11,0.034,12,3.611,13,3.002,14,0.826,15,3.611,16,1.291,17,1.175,18,1.692,19,1.692,20,1.863,21,2.195,22,2.062,23,3.002,24,2.985,25,2.674,26,2.601,27,2.601,28,0.71,29,3.002,30,2.301,31,0.991,32,3.373,33,2.601,34,1.182,35,2.681,36,3.002,37,3.611,38,0.382,39,0.059,40,2.601,41,1.083,42,3.002,43,3.002,44,1.692,45,3.611,46,0.019,47,0.025,48,0.019]],["title/modules/AppModule.html",[49,1.221,50,1.993]],["body/modules/AppModule.html",[1,2.433,2,1.474,3,0.218,4,0.188,5,0.188,8,0.736,11,0.035,14,0.72,16,1.125,17,0.958,18,0.965,19,0.965,20,1.062,21,1.789,22,2.18,25,1.176,28,0.767,30,2.934,31,0.565,35,2.504,36,1.712,38,0.218,39,0.034,40,1.483,41,0.618,46,0.011,47,0.017,48,0.011,49,1.669,50,3.579,51,0.965,52,1.062,53,1.313,54,1.313,55,1.062,56,2.18,57,1.313,58,1.712,59,1.712,60,1.712,61,2.772,62,2.772,63,2.005,64,1.313,65,1.313,66,1.483,67,2.433,68,2.266,69,3.174,70,2.616,71,2.06,72,0.88,73,0.944,74,0.655,75,0.618,76,2.75,77,1.062,78,3.079,79,2.06,80,2.06,81,1.712,82,1.712,83,2.06,84,2.06,85,1.483,86,2.06,87,1.483,88,3.147,89,1.483,90,1.712,91,1.313,92,3.147,93,2.06,94,1.712,95,1.712,96,2.06,97,2.06,98,2.06,99,2.06,100,1.712,101,1.712,102,3.079,103,1.483,104,1.712,105,3.637,106,1.712,107,1.712,108,1.712,109,1.712,110,1.712,111,1.712,112,1.712,113,1.712,114,1.712,115,1.712,116,1.712,117,1.483,118,1.483,119,1.712,120,1.712,121,1.483,122,1.712,123,1.712,124,1.712,125,1.712,126,1.483,127,1.712,128,1.712,129,2.616,130,1.712,131,1.176,132,1.176,133,1.712,134,1.712,135,2.616,136,1.712,137,1.483,138,1.712,139,1.712,140,1.712,141,1.313,142,1.712,143,1.483,144,1.712,145,1.712,146,1.712,147,1.712,148,1.712,149,1.712,150,1.712,151,2.06,152,2.06,153,2.06,154,1.712,155,2.06,156,0.965,157,1.712,158,2.06,159,2.06,160,1.712,161,2.06,162,1.712,163,1.712]],["title/injectables/AppService.html",[35,1.613,164,1.465]],["body/injectables/AppService.html",[3,0.446,4,0.386,5,0.386,7,0.576,8,1.847,9,4.838,11,0.034,14,0.966,16,1.508,17,1.296,28,0.576,30,2.689,31,1.158,35,2.665,38,0.446,39,0.069,44,1.977,46,0.023,47,0.028,48,0.023,164,2.421,165,2.689,166,3.507,167,4.219,168,4.219,169,4.219]],["title/classes/Base.html",[39,0.051,170,1.465]],["body/classes/Base.html",[3,0.267,4,0.231,5,0.231,7,0.345,10,1.69,11,0.034,14,1.082,17,1.355,28,0.5,34,0.828,38,0.456,39,0.06,41,1.293,46,0.014,47,0.02,48,0.014,74,1.152,75,1.659,131,3.43,132,2.989,156,1.717,170,1.717,171,0.987,172,1.61,173,1.89,174,2.224,175,2.462,176,1.31,177,3.406,178,3.406,179,2.216,180,3.406,181,4.311,182,3.77,183,2.989,184,3.77,185,3.77,186,2.527,187,2.527,188,3.105,189,2.527,190,2.527,191,1.842,192,2.101,193,2.527,194,2.527,195,2.527,196,2.527,197,2.335,198,2.7,199,2.335,200,2.639,201,2.639,202,2.639,203,0.987,204,0.828,205,1.89,206,1.82,207,2.335,208,1.82,209,3.105]],["title/classes/Company.html",[39,0.051,210,1.336]],["body/classes/Company.html",[3,0.425,4,0.367,5,0.367,7,0.548,10,1.791,11,0.034,14,1.147,17,1.257,28,0.548,38,0.425,39,0.066,46,0.022,47,0.027,48,0.022,73,1.638,74,1.044,171,1.568,176,1.791,179,2.56,191,2.141,199,3.481,203,1.568,210,2.141,211,3.339,212,4.016,213,5.463,214,4.016,215,3.194]],["title/controllers/CompanyController.html",[0,1.465,216,1.993]],["body/controllers/CompanyController.html",[0,1.47,2,1.47,3,0.332,4,0.287,5,0.287,7,0.428,8,1.525,10,1.121,11,0.035,14,0.718,16,1.121,18,1.47,19,1.47,21,1.47,24,2.718,25,2.435,26,2.259,27,2.259,28,0.766,31,0.861,32,2.259,33,2.259,34,1.027,38,0.332,39,0.051,44,1.47,46,0.017,47,0.023,48,0.017,74,0.653,156,1.47,174,1.618,210,1.822,216,2.718,217,2.607,218,3.088,219,4.324,220,2.607,221,3.088,222,3.136,223,3.136,224,2.607,225,2.607,226,2.607,227,2.259,228,3.546,229,4.265,230,2.718,231,2.259,232,2.2,233,2.607,234,2.435,235,2.435,236,3.136,237,2.259,238,3.136,239,1.999,240,1.999,241,3.136,242,3.136,243,2.607,244,3.136,245,3.136,246,4.265,247,3.136,248,2.607,249,2.607,250,3.136,251,3.136]],["title/modules/CompanyModule.html",[49,1.221,61,1.785]],["body/modules/CompanyModule.html",[2,2.179,3,0.378,4,0.327,5,0.327,11,0.034,28,0.776,31,0.981,38,0.378,39,0.059,46,0.019,47,0.025,48,0.019,49,2.02,51,1.674,52,1.843,53,2.276,54,2.276,55,1.843,56,2.953,57,3.295,61,3.386,63,2.964,64,2.276,65,2.276,68,2.573,90,2.97,91,2.276,210,1.526,216,3.295,232,3.206,233,2.97,237,2.573,252,2.97,253,2.97,254,2.97,255,3.572,256,3.572,257,3.572]],["title/injectables/CompanyService.html",[164,1.465,232,1.613]],["body/injectables/CompanyService.html",[3,0.348,4,0.301,5,0.301,7,0.449,8,1.575,10,1.176,11,0.034,14,1.137,16,1.176,18,1.542,19,1.542,20,1.697,21,1.542,22,1.879,28,0.755,31,0.903,38,0.348,39,0.054,44,1.542,46,0.018,47,0.024,48,0.018,72,1.406,73,0.987,75,0.987,91,2.097,164,2.064,165,2.097,173,2.272,176,1.575,203,1.72,210,1.882,218,3.165,219,4.409,231,2.37,232,2.272,237,2.37,243,4.129,258,2.736,259,4.966,260,5.304,261,1.879,262,3.291,263,3.291,264,3.291,265,3.291,266,3.291,267,3.291,268,3.291,269,3.291,270,3.291,271,4.966,272,2.736,273,3.291,274,2.37,275,2.736]],["title/modules/CoreModule.html",[49,1.221,276,2.252]],["body/modules/CoreModule.html",[2,2.091,3,0.472,4,0.408,5,0.408,11,0.034,28,0.609,31,1.225,38,0.472,39,0.073,46,0.024,47,0.029,48,0.024,49,2.088,51,2.091,56,2.548,68,3.215,276,3.85,277,4.463]],["title/classes/CreateCompanyDto.html",[39,0.051,234,1.785]],["body/classes/CreateCompanyDto.html",[3,0.389,4,0.336,5,0.336,7,0.502,10,1.314,11,0.034,14,0.842,17,1.189,28,0.716,34,1.204,38,0.501,39,0.086,41,1.573,46,0.02,47,0.025,48,0.02,73,1.719,74,0.766,171,1.436,173,1.897,176,1.694,183,2.706,198,2.706,210,2.025,234,2.706,235,2.1,278,2.648,279,3.677,280,3.677,281,3.677,282,3.057,283,2.648,284,2.648,285,3.057,286,3.94,287,3.057,288,3.94,289,3.057,290,2.648,291,2.343,292,1.897,293,3.057,294,3.057,295,3.057]],["title/modules/CronModule.html",[49,1.221,62,1.785]],["body/modules/CronModule.html",[3,0.427,4,0.369,5,0.369,11,0.033,28,0.686,31,1.107,38,0.427,39,0.066,46,0.022,47,0.027,48,0.022,49,2.137,51,1.889,52,2.08,53,2.57,54,2.57,55,2.08,56,3.125,57,2.57,62,3.431,63,3.202,64,2.57,65,2.57,296,3.352,297,3.352,298,3.431,299,4.032,300,4.032]],["title/injectables/CronService.html",[164,1.465,298,1.785]],["body/injectables/CronService.html",[3,0.336,4,0.29,5,0.29,7,0.434,8,1.538,10,1.744,11,0.035,14,1.197,16,1.744,28,0.587,31,0.872,38,0.336,39,0.052,41,1.463,46,0.017,47,0.023,48,0.017,78,3.513,87,2.287,157,4.346,164,2.016,165,2.024,176,1.538,298,2.456,301,2.64,302,4.055,303,5.228,304,5.228,305,5.228,306,4.302,307,3.176,308,4.302,309,3.176,310,4.302,311,3.176,312,2.287,313,2.024,314,2.741,315,4.302,316,3.176,317,3.176,318,3.176,319,3.176,320,4.878,321,3.176,322,3.176,323,2.64,324,4.302,325,3.176,326,2.64]],["title/classes/CrudController.html",[39,0.051,230,1.993]],["body/classes/CrudController.html",[3,0.156,4,0.135,5,0.135,7,0.201,8,0.862,10,1.397,11,0.034,13,4.095,14,0.961,16,1.397,17,1.201,18,0.69,19,0.69,20,0.76,21,0.69,22,0.841,28,0.632,29,1.224,31,0.404,32,3.775,34,0.482,38,0.156,39,0.024,40,1.061,41,0.442,42,4.281,43,2.005,44,1.967,46,0.008,47,0.013,48,0.008,72,1.793,73,1.259,74,0.997,75,1.259,77,0.76,170,0.69,171,0.575,179,2.076,203,0.575,205,0.76,207,2.257,215,2.675,218,3.438,220,3.249,221,2.49,224,2.005,225,3.489,226,1.224,227,1.061,228,3.489,230,1.537,239,2.257,240,2.49,249,3.249,261,0.841,274,1.061,292,2.962,314,1.537,327,1.224,328,1.737,329,1.737,330,2.005,331,1.473,332,2.022,333,1.473,334,1.537,335,1.061,336,2.551,337,3.448,338,3.542,339,3.932,340,4.197,341,1.473,342,3.542,343,3.542,344,3.542,345,3.542,346,3.542,347,1.473,348,1.473,349,3.139,350,1.224,351,1.473,352,1.473,353,1.473,354,1.737,355,2.257,356,3.542,357,1.473,358,3.684,359,1.473,360,1.473,361,1.061,362,1.061,363,1.473,364,2.412,365,1.473,366,1.473,367,1.061,368,2.551,369,2.412,370,1.473,371,1.473,372,1.473,373,1.473,374,1.473,375,2.412,376,1.224,377,1.244,378,1.244,379,1.224,380,1.224,381,1.061,382,1.061,383,1.473,384,1.473,385,1.473,386,1.473,387,1.473,388,1.224,389,1.473,390,1.737,391,3.064,392,1.473,393,1.473,394,1.473,395,2.412,396,1.473,397,2.412,398,2.412,399,1.473,400,1.473,401,1.473,402,1.473,403,2.412,404,1.473,405,1.473,406,1.473,407,1.473,408,1.473,409,1.473,410,1.473,411,1.473,412,1.473,413,1.473]],["title/classes/CrudService.html",[39,0.051,334,1.993]],["body/classes/CrudService.html",[3,0.126,4,0.109,5,0.109,7,0.163,8,0.724,11,0.035,14,1.077,16,1.579,17,1.281,18,1.456,19,1.456,20,1.603,21,1.771,22,2.158,23,0.994,24,0.762,28,0.643,31,0.328,38,0.126,39,0.02,41,0.358,44,2.392,46,0.006,47,0.011,48,0.006,72,1.887,73,1.325,74,0.952,75,1.325,76,0.861,77,1.603,81,0.994,82,0.994,102,2.506,105,0.861,126,0.861,137,1.46,141,2.409,156,0.95,170,0.56,171,0.467,176,0.724,179,1.771,191,2.145,203,0.467,205,0.616,215,0.762,218,3.566,221,1.681,227,0.861,239,1.291,240,1.681,248,0.994,261,0.682,272,3.524,274,2.238,275,0.994,314,2.217,328,1.46,329,1.9,330,1.685,332,1.507,334,1.291,335,1.46,336,2.238,337,3.781,339,3.053,349,3.302,354,1.46,358,2.194,361,1.46,362,0.861,367,0.861,368,2.238,376,0.994,377,0.616,378,0.616,380,0.994,381,0.861,382,0.861,388,0.994,414,0.994,415,2.639,416,1.685,417,3.78,418,2.639,419,2.639,420,1.195,421,3.143,422,2.027,423,1.685,424,3.35,425,1.195,426,1.195,427,1.195,428,4.097,429,1.195,430,2.027,431,1.195,432,2.027,433,2.027,434,2.027,435,2.027,436,1.195,437,4.097,438,1.195,439,1.195,440,1.195,441,2.027,442,1.195,443,2.027,444,3.108,445,1.195,446,1.195,447,2.027,448,1.195,449,1.195,450,0.762,451,0.861,452,0.994,453,2.027,454,0.994,455,1.195,456,1.195,457,0.994,458,0.994,459,1.195,460,2.027,461,1.195,462,2.027,463,1.685,464,1.685,465,1.195,466,3.479,467,1.195,468,1.685,469,3.108,470,1.195,471,3.108,472,2.027,473,2.027,474,1.195,475,1.195,476,1.195,477,1.195,478,1.195,479,2.027,480,2.027,481,1.195,482,2.027,483,1.195,484,1.195,485,1.195,486,2.027,487,1.195,488,1.195,489,1.195,490,1.195,491,1.195,492,1.195,493,1.195,494,1.195,495,1.195,496,1.195]],["title/controllers/HealthController.html",[0,1.465,67,1.993]],["body/controllers/HealthController.html",[0,1.244,2,1.244,3,0.281,4,0.243,5,0.243,7,0.362,8,1.584,10,0.949,11,0.034,14,1.014,16,1.729,17,1.112,18,1.244,19,1.244,21,1.244,24,2.419,25,2.168,26,1.912,27,1.912,28,0.66,30,3.392,31,0.729,33,1.912,34,0.869,38,0.281,39,0.043,44,1.244,46,0.014,47,0.02,48,0.014,67,3.082,69,4.254,70,3.156,72,1.134,73,0.796,74,0.553,75,0.796,76,3.686,77,1.369,78,3.484,85,1.912,89,1.912,154,3.156,156,1.244,160,2.207,162,2.207,163,2.207,261,1.516,302,3.684,349,2.419,497,2.207,498,2.654,499,4.837,500,2.654,501,2.654,502,2.654,503,2.654,504,3.796,505,3.796,506,3.796,507,3.796,508,2.654,509,2.654,510,2.654,511,3.796,512,2.654,513,2.654,514,2.654,515,2.654,516,2.654,517,2.654,518,2.654,519,3.796,520,3.796,521,2.654,522,2.654,523,3.796,524,2.654,525,2.654,526,2.654,527,2.654,528,2.654,529,2.207,530,2.654,531,2.654,532,2.207,533,2.654,534,2.654,535,2.654,536,2.654,537,2.654,538,2.654,539,2.654]],["title/interfaces/IBaseEntityModel.html",[175,1.785,204,1.024]],["body/interfaces/IBaseEntityModel.html",[3,0.297,4,0.256,5,0.256,7,0.383,11,0.034,17,1.244,28,0.539,34,0.918,38,0.483,39,0.065,41,1.37,46,0.015,47,0.021,48,0.015,74,1.184,75,1.705,131,3.484,132,2.607,156,1.313,170,1.313,172,1.786,173,1.446,174,2.035,175,2.607,176,1.411,177,3.762,178,3.762,179,2.448,180,3.762,182,3.289,183,2.607,184,3.289,185,3.289,188,3.57,191,2.118,197,2.514,198,2.83,199,2.514,200,2.842,201,2.842,202,2.842,203,1.095,204,0.918,205,2.035,206,2.019,207,2.514,208,2.019,209,3.289,540,1.6]],["title/interfaces/ICrudService.html",[204,1.024,332,1.785]],["body/interfaces/ICrudService.html",[3,0.272,4,0.235,5,0.235,7,0.35,8,1.324,11,0.034,14,1.204,16,1.881,17,1.091,28,0.594,38,0.272,46,0.014,47,0.02,48,0.014,72,2.248,73,1.578,74,1.096,75,1.578,77,2.243,179,2.366,191,1.858,203,1.002,204,0.84,215,3.035,221,2.361,239,2.361,240,2.771,328,2.669,329,3.132,332,2.116,335,2.669,336,3.43,337,4.235,349,3.747,350,3.08,354,2.669,361,2.669,362,1.848,367,1.848,368,3.43,377,1.324,378,1.324,381,1.848,382,1.848,416,3.08,423,3.08,424,4.51,428,3.959,437,4.51,457,2.133,458,2.133,540,1.465,541,2.133,542,2.566,543,2.566,544,2.566,545,2.566,546,2.566,547,2.566]],["title/interfaces/IPagination.html",[204,1.024,377,1.613]],["body/interfaces/IPagination.html",[3,0.405,4,0.35,5,0.35,7,0.523,11,0.034,38,0.405,41,1.459,46,0.021,47,0.026,48,0.021,74,1.013,176,1.739,191,2.48,204,1.593,292,1.977,377,2.51,390,3.85,463,4.932,464,5.071,540,2.188,548,3.185,549,3.185,550,3.185,551,4.865,552,4.865,553,4.865,554,4.045]],["title/interfaces/ITryRequest.html",[204,1.024,450,1.993]],["body/interfaces/ITryRequest.html",[3,0.439,4,0.379,5,0.379,7,0.567,11,0.033,38,0.439,46,0.022,47,0.027,48,0.022,74,1.154,75,1.735,141,3.687,176,1.828,204,1.359,339,4.167,450,3.259,451,2.988,468,4.81,540,2.369,555,3.449,556,5.543]],["title/classes/Model.html",[39,0.051,174,1.613]],["body/classes/Model.html",[3,0.326,4,0.282,5,0.282,11,0.034,14,0.705,17,1.295,28,0.575,34,1.008,38,0.508,39,0.069,41,1.439,46,0.017,47,0.023,48,0.017,72,1.315,73,0.923,74,1.125,75,0.923,77,1.588,131,3.369,132,2.741,156,1.442,170,1.442,171,1.202,172,1.962,173,1.588,174,2.476,175,2.405,177,3.033,178,3.033,179,1.973,180,3.033,182,3.457,183,2.741,184,3.457,185,3.457,188,3.033,191,1.799,197,2.684,198,2.947,199,2.684,200,3.033,201,3.033,202,3.033,203,1.202,204,1.008,205,2.172,206,3.033,207,3.059,208,2.217,209,3.457,261,1.758,557,3.078]],["title/classes/PaginationParams.html",[39,0.051,355,1.993]],["body/classes/PaginationParams.html",[3,0.277,4,0.24,5,0.24,7,0.358,10,1.573,11,0.034,14,1.007,17,0.944,28,0.601,34,0.858,38,0.398,39,0.072,41,1.706,46,0.014,47,0.02,48,0.014,74,1.001,75,1.128,171,1.023,176,1.344,191,2.264,192,3.126,197,3.064,205,2.48,290,3.463,291,1.669,292,1.351,312,2.709,313,2.397,326,2.178,355,2.397,378,2.48,379,3.126,390,1.887,549,3.126,550,4.406,558,1.887,559,3.761,560,4.4,561,4.4,562,4.4,563,2.62,564,2.62,565,3.761,566,4.233,567,4.808,568,2.62,569,2.62,570,3.761,571,4.808,572,3.761,573,2.62,574,2.62,575,3.126,576,2.62,577,2.178,578,2.62,579,2.62,580,2.62,581,3.126,582,3.126,583,3.126,584,3.761,585,2.62,586,3.761,587,3.761,588,2.62,589,2.62]],["title/classes/UpdateCompanyDto.html",[39,0.051,235,1.785]],["body/classes/UpdateCompanyDto.html",[3,0.418,4,0.362,5,0.362,11,0.034,17,0.992,28,0.741,34,1.294,38,0.525,39,0.089,41,1.185,46,0.021,47,0.027,48,0.021,73,1.488,171,1.544,173,2.039,183,2.257,198,2.833,210,1.689,234,2.257,235,2.833,278,2.847,282,3.286,283,2.847,284,2.847,285,3.286,286,4.125,287,3.286,288,4.125,289,3.286,290,2.847,291,2.519,292,2.039,293,3.286,294,3.286,295,3.286]],["title/coverage.html",[590,3.066]],["body/coverage.html",[0,2.143,1,1.791,5,0.257,6,2.337,11,0.034,35,1.45,39,0.093,46,0.015,47,0.021,48,0.015,55,1.45,66,3.294,67,1.791,74,0.585,103,2.024,121,2.024,143,2.024,164,2.143,166,2.337,170,1.317,172,2.914,174,1.45,175,1.605,204,1.625,210,1.201,211,2.337,216,1.791,217,2.337,230,1.791,232,1.45,234,1.605,235,1.605,258,2.337,278,2.848,298,1.605,301,2.337,314,1.791,323,3.287,327,2.337,332,1.605,334,1.791,355,1.791,377,1.45,378,1.45,414,2.337,450,1.791,451,2.024,497,2.337,529,3.802,541,2.337,548,2.337,555,2.337,558,2.024,566,5.2,590,2.024,591,2.811,592,2.811,593,2.811,594,5.229,595,4.574,596,5.572,597,3.954,598,2.337,599,2.811,600,2.811,601,2.811,602,4.574,603,4.574,604,3.802,605,2.337,606,2.337,607,2.811,608,2.811,609,2.811]],["title/dependencies.html",[52,1.938,610,2.617]],["body/dependencies.html",[11,0.035,31,0.886,34,1.057,39,0.071,46,0.017,47,0.023,48,0.017,52,1.665,85,2.324,87,2.324,89,2.324,91,2.056,94,2.683,95,3.615,100,2.683,101,2.683,203,1.698,231,3.542,283,2.324,284,2.324,291,2.056,452,2.683,454,2.683,575,2.683,577,2.683,611,3.227,612,4.918,613,3.227,614,3.227,615,3.227,616,3.227,617,3.227,618,3.227,619,4.918,620,4.348,621,3.227,622,3.227,623,3.227,624,4.918,625,3.227,626,3.227,627,4.348,628,3.227,629,3.227,630,3.227,631,3.227,632,3.227,633,3.227,634,3.227,635,3.227,636,3.227,637,4.348,638,3.227,639,3.227,640,3.227,641,3.227,642,3.227,643,3.227,644,3.227,645,3.227,646,3.227,647,3.227,648,3.227,649,3.227,650,3.227,651,3.227,652,3.227,653,3.227]],["title/miscellaneous/enumerations.html",[654,1.35,655,3.124]],["body/miscellaneous/enumerations.html",[7,0.626,11,0.032,46,0.025,47,0.029,48,0.025,313,3.462,378,2.365,558,3.913,581,4.516,582,4.516,583,4.516,654,2.365,655,3.812,656,4.586]],["title/miscellaneous/functions.html",[654,1.35,657,3.124]],["body/miscellaneous/functions.html",[7,0.596,11,0.032,46,0.023,47,0.028,48,0.023,55,2.924,72,2.254,73,1.582,75,1.582,604,3.63,605,4.385,606,4.385,654,2.252,657,3.63,658,5.669,659,4.366,660,4.385,661,4.366,662,5.275]],["title/index.html",[7,0.357,663,2.617,664,2.617]],["body/index.html",[4,0.312,11,0.034,20,1.761,46,0.018,47,0.024,48,0.018,117,2.459,118,3.252,292,1.761,421,2.838,532,4.205,590,2.459,660,2.838,665,3.414,666,3.414,667,4.515,668,3.414,669,3.414,670,3.414,671,3.414,672,3.414,673,3.414,674,3.414,675,3.414,676,5.865,677,3.414,678,3.414,679,5.751,680,3.414,681,3.414,682,4.515,683,3.414,684,3.414,685,3.414,686,4.515,687,3.414,688,3.414,689,3.414,690,4.515,691,4.515,692,3.414,693,3.414,694,3.414,695,3.414,696,3.414,697,2.838,698,3.414,699,3.414,700,3.414,701,3.414,702,3.414,703,3.414,704,3.414,705,3.414,706,3.414,707,3.414,708,3.414,709,3.414,710,3.414,711,3.414,712,3.414,713,3.414,714,3.414,715,3.414]],["title/modules.html",[51,1.994]],["body/modules.html",[11,0.029,46,0.024,47,0.029,48,0.024,50,2.883,51,2.12,61,2.583,62,2.583,276,3.258,554,3.761,697,4.785,716,5.756,717,5.756,718,5.958,719,4.524]],["title/overview.html",[720,3.538]],["body/overview.html",[2,1.742,11,0.033,35,2.719,46,0.02,47,0.026,48,0.02,49,1.452,50,3.863,51,1.742,52,1.918,53,2.369,54,2.369,55,1.918,56,2.123,57,2.369,58,3.091,59,3.091,60,3.091,61,3.361,62,3.284,63,3.041,64,2.369,65,2.369,165,2.369,171,1.452,232,3.087,252,3.091,253,3.091,254,3.091,296,3.091,297,3.091,298,3.01,540,2.123,598,3.091,720,3.091,721,4.773,722,4.773]],["title/miscellaneous/variables.html",[654,1.35,723,3.124]],["body/miscellaneous/variables.html",[7,0.449,11,0.034,25,1.879,46,0.018,47,0.024,48,0.018,66,2.37,73,0.987,74,1.104,102,2.37,103,3.173,104,2.736,105,4.186,106,2.736,107,2.736,108,2.736,109,2.736,110,2.736,111,2.736,112,2.736,113,2.736,114,2.736,115,2.736,116,2.736,117,2.37,118,2.37,119,2.736,120,2.736,121,3.173,122,2.736,123,2.736,124,2.736,125,2.736,126,2.37,127,2.736,128,2.736,129,3.662,130,2.736,131,1.879,132,1.879,133,2.736,134,2.736,135,3.662,136,2.736,137,2.37,138,2.736,139,2.736,140,2.736,141,2.097,142,2.736,143,3.173,144,2.736,145,2.736,146,2.736,147,2.736,148,2.736,149,2.736,150,2.736,312,3.577,313,3.165,654,1.697,723,2.736,724,4.966,725,4.966]]],"invertedIndex":[["",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Base.html":{},"classes/Company.html":{},"controllers/CompanyController.html":{},"modules/CompanyModule.html":{},"injectables/CompanyService.html":{},"modules/CoreModule.html":{},"classes/CreateCompanyDto.html":{},"modules/CronModule.html":{},"injectables/CronService.html":{},"classes/CrudController.html":{},"classes/CrudService.html":{},"controllers/HealthController.html":{},"interfaces/IBaseEntityModel.html":{},"interfaces/ICrudService.html":{},"interfaces/IPagination.html":{},"interfaces/ITryRequest.html":{},"classes/Model.html":{},"classes/PaginationParams.html":{},"classes/UpdateCompanyDto.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":566,"title":{},"body":{"classes/PaginationParams.html":{},"coverage.html":{}}}],["0.1.1",{"_index":615,"title":{},"body":{"dependencies.html":{}}}],["0.1.13",{"_index":644,"title":{},"body":{"dependencies.html":{}}}],["0.12.2",{"_index":626,"title":{},"body":{"dependencies.html":{}}}],["0.2.29",{"_index":653,"title":{},"body":{"dependencies.html":{}}}],["0.3.1",{"_index":625,"title":{},"body":{"dependencies.html":{}}}],["0.4.1",{"_index":620,"title":{},"body":{"dependencies.html":{}}}],["0.6.1",{"_index":613,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":596,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":594,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":607,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":602,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":603,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":597,"title":{},"body":{"coverage.html":{}}}],["01",{"_index":185,"title":{},"body":{"classes/Base.html":{},"interfaces/IBaseEntityModel.html":{},"classes/Model.html":{}}}],["01t12:00:00.000z",{"_index":209,"title":{},"body":{"classes/Base.html":{},"interfaces/IBaseEntityModel.html":{},"classes/Model.html":{}}}],["01t12:00:00.000z'})@createdatecolumn",{"_index":186,"title":{},"body":{"classes/Base.html":{}}}],["01t12:00:00.000z'})@deletedatecolumn",{"_index":189,"title":{},"body":{"classes/Base.html":{}}}],["01t12:00:00.000z'})@updatedatecolumn",{"_index":195,"title":{},"body":{"classes/Base.html":{}}}],["0})@isoptional()@min(0)@transform(undefined",{"_index":568,"title":{},"body":{"classes/PaginationParams.html":{}}}],["1.0.0",{"_index":639,"title":{},"body":{"dependencies.html":{}}}],["1.3.0",{"_index":636,"title":{},"body":{"dependencies.html":{}}}],["1/12",{"_index":599,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":571,"title":{},"body":{"classes/PaginationParams.html":{}}}],["100",{"_index":323,"title":{},"body":{"injectables/CronService.html":{},"coverage.html":{}}}],["12",{"_index":461,"title":{},"body":{"classes/CrudService.html":{}}}],["17.1.1",{"_index":611,"title":{},"body":{"dependencies.html":{}}}],["17.3.0",{"_index":635,"title":{},"body":{"dependencies.html":{}}}],["2000",{"_index":184,"title":{},"body":{"classes/Base.html":{},"interfaces/IBaseEntityModel.html":{},"classes/Model.html":{}}}],["3",{"_index":722,"title":{},"body":{"overview.html":{}}}],["3.0.2",{"_index":646,"title":{},"body":{"dependencies.html":{}}}],["3/3",{"_index":601,"title":{},"body":{"coverage.html":{}}}],["4",{"_index":721,"title":{},"body":{"overview.html":{}}}],["4.1.5",{"_index":652,"title":{},"body":{"dependencies.html":{}}}],["4.2.0",{"_index":634,"title":{},"body":{"dependencies.html":{}}}],["4.3.0",{"_index":641,"title":{},"body":{"dependencies.html":{}}}],["4.6.2",{"_index":624,"title":{},"body":{"dependencies.html":{}}}],["4.7.5",{"_index":621,"title":{},"body":{"dependencies.html":{}}}],["4/4",{"_index":600,"title":{},"body":{"coverage.html":{}}}],["5.0.0",{"_index":649,"title":{},"body":{"dependencies.html":{}}}],["5.1.0",{"_index":630,"title":{},"body":{"dependencies.html":{}}}],["5.2.3",{"_index":632,"title":{},"body":{"dependencies.html":{}}}],["50",{"_index":326,"title":{},"body":{"injectables/CronService.html":{},"classes/PaginationParams.html":{}}}],["50})@isoptional()@min(0)@max(50)@transform(undefined",{"_index":573,"title":{},"body":{"classes/PaginationParams.html":{}}}],["6.6.3",{"_index":647,"title":{},"body":{"dependencies.html":{}}}],["60",{"_index":322,"title":{},"body":{"injectables/CronService.html":{}}}],["7.0.1",{"_index":622,"title":{},"body":{"dependencies.html":{}}}],["7.1.3",{"_index":617,"title":{},"body":{"dependencies.html":{}}}],["7.1.5",{"_index":623,"title":{},"body":{"dependencies.html":{}}}],["7.5.1",{"_index":612,"title":{},"body":{"dependencies.html":{}}}],["8",{"_index":598,"title":{},"body":{"coverage.html":{},"overview.html":{}}}],["8.2.0",{"_index":628,"title":{},"body":{"dependencies.html":{}}}],["__dirname}/**/*.entity.{ts,js",{"_index":145,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["abortearly",{"_index":108,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["above",{"_index":525,"title":{},"body":{"controllers/HealthController.html":{}}}],["abstract",{"_index":205,"title":{},"body":{"classes/Base.html":{},"classes/CrudController.html":{},"classes/CrudService.html":{},"interfaces/IBaseEntityModel.html":{},"classes/Model.html":{},"classes/PaginationParams.html":{}}}],["access",{"_index":83,"title":{},"body":{"modules/AppModule.html":{}}}],["access,@typescript",{"_index":493,"title":{},"body":{"classes/CrudService.html":{}}}],["acme",{"_index":293,"title":{},"body":{"classes/CreateCompanyDto.html":{},"classes/UpdateCompanyDto.html":{}}}],["acme'})@isstring()@isnotempty()@minlength(2",{"_index":280,"title":{},"body":{"classes/CreateCompanyDto.html":{}}}],["all'})@apiresponse({status",{"_index":357,"title":{},"body":{"classes/CrudController.html":{}}}],["allowunknown",{"_index":107,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["amazing",{"_index":698,"title":{},"body":{"index.html":{}}}],["api_default_port",{"_index":662,"title":{},"body":{"miscellaneous/functions.html":{}}}],["apibearerauth",{"_index":375,"title":{},"body":{"classes/CrudController.html":{}}}],["apioperation",{"_index":228,"title":{},"body":{"controllers/CompanyController.html":{},"classes/CrudController.html":{}}}],["apioperation({summary",{"_index":220,"title":{},"body":{"controllers/CompanyController.html":{},"classes/CrudController.html":{}}}],["apiproperty",{"_index":198,"title":{},"body":{"classes/Base.html":{},"classes/CreateCompanyDto.html":{},"interfaces/IBaseEntityModel.html":{},"classes/Model.html":{},"classes/UpdateCompanyDto.html":{}}}],["apiproperty({description",{"_index":279,"title":{},"body":{"classes/CreateCompanyDto.html":{}}}],["apiproperty({type",{"_index":181,"title":{},"body":{"classes/Base.html":{}}}],["apipropertyoptional",{"_index":197,"title":{},"body":{"classes/Base.html":{},"interfaces/IBaseEntityModel.html":{},"classes/Model.html":{},"classes/PaginationParams.html":{}}}],["apipropertyoptional()@isoptional",{"_index":563,"title":{},"body":{"classes/PaginationParams.html":{}}}],["apipropertyoptional({type",{"_index":192,"title":{},"body":{"classes/Base.html":{},"classes/PaginationParams.html":{}}}],["apiresponse",{"_index":32,"title":{},"body":{"controllers/AppController.html":{},"controllers/CompanyController.html":{},"classes/CrudController.html":{}}}],["apitags",{"_index":33,"title":{},"body":{"controllers/AppController.html":{},"controllers/CompanyController.html":{},"controllers/HealthController.html":{}}}],["apitags(appcontroller.name",{"_index":37,"title":{},"body":{"controllers/AppController.html":{}}}],["apitags(companycontroller.name",{"_index":242,"title":{},"body":{"controllers/CompanyController.html":{}}}],["apitags(healthcontroller.name",{"_index":508,"title":{},"body":{"controllers/HealthController.html":{}}}],["app",{"_index":660,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application",{"_index":516,"title":{},"body":{"controllers/HealthController.html":{}}}],["applications",{"_index":673,"title":{},"body":{"index.html":{}}}],["applicationshutdown",{"_index":162,"title":{},"body":{"modules/AppModule.html":{},"controllers/HealthController.html":{}}}],["appmodule",{"_index":50,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":35,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["asc",{"_index":583,"title":{},"body":{"classes/PaginationParams.html":{},"miscellaneous/enumerations.html":{}}}],["assignment",{"_index":275,"title":{},"body":{"injectables/CompanyService.html":{},"classes/CrudService.html":{}}}],["assignment,@typescript",{"_index":80,"title":{},"body":{"modules/AppModule.html":{}}}],["assignment,no",{"_index":23,"title":{},"body":{"controllers/AppController.html":{},"classes/CrudService.html":{}}}],["async",{"_index":218,"title":{},"body":{"controllers/CompanyController.html":{},"injectables/CompanyService.html":{},"classes/CrudController.html":{},"classes/CrudService.html":{}}}],["asynchronous",{"_index":531,"title":{},"body":{"controllers/HealthController.html":{}}}],["author",{"_index":708,"title":{},"body":{"index.html":{}}}],["authservice",{"_index":484,"title":{},"body":{"classes/CrudService.html":{}}}],["available",{"_index":554,"title":{},"body":{"interfaces/IPagination.html":{},"modules.html":{}}}],["await",{"_index":272,"title":{},"body":{"injectables/CompanyService.html":{},"classes/CrudService.html":{}}}],["awaits",{"_index":530,"title":{},"body":{"controllers/HealthController.html":{}}}],["backers",{"_index":699,"title":{},"body":{"index.html":{}}}],["badrequestexception",{"_index":446,"title":{},"body":{"classes/CrudService.html":{}}}],["badrequestexception(error",{"_index":480,"title":{},"body":{"classes/CrudService.html":{}}}],["base",{"_index":170,"title":{"classes/Base.html":{}},"body":{"classes/Base.html":{},"classes/CrudController.html":{},"classes/CrudService.html":{},"interfaces/IBaseEntityModel.html":{},"classes/Model.html":{},"coverage.html":{}}}],["bcrypt",{"_index":448,"title":{},"body":{"classes/CrudService.html":{}}}],["bcrypt.hash(password",{"_index":481,"title":{},"body":{"classes/CrudService.html":{}}}],["bcryptjs",{"_index":449,"title":{},"body":{"classes/CrudService.html":{}}}],["before",{"_index":25,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/CompanyController.html":{},"controllers/HealthController.html":{},"miscellaneous/variables.html":{}}}],["beforeapplicationshutdown",{"_index":522,"title":{},"body":{"controllers/HealthController.html":{}}}],["body",{"_index":225,"title":{},"body":{"controllers/CompanyController.html":{},"classes/CrudController.html":{}}}],["boolean",{"_index":556,"title":{},"body":{"interfaces/ITryRequest.html":{}}}],["bootstrap",{"_index":55,"title":{},"body":{"modules/AppModule.html":{},"modules/CompanyModule.html":{},"modules/CronModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":718,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":716,"title":{},"body":{"modules.html":{}}}],["builder/querypartialentity",{"_index":382,"title":{},"body":{"classes/CrudController.html":{},"classes/CrudService.html":{},"interfaces/ICrudService.html":{}}}],["building",{"_index":668,"title":{},"body":{"index.html":{}}}],["call",{"_index":519,"title":{},"body":{"controllers/HealthController.html":{}}}],["call,@typescript",{"_index":81,"title":{},"body":{"modules/AppModule.html":{},"classes/CrudService.html":{}}}],["catch",{"_index":469,"title":{},"body":{"classes/CrudService.html":{}}}],["check",{"_index":499,"title":{},"body":{"controllers/HealthController.html":{}}}],["class",{"_index":39,"title":{"classes/Base.html":{},"classes/Company.html":{},"classes/CreateCompanyDto.html":{},"classes/CrudController.html":{},"classes/CrudService.html":{},"classes/Model.html":{},"classes/PaginationParams.html":{},"classes/UpdateCompanyDto.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Base.html":{},"classes/Company.html":{},"controllers/CompanyController.html":{},"modules/CompanyModule.html":{},"injectables/CompanyService.html":{},"modules/CoreModule.html":{},"classes/CreateCompanyDto.html":{},"modules/CronModule.html":{},"injectables/CronService.html":{},"classes/CrudController.html":{},"classes/CrudService.html":{},"controllers/HealthController.html":{},"interfaces/IBaseEntityModel.html":{},"classes/Model.html":{},"classes/PaginationParams.html":{},"classes/UpdateCompanyDto.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":171,"title":{},"body":{"classes/Base.html":{},"classes/Company.html":{},"classes/CreateCompanyDto.html":{},"classes/CrudController.html":{},"classes/CrudService.html":{},"classes/Model.html":{},"classes/PaginationParams.html":{},"classes/UpdateCompanyDto.html":{},"overview.html":{}}}],["clear",{"_index":219,"title":{},"body":{"controllers/CompanyController.html":{},"injectables/CompanyService.html":{}}}],["cleared",{"_index":271,"title":{},"body":{"injectables/CompanyService.html":{}}}],["clues",{"_index":345,"title":{},"body":{"classes/CrudController.html":{}}}],["cluster_appmodule",{"_index":58,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":60,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":59,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_companymodule",{"_index":252,"title":{},"body":{"modules/CompanyModule.html":{},"overview.html":{}}}],["cluster_companymodule_exports",{"_index":253,"title":{},"body":{"modules/CompanyModule.html":{},"overview.html":{}}}],["cluster_companymodule_providers",{"_index":254,"title":{},"body":{"modules/CompanyModule.html":{},"overview.html":{}}}],["cluster_cronmodule",{"_index":296,"title":{},"body":{"modules/CronModule.html":{},"overview.html":{}}}],["cluster_cronmodule_providers",{"_index":297,"title":{},"body":{"modules/CronModule.html":{},"overview.html":{}}}],["colorize",{"_index":124,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["column",{"_index":213,"title":{},"body":{"classes/Company.html":{}}}],["companies",{"_index":246,"title":{},"body":{"controllers/CompanyController.html":{}}}],["companies'})@post('/clear",{"_index":222,"title":{},"body":{"controllers/CompanyController.html":{}}}],["company",{"_index":210,"title":{"classes/Company.html":{}},"body":{"classes/Company.html":{},"controllers/CompanyController.html":{},"modules/CompanyModule.html":{},"injectables/CompanyService.html":{},"classes/CreateCompanyDto.html":{},"classes/UpdateCompanyDto.html":{},"coverage.html":{}}}],["companycontroller",{"_index":216,"title":{"controllers/CompanyController.html":{}},"body":{"controllers/CompanyController.html":{},"modules/CompanyModule.html":{},"coverage.html":{}}}],["companymodule",{"_index":61,"title":{"modules/CompanyModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CompanyModule.html":{},"modules.html":{},"overview.html":{}}}],["companyservice",{"_index":232,"title":{"injectables/CompanyService.html":{}},"body":{"controllers/CompanyController.html":{},"modules/CompanyModule.html":{},"injectables/CompanyService.html":{},"coverage.html":{},"overview.html":{}}}],["config",{"_index":511,"title":{},"body":{"controllers/HealthController.html":{}}}],["configmodule",{"_index":84,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule.forroot(configmoduleoptions",{"_index":151,"title":{},"body":{"modules/AppModule.html":{}}}],["configmoduleoptions",{"_index":103,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["configservice",{"_index":504,"title":{},"body":{"controllers/HealthController.html":{}}}],["console.log",{"_index":539,"title":{},"body":{"controllers/HealthController.html":{}}}],["console.log(`moduleinit",{"_index":537,"title":{},"body":{"controllers/HealthController.html":{}}}],["const",{"_index":102,"title":{},"body":{"modules/AppModule.html":{},"classes/CrudService.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":261,"title":{},"body":{"injectables/CompanyService.html":{},"classes/CrudController.html":{},"classes/CrudService.html":{},"controllers/HealthController.html":{},"classes/Model.html":{}}}],["constructor(@injectrepository(company",{"_index":269,"title":{},"body":{"injectables/CompanyService.html":{}}}],["constructor(crudservice",{"_index":331,"title":{},"body":{"classes/CrudController.html":{}}}],["constructor(input",{"_index":206,"title":{},"body":{"classes/Base.html":{},"interfaces/IBaseEntityModel.html":{},"classes/Model.html":{}}}],["constructor(private",{"_index":40,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/CrudController.html":{}}}],["constructor(protected",{"_index":459,"title":{},"body":{"classes/CrudService.html":{}}}],["constructor(public",{"_index":247,"title":{},"body":{"controllers/CompanyController.html":{}}}],["constructor(repo",{"_index":262,"title":{},"body":{"injectables/CompanyService.html":{}}}],["constructor(repository",{"_index":420,"title":{},"body":{"classes/CrudService.html":{}}}],["contain",{"_index":344,"title":{},"body":{"classes/CrudController.html":{}}}],["continue",{"_index":533,"title":{},"body":{"controllers/HealthController.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/CompanyController.html":{},"controllers/HealthController.html":{}},"body":{"controllers/AppController.html":{},"controllers/CompanyController.html":{},"controllers/HealthController.html":{},"coverage.html":{}}}],["controller('health",{"_index":509,"title":{},"body":{"controllers/HealthController.html":{}}}],["controller(companycontroller.path",{"_index":241,"title":{},"body":{"controllers/CompanyController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/CompanyController.html":{},"modules/CompanyModule.html":{},"modules/CoreModule.html":{},"controllers/HealthController.html":{},"overview.html":{}}}],["copied",{"_index":483,"title":{},"body":{"classes/CrudService.html":{}}}],["coremodule",{"_index":276,"title":{"modules/CoreModule.html":{}},"body":{"modules/CoreModule.html":{},"modules.html":{}}}],["corresponding",{"_index":526,"title":{},"body":{"controllers/HealthController.html":{}}}],["count",{"_index":416,"title":{},"body":{"classes/CrudService.html":{},"interfaces/ICrudService.html":{}}}],["count(filter",{"_index":423,"title":{},"body":{"classes/CrudService.html":{},"interfaces/ICrudService.html":{}}}],["coverage",{"_index":590,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":239,"title":{},"body":{"controllers/CompanyController.html":{},"classes/CrudController.html":{},"classes/CrudService.html":{},"interfaces/ICrudService.html":{}}}],["create(@body",{"_index":400,"title":{},"body":{"classes/CrudController.html":{}}}],["create(entity",{"_index":335,"title":{},"body":{"classes/CrudController.html":{},"classes/CrudService.html":{},"interfaces/ICrudService.html":{}}}],["createcompanydto",{"_index":234,"title":{"classes/CreateCompanyDto.html":{}},"body":{"controllers/CompanyController.html":{},"classes/CreateCompanyDto.html":{},"classes/UpdateCompanyDto.html":{},"coverage.html":{}}}],["created",{"_index":396,"title":{},"body":{"classes/CrudController.html":{}}}],["created.'})@apiresponse({status",{"_index":341,"title":{},"body":{"classes/CrudController.html":{}}}],["createdat",{"_index":177,"title":{},"body":{"classes/Base.html":{},"interfaces/IBaseEntityModel.html":{},"classes/Model.html":{}}}],["createdatecolumn",{"_index":201,"title":{},"body":{"classes/Base.html":{},"interfaces/IBaseEntityModel.html":{},"classes/Model.html":{}}}],["createswagger",{"_index":605,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["createswagger(app",{"_index":659,"title":{},"body":{"miscellaneous/functions.html":{}}}],["criteria",{"_index":430,"title":{},"body":{"classes/CrudService.html":{}}}],["cron",{"_index":317,"title":{},"body":{"injectables/CronService.html":{}}}],["cron('60",{"_index":306,"title":{},"body":{"injectables/CronService.html":{}}}],["cronmodule",{"_index":62,"title":{"modules/CronModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CronModule.html":{},"modules.html":{},"overview.html":{}}}],["cronservice",{"_index":298,"title":{"injectables/CronService.html":{}},"body":{"modules/CronModule.html":{},"injectables/CronService.html":{},"coverage.html":{},"overview.html":{}}}],["crud",{"_index":229,"title":{},"body":{"controllers/CompanyController.html":{}}}],["crudcontroller",{"_index":230,"title":{"classes/CrudController.html":{}},"body":{"controllers/CompanyController.html":{},"classes/CrudController.html":{},"coverage.html":{}}}],["crudservice",{"_index":334,"title":{"classes/CrudService.html":{}},"body":{"classes/CrudController.html":{},"classes/CrudService.html":{},"coverage.html":{}}}],["current",{"_index":552,"title":{},"body":{"interfaces/IPagination.html":{}}}],["database",{"_index":147,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["database.sqlite",{"_index":148,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["date",{"_index":131,"title":{},"body":{"modules/AppModule.html":{},"classes/Base.html":{},"interfaces/IBaseEntityModel.html":{},"classes/Model.html":{},"miscellaneous/variables.html":{}}}],["declarations",{"_index":54,"title":{},"body":{"modules/AppModule.html":{},"modules/CompanyModule.html":{},"modules/CronModule.html":{},"overview.html":{}}}],["decorators",{"_index":10,"title":{},"body":{"controllers/AppController.html":{},"classes/Base.html":{},"classes/Company.html":{},"controllers/CompanyController.html":{},"injectables/CompanyService.html":{},"classes/CreateCompanyDto.html":{},"injectables/CronService.html":{},"classes/CrudController.html":{},"controllers/HealthController.html":{},"classes/PaginationParams.html":{}}}],["deeppartial",{"_index":336,"title":{},"body":{"classes/CrudController.html":{},"classes/CrudService.html":{},"interfaces/ICrudService.html":{}}}],["default",{"_index":312,"title":{},"body":{"injectables/CronService.html":{},"classes/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["default('development",{"_index":120,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["define",{"_index":27,"title":{},"body":{"controllers/AppController.html":{},"controllers/CompanyController.html":{},"controllers/HealthController.html":{}}}],["define,@typescript",{"_index":26,"title":{},"body":{"controllers/AppController.html":{},"controllers/CompanyController.html":{},"controllers/HealthController.html":{}}}],["defined",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Base.html":{},"classes/Company.html":{},"controllers/CompanyController.html":{},"injectables/CompanyService.html":{},"classes/CreateCompanyDto.html":{},"injectables/CronService.html":{},"classes/CrudController.html":{},"classes/CrudService.html":{},"controllers/HealthController.html":{},"interfaces/ICrudService.html":{},"classes/Model.html":{},"classes/PaginationParams.html":{}}}],["delete",{"_index":221,"title":{},"body":{"controllers/CompanyController.html":{},"classes/CrudController.html":{},"classes/CrudService.html":{},"interfaces/ICrudService.html":{}}}],["delete(':id",{"_index":411,"title":{},"body":{"classes/CrudController.html":{}}}],["delete(@param('id",{"_index":412,"title":{},"body":{"classes/CrudController.html":{}}}],["delete(criteria",{"_index":427,"title":{},"body":{"classes/CrudService.html":{}}}],["delete(id",{"_index":350,"title":{},"body":{"classes/CrudController.html":{},"interfaces/ICrudService.html":{}}}],["deleted",{"_index":410,"title":{},"body":{"classes/CrudController.html":{}}}],["deleted'})@apiresponse({status",{"_index":351,"title":{},"body":{"classes/CrudController.html":{}}}],["deletedat",{"_index":178,"title":{},"body":{"classes/Base.html":{},"interfaces/IBaseEntityModel.html":{},"classes/Model.html":{}}}],["deletedatecolumn",{"_index":202,"title":{},"body":{"classes/Base.html":{},"interfaces/IBaseEntityModel.html":{},"classes/Model.html":{}}}],["deleteresult",{"_index":457,"title":{},"body":{"classes/CrudService.html":{},"interfaces/ICrudService.html":{}}}],["dependencies",{"_index":52,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/CompanyModule.html":{},"modules/CronModule.html":{},"dependencies.html":{},"overview.html":{}}}],["desc",{"_index":582,"title":{},"body":{"classes/PaginationParams.html":{},"miscellaneous/enumerations.html":{}}}],["described",{"_index":524,"title":{},"body":{"controllers/HealthController.html":{}}}],["describes",{"_index":559,"title":{},"body":{"classes/PaginationParams.html":{}}}],["description",{"_index":292,"title":{},"body":{"classes/CreateCompanyDto.html":{},"classes/CrudController.html":{},"interfaces/IPagination.html":{},"classes/PaginationParams.html":{},"classes/UpdateCompanyDto.html":{},"index.html":{}}}],["development",{"_index":678,"title":{},"body":{"index.html":{}}}],["disable",{"_index":19,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/CompanyController.html":{},"injectables/CompanyService.html":{},"classes/CrudController.html":{},"classes/CrudService.html":{},"controllers/HealthController.html":{}}}],["display",{"_index":127,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["dns",{"_index":510,"title":{},"body":{"controllers/HealthController.html":{}}}],["dnshealthindicator",{"_index":505,"title":{},"body":{"controllers/HealthController.html":{}}}],["docs",{"_index":514,"title":{},"body":{"controllers/HealthController.html":{}}}],["documentation",{"_index":591,"title":{},"body":{"coverage.html":{}}}],["dotenv",{"_index":627,"title":{},"body":{"dependencies.html":{}}}],["dto",{"_index":238,"title":{},"body":{"controllers/CompanyController.html":{}}}],["e.g",{"_index":432,"title":{},"body":{"classes/CrudService.html":{}}}],["e2e",{"_index":687,"title":{},"body":{"index.html":{}}}],["edited",{"_index":402,"title":{},"body":{"classes/CrudController.html":{}}}],["edited.'})@apiresponse({status",{"_index":370,"title":{},"body":{"classes/CrudController.html":{}}}],["efficient",{"_index":669,"title":{},"body":{"index.html":{}}}],["entities",{"_index":144,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["entity",{"_index":215,"title":{},"body":{"classes/Company.html":{},"classes/CrudController.html":{},"classes/CrudService.html":{},"interfaces/ICrudService.html":{}}}],["entity.id",{"_index":434,"title":{},"body":{"classes/CrudService.html":{}}}],["entitynotfound",{"_index":417,"title":{},"body":{"classes/CrudService.html":{}}}],["enum",{"_index":580,"title":{},"body":{"classes/PaginationParams.html":{}}}],["enumerations",{"_index":655,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["err",{"_index":140,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["error",{"_index":141,"title":{},"body":{"modules/AppModule.html":{},"classes/CrudService.html":{},"interfaces/ITryRequest.html":{},"miscellaneous/variables.html":{}}}],["errorlikeobjectkeys",{"_index":139,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["errors",{"_index":142,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["eslint",{"_index":18,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/CompanyController.html":{},"injectables/CompanyService.html":{},"classes/CrudController.html":{},"classes/CrudService.html":{},"controllers/HealthController.html":{}}}],["eslint/no",{"_index":21,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/CompanyController.html":{},"injectables/CompanyService.html":{},"classes/CrudController.html":{},"classes/CrudService.html":{},"controllers/HealthController.html":{}}}],["example",{"_index":183,"title":{},"body":{"classes/Base.html":{},"classes/CreateCompanyDto.html":{},"interfaces/IBaseEntityModel.html":{},"classes/Model.html":{},"classes/UpdateCompanyDto.html":{}}}],["existing",{"_index":369,"title":{},"body":{"classes/CrudController.html":{}}}],["expand",{"_index":629,"title":{},"body":{"dependencies.html":{}}}],["export",{"_index":38,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Base.html":{},"classes/Company.html":{},"controllers/CompanyController.html":{},"modules/CompanyModule.html":{},"injectables/CompanyService.html":{},"modules/CoreModule.html":{},"classes/CreateCompanyDto.html":{},"modules/CronModule.html":{},"injectables/CronService.html":{},"classes/CrudController.html":{},"classes/CrudService.html":{},"controllers/HealthController.html":{},"interfaces/IBaseEntityModel.html":{},"interfaces/ICrudService.html":{},"interfaces/IPagination.html":{},"interfaces/ITryRequest.html":{},"classes/Model.html":{},"classes/PaginationParams.html":{},"classes/UpdateCompanyDto.html":{}}}],["exports",{"_index":57,"title":{},"body":{"modules/AppModule.html":{},"modules/CompanyModule.html":{},"modules/CronModule.html":{},"overview.html":{}}}],["express",{"_index":619,"title":{},"body":{"dependencies.html":{}}}],["extends",{"_index":173,"title":{},"body":{"classes/Base.html":{},"injectables/CompanyService.html":{},"classes/CreateCompanyDto.html":{},"interfaces/IBaseEntityModel.html":{},"classes/Model.html":{},"classes/UpdateCompanyDto.html":{}}}],["false",{"_index":126,"title":{},"body":{"modules/AppModule.html":{},"classes/CrudService.html":{},"miscellaneous/variables.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Base.html":{},"classes/Company.html":{},"controllers/CompanyController.html":{},"modules/CompanyModule.html":{},"injectables/CompanyService.html":{},"modules/CoreModule.html":{},"classes/CreateCompanyDto.html":{},"modules/CronModule.html":{},"injectables/CronService.html":{},"classes/CrudController.html":{},"classes/CrudService.html":{},"controllers/HealthController.html":{},"interfaces/IBaseEntityModel.html":{},"interfaces/ICrudService.html":{},"interfaces/IPagination.html":{},"interfaces/ITryRequest.html":{},"classes/Model.html":{},"classes/PaginationParams.html":{},"classes/UpdateCompanyDto.html":{},"coverage.html":{}}}],["filter",{"_index":361,"title":{},"body":{"classes/CrudController.html":{},"classes/CrudService.html":{},"interfaces/ICrudService.html":{}}}],["find",{"_index":356,"title":{},"body":{"classes/CrudController.html":{}}}],["findall",{"_index":328,"title":{},"body":{"classes/CrudController.html":{},"classes/CrudService.html":{},"interfaces/ICrudService.html":{}}}],["findall(filter",{"_index":354,"title":{},"body":{"classes/CrudController.html":{},"classes/CrudService.html":{},"interfaces/ICrudService.html":{}}}],["findconditions",{"_index":428,"title":{},"body":{"classes/CrudService.html":{},"interfaces/ICrudService.html":{}}}],["findmanyoptions",{"_index":424,"title":{},"body":{"classes/CrudService.html":{},"interfaces/ICrudService.html":{}}}],["findone",{"_index":329,"title":{},"body":{"classes/CrudController.html":{},"classes/CrudService.html":{},"interfaces/ICrudService.html":{}}}],["findone(@param('id",{"_index":393,"title":{},"body":{"classes/CrudController.html":{}}}],["findone(id",{"_index":362,"title":{},"body":{"classes/CrudController.html":{},"classes/CrudService.html":{},"interfaces/ICrudService.html":{}}}],["findonebyid(id).pipe(map(entity",{"_index":433,"title":{},"body":{"classes/CrudService.html":{}}}],["findoneoptions",{"_index":437,"title":{},"body":{"classes/CrudService.html":{},"interfaces/ICrudService.html":{}}}],["findoneorfail",{"_index":418,"title":{},"body":{"classes/CrudService.html":{}}}],["findoneorfail(id",{"_index":439,"title":{},"body":{"classes/CrudService.html":{}}}],["first",{"_index":527,"title":{},"body":{"controllers/HealthController.html":{}}}],["fixme",{"_index":407,"title":{},"body":{"classes/CrudController.html":{}}}],["forbidden",{"_index":386,"title":{},"body":{"classes/CrudController.html":{}}}],["format",{"_index":182,"title":{},"body":{"classes/Base.html":{},"interfaces/IBaseEntityModel.html":{},"classes/Model.html":{}}}],["found",{"_index":358,"title":{},"body":{"classes/CrudController.html":{},"classes/CrudService.html":{}}}],["found'})@apiresponse({status",{"_index":371,"title":{},"body":{"classes/CrudController.html":{}}}],["found'})@get(':id",{"_index":365,"title":{},"body":{"classes/CrudController.html":{}}}],["found'})@httpcode(httpstatus.accepted)@delete(':id",{"_index":352,"title":{},"body":{"classes/CrudController.html":{}}}],["framework",{"_index":667,"title":{},"body":{"index.html":{}}}],["function",{"_index":529,"title":{},"body":{"controllers/HealthController.html":{},"coverage.html":{}}}],["functions",{"_index":657,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["generic",{"_index":549,"title":{},"body":{"interfaces/IPagination.html":{},"classes/PaginationParams.html":{}}}],["get(':id",{"_index":392,"title":{},"body":{"classes/CrudController.html":{}}}],["get()@apiresponse({status",{"_index":12,"title":{},"body":{"controllers/AppController.html":{}}}],["get()@healthcheck",{"_index":500,"title":{},"body":{"controllers/HealthController.html":{}}}],["gethello",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getmanager",{"_index":268,"title":{},"body":{"injectables/CompanyService.html":{}}}],["getmanager().query('delete",{"_index":273,"title":{},"body":{"injectables/CompanyService.html":{}}}],["getpasswordhash",{"_index":419,"title":{},"body":{"classes/CrudService.html":{}}}],["getpasswordhash(password",{"_index":441,"title":{},"body":{"classes/CrudService.html":{}}}],["getting",{"_index":663,"title":{"index.html":{}},"body":{}}],["graph",{"_index":719,"title":{},"body":{"modules.html":{}}}],["grow",{"_index":694,"title":{},"body":{"index.html":{}}}],["handlecron",{"_index":303,"title":{},"body":{"injectables/CronService.html":{}}}],["handleinterval",{"_index":304,"title":{},"body":{"injectables/CronService.html":{}}}],["handletimeout",{"_index":305,"title":{},"body":{"injectables/CronService.html":{}}}],["hapi/joi",{"_index":101,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["health",{"_index":154,"title":{},"body":{"modules/AppModule.html":{},"controllers/HealthController.html":{}}}],["healthcheck",{"_index":506,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthcheckservice",{"_index":507,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthcontroller",{"_index":67,"title":{"controllers/HealthController.html":{}},"body":{"modules/AppModule.html":{},"controllers/HealthController.html":{},"coverage.html":{}}}],["hello",{"_index":168,"title":{},"body":{"injectables/AppService.html":{}}}],["helmet",{"_index":633,"title":{},"body":{"dependencies.html":{}}}],["here",{"_index":705,"title":{},"body":{"index.html":{}}}],["httpcode",{"_index":374,"title":{},"body":{"classes/CrudController.html":{}}}],["httpcode(httpstatus.accepted",{"_index":403,"title":{},"body":{"classes/CrudController.html":{}}}],["httpcode(httpstatus.created",{"_index":399,"title":{},"body":{"classes/CrudController.html":{}}}],["https://docs.nestjs.com",{"_index":515,"title":{},"body":{"controllers/HealthController.html":{}}}],["https://github.com/microsoft/typescript/issues/21592",{"_index":477,"title":{},"body":{"classes/CrudService.html":{}}}],["https://github.com/typeorm/typeorm/issues/1544",{"_index":408,"title":{},"body":{"classes/CrudController.html":{}}}],["https://nestjs.com",{"_index":712,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":29,"title":{},"body":{"controllers/AppController.html":{},"classes/CrudController.html":{}}}],["httpstatus.bad_request",{"_index":397,"title":{},"body":{"classes/CrudController.html":{}}}],["httpstatus.created",{"_index":395,"title":{},"body":{"classes/CrudController.html":{}}}],["httpstatus.forbidden",{"_index":385,"title":{},"body":{"classes/CrudController.html":{}}}],["httpstatus.no_content",{"_index":409,"title":{},"body":{"classes/CrudController.html":{}}}],["httpstatus.not_found",{"_index":391,"title":{},"body":{"classes/CrudController.html":{}}}],["httpstatus.ok",{"_index":43,"title":{},"body":{"controllers/AppController.html":{},"classes/CrudController.html":{}}}],["httpstatus.unauthorized",{"_index":383,"title":{},"body":{"classes/CrudController.html":{}}}],["ibaseentitymodel",{"_index":175,"title":{"interfaces/IBaseEntityModel.html":{}},"body":{"classes/Base.html":{},"interfaces/IBaseEntityModel.html":{},"classes/Model.html":{},"coverage.html":{}}}],["icrudservice",{"_index":332,"title":{"interfaces/ICrudService.html":{}},"body":{"classes/CrudController.html":{},"classes/CrudService.html":{},"interfaces/ICrudService.html":{},"coverage.html":{}}}],["id",{"_index":179,"title":{},"body":{"classes/Base.html":{},"classes/Company.html":{},"classes/CrudController.html":{},"classes/CrudService.html":{},"interfaces/IBaseEntityModel.html":{},"interfaces/ICrudService.html":{},"classes/Model.html":{}}}],["id'})@apiresponse({status",{"_index":363,"title":{},"body":{"classes/CrudController.html":{}}}],["identifier",{"_index":592,"title":{},"body":{"coverage.html":{}}}],["ignore",{"_index":137,"title":{},"body":{"modules/AppModule.html":{},"classes/CrudService.html":{},"miscellaneous/variables.html":{}}}],["implements",{"_index":156,"title":{},"body":{"modules/AppModule.html":{},"classes/Base.html":{},"controllers/CompanyController.html":{},"classes/CrudService.html":{},"controllers/HealthController.html":{},"interfaces/IBaseEntityModel.html":{},"classes/Model.html":{}}}],["import",{"_index":28,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Base.html":{},"classes/Company.html":{},"controllers/CompanyController.html":{},"modules/CompanyModule.html":{},"injectables/CompanyService.html":{},"modules/CoreModule.html":{},"classes/CreateCompanyDto.html":{},"modules/CronModule.html":{},"injectables/CronService.html":{},"classes/CrudController.html":{},"classes/CrudService.html":{},"controllers/HealthController.html":{},"interfaces/IBaseEntityModel.html":{},"interfaces/ICrudService.html":{},"classes/Model.html":{},"classes/PaginationParams.html":{},"classes/UpdateCompanyDto.html":{}}}],["imports",{"_index":68,"title":{},"body":{"modules/AppModule.html":{},"modules/CompanyModule.html":{},"modules/CoreModule.html":{}}}],["included",{"_index":551,"title":{},"body":{"interfaces/IPagination.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/Base.html":{},"classes/Company.html":{},"controllers/CompanyController.html":{},"injectables/CompanyService.html":{},"classes/CreateCompanyDto.html":{},"injectables/CronService.html":{},"classes/CrudController.html":{},"classes/CrudService.html":{},"controllers/HealthController.html":{},"interfaces/IBaseEntityModel.html":{},"interfaces/ICrudService.html":{},"interfaces/IPagination.html":{},"interfaces/ITryRequest.html":{},"classes/PaginationParams.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Base.html":{},"classes/Company.html":{},"controllers/CompanyController.html":{},"modules/CompanyModule.html":{},"injectables/CompanyService.html":{},"modules/CoreModule.html":{},"classes/CreateCompanyDto.html":{},"modules/CronModule.html":{},"injectables/CronService.html":{},"classes/CrudController.html":{},"classes/CrudService.html":{},"controllers/HealthController.html":{},"interfaces/IBaseEntityModel.html":{},"interfaces/ICrudService.html":{},"interfaces/IPagination.html":{},"interfaces/ITryRequest.html":{},"classes/Model.html":{},"classes/PaginationParams.html":{},"classes/UpdateCompanyDto.html":{}}}],["initialized",{"_index":160,"title":{},"body":{"modules/AppModule.html":{},"controllers/HealthController.html":{}}}],["injectable",{"_index":164,"title":{"injectables/AppService.html":{},"injectables/CompanyService.html":{},"injectables/CronService.html":{}},"body":{"injectables/AppService.html":{},"injectables/CompanyService.html":{},"injectables/CronService.html":{},"coverage.html":{}}}],["injectables",{"_index":165,"title":{},"body":{"injectables/AppService.html":{},"injectables/CompanyService.html":{},"injectables/CronService.html":{},"overview.html":{}}}],["injectrepository",{"_index":267,"title":{},"body":{"injectables/CompanyService.html":{}}}],["injectrepository(company",{"_index":265,"title":{},"body":{"injectables/CompanyService.html":{}}}],["input",{"_index":207,"title":{},"body":{"classes/Base.html":{},"classes/CrudController.html":{},"interfaces/IBaseEntityModel.html":{},"classes/Model.html":{}}}],["installation",{"_index":675,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":677,"title":{},"body":{"index.html":{}}}],["interface",{"_index":204,"title":{"interfaces/IBaseEntityModel.html":{},"interfaces/ICrudService.html":{},"interfaces/IPagination.html":{},"interfaces/ITryRequest.html":{}},"body":{"classes/Base.html":{},"interfaces/IBaseEntityModel.html":{},"interfaces/ICrudService.html":{},"interfaces/IPagination.html":{},"interfaces/ITryRequest.html":{},"classes/Model.html":{},"coverage.html":{}}}],["interfaces",{"_index":540,"title":{},"body":{"interfaces/IBaseEntityModel.html":{},"interfaces/ICrudService.html":{},"interfaces/IPagination.html":{},"interfaces/ITryRequest.html":{},"overview.html":{}}}],["interval",{"_index":318,"title":{},"body":{"injectables/CronService.html":{}}}],["interval(100000",{"_index":308,"title":{},"body":{"injectables/CronService.html":{}}}],["invalid",{"_index":342,"title":{},"body":{"classes/CrudController.html":{}}}],["ipagination",{"_index":377,"title":{"interfaces/IPagination.html":{}},"body":{"classes/CrudController.html":{},"classes/CrudService.html":{},"interfaces/ICrudService.html":{},"interfaces/IPagination.html":{},"coverage.html":{}}}],["isglobal",{"_index":104,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["isint",{"_index":285,"title":{},"body":{"classes/CreateCompanyDto.html":{},"classes/UpdateCompanyDto.html":{}}}],["isnotempty",{"_index":288,"title":{},"body":{"classes/CreateCompanyDto.html":{},"classes/UpdateCompanyDto.html":{}}}],["isoptional",{"_index":290,"title":{},"body":{"classes/CreateCompanyDto.html":{},"classes/PaginationParams.html":{},"classes/UpdateCompanyDto.html":{}}}],["ispositive",{"_index":289,"title":{},"body":{"classes/CreateCompanyDto.html":{},"classes/UpdateCompanyDto.html":{}}}],["isstring",{"_index":286,"title":{},"body":{"classes/CreateCompanyDto.html":{},"classes/UpdateCompanyDto.html":{}}}],["items",{"_index":464,"title":{},"body":{"classes/CrudService.html":{},"interfaces/IPagination.html":{}}}],["itryrequest",{"_index":450,"title":{"interfaces/ITryRequest.html":{}},"body":{"classes/CrudService.html":{},"interfaces/ITryRequest.html":{},"coverage.html":{}}}],["joi",{"_index":100,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["joi.number().default(3000",{"_index":112,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["joi.object",{"_index":110,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["joi.string",{"_index":114,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["join",{"_index":701,"title":{},"body":{"index.html":{}}}],["kamil",{"_index":709,"title":{},"body":{"index.html":{}}}],["keyof",{"_index":589,"title":{},"body":{"classes/PaginationParams.html":{}}}],["legend",{"_index":53,"title":{},"body":{"modules/AppModule.html":{},"modules/CompanyModule.html":{},"modules/CronModule.html":{},"overview.html":{}}}],["level",{"_index":129,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["levelfirst",{"_index":125,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["license",{"_index":715,"title":{},"body":{"index.html":{}}}],["licensed",{"_index":691,"title":{},"body":{"index.html":{}}}],["limit",{"_index":575,"title":{},"body":{"classes/PaginationParams.html":{},"dependencies.html":{}}}],["line",{"_index":274,"title":{},"body":{"injectables/CompanyService.html":{},"classes/CrudController.html":{},"classes/CrudService.html":{}}}],["listing",{"_index":553,"title":{},"body":{"interfaces/IPagination.html":{}}}],["local",{"_index":638,"title":{},"body":{"dependencies.html":{}}}],["log",{"_index":128,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["logged",{"_index":130,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["logger",{"_index":157,"title":{},"body":{"modules/AppModule.html":{},"injectables/CronService.html":{}}}],["logger(cronservice.name",{"_index":315,"title":{},"body":{"injectables/CronService.html":{}}}],["logger.setcontext(appmodule.name",{"_index":158,"title":{},"body":{"modules/AppModule.html":{}}}],["loggermodule",{"_index":93,"title":{},"body":{"modules/AppModule.html":{}}}],["loggermodule.forroot(loggermoduleoptions",{"_index":152,"title":{},"body":{"modules/AppModule.html":{}}}],["loggermoduleoptions",{"_index":121,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["logging",{"_index":150,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["matching",{"_index":47,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Base.html":{},"classes/Company.html":{},"controllers/CompanyController.html":{},"modules/CompanyModule.html":{},"injectables/CompanyService.html":{},"modules/CoreModule.html":{},"classes/CreateCompanyDto.html":{},"modules/CronModule.html":{},"injectables/CronService.html":{},"classes/CrudController.html":{},"classes/CrudService.html":{},"controllers/HealthController.html":{},"interfaces/IBaseEntityModel.html":{},"interfaces/ICrudService.html":{},"interfaces/IPagination.html":{},"interfaces/ITryRequest.html":{},"classes/Model.html":{},"classes/PaginationParams.html":{},"classes/UpdateCompanyDto.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["max",{"_index":578,"title":{},"body":{"classes/PaginationParams.html":{}}}],["max(50",{"_index":585,"title":{},"body":{"classes/PaginationParams.html":{}}}],["maximum",{"_index":572,"title":{},"body":{"classes/PaginationParams.html":{}}}],["member",{"_index":82,"title":{},"body":{"modules/AppModule.html":{},"classes/CrudService.html":{}}}],["mergemap",{"_index":455,"title":{},"body":{"classes/CrudService.html":{}}}],["mergemap((signal",{"_index":495,"title":{},"body":{"classes/CrudService.html":{}}}],["messageformat",{"_index":134,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["metadata",{"_index":643,"title":{},"body":{"dependencies.html":{}}}],["method",{"_index":482,"title":{},"body":{"classes/CrudService.html":{}}}],["methods",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/CompanyController.html":{},"injectables/CompanyService.html":{},"injectables/CronService.html":{},"classes/CrudController.html":{},"classes/CrudService.html":{},"controllers/HealthController.html":{},"interfaces/ICrudService.html":{}}}],["min",{"_index":579,"title":{},"body":{"classes/PaginationParams.html":{}}}],["min(0",{"_index":584,"title":{},"body":{"classes/PaginationParams.html":{}}}],["minimum",{"_index":567,"title":{},"body":{"classes/PaginationParams.html":{}}}],["minlength",{"_index":287,"title":{},"body":{"classes/CreateCompanyDto.html":{},"classes/UpdateCompanyDto.html":{}}}],["minlength(2",{"_index":294,"title":{},"body":{"classes/CreateCompanyDto.html":{},"classes/UpdateCompanyDto.html":{}}}],["miscellaneous",{"_index":654,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":690,"title":{},"body":{"index.html":{}}}],["mode",{"_index":682,"title":{},"body":{"index.html":{}}}],["model",{"_index":174,"title":{"classes/Model.html":{}},"body":{"classes/Base.html":{},"controllers/CompanyController.html":{},"interfaces/IBaseEntityModel.html":{},"classes/Model.html":{},"coverage.html":{}}}],["module",{"_index":49,"title":{"modules/AppModule.html":{},"modules/CompanyModule.html":{},"modules/CoreModule.html":{},"modules/CronModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CompanyModule.html":{},"modules/CoreModule.html":{},"modules/CronModule.html":{},"overview.html":{}}}],["modules",{"_index":51,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/CompanyModule.html":{},"modules/CoreModule.html":{},"modules/CronModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":704,"title":{},"body":{"index.html":{}}}],["msg",{"_index":135,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["myśliwiec",{"_index":710,"title":{},"body":{"index.html":{}}}],["name",{"_index":73,"title":{},"body":{"modules/AppModule.html":{},"classes/Company.html":{},"injectables/CompanyService.html":{},"classes/CreateCompanyDto.html":{},"classes/CrudController.html":{},"classes/CrudService.html":{},"controllers/HealthController.html":{},"interfaces/ICrudService.html":{},"classes/Model.html":{},"classes/UpdateCompanyDto.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["nest",{"_index":532,"title":{},"body":{"controllers/HealthController.html":{},"index.html":{}}}],["nestframework",{"_index":714,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":94,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/common",{"_index":31,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/CompanyController.html":{},"modules/CompanyModule.html":{},"injectables/CompanyService.html":{},"modules/CoreModule.html":{},"modules/CronModule.html":{},"injectables/CronService.html":{},"classes/CrudController.html":{},"classes/CrudService.html":{},"controllers/HealthController.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":85,"title":{},"body":{"modules/AppModule.html":{},"controllers/HealthController.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":614,"title":{},"body":{"dependencies.html":{}}}],["nestjs/mapped",{"_index":283,"title":{},"body":{"classes/CreateCompanyDto.html":{},"classes/UpdateCompanyDto.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":616,"title":{},"body":{"dependencies.html":{}}}],["nestjs/platform",{"_index":618,"title":{},"body":{"dependencies.html":{}}}],["nestjs/schedule",{"_index":87,"title":{},"body":{"modules/AppModule.html":{},"injectables/CronService.html":{},"dependencies.html":{}}}],["nestjs/swagger",{"_index":34,"title":{},"body":{"controllers/AppController.html":{},"classes/Base.html":{},"controllers/CompanyController.html":{},"classes/CreateCompanyDto.html":{},"classes/CrudController.html":{},"controllers/HealthController.html":{},"interfaces/IBaseEntityModel.html":{},"classes/Model.html":{},"classes/PaginationParams.html":{},"classes/UpdateCompanyDto.html":{},"dependencies.html":{}}}],["nestjs/terminus",{"_index":89,"title":{},"body":{"modules/AppModule.html":{},"controllers/HealthController.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":91,"title":{},"body":{"modules/AppModule.html":{},"modules/CompanyModule.html":{},"injectables/CompanyService.html":{},"dependencies.html":{}}}],["nestjsx/crud",{"_index":231,"title":{},"body":{"controllers/CompanyController.html":{},"injectables/CompanyService.html":{},"dependencies.html":{}}}],["new",{"_index":314,"title":{},"body":{"injectables/CronService.html":{},"classes/CrudController.html":{},"classes/CrudService.html":{},"coverage.html":{}}}],["next",{"_index":388,"title":{},"body":{"classes/CrudController.html":{},"classes/CrudService.html":{}}}],["node.js",{"_index":666,"title":{},"body":{"index.html":{}}}],["node_env",{"_index":113,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["notfoundexception",{"_index":447,"title":{},"body":{"classes/CrudService.html":{}}}],["notfoundexception(`the",{"_index":472,"title":{},"body":{"classes/CrudService.html":{}}}],["npm",{"_index":676,"title":{},"body":{"index.html":{}}}],["null",{"_index":188,"title":{},"body":{"classes/Base.html":{},"interfaces/IBaseEntityModel.html":{},"classes/Model.html":{}}}],["number",{"_index":191,"title":{},"body":{"classes/Base.html":{},"classes/Company.html":{},"classes/CrudService.html":{},"interfaces/IBaseEntityModel.html":{},"interfaces/ICrudService.html":{},"interfaces/IPagination.html":{},"classes/Model.html":{},"classes/PaginationParams.html":{}}}],["obj",{"_index":474,"title":{},"body":{"classes/CrudService.html":{}}}],["object",{"_index":725,"title":{},"body":{"miscellaneous/variables.html":{}}}],["object.assign(this",{"_index":208,"title":{},"body":{"classes/Base.html":{},"interfaces/IBaseEntityModel.html":{},"classes/Model.html":{}}}],["of(signal",{"_index":496,"title":{},"body":{"classes/CrudService.html":{}}}],["offset",{"_index":570,"title":{},"body":{"classes/PaginationParams.html":{}}}],["onapplicationshutdown",{"_index":69,"title":{},"body":{"modules/AppModule.html":{},"controllers/HealthController.html":{}}}],["onapplicationshutdown(signal",{"_index":70,"title":{},"body":{"modules/AppModule.html":{},"controllers/HealthController.html":{}}}],["once",{"_index":325,"title":{},"body":{"injectables/CronService.html":{}}}],["one",{"_index":364,"title":{},"body":{"classes/CrudController.html":{}}}],["onmoduledestroy",{"_index":521,"title":{},"body":{"controllers/HealthController.html":{}}}],["onmoduleinit",{"_index":30,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/HealthController.html":{}}}],["open",{"_index":692,"title":{},"body":{"index.html":{}}}],["optional",{"_index":75,"title":{},"body":{"modules/AppModule.html":{},"classes/Base.html":{},"injectables/CompanyService.html":{},"classes/CrudController.html":{},"classes/CrudService.html":{},"controllers/HealthController.html":{},"interfaces/IBaseEntityModel.html":{},"interfaces/ICrudService.html":{},"interfaces/ITryRequest.html":{},"classes/Model.html":{},"classes/PaginationParams.html":{},"miscellaneous/functions.html":{}}}],["options",{"_index":337,"title":{},"body":{"classes/CrudController.html":{},"classes/CrudService.html":{},"interfaces/ICrudService.html":{}}}],["order",{"_index":560,"title":{},"body":{"classes/PaginationParams.html":{}}}],["orderby",{"_index":565,"title":{},"body":{"classes/PaginationParams.html":{}}}],["ordertype",{"_index":581,"title":{},"body":{"classes/PaginationParams.html":{},"miscellaneous/enumerations.html":{}}}],["out",{"_index":65,"title":{},"body":{"modules/AppModule.html":{},"modules/CompanyModule.html":{},"modules/CronModule.html":{},"overview.html":{}}}],["overview",{"_index":720,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["p",{"_index":588,"title":{},"body":{"classes/PaginationParams.html":{}}}],["package",{"_index":610,"title":{"dependencies.html":{}},"body":{}}],["pagination",{"_index":550,"title":{},"body":{"interfaces/IPagination.html":{},"classes/PaginationParams.html":{}}}],["paginationparams",{"_index":355,"title":{"classes/PaginationParams.html":{}},"body":{"classes/CrudController.html":{},"classes/PaginationParams.html":{},"coverage.html":{}}}],["param",{"_index":227,"title":{},"body":{"controllers/CompanyController.html":{},"classes/CrudController.html":{},"classes/CrudService.html":{}}}],["param('id",{"_index":405,"title":{},"body":{"classes/CrudController.html":{}}}],["parameter",{"_index":528,"title":{},"body":{"controllers/HealthController.html":{}}}],["parameters",{"_index":72,"title":{},"body":{"modules/AppModule.html":{},"injectables/CompanyService.html":{},"classes/CrudController.html":{},"classes/CrudService.html":{},"controllers/HealthController.html":{},"interfaces/ICrudService.html":{},"classes/Model.html":{},"miscellaneous/functions.html":{}}}],["params",{"_index":379,"title":{},"body":{"classes/CrudController.html":{},"classes/PaginationParams.html":{}}}],["params.ts",{"_index":558,"title":{},"body":{"classes/PaginationParams.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["params.ts:23",{"_index":574,"title":{},"body":{"classes/PaginationParams.html":{}}}],["params.ts:32",{"_index":569,"title":{},"body":{"classes/PaginationParams.html":{}}}],["params.ts:39",{"_index":564,"title":{},"body":{"classes/PaginationParams.html":{}}}],["parseint(val",{"_index":587,"title":{},"body":{"classes/PaginationParams.html":{}}}],["partialentity",{"_index":444,"title":{},"body":{"classes/CrudService.html":{}}}],["partialentity.hash",{"_index":488,"title":{},"body":{"classes/CrudService.html":{}}}],["partialentity?.hash",{"_index":487,"title":{},"body":{"classes/CrudService.html":{}}}],["partialtype",{"_index":282,"title":{},"body":{"classes/CreateCompanyDto.html":{},"classes/UpdateCompanyDto.html":{}}}],["partialtype(createcompanydto",{"_index":295,"title":{},"body":{"classes/CreateCompanyDto.html":{},"classes/UpdateCompanyDto.html":{}}}],["passport",{"_index":637,"title":{},"body":{"dependencies.html":{}}}],["password",{"_index":443,"title":{},"body":{"classes/CrudService.html":{}}}],["path",{"_index":245,"title":{},"body":{"controllers/CompanyController.html":{}}}],["pid",{"_index":136,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["pid,hostname",{"_index":138,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["pino",{"_index":95,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["pinohttp",{"_index":122,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["pinologger",{"_index":92,"title":{},"body":{"modules/AppModule.html":{}}}],["please",{"_index":702,"title":{},"body":{"index.html":{}}}],["port",{"_index":111,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["post",{"_index":224,"title":{},"body":{"controllers/CompanyController.html":{},"classes/CrudController.html":{}}}],["post('/clear",{"_index":250,"title":{},"body":{"controllers/CompanyController.html":{}}}],["prefix",{"_index":498,"title":{},"body":{"controllers/HealthController.html":{}}}],["pretty",{"_index":640,"title":{},"body":{"dependencies.html":{}}}],["prettyprint",{"_index":123,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["primarygeneratedcolumn",{"_index":199,"title":{},"body":{"classes/Base.html":{},"classes/Company.html":{},"interfaces/IBaseEntityModel.html":{},"classes/Model.html":{}}}],["private",{"_index":302,"title":{},"body":{"injectables/CronService.html":{},"controllers/HealthController.html":{}}}],["production",{"_index":117,"title":{},"body":{"modules/AppModule.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["progressive",{"_index":665,"title":{},"body":{"index.html":{}}}],["project",{"_index":693,"title":{},"body":{"index.html":{}}}],["promise",{"_index":349,"title":{},"body":{"classes/CrudController.html":{},"classes/CrudService.html":{},"controllers/HealthController.html":{},"interfaces/ICrudService.html":{}}}],["properties",{"_index":176,"title":{},"body":{"classes/Base.html":{},"classes/Company.html":{},"injectables/CompanyService.html":{},"classes/CreateCompanyDto.html":{},"injectables/CronService.html":{},"classes/CrudService.html":{},"interfaces/IBaseEntityModel.html":{},"interfaces/IPagination.html":{},"interfaces/ITryRequest.html":{},"classes/PaginationParams.html":{}}}],["protected",{"_index":330,"title":{},"body":{"classes/CrudController.html":{},"classes/CrudService.html":{}}}],["providers",{"_index":56,"title":{},"body":{"modules/AppModule.html":{},"modules/CompanyModule.html":{},"modules/CoreModule.html":{},"modules/CronModule.html":{},"overview.html":{}}}],["provision",{"_index":119,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["public",{"_index":243,"title":{},"body":{"controllers/CompanyController.html":{},"injectables/CompanyService.html":{}}}],["put",{"_index":226,"title":{},"body":{"controllers/CompanyController.html":{},"classes/CrudController.html":{}}}],["put(':id",{"_index":404,"title":{},"body":{"classes/CrudController.html":{}}}],["querydeeppartialentity",{"_index":368,"title":{},"body":{"classes/CrudController.html":{},"classes/CrudService.html":{},"interfaces/ICrudService.html":{}}}],["rate",{"_index":631,"title":{},"body":{"dependencies.html":{}}}],["read",{"_index":703,"title":{},"body":{"index.html":{}}}],["readmewhy",{"_index":476,"title":{},"body":{"classes/CrudService.html":{}}}],["readonly",{"_index":41,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/Base.html":{},"classes/CreateCompanyDto.html":{},"injectables/CronService.html":{},"classes/CrudController.html":{},"classes/CrudService.html":{},"interfaces/IBaseEntityModel.html":{},"interfaces/IPagination.html":{},"classes/Model.html":{},"classes/PaginationParams.html":{},"classes/UpdateCompanyDto.html":{}}}],["reassign",{"_index":490,"title":{},"body":{"classes/CrudService.html":{}}}],["receives",{"_index":517,"title":{},"body":{"controllers/HealthController.html":{}}}],["record",{"_index":339,"title":{},"body":{"classes/CrudController.html":{},"classes/CrudService.html":{},"interfaces/ITryRequest.html":{}}}],["record'})@apiresponse({status",{"_index":338,"title":{},"body":{"classes/CrudController.html":{}}}],["records",{"_index":387,"title":{},"body":{"classes/CrudController.html":{}}}],["records'})@get",{"_index":359,"title":{},"body":{"classes/CrudController.html":{}}}],["reflect",{"_index":642,"title":{},"body":{"dependencies.html":{}}}],["registered",{"_index":520,"title":{},"body":{"controllers/HealthController.html":{}}}],["rejected",{"_index":536,"title":{},"body":{"controllers/HealthController.html":{}}}],["repo",{"_index":260,"title":{},"body":{"injectables/CompanyService.html":{}}}],["repository",{"_index":421,"title":{},"body":{"classes/CrudService.html":{},"index.html":{}}}],["request",{"_index":452,"title":{},"body":{"classes/CrudService.html":{},"dependencies.html":{}}}],["request.ts",{"_index":555,"title":{},"body":{"interfaces/ITryRequest.html":{},"coverage.html":{}}}],["requested",{"_index":473,"title":{},"body":{"classes/CrudService.html":{}}}],["required",{"_index":115,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["reset",{"_index":64,"title":{},"body":{"modules/AppModule.html":{},"modules/CompanyModule.html":{},"modules/CronModule.html":{},"overview.html":{}}}],["resolved",{"_index":535,"title":{},"body":{"controllers/HealthController.html":{}}}],["response",{"_index":343,"title":{},"body":{"classes/CrudController.html":{}}}],["result",{"_index":46,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Base.html":{},"classes/Company.html":{},"controllers/CompanyController.html":{},"modules/CompanyModule.html":{},"injectables/CompanyService.html":{},"modules/CoreModule.html":{},"classes/CreateCompanyDto.html":{},"modules/CronModule.html":{},"injectables/CronService.html":{},"classes/CrudController.html":{},"classes/CrudService.html":{},"controllers/HealthController.html":{},"interfaces/IBaseEntityModel.html":{},"interfaces/ICrudService.html":{},"interfaces/IPagination.html":{},"interfaces/ITryRequest.html":{},"classes/Model.html":{},"classes/PaginationParams.html":{},"classes/UpdateCompanyDto.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["results",{"_index":48,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Base.html":{},"classes/Company.html":{},"controllers/CompanyController.html":{},"modules/CompanyModule.html":{},"injectables/CompanyService.html":{},"modules/CoreModule.html":{},"classes/CreateCompanyDto.html":{},"modules/CronModule.html":{},"injectables/CronService.html":{},"classes/CrudController.html":{},"classes/CrudService.html":{},"controllers/HealthController.html":{},"interfaces/IBaseEntityModel.html":{},"interfaces/ICrudService.html":{},"interfaces/IPagination.html":{},"interfaces/ITryRequest.html":{},"classes/Model.html":{},"classes/PaginationParams.html":{},"classes/UpdateCompanyDto.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":44,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/CompanyController.html":{},"injectables/CompanyService.html":{},"classes/CrudController.html":{},"classes/CrudService.html":{},"controllers/HealthController.html":{}}}],["returns",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/CompanyController.html":{},"injectables/CompanyService.html":{},"injectables/CronService.html":{},"classes/CrudController.html":{},"classes/CrudService.html":{},"controllers/HealthController.html":{},"interfaces/ICrudService.html":{}}}],["rimraf",{"_index":645,"title":{},"body":{"dependencies.html":{}}}],["run",{"_index":679,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":454,"title":{},"body":{"classes/CrudService.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":456,"title":{},"body":{"classes/CrudService.html":{}}}],["saltrounds",{"_index":415,"title":{},"body":{"classes/CrudService.html":{}}}],["scalable",{"_index":670,"title":{},"body":{"index.html":{}}}],["schedulemodule",{"_index":86,"title":{},"body":{"modules/AppModule.html":{}}}],["schedulemodule.forroot",{"_index":153,"title":{},"body":{"modules/AppModule.html":{}}}],["second",{"_index":321,"title":{},"body":{"injectables/CronService.html":{}}}],["seconds",{"_index":324,"title":{},"body":{"injectables/CronService.html":{}}}],["sequence",{"_index":523,"title":{},"body":{"controllers/HealthController.html":{}}}],["server",{"_index":671,"title":{},"body":{"index.html":{}}}],["service",{"_index":248,"title":{},"body":{"controllers/CompanyController.html":{},"classes/CrudService.html":{}}}],["setupapp",{"_index":606,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["setupapp(app",{"_index":661,"title":{},"body":{"miscellaneous/functions.html":{}}}],["shutdown",{"_index":163,"title":{},"body":{"modules/AppModule.html":{},"controllers/HealthController.html":{}}}],["side",{"_index":672,"title":{},"body":{"index.html":{}}}],["signal",{"_index":76,"title":{},"body":{"modules/AppModule.html":{},"classes/CrudService.html":{},"controllers/HealthController.html":{}}}],["skip",{"_index":561,"title":{},"body":{"classes/PaginationParams.html":{}}}],["somehow",{"_index":485,"title":{},"body":{"classes/CrudService.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Base.html":{},"classes/Company.html":{},"controllers/CompanyController.html":{},"modules/CompanyModule.html":{},"injectables/CompanyService.html":{},"modules/CoreModule.html":{},"classes/CreateCompanyDto.html":{},"modules/CronModule.html":{},"injectables/CronService.html":{},"classes/CrudController.html":{},"classes/CrudService.html":{},"controllers/HealthController.html":{},"interfaces/IBaseEntityModel.html":{},"interfaces/ICrudService.html":{},"interfaces/IPagination.html":{},"interfaces/ITryRequest.html":{},"classes/Model.html":{},"classes/PaginationParams.html":{},"classes/UpdateCompanyDto.html":{},"index.html":{}}}],["sponsors",{"_index":696,"title":{},"body":{"index.html":{}}}],["sqlite",{"_index":146,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["sqlite3",{"_index":648,"title":{},"body":{"dependencies.html":{}}}],["src/.../app.module.ts",{"_index":724,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":658,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../pagination",{"_index":656,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/app.controller",{"_index":96,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:14",{"_index":15,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":66,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app.module.ts:72",{"_index":79,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.module.ts:76",{"_index":71,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service",{"_index":36,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":166,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":167,"title":{},"body":{"injectables/AppService.html":{}}}],["src/base/core.module.ts",{"_index":277,"title":{},"body":{"modules/CoreModule.html":{}}}],["src/base/crud/crud.controller.ts",{"_index":327,"title":{},"body":{"classes/CrudController.html":{},"coverage.html":{}}}],["src/base/crud/crud.controller.ts:103",{"_index":353,"title":{},"body":{"classes/CrudController.html":{}}}],["src/base/crud/crud.controller.ts:24",{"_index":333,"title":{},"body":{"classes/CrudController.html":{}}}],["src/base/crud/crud.controller.ts:33",{"_index":360,"title":{},"body":{"classes/CrudController.html":{}}}],["src/base/crud/crud.controller.ts:48",{"_index":366,"title":{},"body":{"classes/CrudController.html":{}}}],["src/base/crud/crud.controller.ts:64",{"_index":348,"title":{},"body":{"classes/CrudController.html":{}}}],["src/base/crud/crud.controller.ts:84",{"_index":373,"title":{},"body":{"classes/CrudController.html":{}}}],["src/base/crud/crud.service.ts",{"_index":414,"title":{},"body":{"classes/CrudService.html":{},"coverage.html":{}}}],["src/base/crud/crud.service.ts:102",{"_index":429,"title":{},"body":{"classes/CrudService.html":{}}}],["src/base/crud/crud.service.ts:116",{"_index":431,"title":{},"body":{"classes/CrudService.html":{}}}],["src/base/crud/crud.service.ts:24",{"_index":422,"title":{},"body":{"classes/CrudService.html":{}}}],["src/base/crud/crud.service.ts:30",{"_index":425,"title":{},"body":{"classes/CrudService.html":{}}}],["src/base/crud/crud.service.ts:34",{"_index":436,"title":{},"body":{"classes/CrudService.html":{}}}],["src/base/crud/crud.service.ts:41",{"_index":440,"title":{},"body":{"classes/CrudService.html":{}}}],["src/base/crud/crud.service.ts:54",{"_index":438,"title":{},"body":{"classes/CrudService.html":{}}}],["src/base/crud/crud.service.ts:65",{"_index":426,"title":{},"body":{"classes/CrudService.html":{}}}],["src/base/crud/crud.service.ts:76",{"_index":442,"title":{},"body":{"classes/CrudService.html":{}}}],["src/base/crud/crud.service.ts:81",{"_index":445,"title":{},"body":{"classes/CrudService.html":{}}}],["src/base/crud/icrud.service",{"_index":376,"title":{},"body":{"classes/CrudController.html":{},"classes/CrudService.html":{}}}],["src/base/crud/icrud.service.ts",{"_index":541,"title":{},"body":{"interfaces/ICrudService.html":{},"coverage.html":{}}}],["src/base/crud/icrud.service.ts:14",{"_index":542,"title":{},"body":{"interfaces/ICrudService.html":{}}}],["src/base/crud/icrud.service.ts:16",{"_index":545,"title":{},"body":{"interfaces/ICrudService.html":{}}}],["src/base/crud/icrud.service.ts:18",{"_index":546,"title":{},"body":{"interfaces/ICrudService.html":{}}}],["src/base/crud/icrud.service.ts:23",{"_index":543,"title":{},"body":{"interfaces/ICrudService.html":{}}}],["src/base/crud/icrud.service.ts:25",{"_index":547,"title":{},"body":{"interfaces/ICrudService.html":{}}}],["src/base/crud/icrud.service.ts:31",{"_index":544,"title":{},"body":{"interfaces/ICrudService.html":{}}}],["src/base/crud/pagination",{"_index":378,"title":{},"body":{"classes/CrudController.html":{},"classes/CrudService.html":{},"interfaces/ICrudService.html":{},"classes/PaginationParams.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/base/crud/pagination.ts",{"_index":548,"title":{},"body":{"interfaces/IPagination.html":{},"coverage.html":{}}}],["src/base/crud/try",{"_index":451,"title":{},"body":{"classes/CrudService.html":{},"interfaces/ITryRequest.html":{},"coverage.html":{}}}],["src/base/entities/base",{"_index":380,"title":{},"body":{"classes/CrudController.html":{},"classes/CrudService.html":{}}}],["src/base/entities/base.ts",{"_index":172,"title":{},"body":{"classes/Base.html":{},"interfaces/IBaseEntityModel.html":{},"classes/Model.html":{},"coverage.html":{}}}],["src/base/entities/base.ts:19",{"_index":557,"title":{},"body":{"classes/Model.html":{}}}],["src/base/entities/base.ts:30",{"_index":194,"title":{},"body":{"classes/Base.html":{}}}],["src/base/entities/base.ts:38",{"_index":187,"title":{},"body":{"classes/Base.html":{}}}],["src/base/entities/base.ts:46",{"_index":196,"title":{},"body":{"classes/Base.html":{}}}],["src/base/entities/base.ts:54",{"_index":190,"title":{},"body":{"classes/Base.html":{}}}],["src/cron/cron.module",{"_index":97,"title":{},"body":{"modules/AppModule.html":{}}}],["src/cron/cron.module.ts",{"_index":299,"title":{},"body":{"modules/CronModule.html":{}}}],["src/cron/cron.service",{"_index":300,"title":{},"body":{"modules/CronModule.html":{}}}],["src/cron/cron.service.ts",{"_index":301,"title":{},"body":{"injectables/CronService.html":{},"coverage.html":{}}}],["src/cron/cron.service.ts:14",{"_index":309,"title":{},"body":{"injectables/CronService.html":{}}}],["src/cron/cron.service.ts:19",{"_index":311,"title":{},"body":{"injectables/CronService.html":{}}}],["src/cron/cron.service.ts:6",{"_index":316,"title":{},"body":{"injectables/CronService.html":{}}}],["src/cron/cron.service.ts:9",{"_index":307,"title":{},"body":{"injectables/CronService.html":{}}}],["src/health/health.controller",{"_index":98,"title":{},"body":{"modules/AppModule.html":{}}}],["src/health/health.controller.ts",{"_index":497,"title":{},"body":{"controllers/HealthController.html":{},"coverage.html":{}}}],["src/health/health.controller.ts:18",{"_index":501,"title":{},"body":{"controllers/HealthController.html":{}}}],["src/health/health.controller.ts:32",{"_index":503,"title":{},"body":{"controllers/HealthController.html":{}}}],["src/health/health.controller.ts:38",{"_index":502,"title":{},"body":{"controllers/HealthController.html":{}}}],["src/main.ts",{"_index":604,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/modules/company/company.controller",{"_index":256,"title":{},"body":{"modules/CompanyModule.html":{}}}],["src/modules/company/company.controller.ts",{"_index":217,"title":{},"body":{"controllers/CompanyController.html":{},"coverage.html":{}}}],["src/modules/company/company.controller.ts:31",{"_index":223,"title":{},"body":{"controllers/CompanyController.html":{}}}],["src/modules/company/company.module",{"_index":99,"title":{},"body":{"modules/AppModule.html":{}}}],["src/modules/company/company.module.ts",{"_index":255,"title":{},"body":{"modules/CompanyModule.html":{}}}],["src/modules/company/company.service",{"_index":233,"title":{},"body":{"controllers/CompanyController.html":{},"modules/CompanyModule.html":{}}}],["src/modules/company/company.service.ts",{"_index":258,"title":{},"body":{"injectables/CompanyService.html":{},"coverage.html":{}}}],["src/modules/company/company.service.ts:10",{"_index":263,"title":{},"body":{"injectables/CompanyService.html":{}}}],["src/modules/company/company.service.ts:11",{"_index":266,"title":{},"body":{"injectables/CompanyService.html":{}}}],["src/modules/company/company.service.ts:15",{"_index":264,"title":{},"body":{"injectables/CompanyService.html":{}}}],["src/modules/company/data/company.dto",{"_index":236,"title":{},"body":{"controllers/CompanyController.html":{}}}],["src/modules/company/data/company.dto.ts",{"_index":278,"title":{},"body":{"classes/CreateCompanyDto.html":{},"classes/UpdateCompanyDto.html":{},"coverage.html":{}}}],["src/modules/company/data/company.dto.ts:19",{"_index":281,"title":{},"body":{"classes/CreateCompanyDto.html":{}}}],["src/modules/company/data/company.entity",{"_index":237,"title":{},"body":{"controllers/CompanyController.html":{},"modules/CompanyModule.html":{},"injectables/CompanyService.html":{}}}],["src/modules/company/data/company.entity.ts",{"_index":211,"title":{},"body":{"classes/Company.html":{},"coverage.html":{}}}],["src/modules/company/data/company.entity.ts:5",{"_index":212,"title":{},"body":{"classes/Company.html":{}}}],["src/modules/company/data/company.entity.ts:7",{"_index":214,"title":{},"body":{"classes/Company.html":{}}}],["start",{"_index":680,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":683,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":684,"title":{},"body":{"index.html":{}}}],["started",{"_index":664,"title":{"index.html":{}},"body":{}}],["starter",{"_index":674,"title":{},"body":{"index.html":{}}}],["statements",{"_index":593,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":244,"title":{},"body":{"controllers/CompanyController.html":{}}}],["status",{"_index":42,"title":{},"body":{"controllers/AppController.html":{},"classes/CrudController.html":{}}}],["stay",{"_index":706,"title":{},"body":{"index.html":{}}}],["stream",{"_index":435,"title":{},"body":{"classes/CrudService.html":{}}}],["stream$.pipe",{"_index":494,"title":{},"body":{"classes/CrudService.html":{}}}],["string",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Base.html":{},"classes/Company.html":{},"classes/CreateCompanyDto.html":{},"classes/CrudController.html":{},"classes/CrudService.html":{},"controllers/HealthController.html":{},"interfaces/IBaseEntityModel.html":{},"interfaces/ICrudService.html":{},"classes/Model.html":{},"classes/PaginationParams.html":{},"classes/UpdateCompanyDto.html":{}}}],["string})@primarygeneratedcolumn",{"_index":193,"title":{},"body":{"classes/Base.html":{}}}],["success",{"_index":468,"title":{},"body":{"classes/CrudService.html":{},"interfaces/ITryRequest.html":{}}}],["successfully",{"_index":340,"title":{},"body":{"classes/CrudController.html":{}}}],["summary",{"_index":249,"title":{},"body":{"controllers/CompanyController.html":{},"classes/CrudController.html":{}}}],["super(repo",{"_index":270,"title":{},"body":{"injectables/CompanyService.html":{}}}],["support",{"_index":697,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":717,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":650,"title":{},"body":{"dependencies.html":{}}}],["synchronize",{"_index":149,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["t",{"_index":390,"title":{},"body":{"classes/CrudController.html":{},"interfaces/IPagination.html":{},"classes/PaginationParams.html":{}}}],["table",{"_index":609,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":608,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":562,"title":{},"body":{"classes/PaginationParams.html":{}}}],["termination",{"_index":518,"title":{},"body":{"controllers/HealthController.html":{}}}],["terminusmodule",{"_index":88,"title":{},"body":{"modules/AppModule.html":{}}}],["test",{"_index":118,"title":{},"body":{"modules/AppModule.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["test:covsupport",{"_index":689,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":688,"title":{},"body":{"index.html":{}}}],["tests",{"_index":686,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":695,"title":{},"body":{"index.html":{}}}],["this.appservice.gethello",{"_index":45,"title":{},"body":{"controllers/AppController.html":{}}}],["this.config.get('node_env",{"_index":538,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.crudservice.create(entity",{"_index":401,"title":{},"body":{"classes/CrudController.html":{}}}],["this.crudservice.delete(id",{"_index":413,"title":{},"body":{"classes/CrudController.html":{}}}],["this.crudservice.findall(filter",{"_index":389,"title":{},"body":{"classes/CrudController.html":{}}}],["this.crudservice.findone(id",{"_index":394,"title":{},"body":{"classes/CrudController.html":{}}}],["this.crudservice.update(id",{"_index":406,"title":{},"body":{"classes/CrudController.html":{}}}],["this.dns.pingcheck('nestjs",{"_index":513,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.getpasswordhash(partialentity.hash",{"_index":489,"title":{},"body":{"classes/CrudService.html":{}}}],["this.health.check",{"_index":512,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.logger.debug('called",{"_index":320,"title":{},"body":{"injectables/CronService.html":{}}}],["this.logger.fatal",{"_index":161,"title":{},"body":{"modules/AppModule.html":{}}}],["this.logger.info(`moduleinit",{"_index":159,"title":{},"body":{"modules/AppModule.html":{}}}],["this.repository.count(filter",{"_index":462,"title":{},"body":{"classes/CrudService.html":{}}}],["this.repository.create(entity",{"_index":475,"title":{},"body":{"classes/CrudService.html":{}}}],["this.repository.delete(criteria",{"_index":492,"title":{},"body":{"classes/CrudService.html":{}}}],["this.repository.find(filter",{"_index":465,"title":{},"body":{"classes/CrudService.html":{}}}],["this.repository.findone(id",{"_index":470,"title":{},"body":{"classes/CrudService.html":{}}}],["this.repository.findoneorfail(id",{"_index":467,"title":{},"body":{"classes/CrudService.html":{}}}],["this.repository.save(obj",{"_index":478,"title":{},"body":{"classes/CrudService.html":{}}}],["this.repository.update(id",{"_index":491,"title":{},"body":{"classes/CrudService.html":{}}}],["this.saltrounds",{"_index":460,"title":{},"body":{"classes/CrudService.html":{}}}],["this.service.clear",{"_index":251,"title":{},"body":{"controllers/CompanyController.html":{}}}],["throw",{"_index":471,"title":{},"body":{"classes/CrudService.html":{}}}],["throwerror",{"_index":453,"title":{},"body":{"classes/CrudService.html":{}}}],["time",{"_index":132,"title":{},"body":{"modules/AppModule.html":{},"classes/Base.html":{},"interfaces/IBaseEntityModel.html":{},"classes/Model.html":{},"miscellaneous/variables.html":{}}}],["timeout",{"_index":319,"title":{},"body":{"injectables/CronService.html":{}}}],["timeout(50000",{"_index":310,"title":{},"body":{"injectables/CronService.html":{}}}],["total",{"_index":463,"title":{},"body":{"classes/CrudService.html":{},"interfaces/IPagination.html":{}}}],["touch",{"_index":707,"title":{},"body":{"index.html":{}}}],["transform",{"_index":576,"title":{},"body":{"classes/PaginationParams.html":{}}}],["transform((val",{"_index":586,"title":{},"body":{"classes/PaginationParams.html":{}}}],["transformer",{"_index":577,"title":{},"body":{"classes/PaginationParams.html":{},"dependencies.html":{}}}],["translatetime",{"_index":133,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["true",{"_index":105,"title":{},"body":{"modules/AppModule.html":{},"classes/CrudService.html":{},"miscellaneous/variables.html":{}}}],["try",{"_index":466,"title":{},"body":{"classes/CrudService.html":{}}}],["ts",{"_index":486,"title":{},"body":{"classes/CrudService.html":{}}}],["twitter",{"_index":713,"title":{},"body":{"index.html":{}}}],["type",{"_index":74,"title":{},"body":{"modules/AppModule.html":{},"classes/Base.html":{},"classes/Company.html":{},"controllers/CompanyController.html":{},"classes/CreateCompanyDto.html":{},"classes/CrudController.html":{},"classes/CrudService.html":{},"controllers/HealthController.html":{},"interfaces/IBaseEntityModel.html":{},"interfaces/ICrudService.html":{},"interfaces/IPagination.html":{},"interfaces/ITryRequest.html":{},"classes/Model.html":{},"classes/PaginationParams.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["typeorm",{"_index":203,"title":{},"body":{"classes/Base.html":{},"classes/Company.html":{},"injectables/CompanyService.html":{},"classes/CrudController.html":{},"classes/CrudService.html":{},"interfaces/IBaseEntityModel.html":{},"interfaces/ICrudService.html":{},"classes/Model.html":{},"dependencies.html":{}}}],["typeorm/query",{"_index":381,"title":{},"body":{"classes/CrudController.html":{},"classes/CrudService.html":{},"interfaces/ICrudService.html":{}}}],["typeormcrudservice",{"_index":259,"title":{},"body":{"injectables/CompanyService.html":{}}}],["typeormmodule",{"_index":90,"title":{},"body":{"modules/AppModule.html":{},"modules/CompanyModule.html":{}}}],["typeormmodule.forfeature([company",{"_index":257,"title":{},"body":{"modules/CompanyModule.html":{}}}],["typeormmodule.forroot(typeormmoduleoptions",{"_index":155,"title":{},"body":{"modules/AppModule.html":{}}}],["typeormmoduleoptions",{"_index":143,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["types",{"_index":284,"title":{},"body":{"classes/CreateCompanyDto.html":{},"classes/UpdateCompanyDto.html":{},"dependencies.html":{}}}],["typescript",{"_index":20,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/CompanyService.html":{},"classes/CrudController.html":{},"classes/CrudService.html":{},"index.html":{}}}],["ui",{"_index":651,"title":{},"body":{"dependencies.html":{}}}],["unauthorized",{"_index":384,"title":{},"body":{"classes/CrudController.html":{}}}],["undefined",{"_index":13,"title":{},"body":{"controllers/AppController.html":{},"classes/CrudController.html":{}}}],["unit",{"_index":685,"title":{},"body":{"index.html":{}}}],["unsafe",{"_index":22,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/CompanyService.html":{},"classes/CrudController.html":{},"classes/CrudService.html":{}}}],["until",{"_index":534,"title":{},"body":{"controllers/HealthController.html":{}}}],["update",{"_index":240,"title":{},"body":{"controllers/CompanyController.html":{},"classes/CrudController.html":{},"classes/CrudService.html":{},"interfaces/ICrudService.html":{}}}],["update(id",{"_index":367,"title":{},"body":{"classes/CrudController.html":{},"classes/CrudService.html":{},"interfaces/ICrudService.html":{}}}],["updatecompanydto",{"_index":235,"title":{"classes/UpdateCompanyDto.html":{}},"body":{"controllers/CompanyController.html":{},"classes/CreateCompanyDto.html":{},"classes/UpdateCompanyDto.html":{},"coverage.html":{}}}],["updatedat",{"_index":180,"title":{},"body":{"classes/Base.html":{},"interfaces/IBaseEntityModel.html":{},"classes/Model.html":{}}}],["updatedatecolumn",{"_index":200,"title":{},"body":{"classes/Base.html":{},"interfaces/IBaseEntityModel.html":{},"classes/Model.html":{}}}],["updateresult",{"_index":458,"title":{},"body":{"classes/CrudService.html":{},"interfaces/ICrudService.html":{}}}],["use",{"_index":24,"title":{},"body":{"controllers/AppController.html":{},"controllers/CompanyController.html":{},"classes/CrudService.html":{},"controllers/HealthController.html":{}}}],["valid('development",{"_index":116,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["validationoptions",{"_index":106,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["validationschema",{"_index":109,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["validator",{"_index":291,"title":{},"body":{"classes/CreateCompanyDto.html":{},"classes/PaginationParams.html":{},"classes/UpdateCompanyDto.html":{},"dependencies.html":{}}}],["value",{"_index":313,"title":{},"body":{"injectables/CronService.html":{},"classes/PaginationParams.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":595,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":723,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["void",{"_index":78,"title":{},"body":{"modules/AppModule.html":{},"injectables/CronService.html":{},"controllers/HealthController.html":{}}}],["watch",{"_index":681,"title":{},"body":{"index.html":{}}}],["website",{"_index":711,"title":{},"body":{"index.html":{}}}],["went",{"_index":346,"title":{},"body":{"classes/CrudController.html":{}}}],["world",{"_index":169,"title":{},"body":{"injectables/AppService.html":{}}}],["writeerror",{"_index":479,"title":{},"body":{"classes/CrudService.html":{}}}],["wrong",{"_index":398,"title":{},"body":{"classes/CrudController.html":{}}}],["wrong'})@httpcode(httpstatus.accepted)@put(':id",{"_index":372,"title":{},"body":{"classes/CrudController.html":{}}}],["wrong'})@httpcode(httpstatus.created)@post",{"_index":347,"title":{},"body":{"classes/CrudController.html":{}}}],["yes",{"_index":77,"title":{},"body":{"modules/AppModule.html":{},"classes/CrudController.html":{},"classes/CrudService.html":{},"controllers/HealthController.html":{},"interfaces/ICrudService.html":{},"classes/Model.html":{}}}],["you'd",{"_index":700,"title":{},"body":{"index.html":{}}}],["zoom",{"_index":63,"title":{},"body":{"modules/AppModule.html":{},"modules/CompanyModule.html":{},"modules/CronModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getHello\n                        \n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiResponse({status: undefined})\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        /* eslint-disable @typescript-eslint/no-unsafe-assignment,no-use-before-define,@typescript-eslint/no-use-before-define */\nimport { Controller, Get, HttpStatus, OnModuleInit } from '@nestjs/common'\nimport { ApiResponse, ApiTags } from '@nestjs/swagger'\n\nimport { AppService } from 'src/app.service'\n\n@Controller()\n@ApiTags(AppController.name)\nexport class AppController {\n    constructor(private readonly appService: AppService) {}\n\n    @Get()\n    @ApiResponse({ status: HttpStatus.OK })\n    getHello(): string {\n        return this.appService.getHello()\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nCompanyModule\n\nCompanyModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nCompanyModule->AppModule\n\n\n\n\n\nCronModule\n\nCronModule\n\nAppModule -->\n\nCronModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                        \n                            HealthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            CompanyModule\n                        \n                        \n                            CronModule\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onApplicationShutdown\n                        \n                        \n                    \n                \n            \n            \n                \nonApplicationShutdown(signal?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app.module.ts:76\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    signal\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onModuleInit\n                        \n                        \n                    \n                \n            \n            \n                \nonModuleInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app.module.ts:72\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        /* eslint-disable @typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access */\nimport { Module, OnModuleInit, OnApplicationShutdown } from '@nestjs/common'\nimport { ConfigModule } from '@nestjs/config'\nimport { ScheduleModule } from '@nestjs/schedule'\nimport { TerminusModule } from '@nestjs/terminus'\nimport { TypeOrmModule } from '@nestjs/typeorm'\n\nimport { PinoLogger, LoggerModule } from 'nestjs-pino'\n\nimport { AppController } from 'src/app.controller'\nimport { AppService } from 'src/app.service'\nimport { CronModule } from 'src/cron/cron.module'\nimport { HealthController } from 'src/health/health.controller'\nimport { CompanyModule } from 'src/modules/company/company.module'\n\nimport * as Joi from '@hapi/joi'\n\nconst ConfigModuleOptions = {\n    isGlobal: true,\n    validationOptions: {\n        allowUnknown: true,\n        abortEarly: true,\n    },\n    validationSchema: Joi.object({\n        PORT: Joi.number().default(3000),\n        NODE_ENV: Joi.string()\n            .required()\n            .valid('development', 'production', 'test', 'provision')\n            .default('development'),\n    }),\n}\n\nconst LoggerModuleOptions = {\n    pinoHttp: {\n        prettyPrint: {\n            colorize: true,\n            levelFirst: false, // Display the log level name before the logged date and time\n            translateTime: true,\n            messageFormat: '{msg}', // 'pid', 'msg', 'level'\n            ignore: 'pid,hostname',\n            errorLikeObjectKeys: ['err', 'error', 'errors'],\n        },\n    },\n}\n\nconst TypeOrmModuleOptions = {\n    entities: [`${__dirname}/**/*.entity.{ts,js}`],\n    type: 'sqlite' as const,\n    database: 'database.sqlite',\n    synchronize: true,\n    logging: true,\n}\n\n@Module({\n    controllers: [AppController, HealthController],\n    imports: [\n        ConfigModule.forRoot(ConfigModuleOptions),\n        LoggerModule.forRoot(LoggerModuleOptions),\n        ScheduleModule.forRoot(),\n        CronModule,\n        TerminusModule, // Health module\n        TypeOrmModule.forRoot(TypeOrmModuleOptions),\n        CompanyModule,\n    ],\n    providers: [AppService],\n})\nexport class AppModule implements OnModuleInit, OnApplicationShutdown {\n    constructor(private readonly logger: PinoLogger) {\n        logger.setContext(AppModule.name)\n    }\n\n    onModuleInit(): void {\n        this.logger.info(`ModuleInit - AppModule has been initialized.`)\n    }\n\n    onApplicationShutdown(signal?: string): void {\n        this.logger.fatal(\n            `ApplicationShutdown - AppModule has been shutdown with ${signal} signal`,\n        )\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getHello\n                        \n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n            \n                \n                    Defined in src/app.service.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, OnModuleInit } from '@nestjs/common'\n\n@Injectable()\nexport class AppService {\n    getHello(): string {\n        return 'Hello World!'\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Base.html":{"url":"classes/Base.html","title":"class - Base","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Base\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/base/entities/base.ts\n        \n\n\n            \n                Extends\n            \n            \n                        Model\n            \n\n            \n                Implements\n            \n            \n                            IBaseEntityModel\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                createdAt\n                            \n                            \n                                    Optional\n                                deletedAt\n                            \n                            \n                                    Optional\n                                id\n                            \n                            \n                                    Optional\n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({type: 'string', format: 'date-time', example: '2000-01-01T12:00:00.000Z'})@CreateDateColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/base/entities/base.ts:38\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            deletedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Date | null\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({type: 'string', format: 'date-time', example: '2000-01-01T12:00:00.000Z'})@DeleteDateColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/base/entities/base.ts:54\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiPropertyOptional({type: String})@PrimaryGeneratedColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/base/entities/base.ts:30\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({type: 'string', format: 'date-time', example: '2000-01-01T12:00:00.000Z'})@UpdateDateColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/base/entities/base.ts:46\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional, ApiProperty } from '@nestjs/swagger'\n\nimport {\n    PrimaryGeneratedColumn,\n    UpdateDateColumn,\n    CreateDateColumn,\n    DeleteDateColumn,\n} from 'typeorm'\n\nexport interface IBaseEntityModel {\n    id?: number\n\n    readonly createdAt?: Date\n    readonly updatedAt?: Date\n    readonly deletedAt?: Date | null\n}\n\nexport abstract class Model {\n    constructor(input?: any) {\n        if (input) {\n            Object.assign(this, input)\n        }\n    }\n}\n\nexport abstract class Base extends Model implements IBaseEntityModel {\n    @ApiPropertyOptional({ type: String })\n    @PrimaryGeneratedColumn()\n    id?: number\n\n    @ApiProperty({\n        type: 'string',\n        format: 'date-time',\n        example: '2000-01-01T12:00:00.000Z',\n    })\n    @CreateDateColumn()\n    createdAt?: Date\n\n    @ApiProperty({\n        type: 'string',\n        format: 'date-time',\n        example: '2000-01-01T12:00:00.000Z',\n    })\n    @UpdateDateColumn()\n    updatedAt?: Date\n\n    @ApiProperty({\n        type: 'string',\n        format: 'date-time',\n        example: '2000-01-01T12:00:00.000Z',\n    })\n    @DeleteDateColumn()\n    deletedAt?: Date | null\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Company.html":{"url":"classes/Company.html","title":"class - Company","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Company\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/company/data/company.entity.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/company/data/company.entity.ts:5\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/company/data/company.entity.ts:7\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Entity, PrimaryGeneratedColumn, Column } from 'typeorm'\n\n@Entity()\nexport class Company {\n    @PrimaryGeneratedColumn() id: number\n\n    @Column() name: string\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CompanyController.html":{"url":"controllers/CompanyController.html","title":"controller - CompanyController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  CompanyController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/company/company.controller.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                clear\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            clear\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    clear()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Delete all companies'})@Post('/clear')\n                \n            \n\n            \n                \n                    Defined in src/modules/company/company.controller.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     {}\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        /* eslint-disable no-use-before-define,@typescript-eslint/no-use-before-define */\nimport { Controller, Get, Post, Body, Put, Param, Delete } from '@nestjs/common'\nimport { ApiOperation, ApiResponse, ApiTags } from '@nestjs/swagger'\nimport { Crud, CrudController } from '@nestjsx/crud'\n\nimport { CompanyService } from 'src/modules/company/company.service'\nimport {\n    CreateCompanyDto,\n    UpdateCompanyDto,\n} from 'src/modules/company/data/company.dto'\nimport { Company } from 'src/modules/company/data/company.entity'\n\n@Crud({\n    model: {\n        type: Company,\n    },\n    dto: {\n        create: CreateCompanyDto,\n        update: UpdateCompanyDto,\n    },\n})\n@Controller(CompanyController.path)\n@ApiTags(CompanyController.name)\nexport class CompanyController implements CrudController {\n    public static path = 'companies'\n\n    constructor(public service: CompanyService) {}\n\n    @ApiOperation({ summary: 'Delete all companies' })\n    @Post('/clear')\n    async clear() {\n        return this.service.clear()\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CompanyModule.html":{"url":"modules/CompanyModule.html","title":"module - CompanyModule","body":"\n                   \n\n\n\n\n    Modules\n    CompanyModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_CompanyModule\n\n\n\ncluster_CompanyModule_exports\n\n\n\ncluster_CompanyModule_providers\n\n\n\n\nCompanyService \n\nCompanyService \n\n\n\nCompanyModule\n\nCompanyModule\n\nCompanyService  -->\n\nCompanyModule->CompanyService \n\n\n\n\n\nCompanyService\n\nCompanyService\n\nCompanyModule -->\n\nCompanyService->CompanyModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/company/company.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CompanyService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            CompanyController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            CompanyService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common'\nimport { TypeOrmModule } from '@nestjs/typeorm'\n\nimport { CompanyController } from 'src/modules/company/company.controller'\nimport { CompanyService } from 'src/modules/company/company.service'\nimport { Company } from 'src/modules/company/data/company.entity'\n\n@Module({\n    controllers: [CompanyController],\n    exports: [CompanyService],\n    imports: [TypeOrmModule.forFeature([Company])],\n    providers: [CompanyService],\n})\nexport class CompanyModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CompanyService.html":{"url":"injectables/CompanyService.html","title":"injectable - CompanyService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  CompanyService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/company/company.service.ts\n        \n\n\n            \n                Extends\n            \n            \n                        TypeOrmCrudService\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                repo\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                clear\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repo)\n                    \n                \n                        \n                            \n                                Defined in src/modules/company/company.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repo\n                                                  \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            clear\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    clear()\n                \n            \n\n\n            \n                \n                    Defined in src/modules/company/company.service.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     {}\n\n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            repo\n                            \n                        \n                    \n                \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @InjectRepository(Company)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/company/company.service.ts:11\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common'\nimport { InjectRepository } from '@nestjs/typeorm'\nimport { TypeOrmCrudService } from '@nestjsx/crud-typeorm'\n\nimport { Company } from 'src/modules/company/data/company.entity'\n\nimport { getManager } from 'typeorm'\n\n@Injectable()\nexport class CompanyService extends TypeOrmCrudService {\n    constructor(@InjectRepository(Company) public repo) {\n        super(repo)\n    }\n\n    async clear() {\n        let cleared = {}\n        cleared = await getManager().query('DELETE FROM company') // eslint-disable-line @typescript-eslint/no-unsafe-assignment\n        return cleared\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CoreModule.html":{"url":"modules/CoreModule.html","title":"module - CoreModule","body":"\n                   \n\n\n\n\n    Modules\n    CoreModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/base/core.module.ts\n        \n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common'\n\n@Module({\n    imports: [],\n    controllers: [],\n    providers: [],\n})\nexport class CoreModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateCompanyDto.html":{"url":"classes/CreateCompanyDto.html","title":"class - CreateCompanyDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateCompanyDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/company/data/company.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({description: 'The name of the Company', example: 'ACME'})@IsString()@IsNotEmpty()@MinLength(2)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/company/data/company.dto.ts:19\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types'\nimport { ApiProperty } from '@nestjs/swagger'\n\nimport {\n    IsInt,\n    IsString,\n    MinLength,\n    IsNotEmpty,\n    IsPositive,\n    IsOptional,\n} from 'class-validator'\n\nexport class CreateCompanyDto {\n    @ApiProperty({ description: 'The name of the Company', example: 'ACME' })\n    @IsString()\n    @IsNotEmpty()\n    @MinLength(2)\n    readonly name: string\n}\n\nexport class UpdateCompanyDto extends PartialType(CreateCompanyDto) {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CronModule.html":{"url":"modules/CronModule.html","title":"module - CronModule","body":"\n                   \n\n\n\n\n    Modules\n    CronModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_CronModule\n\n\n\ncluster_CronModule_providers\n\n\n\n\nCronService\n\nCronService\n\n\n\nCronModule\n\nCronModule\n\nCronModule -->\n\nCronService->CronModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/cron/cron.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CronService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common'\n\nimport { CronService } from 'src/cron/cron.service'\n\n@Module({\n    providers: [CronService],\n})\nexport class CronModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CronService.html":{"url":"injectables/CronService.html","title":"injectable - CronService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  CronService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/cron/cron.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                handleCron\n                            \n                            \n                                handleInterval\n                            \n                            \n                                handleTimeout\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            handleCron\n                        \n                        \n                    \n                \n            \n            \n                \nhandleCron()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Cron('60 * * * * *')\n                \n            \n\n            \n                \n                    Defined in src/cron/cron.service.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            handleInterval\n                        \n                        \n                    \n                \n            \n            \n                \nhandleInterval()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Interval(100000)\n                \n            \n\n            \n                \n                    Defined in src/cron/cron.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            handleTimeout\n                        \n                        \n                    \n                \n            \n            \n                \nhandleTimeout()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Timeout(50000)\n                \n            \n\n            \n                \n                    Defined in src/cron/cron.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            logger\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Logger(CronService.name)\n                        \n                    \n                        \n                            \n                                    Defined in src/cron/cron.service.ts:6\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable, Logger } from '@nestjs/common'\nimport { Cron, Interval, Timeout } from '@nestjs/schedule'\n\n@Injectable()\nexport class CronService {\n    private readonly logger = new Logger(CronService.name)\n\n    @Cron('60 * * * * *')\n    handleCron() {\n        this.logger.debug('Called when the second is 60')\n    }\n\n    @Interval(100000)\n    handleInterval() {\n        this.logger.debug('Called every 100 seconds')\n    }\n\n    @Timeout(50000)\n    handleTimeout() {\n        this.logger.debug('Called once after 50 seconds')\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CrudController.html":{"url":"classes/CrudController.html","title":"class - CrudController","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CrudController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/base/crud/crud.controller.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Protected\n                        constructor(crudService: ICrudService)\n                    \n                \n                        \n                            \n                                Defined in src/base/crud/crud.controller.ts:24\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        crudService\n                                                  \n                                                        \n                                                                        ICrudService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            create\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    create(entity: DeepPartial, ...options: any[])\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Create new record'})@ApiResponse({status: undefined, description: 'The record has been successfully created.'})@ApiResponse({status: undefined, description: 'Invalid input, The response body may contain clues as to what went wrong'})@HttpCode(HttpStatus.CREATED)@Post()\n                \n            \n\n            \n                \n                    Defined in src/base/crud/crud.controller.ts:64\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    entity\n                                    \n                                            DeepPartial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            delete\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(id: string, ...options: any[])\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Delete record'})@ApiResponse({status: undefined, description: 'The record has been successfully deleted'})@ApiResponse({status: undefined, description: 'Record not found'})@HttpCode(HttpStatus.ACCEPTED)@Delete(':id')\n                \n            \n\n            \n                \n                    Defined in src/base/crud/crud.controller.ts:103\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(filter?: PaginationParams)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'find all'})@ApiResponse({status: undefined, description: 'Found records'})@Get()\n                \n            \n\n            \n                \n                    Defined in src/base/crud/crud.controller.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    filter\n                                    \n                                                PaginationParams\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Find by id'})@ApiResponse({status: undefined, description: 'Found one record'})@ApiResponse({status: undefined, description: 'Record not found'})@Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/base/crud/crud.controller.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, entity: QueryDeepPartialEntity, ...options: any[])\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Update an existing record'})@ApiResponse({status: undefined, description: 'The record has been successfully edited.'})@ApiResponse({status: undefined, description: 'Record not found'})@ApiResponse({status: undefined, description: 'Invalid input, The response body may contain clues as to what went wrong'})@HttpCode(HttpStatus.ACCEPTED)@Put(':id')\n                \n            \n\n            \n                \n                    Defined in src/base/crud/crud.controller.ts:84\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    entity\n                                    \n                                            QueryDeepPartialEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n    Get,\n    Post,\n    Put,\n    Delete,\n    Body,\n    Param,\n    HttpStatus,\n    HttpCode,\n} from '@nestjs/common'\nimport { ApiOperation, ApiResponse, ApiBearerAuth } from '@nestjs/swagger'\n\nimport { ICrudService } from 'src/base/crud/icrud.service'\nimport { IPagination } from 'src/base/crud/pagination'\nimport { PaginationParams } from 'src/base/crud/pagination-params'\nimport { Base } from 'src/base/entities/base'\n\nimport { DeepPartial } from 'typeorm'\nimport { QueryDeepPartialEntity } from 'typeorm/query-builder/QueryPartialEntity'\n\n@ApiResponse({ status: HttpStatus.UNAUTHORIZED, description: 'Unauthorized' })\n@ApiResponse({ status: HttpStatus.FORBIDDEN, description: 'Forbidden' })\n@ApiBearerAuth()\nexport abstract class CrudController {\n    protected constructor(private readonly crudService: ICrudService) {}\n\n    @ApiOperation({ summary: 'find all' })\n    @ApiResponse({\n        status: HttpStatus.OK,\n        description: 'Found records' /* type: IPagination */,\n    })\n    @Get()\n    async findAll(filter?: PaginationParams): Promise> {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n        return this.crudService.findAll(filter)\n    }\n\n    @ApiOperation({ summary: 'Find by id' })\n    @ApiResponse({\n        status: HttpStatus.OK,\n        description: 'Found one record' /* , type: T */,\n    })\n    @ApiResponse({\n        status: HttpStatus.NOT_FOUND,\n        description: 'Record not found',\n    })\n    @Get(':id')\n    async findOne(@Param('id') id: string): Promise {\n        return this.crudService.findOne(id)\n    }\n\n    @ApiOperation({ summary: 'Create new record' })\n    @ApiResponse({\n        status: HttpStatus.CREATED,\n        description: 'The record has been successfully created.' /* , type: T */,\n    })\n    @ApiResponse({\n        status: HttpStatus.BAD_REQUEST,\n        description:\n            'Invalid input, The response body may contain clues as to what went wrong',\n    })\n    @HttpCode(HttpStatus.CREATED)\n    @Post()\n    async create(@Body() entity: DeepPartial, ...options: any[]): Promise {\n        return this.crudService.create(entity)\n    }\n\n    @ApiOperation({ summary: 'Update an existing record' })\n    @ApiResponse({\n        status: HttpStatus.CREATED,\n        description: 'The record has been successfully edited.',\n    })\n    @ApiResponse({\n        status: HttpStatus.NOT_FOUND,\n        description: 'Record not found',\n    })\n    @ApiResponse({\n        status: HttpStatus.BAD_REQUEST,\n        description:\n            'Invalid input, The response body may contain clues as to what went wrong',\n    })\n    @HttpCode(HttpStatus.ACCEPTED)\n    @Put(':id')\n    async update(\n        @Param('id') id: string,\n        @Body() entity: QueryDeepPartialEntity,\n        ...options: any[]\n    ): Promise {\n        return this.crudService.update(id, entity) // FIXME: https://github.com/typeorm/typeorm/issues/1544\n    }\n\n    @ApiOperation({ summary: 'Delete record' })\n    @ApiResponse({\n        status: HttpStatus.NO_CONTENT,\n        description: 'The record has been successfully deleted',\n    })\n    @ApiResponse({\n        status: HttpStatus.NOT_FOUND,\n        description: 'Record not found',\n    })\n    @HttpCode(HttpStatus.ACCEPTED)\n    @Delete(':id')\n    async delete(@Param('id') id: string, ...options: any[]): Promise {\n        return this.crudService.delete(id)\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CrudService.html":{"url":"classes/CrudService.html","title":"class - CrudService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CrudService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/base/crud/crud.service.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                            ICrudService\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                saltRounds\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                count\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                entityNotFound\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                findOneOrFail\n                            \n                            \n                                    Async\n                                getPasswordHash\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Protected\n                        constructor(repository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/base/crud/crud.service.ts:24\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repository\n                                                  \n                                                        \n                                                                    Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            saltRounds\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/base/crud/crud.service.ts:24\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            count\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    count(filter?: FindManyOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/base/crud/crud.service.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    filter\n                                    \n                                            FindManyOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            create\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    create(entity: DeepPartial, ...options: any[])\n                \n            \n\n\n            \n                \n                    Defined in src/base/crud/crud.service.ts:65\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    entity\n                                    \n                                            DeepPartial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            delete\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(criteria: string | number | FindConditions, ...options: any[])\n                \n            \n\n\n            \n                \n                    Defined in src/base/crud/crud.service.ts:102\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    criteria\n                                    \n                                            string | number | FindConditions\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            entityNotFound\n                        \n                        \n                    \n                \n            \n            \n                \nentityNotFound()\n                \n            \n\n\n            \n                \n                    Defined in src/base/crud/crud.service.ts:116\n                \n            \n\n\n            \n                \n                    e.g., findOneById(id).pipe(map(entity => entity.id), entityNotFound())\n\n\n                    \n                        Returns :     (stream$: any) => any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(filter?: FindManyOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/base/crud/crud.service.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    filter\n                                    \n                                            FindManyOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: string | number | FindOneOptions | FindConditions, options?: FindOneOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/base/crud/crud.service.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            string | number | FindOneOptions | FindConditions\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                            FindOneOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOneOrFail\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneOrFail(id: string | number | FindOneOptions | FindConditions, options?: FindOneOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/base/crud/crud.service.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            string | number | FindOneOptions | FindConditions\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                            FindOneOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getPasswordHash\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getPasswordHash(password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/base/crud/crud.service.ts:76\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string | number | FindConditions, partialEntity: QueryDeepPartialEntity, ...options: any[])\n                \n            \n\n\n            \n                \n                    Defined in src/base/crud/crud.service.ts:81\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            string | number | FindConditions\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    partialEntity\n                                    \n                                            QueryDeepPartialEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { BadRequestException, NotFoundException } from '@nestjs/common'\n\n// import * as bcrypt from 'bcryptjs'\nimport { ICrudService } from 'src/base/crud/icrud.service'\nimport { IPagination } from 'src/base/crud/pagination'\nimport { ITryRequest } from 'src/base/crud/try-request'\nimport { Base } from 'src/base/entities/base'\n\nimport { of, throwError } from 'rxjs'\nimport { mergeMap } from 'rxjs/operators'\nimport {\n    DeepPartial,\n    DeleteResult,\n    FindConditions,\n    FindManyOptions,\n    FindOneOptions,\n    Repository,\n    UpdateResult,\n} from 'typeorm'\nimport { QueryDeepPartialEntity } from 'typeorm/query-builder/QueryPartialEntity'\n\nexport abstract class CrudService implements ICrudService {\n    saltRounds: number\n\n    protected constructor(protected readonly repository: Repository) {\n        this.saltRounds = 12\n    }\n\n    async count(filter?: FindManyOptions): Promise {\n        return this.repository.count(filter)\n    }\n\n    async findAll(filter?: FindManyOptions): Promise> {\n        const total = await this.repository.count(filter)\n        const items = await this.repository.find(filter)\n\n        return { items, total }\n    }\n\n    async findOneOrFail(\n        id: string | number | FindOneOptions | FindConditions,\n        options?: FindOneOptions,\n    ): Promise {\n        try {\n            const record = await this.repository.findOneOrFail(id as any, options)\n\n            return { success: true, record }\n        } catch (error) {\n            return { success: false, error } // eslint-disable-line @typescript-eslint/no-unsafe-assignment\n        }\n    }\n\n    async findOne(\n        id: string | number | FindOneOptions | FindConditions,\n        options?: FindOneOptions,\n    ): Promise {\n        const record = await this.repository.findOne(id as any, options)\n\n        if (!record) throw new NotFoundException(`The requested record was not found`)\n\n        return record\n    }\n\n    async create(entity: DeepPartial, ...options: any[]): Promise {\n        const obj = this.repository.create(entity)\n\n        // READMEWHY: https://github.com/Microsoft/TypeScript/issues/21592\n        try {\n            return await this.repository.save(obj as any) // eslint-disable-line @typescript-eslint/no-unsafe-return\n        } catch (error /*: WriteError */) {\n            throw new BadRequestException(error)\n        }\n    }\n\n    async getPasswordHash(password: string): Promise {\n        // return bcrypt.hash(password, this.saltRounds)\n        return password\n    }\n\n    async update(\n        id: string | number | FindConditions,\n        partialEntity: QueryDeepPartialEntity,\n        ...options: any[]\n    ): Promise {\n        try {\n            // method getPasswordHash is copied from AuthService\n            // try if can import somehow the service and use its method\n\n            // @ts-ignore\n            if (partialEntity?.hash) {\n                // @ts-ignore\n                partialEntity.hash = await this.getPasswordHash(partialEntity.hash) // eslint-disable-line @typescript-eslint/no-unsafe-assignment,no-param-reassign\n            }\n\n            return await this.repository.update(id, partialEntity)\n        } catch (error /*: WriteError */) {\n            throw new BadRequestException(error)\n        }\n    }\n\n    async delete(\n        criteria: string | number | FindConditions,\n        ...options: any[]\n    ): Promise {\n        try {\n            return await this.repository.delete(criteria)\n        } catch (error) {\n            throw new NotFoundException(`The record was not found`, error)\n        }\n    }\n\n    /**\n     * e.g., findOneById(id).pipe(map(entity => entity.id), entityNotFound())\n     */\n    entityNotFound() {\n        return (stream$) =>\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-return\n            stream$.pipe(\n                mergeMap((signal) => {\n                    if (!signal) {\n                        return throwError(\n                            new NotFoundException(\n                                `The requested record was not found`,\n                            ),\n                        )\n                    }\n\n                    return of(signal)\n                }),\n            )\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/HealthController.html":{"url":"controllers/HealthController.html","title":"controller - HealthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  HealthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/health/health.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                health\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                check\n                            \n                            \n                                onApplicationShutdown\n                            \n                            \n                                onModuleInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            check\n                        \n                        \n                    \n                \n            \n            \n                \ncheck()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@HealthCheck()\n                \n            \n\n            \n                \n                    Defined in src/health/health.controller.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onApplicationShutdown\n                        \n                        \n                    \n                \n            \n            \n                \nonApplicationShutdown(signal?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/health/health.controller.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    signal\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onModuleInit\n                        \n                        \n                    \n                \n            \n            \n                \nonModuleInit()\n                \n            \n\n\n            \n                \n                    Defined in src/health/health.controller.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        /* eslint-disable no-use-before-define,@typescript-eslint/no-use-before-define */\nimport { Controller, Get, OnApplicationShutdown, OnModuleInit } from '@nestjs/common'\nimport { ConfigService } from '@nestjs/config'\nimport { ApiTags } from '@nestjs/swagger'\nimport { DNSHealthIndicator, HealthCheck, HealthCheckService } from '@nestjs/terminus'\n\n@ApiTags(HealthController.name)\n@Controller('health')\nexport class HealthController implements OnModuleInit, OnApplicationShutdown {\n    constructor(\n        private health: HealthCheckService,\n        private dns: DNSHealthIndicator,\n        private config: ConfigService,\n    ) {}\n\n    @Get()\n    @HealthCheck()\n    check() {\n        return this.health.check([\n            () => this.dns.pingCheck('nestjs-docs', 'https://docs.nestjs.com'),\n        ])\n    }\n\n    /*\n     * When the application receives a termination signal it will call any registered\n     * onModuleDestroy(), beforeApplicationShutdown(), then onApplicationShutdown() methods\n     * (in the sequence described above) with the corresponding signal as the first parameter.\n     * If a registered function awaits an asynchronous call (returns a promise), Nest will not\n     * continue in the sequence until the promise is resolved or rejected.\n     */\n\n    onModuleInit(): void {\n        console.log(`ModuleInit - HealthController has been initialized.`, {\n            config: this.config.get('NODE_ENV'),\n        })\n    }\n\n    onApplicationShutdown(signal?: string): void {\n        console.log(\n            `ApplicationShutdown - HealthController has been shutdown with ${signal} signal`,\n        )\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IBaseEntityModel.html":{"url":"interfaces/IBaseEntityModel.html","title":"interface - IBaseEntityModel","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IBaseEntityModel\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/base/entities/base.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        createdAt\n                                \n                                \n                                            Optional\n                                        deletedAt\n                                \n                                \n                                            Optional\n                                        id\n                                \n                                \n                                            Optional\n                                        updatedAt\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        createdAt\n                                    \n                                \n                                \n                                    \n                                        createdAt:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        deletedAt\n                                    \n                                \n                                \n                                    \n                                        deletedAt:     Date | null\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Date | null\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                    \n                                \n                                \n                                    \n                                        id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        updatedAt\n                                    \n                                \n                                \n                                    \n                                        updatedAt:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ApiPropertyOptional, ApiProperty } from '@nestjs/swagger'\n\nimport {\n    PrimaryGeneratedColumn,\n    UpdateDateColumn,\n    CreateDateColumn,\n    DeleteDateColumn,\n} from 'typeorm'\n\nexport interface IBaseEntityModel {\n    id?: number\n\n    readonly createdAt?: Date\n    readonly updatedAt?: Date\n    readonly deletedAt?: Date | null\n}\n\nexport abstract class Model {\n    constructor(input?: any) {\n        if (input) {\n            Object.assign(this, input)\n        }\n    }\n}\n\nexport abstract class Base extends Model implements IBaseEntityModel {\n    @ApiPropertyOptional({ type: String })\n    @PrimaryGeneratedColumn()\n    id?: number\n\n    @ApiProperty({\n        type: 'string',\n        format: 'date-time',\n        example: '2000-01-01T12:00:00.000Z',\n    })\n    @CreateDateColumn()\n    createdAt?: Date\n\n    @ApiProperty({\n        type: 'string',\n        format: 'date-time',\n        example: '2000-01-01T12:00:00.000Z',\n    })\n    @UpdateDateColumn()\n    updatedAt?: Date\n\n    @ApiProperty({\n        type: 'string',\n        format: 'date-time',\n        example: '2000-01-01T12:00:00.000Z',\n    })\n    @DeleteDateColumn()\n    deletedAt?: Date | null\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ICrudService.html":{"url":"interfaces/ICrudService.html","title":"interface - ICrudService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ICrudService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/base/crud/icrud.service.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    count\n                                \n                                \n                                    create\n                                \n                                \n                                    delete\n                                \n                                \n                                    findAll\n                                \n                                \n                                    findOne\n                                \n                                \n                                    update\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            count\n                        \n                        \n                    \n                \n            \n            \n                \ncount(filter?: FindManyOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/base/crud/icrud.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    filter\n                                    \n                                            FindManyOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            create\n                        \n                        \n                    \n                \n            \n            \n                \ncreate(entity: DeepPartial, ...options: any[])\n                \n            \n\n\n            \n                \n                    Defined in src/base/crud/icrud.service.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    entity\n                                    \n                                            DeepPartial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            delete\n                        \n                        \n                    \n                \n            \n            \n                \ndelete(id: any, ...options: any[])\n                \n            \n\n\n            \n                \n                    Defined in src/base/crud/icrud.service.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \nfindAll(filter?: FindManyOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/base/crud/icrud.service.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    filter\n                                    \n                                            FindManyOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \nfindOne(id: string | number | FindOneOptions | FindConditions, options?: FindOneOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/base/crud/icrud.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            string | number | FindOneOptions | FindConditions\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                            FindOneOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            update\n                        \n                        \n                    \n                \n            \n            \n                \nupdate(id: any, entity: QueryDeepPartialEntity, ...options: any[])\n                \n            \n\n\n            \n                \n                    Defined in src/base/crud/icrud.service.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    entity\n                                    \n                                            QueryDeepPartialEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { IPagination } from 'src/base/crud/pagination'\n\nimport {\n    DeepPartial,\n    DeleteResult,\n    FindConditions,\n    FindManyOptions,\n    FindOneOptions,\n    UpdateResult,\n} from 'typeorm'\nimport { QueryDeepPartialEntity } from 'typeorm/query-builder/QueryPartialEntity'\n\nexport interface ICrudService {\n    count(filter?: FindManyOptions): Promise\n\n    findAll(filter?: FindManyOptions): Promise>\n\n    findOne(\n        id: string | number | FindOneOptions | FindConditions,\n        options?: FindOneOptions,\n    ): Promise\n\n    create(entity: DeepPartial, ...options: any[]): Promise\n\n    update(\n        id: any,\n        entity: QueryDeepPartialEntity,\n        ...options: any[]\n    ): Promise\n\n    delete(id: any, ...options: any[]): Promise\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IPagination.html":{"url":"interfaces/IPagination.html","title":"interface - IPagination","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IPagination\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/base/crud/pagination.ts\n        \n\n            \n                Description\n            \n            \n                Generic pagination interface\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        items\n                                \n                                \n                                        total\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        items\n                                    \n                                \n                                \n                                    \n                                        items:     T[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Items included in the current listing\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        total\n                                    \n                                \n                                \n                                    \n                                        total:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Total number of available items\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface IPagination {\n    /**\n     * Items included in the current listing\n     */\n    readonly items: T[]\n\n    /**\n     * Total number of available items\n     */\n    readonly total: number\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ITryRequest.html":{"url":"interfaces/ITryRequest.html","title":"interface - ITryRequest","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ITryRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/base/crud/try-request.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        error\n                                \n                                \n                                            Optional\n                                        record\n                                \n                                \n                                        success\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        error\n                                    \n                                \n                                \n                                    \n                                        error:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        record\n                                    \n                                \n                                \n                                    \n                                        record:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        success\n                                    \n                                \n                                \n                                    \n                                        success:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface ITryRequest {\n    success: boolean\n    record?: any\n    error?: any\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Model.html":{"url":"classes/Model.html","title":"class - Model","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Model\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/base/entities/base.ts\n        \n\n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(input?: any)\n                    \n                \n                        \n                            \n                                Defined in src/base/entities/base.ts:19\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        input\n                                                  \n                                                        \n                                                                        any\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional, ApiProperty } from '@nestjs/swagger'\n\nimport {\n    PrimaryGeneratedColumn,\n    UpdateDateColumn,\n    CreateDateColumn,\n    DeleteDateColumn,\n} from 'typeorm'\n\nexport interface IBaseEntityModel {\n    id?: number\n\n    readonly createdAt?: Date\n    readonly updatedAt?: Date\n    readonly deletedAt?: Date | null\n}\n\nexport abstract class Model {\n    constructor(input?: any) {\n        if (input) {\n            Object.assign(this, input)\n        }\n    }\n}\n\nexport abstract class Base extends Model implements IBaseEntityModel {\n    @ApiPropertyOptional({ type: String })\n    @PrimaryGeneratedColumn()\n    id?: number\n\n    @ApiProperty({\n        type: 'string',\n        format: 'date-time',\n        example: '2000-01-01T12:00:00.000Z',\n    })\n    @CreateDateColumn()\n    createdAt?: Date\n\n    @ApiProperty({\n        type: 'string',\n        format: 'date-time',\n        example: '2000-01-01T12:00:00.000Z',\n    })\n    @UpdateDateColumn()\n    updatedAt?: Date\n\n    @ApiProperty({\n        type: 'string',\n        format: 'date-time',\n        example: '2000-01-01T12:00:00.000Z',\n    })\n    @DeleteDateColumn()\n    deletedAt?: Date | null\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PaginationParams.html":{"url":"classes/PaginationParams.html","title":"class - PaginationParams","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PaginationParams\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/base/crud/pagination-params.ts\n        \n\n            \n                Description\n            \n            \n                Describes generic pagination params\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Abstract\n                                    Readonly\n                                    Optional\n                                order\n                            \n                            \n                                    Readonly\n                                skip\n                            \n                            \n                                    Readonly\n                                take\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Abstract\n                                Readonly\n                                Optional\n                            order\n                            \n                        \n                    \n                \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiPropertyOptional()@IsOptional()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/base/crud/pagination-params.ts:39\n                            \n                        \n\n                \n                    \n                        OrderBy\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            skip\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 0\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiPropertyOptional({type: Number, minimum: 0})@IsOptional()@Min(0)@Transform(undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/base/crud/pagination-params.ts:32\n                            \n                        \n\n                \n                    \n                        Pagination offset\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            take\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 10\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiPropertyOptional({type: Number, minimum: 0, maximum: 50})@IsOptional()@Min(0)@Max(50)@Transform(undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/base/crud/pagination-params.ts:23\n                            \n                        \n\n                \n                    \n                        Pagination limit\n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional } from '@nestjs/swagger'\n\nimport { Transform } from 'class-transformer'\nimport { IsOptional, Max, Min } from 'class-validator'\n\nexport enum OrderType {\n    DESC = 'DESC',\n    ASC = 'ASC',\n}\n\n/**\n * Describes generic pagination params\n */\nexport abstract class PaginationParams {\n    /**\n     * Pagination limit\n     */\n    @ApiPropertyOptional({ type: Number, minimum: 0, maximum: 50 })\n    @IsOptional()\n    @Min(0)\n    @Max(50)\n    @Transform((val: string) => parseInt(val, 10))\n    readonly take = 10\n\n    /**\n     * Pagination offset\n     */\n    @ApiPropertyOptional({ type: Number, minimum: 0 })\n    @IsOptional()\n    @Min(0)\n    @Transform((val: string) => parseInt(val, 10))\n    readonly skip = 0\n\n    /**\n     * OrderBy\n     */\n    @ApiPropertyOptional()\n    @IsOptional()\n    abstract readonly order?: { [P in keyof T]?: OrderType }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateCompanyDto.html":{"url":"classes/UpdateCompanyDto.html","title":"class - UpdateCompanyDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateCompanyDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/company/data/company.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types'\nimport { ApiProperty } from '@nestjs/swagger'\n\nimport {\n    IsInt,\n    IsString,\n    MinLength,\n    IsNotEmpty,\n    IsPositive,\n    IsOptional,\n} from 'class-validator'\n\nexport class CreateCompanyDto {\n    @ApiProperty({ description: 'The name of the Company', example: 'ACME' })\n    @IsString()\n    @IsNotEmpty()\n    @MinLength(2)\n    readonly name: string\n}\n\nexport class UpdateCompanyDto extends PartialType(CreateCompanyDto) {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.module.ts\n            \n            variable\n            ConfigModuleOptions\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.module.ts\n            \n            variable\n            LoggerModuleOptions\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.module.ts\n            \n            variable\n            TypeOrmModuleOptions\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/base/crud/crud.controller.ts\n            \n            class\n            CrudController\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/base/crud/crud.service.ts\n            \n            class\n            CrudService\n            \n                8 %\n                (1/12)\n            \n        \n        \n            \n                \n                src/base/crud/icrud.service.ts\n            \n            interface\n            ICrudService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/base/crud/pagination-params.ts\n            \n            class\n            PaginationParams\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/base/crud/pagination.ts\n            \n            interface\n            IPagination\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/base/crud/try-request.ts\n            \n            interface\n            ITryRequest\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/base/entities/base.ts\n            \n            class\n            Base\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/base/entities/base.ts\n            \n            class\n            Model\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/base/entities/base.ts\n            \n            interface\n            IBaseEntityModel\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/cron/cron.service.ts\n            \n            injectable\n            CronService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/health/health.controller.ts\n            \n            controller\n            HealthController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            createSwagger\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            setupApp\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/company/company.controller.ts\n            \n            controller\n            CompanyController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/modules/company/company.service.ts\n            \n            injectable\n            CompanyService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/modules/company/data/company.dto.ts\n            \n            class\n            CreateCompanyDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/modules/company/data/company.dto.ts\n            \n            class\n            UpdateCompanyDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/company/data/company.entity.ts\n            \n            class\n            Company\n            \n                0 %\n                (0/3)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @hapi/joi : ^17.1.1\n        \n            @nestjs/common : ^7.5.1\n        \n            @nestjs/config : ^0.6.1\n        \n            @nestjs/core : ^7.5.1\n        \n            @nestjs/mapped-types : ^0.1.1\n        \n            @nestjs/passport : ^7.1.3\n        \n            @nestjs/platform-express : ^7.5.1\n        \n            @nestjs/schedule : ^0.4.1\n        \n            @nestjs/swagger : ^4.7.5\n        \n            @nestjs/terminus : ^7.0.1\n        \n            @nestjs/typeorm : ^7.1.5\n        \n            @nestjsx/crud : ^4.6.2\n        \n            @nestjsx/crud-request : ^4.6.2\n        \n            @nestjsx/crud-typeorm : ^4.6.2\n        \n            class-transformer : ^0.3.1\n        \n            class-validator : ^0.12.2\n        \n            dotenv : ^8.2.0\n        \n            dotenv-expand : ^5.1.0\n        \n            express-rate-limit : ^5.2.3\n        \n            helmet : ^4.2.0\n        \n            joi : ^17.3.0\n        \n            nestjs-pino : ^1.3.0\n        \n            passport : ^0.4.1\n        \n            passport-local : ^1.0.0\n        \n            pino-pretty : ^4.3.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^6.6.3\n        \n            sqlite3 : ^5.0.0\n        \n            swagger-ui-express : ^4.1.5\n        \n            typeorm : ^0.2.29\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            OrderType   (src/.../pagination-params.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/base/crud/pagination-params.ts\n    \n        \n            \n                \n                    \n                        \n                        OrderType\n                    \n                \n                        \n                            \n                                 DESC\n                            \n                        \n                        \n                            \n                                Value : DESC\n                            \n                        \n                        \n                            \n                                 ASC\n                            \n                        \n                        \n                            \n                                Value : ASC\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            createSwagger   (src/.../main.ts)\n                        \n                        \n                            setupApp   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            bootstrap\n                        \n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            createSwagger\n                        \n                        \n                    \n                \n            \n            \n                \ncreateSwagger(app)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    app\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setupApp\n                        \n                        \n                    \n                \n            \n            \n                \nsetupApp(app, API_DEFAULT_PORT)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    app\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    API_DEFAULT_PORT\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\n$ npm installRunning the app\n# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CompanyModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CoreModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CronModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_CompanyModule\n\n\n\ncluster_CompanyModule_exports\n\n\n\ncluster_CompanyModule_providers\n\n\n\ncluster_CronModule\n\n\n\ncluster_CronModule_providers\n\n\n\n\nCompanyModule\n\nCompanyModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nCompanyModule->AppModule\n\n\n\n\n\nCompanyService \n\nCompanyService \n\nCompanyService  -->\n\nCompanyModule->CompanyService \n\n\n\n\n\nCronModule\n\nCronModule\n\nAppModule -->\n\nCronModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nCompanyService\n\nCompanyService\n\nCompanyModule -->\n\nCompanyService->CompanyModule\n\n\n\n\n\nCronService\n\nCronService\n\nCronModule -->\n\nCronService->CronModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        4 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    3 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    3 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    8 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    4 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ConfigModuleOptions   (src/.../app.module.ts)\n                        \n                        \n                            LoggerModuleOptions   (src/.../app.module.ts)\n                        \n                        \n                            TypeOrmModuleOptions   (src/.../app.module.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app.module.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            ConfigModuleOptions\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n    isGlobal: true,\n    validationOptions: {\n        allowUnknown: true,\n        abortEarly: true,\n    },\n    validationSchema: Joi.object({\n        PORT: Joi.number().default(3000),\n        NODE_ENV: Joi.string()\n            .required()\n            .valid('development', 'production', 'test', 'provision')\n            .default('development'),\n    }),\n}\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            LoggerModuleOptions\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n    pinoHttp: {\n        prettyPrint: {\n            colorize: true,\n            levelFirst: false, // Display the log level name before the logged date and time\n            translateTime: true,\n            messageFormat: '{msg}', // 'pid', 'msg', 'level'\n            ignore: 'pid,hostname',\n            errorLikeObjectKeys: ['err', 'error', 'errors'],\n        },\n    },\n}\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            TypeOrmModuleOptions\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n    entities: [`${__dirname}/**/*.entity.{ts,js}`],\n    type: 'sqlite' as const,\n    database: 'database.sqlite',\n    synchronize: true,\n    logging: true,\n}\n                        \n                    \n\n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
