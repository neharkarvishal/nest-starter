var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/interfaces/APIResponse.html",[0,0.219,1,1.405]],["body/interfaces/APIResponse.html",[0,0.44,1,2.589,2,0.861,3,0.094,4,0.074,5,0.084,6,1.21,7,0.16,8,0.781,9,1.282,10,1.7,11,0.996,12,2.19,13,2.101,14,1.552,15,1.752,16,1.858,17,1.552,18,1.349,19,0.312,20,0.012,21,1.294,22,2.31,23,0.775,24,1.597,25,0.105,26,0.243,27,0.229,28,0.007,29,1.693,30,1.693,31,1.693,32,1.693,33,1.693,34,1.693,35,1.693,36,1.506,37,0.007,38,2.738,39,1.293,40,1.665,41,1.293,42,1.293,43,1.293,44,1.293,45,1.293,46,1.293,47,1.21,48,1.293,49,1.293,50,1.135,51,1.964,52,1.21,53,0.835,54,1.868,55,1.293,56,2.121,57,1.293,58,1.293,59,1.293,60,1.293,61,1.293,62,1.293,63,1.293,64,1.293,65,1.293,66,1.293,67,1.293,68,2.193,69,1.868,70,1.293,71,1.293,72,1.293,73,1.926,74,1.293,75,1.293,76,1.868,77,1.293,78,1.293,79,1.293,80,1.293,81,1.293,82,2.249,83,1.293,84,1.749,85,1.749,86,1.293,87,1.293,88,1.293,89,1.293,90,1.293,91,1.293,92,1.293,93,1.293,94,1.293,95,1.868,96,1.293,97,1.293,98,1.293,99,1.21,100,1.293,101,1.293,102,2.249,103,1.293,104,1.293,105,1.293,106,1.293,107,1.293,108,1.293,109,1.293,110,1.293,111,1.135,112,1.293,113,1.293,114,1.293,115,1.293,116,0.256,117,1.293,118,1.293,119,1.293,120,1.293,121,1.293,122,1.21,123,2.053,124,1.293,125,1.293,126,1.293,127,1.749,128,1.693,129,1.293,130,1.293,131,1.293,132,0.007]],["title/classes/ApiException.html",[133,0.165,134,3.291]],["body/classes/ApiException.html",[3,0.11,4,0.086,5,0.098,7,0.187,8,0.873,9,1.355,12,2.407,13,2.305,16,2.089,18,1.13,19,0.337,20,0.012,23,0.763,24,0.949,25,0.169,26,0.285,27,0.152,28,0.006,37,0.005,116,0.3,132,0.008,133,0.161,134,6.081,135,1.372,136,3.448,137,5.873,138,3.214,139,4.922,140,2.681,141,7.668,142,3.884,143,4.682,144,2.316,145,4.053,146,4.646,147,1.453,148,5.59,149,0.893,150,3.484,151,6.664,152,4.053,153,4.053,154,4.053,155,4.053,156,4.053,157,4.053,158,4.053,159,6.399,160,5.601,161,5.59,162,5.59,163,5.59,164,4.09,165,4.09,166,6.399,167,6.399,168,6.399,169,6.399,170,6.399,171,5.59,172,1.464,173,4.053,174,4.053,175,4.053,176,4.053,177,4.053,178,4.053,179,1.464,180,2.767,181,4.053,182,4.053,183,4.053,184,1.566,185,2.965,186,1.057,187,2.027,188,4.433,189,4.053,190,2.336,191,4.053,192,3.214,193,4.053,194,4.053]],["title/controllers/AppController.html",[195,1.783,196,3.036]],["body/controllers/AppController.html",[3,0.17,4,0.132,5,0.151,7,0.288,20,0.012,23,0.555,25,0.223,26,0.438,27,0.17,28,0.008,37,0.008,132,0.01,133,0.247,140,2.178,147,1.141,150,2.777,172,2.25,186,1.178,195,2.676,196,5.388,197,2.886,198,5.451,199,1.35,200,8.103,201,6.228,202,1.373,203,3.78,204,6.228,205,6.228,206,1.918,207,6.228,208,6.228]],["title/interfaces/AppLaunchAction.html",[0,0.219,47,1.451]],["body/interfaces/AppLaunchAction.html",[0,0.443,1,2.573,2,0.902,3,0.099,4,0.077,5,0.088,6,1.268,7,0.167,8,0.807,9,0.834,10,0.958,11,0.755,12,1.856,13,1.593,14,0.875,15,0.988,16,1.409,17,0.875,18,1.344,19,0.295,20,0.012,21,1.04,22,2.04,23,0.777,24,1.411,25,0.11,26,0.255,27,0.231,28,0.007,29,1.751,30,1.751,31,1.751,32,1.751,33,1.751,34,1.751,35,1.751,36,1.539,37,0.007,38,2.776,39,1.354,40,1.689,41,1.354,42,1.354,43,1.354,44,1.354,45,1.354,46,1.354,47,1.808,48,2.454,49,2.454,50,2.155,51,2,52,2.297,53,0.875,54,1.931,55,1.354,56,2.177,57,1.354,58,1.354,59,1.354,60,1.354,61,1.354,62,1.354,63,1.354,64,1.354,65,1.354,66,1.354,67,1.354,68,2.251,69,1.931,70,1.354,71,1.354,72,1.354,73,1.976,74,1.354,75,1.354,76,1.931,77,1.354,78,1.354,79,1.354,80,1.354,81,1.354,82,2.297,83,1.354,84,1.808,85,1.808,86,1.354,87,1.354,88,1.354,89,1.354,90,1.354,91,1.354,92,1.354,93,1.354,94,1.354,95,1.931,96,1.354,97,1.354,98,1.354,99,1.268,100,1.354,101,1.354,102,2.297,103,1.354,104,1.354,105,1.354,106,1.354,107,1.354,108,1.354,109,1.354,110,1.354,111,1.189,112,1.354,113,1.354,114,1.354,115,1.354,116,0.268,117,1.354,118,1.354,119,1.354,120,1.354,121,1.354,122,1.268,123,2.107,124,1.354,125,1.354,126,1.354,127,1.808,128,1.751,129,1.354,130,1.354,131,1.354,132,0.007]],["title/modules/AppModule.html",[209,1.66,210,3.036]],["body/modules/AppModule.html",[3,0.112,4,0.087,5,0.1,9,0.663,19,0.224,20,0.012,23,0.574,25,0.25,26,0.289,27,0.112,28,0.006,37,0.006,116,0.304,132,0.008,133,0.163,147,1.034,149,0.906,184,1.588,187,1.086,196,4.717,197,2.615,199,1.034,202,1.421,209,3.006,210,6.181,211,2.065,212,2.157,213,2.369,214,1.904,215,2.157,216,3.1,217,2.257,218,3.597,219,3.597,220,5.13,221,5.13,222,5.13,223,5.13,224,5.13,225,4.824,226,3.253,227,2.369,228,2.257,229,3.259,230,4.13,231,4.717,232,4.13,233,6.074,234,4.94,235,4.11,236,6.366,237,2.806,238,3.642,239,6.366,240,4.11,241,3.259,242,2.494,243,4.11,244,2.806,245,5.644,246,3.259,247,4.11,248,3.597,249,4.11,250,4.11,251,4.11,252,4.11,253,4.11,254,4.11,255,4.11,256,3.597,257,0.906,258,3.259,259,3.597,260,2.578,261,3.597,262,3.597,263,3.597,264,2.329,265,2.039,266,3.597,267,3.597,268,3.597,269,3.597,270,3.597,271,3.597,272,2.157,273,3.597,274,3.259,275,3.259,276,3.597,277,3.597,278,3.597,279,6.577,280,3.597,281,1.833,282,3.597,283,3.597,284,1.982,285,4.11,286,3.597,287,4.11,288,4.11,289,4.11,290,1.19,291,4.11,292,4.11,293,4.11,294,5.644,295,5.644,296,4.11,297,4.11,298,5.644,299,4.11,300,4.11,301,4.11,302,4.11,303,4.11,304,4.11,305,4.11,306,2.962,307,3.597,308,4.11,309,4.11,310,4.11,311,4.11,312,4.11,313,3.597,314,4.11,315,1.437,316,1.535,317,1.904,318,3.259,319,3.259,320,3.259,321,3.259,322,3.597]],["title/controllers/AuthController.html",[195,1.783,323,2.833]],["body/controllers/AuthController.html",[3,0.14,4,0.109,5,0.124,7,0.237,9,0.827,11,0.955,16,1.398,19,0.259,20,0.012,23,0.582,24,1.201,25,0.246,26,0.36,27,0.178,28,0.007,37,0.007,53,1.238,116,0.379,132,0.009,133,0.286,140,1.794,144,2.126,147,0.94,149,1.131,150,2.288,172,1.854,186,0.97,190,4.366,195,2.204,197,2.377,199,1.198,202,1.131,203,3.114,206,1.58,257,1.586,306,3.43,323,4.463,324,4.069,325,2.216,326,5.706,327,5.13,328,6.631,329,5.543,330,5.13,331,5.13,332,6.849,333,4.196,334,3.293,335,4.069,336,4.069,337,3.114,338,3.951,339,3.334,340,2.288,341,4.069,342,3.43,343,3.754,344,4.147,345,3.754,346,4.196,347,4.49,348,3.03,349,2.615,350,4.49,351,3.152,352,4.49,353,4.49,354,4.069,355,3.754,356,4.49,357,4.49,358,1.916,359,4.49,360,2.692]],["title/modules/AuthModule.html",[209,1.66,220,2.833]],["body/modules/AuthModule.html",[3,0.141,4,0.11,5,0.125,20,0.012,25,0.252,26,0.363,27,0.141,28,0.007,37,0.007,132,0.009,133,0.205,187,1.367,197,3.045,209,3.137,211,2.599,212,2.714,213,2.981,214,2.396,215,2.714,216,3.966,217,3.609,220,5.791,225,5.146,226,3.787,227,2.981,228,2.84,232,5.284,241,5.728,242,3.139,256,4.527,323,4.93,325,1.593,337,3.139,344,4.62,345,3.784,354,5.211,361,4.527,362,5.172,363,4.527,364,5.473,365,5.473,366,5.172,367,5.56,368,6.571,369,4.102,370,7.222,371,5.172,372,5.172,373,5.172,374,5.172,375,4.102,376,4.102,377,5.172,378,4.527,379,5.172,380,5.172,381,5.172]],["title/injectables/AuthService.html",[344,2.392,382,1.165]],["body/injectables/AuthService.html",[3,0.131,4,0.102,5,0.117,7,0.222,9,1.237,19,0.304,20,0.012,23,0.748,25,0.224,26,0.338,27,0.131,28,0.007,37,0.006,53,1.852,116,0.567,132,0.009,133,0.191,144,2.6,147,1.406,149,1.691,165,3.522,179,1.739,186,1.487,199,1.15,202,1.63,257,1.383,325,2.587,326,4.976,342,3.881,343,3.522,344,3.616,348,2.51,349,1.926,351,3.366,355,4.591,358,2.344,369,3.818,382,1.762,383,2.231,384,4.214,385,6.275,386,6.275,387,6.275,388,4.814,389,8.011,390,4.814,391,6.275,392,7.397,393,4.814,394,4.814,395,6.275,396,3.507,397,4.814,398,6.275,399,4.814,400,6.275,401,4.814,402,3.808,403,4.814,404,4.814,405,4.814,406,3.522,407,4.814,408,6.275,409,4.284,410,4.814,411,4.214,412,3.522,413,4.814,414,4.814,415,4.814]],["title/classes/BaseModel.html",[133,0.165,416,1.85]],["body/classes/BaseModel.html",[0,0.232,3,0.119,4,0.093,5,0.106,7,0.202,8,0.921,9,1.15,11,0.64,18,1.04,19,0.311,20,0.012,23,0.635,25,0.216,27,0.161,28,0.006,36,1.381,37,0.008,116,0.436,132,0.008,133,0.174,135,1.485,139,2.815,147,1.459,149,1.3,179,1.585,180,2.994,186,1.115,199,1.081,202,1.3,206,2.36,264,1.585,265,1.585,290,1.708,315,1.534,316,1.638,317,2.032,325,2.36,351,2.844,358,2.204,396,2.972,416,2.63,417,3.478,418,4.877,419,5.606,420,5.23,421,5.216,422,2.851,423,4.551,424,5.606,425,4.678,426,4.877,427,4.386,428,4.386,429,2.204,430,1.935,431,4.316,432,4.386,433,4.386,434,4.327,435,4.386,436,4.386,437,3.58,438,4.327,439,4.83,440,4.386,441,3.478,442,3.478,443,3.437,444,4.877,445,4.386,446,4.877,447,2.755,448,3.478,449,3.838,450,1.534,451,3.838,452,5.163,453,3.209,454,5.163,455,3.478,456,3.209,457,1.754,458,3.838,459,2.815,460,2.662,461,2.131,462,3.838,463,2.528,464,3.838,465,2.528,466,3.838,467,3.838,468,3.838,469,2.528,470,2.408,471,2.662,472,3.838,473,2.032,474,2.032,475,3.838,476,3.838,477,2.815,478,3.838,479,3.478,480,3.838]],["title/interfaces/BaseRoute.html",[0,0.219,481,2.001]],["body/interfaces/BaseRoute.html",[0,0.387,2,1.041,3,0.114,4,0.089,5,0.101,7,0.193,8,0.892,10,1.106,11,0.611,14,1.01,15,1.14,17,1.01,18,1.229,19,0.317,20,0.012,21,1.149,23,0.711,25,0.173,26,0.294,27,0.22,28,0.006,36,1.338,37,0.006,51,1.997,116,0.541,132,0.008,136,1.798,140,2.445,184,2.208,186,1.23,257,1.541,264,2.065,265,2.065,284,3.372,315,1.998,316,2.135,317,1.939,450,1.463,461,1.512,469,2.412,470,2.298,481,2.755,482,2.298,483,2.612,484,3.669,485,3.669,486,3.669,487,3.514,488,3.901,489,3.901,490,2.857,491,2.857,492,2.686,493,2.686,494,2.103,495,2.686,496,2.686,497,2.686,498,2.686,499,3.668,500,2.103,501,2.018,502,3.468,503,2.857,504,2.857,505,2.54,506,2.857,507,2.857,508,3.468,509,2.298,510,2.018,511,2.196,512,2.857,513,2.857,514,1.866,515,3.7,516,2.018,517,2.686,518,2.857,519,2.857,520,2.196,521,2.196,522,2.196,523,2.211,524,1.674,525,2.857,526,2.018,527,2.857,528,2.196,529,2.686,530,2.103,531,2.686,532,2.857,533,2.686,534,2.857,535,2.857,536,2.857,537,2.857,538,3.901,539,2.857,540,2.298,541,2.857,542,2.455,543,2.686,544,2.018,545,2.686,546,2.686,547,2.686,548,2.103,549,2.999,550,2.196,551,2.857,552,2.857,553,2.857,554,2.857]],["title/interfaces/Comment.html",[0,0.219,123,1.451]],["body/interfaces/Comment.html",[0,0.443,1,2.569,2,0.897,3,0.098,4,0.077,5,0.087,6,1.261,7,0.166,8,0.804,10,0.953,11,0.752,12,1.85,13,1.586,14,0.87,15,0.982,16,1.403,17,0.87,18,1.347,19,0.301,20,0.012,21,1.036,22,2.034,23,0.778,24,1.407,25,0.109,26,0.253,27,0.23,28,0.007,29,1.744,30,1.744,31,1.744,32,1.744,33,1.744,34,1.744,35,1.744,36,1.535,37,0.007,38,2.771,39,1.347,40,1.686,41,1.347,42,1.347,43,1.347,44,1.347,45,1.347,46,1.347,47,1.261,48,1.347,49,1.347,50,1.182,51,1.977,52,1.261,53,0.87,54,1.924,55,1.347,56,2.171,57,1.347,58,1.347,59,1.347,60,1.347,61,1.347,62,1.347,63,1.347,64,1.347,65,1.347,66,1.347,67,1.347,68,2.244,69,1.924,70,1.347,71,1.347,72,1.347,73,1.97,74,1.347,75,1.347,76,1.924,77,1.347,78,1.347,79,1.347,80,1.347,81,1.347,82,2.291,83,1.347,84,1.801,85,1.801,86,1.347,87,1.347,88,1.347,89,1.347,90,1.347,91,1.347,92,1.347,93,1.347,94,1.347,95,2.589,96,1.347,97,1.347,98,1.347,99,1.261,100,1.347,101,1.347,102,2.291,103,1.347,104,1.347,105,1.347,106,1.347,107,1.347,108,1.347,109,1.347,110,1.347,111,1.182,112,1.347,113,1.347,114,1.347,115,1.347,116,0.266,117,1.347,118,1.347,119,1.347,120,1.347,121,1.347,122,1.261,123,2.595,124,2.448,125,2.448,126,2.448,127,1.801,128,1.744,129,1.347,130,1.347,131,1.347,132,0.007]],["title/interfaces/Comments.html",[0,0.219,127,1.451]],["body/interfaces/Comments.html",[0,0.444,1,2.59,2,0.926,3,0.101,4,0.079,5,0.09,6,1.302,7,0.172,8,0.822,10,0.984,11,0.769,12,1.883,13,1.623,14,0.899,15,1.014,16,1.435,17,0.899,18,1.342,19,0.264,20,0.012,21,1.06,22,2.07,23,0.776,24,1.432,25,0.113,26,0.262,27,0.231,28,0.007,29,1.784,30,1.784,31,1.784,32,1.784,33,1.784,34,1.784,35,1.784,36,1.557,37,0.007,38,2.797,39,1.391,40,1.702,41,1.391,42,1.391,43,1.391,44,1.391,45,1.391,46,1.391,47,1.302,48,1.391,49,1.391,50,1.221,51,1.986,52,1.302,53,0.899,54,1.968,55,1.391,56,2.209,57,1.391,58,1.391,59,1.391,60,1.391,61,1.391,62,1.391,63,1.391,64,1.391,65,1.391,66,1.391,67,1.391,68,2.284,69,1.968,70,1.391,71,1.391,72,1.391,73,2.005,74,1.391,75,1.391,76,1.968,77,1.391,78,1.391,79,1.391,80,1.391,81,1.391,82,2.325,83,1.391,84,1.842,85,1.842,86,1.391,87,1.391,88,1.391,89,1.391,90,1.391,91,1.391,92,1.391,93,1.391,94,1.391,95,1.968,96,1.391,97,1.391,98,1.391,99,1.302,100,1.391,101,1.391,102,2.325,103,1.391,104,1.391,105,1.391,106,1.391,107,1.391,108,1.391,109,1.391,110,1.391,111,1.221,112,1.391,113,1.391,114,1.391,115,1.391,116,0.275,117,1.391,118,1.391,119,1.391,120,1.391,121,1.391,122,1.302,123,2.453,124,1.391,125,1.391,126,1.391,127,2.547,128,1.784,129,1.391,130,1.391,131,1.391,132,0.007]],["title/classes/CreateTagsDto.html",[133,0.165,555,2.177]],["body/classes/CreateTagsDto.html",[0,0.345,3,0.14,4,0.109,5,0.124,7,0.236,8,1.182,19,0.323,20,0.012,23,0.697,25,0.229,27,0.213,28,0.007,37,0.007,116,0.601,132,0.009,133,0.31,135,1.734,147,0.939,150,2.284,172,1.851,199,0.939,206,2.012,272,2.688,281,2.284,290,2.082,339,3.026,340,2.284,416,2.912,422,2.049,447,2.523,450,2.284,457,2.612,514,2.284,523,1.439,555,3.427,556,3.288,557,4.86,558,4.483,559,5.122,560,2.952,561,3.282,562,3.764,563,3.764,564,4.144,565,3.948,566,3.586,567,2.688,568,2.688,569,2.688,570,3.109,571,2.952,572,3.206,573,2.952,574,2.952,575,2.952,576,3.427,577,2.952,578,2.952,579,2.47,580,2.952,581,2.952,582,2.952,583,3.497,584,2.952,585,2.688,586,2.952,587,2.952,588,2.952,589,2.952,590,3.497,591,3.497,592,2.952,593,2.952,594,3.109,595,3.748]],["title/classes/CreateUserDto.html",[133,0.165,596,2.177]],["body/classes/CreateUserDto.html",[0,0.271,3,0.098,4,0.076,5,0.087,7,0.166,8,1.021,9,1.055,19,0.328,20,0.012,23,0.76,25,0.218,27,0.189,28,0.005,37,0.005,50,2.36,51,1.67,53,0.866,73,2.43,116,0.443,132,0.007,133,0.275,135,1.215,147,1.319,150,3.209,172,1.297,186,0.679,199,0.658,206,1.846,257,1.321,260,1.436,272,1.883,281,1.6,290,1.735,325,1.846,339,3.335,340,1.6,346,2.304,348,1.436,349,3.031,351,3.573,358,2.584,402,3.115,409,3.504,416,2.289,422,1.436,437,2.178,438,2.178,439,4.199,447,2.315,450,1.795,457,2.053,459,2.304,461,1.297,477,2.304,514,1.6,523,1.008,530,1.804,558,3.141,560,2.069,561,3.477,562,4.148,563,4.148,564,3.454,565,3.291,566,2.819,567,1.883,569,1.883,571,2.069,572,2.672,573,2.069,574,2.069,575,2.069,576,3.144,577,2.069,578,2.069,579,1.731,580,2.069,581,2.069,582,2.069,584,3.988,585,1.883,586,2.069,587,2.069,588,2.069,589,2.069,592,3.769,593,2.069,596,2.693,597,2.304,598,4.197,599,5.544,600,5.544,601,3.589,602,3.589,603,5.133,604,3.589,605,3.846,606,3.589,607,3.589,608,3.589,609,3.589,610,3.589,611,3.504,612,4.785,613,2.178,614,3.504,615,2.626,616,2.45,617,3.115,618,2.626,619,2.626,620,2.626,621,2.626,622,2.626,623,2.626,624,2.626,625,2.626,626,2.626,627,3.756,628,2.626,629,2.626,630,2.626,631,2.178,632,2.626,633,2.626,634,2.626,635,2.626,636,2.45,637,2.626,638,2.45,639,2.626,640,2.626,641,2.626,642,2.626,643,2.626,644,3.504,645,2.626,646,2.626,647,2.45,648,3.756,649,2.45,650,2.304,651,2.626,652,2.626,653,3.756,654,3.756,655,2.45,656,2.45,657,2.626,658,2.069,659,2.626]],["title/modules/CronModule.html",[209,1.66,221,2.833]],["body/modules/CronModule.html",[3,0.162,4,0.127,5,0.144,20,0.012,25,0.233,26,0.419,27,0.162,28,0.008,37,0.008,132,0.01,133,0.237,187,1.576,209,3.269,211,2.996,212,3.128,213,3.436,214,2.762,215,3.128,216,4.227,217,3.274,221,5.78,226,4.135,227,3.436,228,3.274,660,5.218,661,5.218,662,5.667,663,5.667,664,5.961,665,4.898,666,7.175,667,5.961]],["title/injectables/CronService.html",[382,1.165,662,2.833]],["body/injectables/CronService.html",[3,0.072,4,0.056,5,0.064,7,0.123,8,0.641,9,1.119,10,1.49,12,0.818,18,1.233,19,0.294,20,0.012,23,0.737,25,0.152,26,0.187,27,0.072,28,0.004,37,0.004,111,0.871,116,0.633,132,0.006,133,0.105,144,1.101,147,1.457,149,1.529,150,2.235,179,1.811,186,0.776,187,1.775,188,3.976,199,0.752,202,1.677,206,1.544,238,3.941,244,1.814,257,1.602,260,1.063,264,0.96,265,0.96,315,2.348,316,0.992,317,1.231,318,2.107,319,2.107,320,2.107,382,1.152,383,1.231,429,2.106,430,1.849,483,2.106,492,3.619,509,2.753,528,3.38,530,1.335,540,1.459,617,3.422,631,1.613,662,2.801,665,5.052,668,2.325,669,4.104,670,4.388,671,6.96,672,4.459,673,4.104,674,5.638,675,6.912,676,4.104,677,5.013,678,4.472,679,5.013,680,4.104,681,4.104,682,4.104,683,4.104,684,4.104,685,4.104,686,4.104,687,5.638,688,5.013,689,5.013,690,5.013,691,5.638,692,5.638,693,2.657,694,4.472,695,4.104,696,3.592,697,4.104,698,7.117,699,2.657,700,7.511,701,5.638,702,6.034,703,4.104,704,6.859,705,2.657,706,7.27,707,4.104,708,2.657,709,4.104,710,2.657,711,4.104,712,4.104,713,2.657,714,4.104,715,2.657,716,4.104,717,2.657,718,5.013,719,4.104,720,4.104,721,2.657,722,2.657,723,2.657,724,2.657,725,2.657,726,2.657,727,2.657,728,2.657,729,2.657,730,5.013,731,2.657,732,5.013,733,3.043,734,2.657,735,4.104,736,4.104,737,2.657,738,4.104,739,2.657,740,2.657,741,2.325,742,1.705,743,2.657,744,4.104,745,2.657,746,2.657,747,2.325,748,2.325,749,1.814,750,2.657,751,2.657,752,2.107,753,2.657,754,2.657,755,2.657,756,2.949,757,2.657,758,2.657,759,2.657,760,2.325,761,5.013,762,2.325,763,2.657,764,2.657,765,2.657,766,4.388,767,2.657,768,2.657,769,2.657,770,4.104,771,2.657,772,4.104,773,2.325,774,2.657,775,2.657,776,2.657,777,2.657,778,4.104,779,2.657,780,2.657,781,2.657,782,5.013,783,2.657,784,2.657,785,2.657,786,2.657]],["title/classes/CrudConfigService.html",[133,0.165,787,2.519]],["body/classes/CrudConfigService.html",[3,0.065,4,0.05,5,0.058,7,0.11,8,0.587,9,0.383,10,0.628,11,0.347,14,0.573,15,0.647,17,0.573,18,1.042,19,0.294,20,0.012,21,0.478,23,0.573,24,0.556,25,0.175,26,0.167,27,0.157,28,0.003,37,0.003,40,1.313,116,0.508,132,0.005,133,0.265,135,0.804,136,2.004,140,1.315,147,0.689,149,0.524,179,0.858,184,2.233,186,1.463,187,1.402,199,0.689,202,0.524,206,2.402,214,1.101,238,1.246,257,1.611,260,1.866,264,0.858,265,0.858,284,1.812,290,0.688,315,0.831,316,0.887,338,3.376,360,2.448,396,2.577,429,1.404,430,1.53,443,3.219,461,2.413,473,1.742,474,1.742,481,2.787,483,1.743,484,1.973,485,1.973,486,1.246,487,2.904,494,1.889,500,1.889,501,1.812,510,2.558,511,2.783,515,3.553,516,1.812,520,1.973,521,2.448,522,1.246,523,1.49,524,1.504,542,2.483,544,2.787,548,3.355,549,3.225,550,1.973,572,1.676,787,2.281,788,2.994,789,1.525,790,3.508,791,3.29,792,1.973,793,2.375,794,2.566,795,2.375,796,1.369,797,2.994,798,1.442,799,1.442,800,1.442,801,1.442,802,2.566,803,1.442,804,3.621,805,2.566,806,3.185,807,2.566,808,2.566,809,1.621,810,4.196,811,1.621,812,1.621,813,1.621,814,1.621,815,2.566,816,1.621,817,3.543,818,2.566,819,1.621,820,2.566,821,2.413,822,1.621,823,2.167,824,1.621,825,1.621,826,1.621,827,1.621,828,1.973,829,1.621,830,2.566,831,1.621,832,1.621,833,2.566,834,1.621,835,1.621,836,1.621,837,1.621,838,1.621,839,1.621,840,1.621,841,2.566,842,1.525,843,2.994,844,2.831,845,1.621,846,1.369,847,1.621,848,1.621,849,1.621,850,3.185,851,2.566,852,1.621,853,1.369,854,1.442,855,1.621,856,1.621,857,1.442,858,1.621,859,1.621,860,2.566,861,1.621,862,1.621,863,2.566,864,1.621,865,1.621,866,2.566,867,1.621,868,1.621,869,1.621,870,1.621,871,1.621,872,1.621,873,1.621,874,1.621,875,2.566,876,1.621,877,2.413,878,1.525,879,2.281,880,2.281,881,1.621,882,3.185,883,1.621,884,1.442,885,1.621,886,1.621,887,4.396,888,3.185,889,2.566,890,1.621,891,1.621,892,1.621,893,1.621,894,1.621,895,1.621,896,4.396,897,1.621,898,1.525,899,1.621,900,1.621,901,1.621,902,1.621,903,1.621,904,1.621,905,1.621,906,3.185,907,1.621,908,1.621,909,1.621,910,1.621,911,1.621,912,1.621,913,2.566,914,1.621,915,1.621,916,1.621,917,2.566,918,1.621,919,1.621,920,1.621,921,2.566,922,1.621,923,1.621,924,2.566,925,3.185,926,1.621,927,1.621,928,3.185,929,1.621,930,1.621,931,1.621,932,2.566,933,1.621,934,1.621,935,2.566,936,1.621,937,1.621,938,2.566,939,1.621,940,1.621,941,1.621,942,2.566,943,1.621,944,1.621,945,1.621,946,1.621,947,1.621,948,1.621,949,1.621,950,1.621,951,1.621,952,1.621,953,1.621,954,1.621,955,1.621,956,1.621,957,1.621,958,1.621,959,1.621,960,1.621,961,1.621,962,2.566,963,1.621,964,2.566,965,1.621,966,1.621,967,1.621,968,1.621,969,1.621,970,1.621,971,1.621,972,2.566,973,1.621,974,1.621]],["title/classes/CrudController.html",[133,0.165,975,2.833]],["body/classes/CrudController.html",[1,2.361,3,0.081,4,0.063,5,0.072,7,0.137,9,1.084,11,1.158,16,1.743,18,1.146,19,0.323,20,0.012,21,1.403,24,0.694,25,0.211,26,0.208,27,0.081,28,0.004,37,0.006,116,0.497,132,0.006,133,0.118,135,1.003,137,2.167,142,4.079,144,2.221,146,1.901,147,1.232,149,1.481,150,2.852,164,3.262,172,1.07,179,1.07,185,3.262,186,1.209,187,2.194,188,4.73,195,2.887,199,0.817,202,1.41,257,1.41,281,2.659,306,3.129,325,2.442,333,2.861,334,1.901,348,1.185,358,2.389,360,3.853,396,3.689,416,3.2,422,3.079,461,1.611,465,1.707,524,2.87,526,3.46,528,3.659,542,1.272,567,1.554,579,2.149,636,3.043,756,1.847,766,5.22,792,2.813,828,4.382,844,4.079,880,2.705,975,3.043,976,2.592,977,3.922,978,3.902,979,4.364,980,3.043,981,5.22,982,3.902,983,4.73,984,4.366,985,4.071,986,4.071,987,2.962,988,4.366,989,2.962,990,3.902,991,5.22,992,4.761,993,3.902,994,3.262,995,3.902,996,1.901,997,5.598,998,4.458,999,4.314,1000,2.962,1001,2.962,1002,4.314,1003,2.962,1004,3.83,1005,2.962,1006,2.962,1007,2.962,1008,2.022,1009,5.22,1010,4.458,1011,2.962,1012,2.962,1013,2.022,1014,4.364,1015,2.962,1016,2.962,1017,2.962,1018,1.798,1019,3.262,1020,4.458,1021,2.962,1022,2.962,1023,4.73,1024,2.349,1025,5.882,1026,2.349,1027,2.962,1028,2.592,1029,2.705,1030,2.592,1031,5.598,1032,3.902,1033,2.962,1034,3.262,1035,2.962,1036,2.962,1037,2.962,1038,2.962,1039,2.962,1040,4.251,1041,2.962,1042,2.962,1043,2.962,1044,2.962,1045,2.349,1046,2.349,1047,2.349,1048,2.349,1049,2.962,1050,2.349]],["title/interfaces/CrudOptions.html",[0,0.219,510,2.001]],["body/interfaces/CrudOptions.html",[0,0.381,2,0.998,3,0.109,4,0.085,5,0.097,7,0.185,8,0.866,9,1.316,10,1.06,11,0.586,14,0.968,15,1.093,17,0.968,18,1.217,19,0.337,20,0.012,21,1.117,23,0.681,25,0.168,26,0.282,27,0.218,28,0.005,36,1.3,37,0.005,51,1.846,116,0.41,132,0.008,136,1.724,140,1.403,184,2.145,186,1.204,257,1.514,264,2.006,265,2.006,284,1.934,315,1.941,316,2.074,317,1.859,450,2.402,461,2.482,469,2.312,470,2.203,481,1.934,482,2.203,483,1.499,484,2.105,485,2.105,486,2.913,487,2.79,488,4.689,489,3.79,490,2.739,491,2.739,492,2.575,493,2.575,494,2.016,495,2.575,496,2.575,497,2.575,498,2.575,499,3.563,500,2.016,501,1.934,502,3.369,503,2.739,504,2.739,505,2.435,506,2.739,507,2.739,508,4.169,509,2.203,510,2.677,511,3.604,512,4.689,513,2.739,514,3.063,515,3.666,516,3.312,517,2.575,518,2.739,519,2.739,520,2.105,521,3.604,522,2.105,523,2.189,524,1.605,525,2.739,526,1.934,527,2.739,528,2.105,529,2.575,530,2.016,531,2.575,532,2.739,533,2.575,534,2.739,535,2.739,536,2.739,537,2.739,538,3.79,539,2.739,540,2.203,541,2.739,542,2.385,543,2.575,544,1.934,545,2.575,546,2.575,547,2.575,548,2.016,549,2.913,550,2.105,551,2.739,552,2.739,553,2.739,554,2.739,999,3.563,1051,5.141]],["title/classes/CrudRoutesFactory.html",[133,0.165,879,2.519]],["body/classes/CrudRoutesFactory.html",[3,0.057,4,0.045,5,0.051,7,0.097,8,0.531,9,0.987,10,0.554,11,0.306,14,0.506,15,0.571,17,0.506,18,0.995,19,0.305,20,0.012,21,0.421,23,0.545,24,0.491,25,0.164,26,0.147,27,0.148,28,0.003,37,0.003,40,1.233,116,0.563,132,0.005,133,0.253,135,0.709,136,3.241,140,1.189,144,0.868,147,1.369,149,1.35,179,0.757,184,2.097,186,1.426,187,1.305,199,0.623,202,1.493,206,2.345,214,0.971,238,3.347,257,1.557,260,1.716,264,0.757,265,0.757,284,1.639,290,0.607,315,0.733,316,0.783,338,3.192,360,2.251,396,1.913,429,1.27,430,1.407,443,3.515,461,2.212,473,1.575,474,1.575,481,3.266,483,1.603,484,1.784,485,1.784,486,1.1,487,3.482,494,2.481,500,2.481,501,1.639,510,3.075,511,2.59,515,3.421,516,1.639,520,1.1,521,2.251,522,1.1,523,1.791,524,2.449,542,2.332,544,2.617,548,3.404,549,3.05,550,1.784,572,1.516,787,1.272,788,4.842,789,1.345,790,2.063,792,1.1,794,1.43,796,1.208,797,2.754,798,1.272,799,1.272,800,1.272,801,1.272,802,2.321,803,1.272,804,3.37,805,2.321,806,2.929,807,2.321,808,2.321,809,1.43,810,3.968,811,1.43,812,1.43,813,1.43,814,1.43,815,2.321,816,1.43,817,3.35,818,2.321,819,1.43,820,2.321,821,2.182,822,1.43,823,1.959,824,1.43,825,1.43,826,1.43,827,1.43,828,1.784,829,1.43,830,2.321,831,1.43,832,1.43,833,2.321,834,1.43,835,1.43,836,1.43,837,1.43,838,1.43,839,1.43,840,1.43,841,3.37,842,1.345,843,2.754,844,2.604,845,1.43,846,1.208,847,1.43,848,1.43,849,1.43,850,2.929,851,2.321,852,1.43,853,1.208,854,1.272,855,1.43,856,1.43,857,1.272,858,1.43,859,1.43,860,2.321,861,1.43,862,1.43,863,2.321,864,1.43,865,1.43,866,2.321,867,1.43,868,1.43,869,1.43,870,1.43,871,1.43,872,1.43,873,1.43,874,1.43,875,2.321,876,1.43,877,2.182,878,1.345,879,2.996,880,3.527,881,1.43,882,2.929,883,1.43,884,1.272,885,1.43,886,1.43,887,4.18,888,2.929,889,2.321,890,2.321,891,1.43,892,2.929,893,1.43,894,2.929,895,1.43,896,4.5,897,1.43,898,2.754,899,2.929,900,1.43,901,1.43,902,1.43,903,1.43,904,1.43,905,2.321,906,2.929,907,1.43,908,1.43,909,2.321,910,1.43,911,1.43,912,3.37,913,2.321,914,3.37,915,1.43,916,1.43,917,2.321,918,1.43,919,1.43,920,1.43,921,2.321,922,1.43,923,1.43,924,2.321,925,2.929,926,1.43,927,1.43,928,2.929,929,1.43,930,1.43,931,1.43,932,2.321,933,1.43,934,1.43,935,2.321,936,1.43,937,1.43,938,2.321,939,1.43,940,1.43,941,1.43,942,2.321,943,1.43,944,1.43,945,3.37,946,1.43,947,1.43,948,1.43,949,1.43,950,1.43,951,1.43,952,1.43,953,1.43,954,1.43,955,1.43,956,1.43,957,1.43,958,1.43,959,1.43,960,1.43,961,2.321,962,2.321,963,1.43,964,2.321,965,1.43,966,1.43,967,2.321,968,1.43,969,1.43,970,2.321,971,1.43,972,2.321,973,1.43,974,1.43,1052,3.4,1053,3.4,1054,3.4,1055,3.4,1056,2.095,1057,3.4,1058,2.095,1059,2.095,1060,2.095,1061,2.095,1062,2.095,1063,2.095,1064,2.095,1065,2.095,1066,2.095,1067,2.095,1068,2.095,1069,2.095,1070,2.095,1071,2.095,1072,2.095,1073,2.095,1074,2.095]],["title/classes/CrudService.html",[133,0.165,1075,2.833]],["body/classes/CrudService.html",[3,0.083,4,0.065,5,0.074,7,0.141,9,1.169,11,1.193,14,1.103,17,1.103,18,1.156,19,0.288,20,0.012,21,1.219,23,0.487,25,0.214,26,0.215,27,0.083,28,0.007,37,0.01,116,0.536,132,0.006,133,0.121,135,1.036,144,2.265,146,4.526,147,1.358,149,1.598,164,4.746,186,1.599,187,1.208,199,0.837,202,1.598,257,1.598,290,1.323,306,3.7,325,2.567,348,1.224,349,2.425,358,2.634,412,4.436,416,1.365,420,2.09,422,2.187,429,1.143,430,1.004,447,1.183,448,2.427,450,2.534,460,3.318,465,1.764,473,1.418,474,1.418,479,2.427,523,1.283,524,2.425,526,2.923,528,2.398,530,2.296,540,2.509,555,3.181,567,1.606,579,2.203,596,3.181,614,2.09,733,1.858,752,3.624,756,1.268,792,2.869,828,2.398,844,4.13,846,3.494,880,2.773,977,4,978,3.999,979,4.436,980,3.119,981,5.306,982,3.999,983,3.624,984,4.139,985,3.119,986,3.119,988,3.732,990,3.999,991,5.306,992,4.139,993,3.999,994,4,995,3.999,996,2.933,1002,4.164,1004,3.737,1008,3.119,1013,3.119,1014,3.343,1018,2.773,1019,3.343,1028,2.679,1029,1.858,1030,2.679,1034,2.24,1075,3.119,1076,2.679,1077,3.999,1078,3.624,1079,3.119,1080,3.343,1081,2.427,1082,4.808,1083,3.061,1084,3.061,1085,5.981,1086,3.061,1087,5.518,1088,5.396,1089,3.624,1090,3.061,1091,3.119,1092,3.061,1093,3.624,1094,3.061,1095,3.343,1096,3.061,1097,3.061,1098,3.624,1099,3.061,1100,2.679,1101,2.679,1102,3.061,1103,4.808,1104,3.061,1105,2.24,1106,3.061,1107,3.061,1108,2.679,1109,2.679,1110,3.061,1111,3.061,1112,4.569,1113,2.679]],["title/classes/CustomQueryBuilder.html",[133,0.165,434,2.519]],["body/classes/CustomQueryBuilder.html",[3,0.111,4,0.087,5,0.099,7,0.188,8,0.876,9,0.905,11,0.595,14,1.809,17,0.983,18,1.239,19,0.305,20,0.012,25,0.17,27,0.153,28,0.006,36,0.954,37,0.009,51,1.354,116,0.415,132,0.008,135,1.379,146,4.119,147,1.434,149,1.237,184,2.802,186,1.371,199,1.028,202,1.524,257,1.524,260,1.629,264,2.62,265,2.62,306,2.944,315,1.424,316,2.708,317,1.887,325,2.52,358,2.868,423,4.38,430,2.458,434,4.818,447,1.574,450,1.424,457,2.244,461,1.472,465,2.348,469,2.348,470,2.237,471,2.472,523,1.575,617,3.405,733,2.472,756,2.865,878,4.119,1032,3.565,1105,2.98,1114,3.23,1115,6.416,1116,6.416,1117,6.416,1118,6.416,1119,5.61,1120,6.914,1121,6.914,1122,5.61,1123,4.073,1124,4.073,1125,4.073,1126,4.073,1127,5.61,1128,5.483,1129,4.073,1130,4.073,1131,4.073,1132,4.073,1133,5.61,1134,7.939,1135,4.073,1136,4.073,1137,3.565,1138,4.449,1139,3.565,1140,2.98,1141,3.565,1142,3.565,1143,4.073,1144,4.449,1145,4.073,1146,4.073,1147,4.073,1148,4.073,1149,4.073,1150,4.073,1151,4.073,1152,4.073,1153,4.073,1154,6.416,1155,6.914,1156,4.073,1157,4.073,1158,5.61,1159,4.073,1160,4.073]],["title/modules/DatabaseModule.html",[209,1.66,222,2.833]],["body/modules/DatabaseModule.html",[3,0.152,4,0.119,5,0.135,20,0.012,25,0.243,26,0.392,27,0.204,28,0.008,37,0.008,53,1.663,132,0.009,133,0.221,186,1.302,187,1.474,209,3.123,211,2.803,216,3.063,217,3.063,222,4.703,257,1.721,260,2.755,281,3.072,325,1.718,376,4.423,447,2.155,450,2.409,531,4.422,568,3.615,823,3.214,979,5.04,1100,4.881,1101,4.881,1161,4.423,1162,5.869,1163,5.463,1164,4.881,1165,4.881,1166,4.881,1167,5.928,1168,4.881,1169,4.881,1170,4.423,1171,4.881,1172,4.881,1173,4.881,1174,4.881,1175,4.881,1176,4.881]],["title/modules/EmailModule.html",[209,1.66,1177,2.833]],["body/modules/EmailModule.html",[3,0.161,4,0.126,5,0.143,20,0.012,25,0.232,26,0.416,27,0.161,28,0.008,37,0.008,132,0.01,133,0.235,187,1.564,197,2.742,209,3.262,211,2.974,212,3.105,213,3.41,214,2.742,215,3.105,216,4.213,217,4.213,226,4.117,227,3.41,228,3.25,232,4.33,241,5.664,242,3.591,349,2.857,1177,5.722,1178,5.179,1179,5.179,1180,5.179,1181,5.54,1182,5.917,1183,5.917]],["title/classes/EmailScheduleDto.html",[133,0.165,1184,2.833]],["body/classes/EmailScheduleDto.html",[3,0.16,4,0.125,5,0.142,7,0.271,8,1.11,19,0.315,20,0.012,23,0.752,25,0.178,27,0.16,28,0.008,37,0.008,52,2.674,111,2.508,132,0.01,133,0.282,135,1.989,147,1.456,150,3.544,339,3.544,340,2.619,561,3.843,611,5.221,1184,4.854,1185,5.141,1186,7.648,1187,7.648,1188,7.111,1189,5.874,1190,6.065,1191,5.874,1192,5.874,1193,5.874]],["title/controllers/EmailSchedulingController.html",[195,1.783,1194,3.036]],["body/controllers/EmailSchedulingController.html",[3,0.161,4,0.125,5,0.143,7,0.272,9,0.951,19,0.234,20,0.012,25,0.241,26,0.414,27,0.161,28,0.008,37,0.008,116,0.436,132,0.01,133,0.234,140,2.062,147,1.08,149,1.3,150,2.629,172,2.13,195,2.533,197,2.732,199,1.306,202,1.3,203,3.578,206,1.816,325,2.359,333,3.784,334,3.784,349,2.358,358,2.202,429,2.202,742,3.784,1184,5.432,1194,5.214,1195,5.16,1196,6.237,1197,5.16,1198,7.127,1199,5.896,1200,6.237,1201,5.16,1202,4.917,1203,5.16,1204,5.896,1205,5.896,1206,5.16,1207,5.896,1208,5.896]],["title/modules/EmailSchedulingModule.html",[209,1.66,223,2.833]],["body/modules/EmailSchedulingModule.html",[3,0.16,4,0.125,5,0.142,20,0.012,25,0.241,26,0.412,27,0.16,28,0.008,37,0.008,132,0.01,133,0.233,187,1.55,197,3.291,209,3.254,211,2.946,212,3.077,213,3.379,214,2.717,215,3.077,216,4.197,217,3.22,223,5.763,226,4.094,227,3.379,228,3.22,232,5.197,349,2.841,1177,5.645,1194,5.591,1202,5.307,1203,5.132,1206,6.217,1209,5.132,1210,5.863,1211,5.132,1212,5.863,1213,5.863,1214,5.863]],["title/injectables/EmailSchedulingService.html",[382,1.165,1202,2.664]],["body/injectables/EmailSchedulingService.html",[3,0.146,4,0.114,5,0.129,7,0.247,8,1.047,9,1.082,19,0.266,20,0.012,25,0.24,26,0.376,27,0.146,28,0.007,37,0.007,52,1.869,111,1.753,116,0.496,132,0.009,133,0.212,144,2.78,147,1.344,149,1.479,179,2.779,199,1.229,202,1.178,244,3.648,257,1.479,325,2.259,348,2.683,382,1.884,383,2.476,429,2.506,430,1.753,665,3.648,678,6.099,694,6.099,696,6.418,702,5.815,741,4.678,760,4.678,762,4.678,1181,5.189,1184,5.25,1196,5.872,1197,5.872,1200,4.678,1201,4.678,1202,4.306,1215,4.678,1216,5.344,1217,6.709,1218,5.344,1219,6.709,1220,5.344,1221,5.344,1222,5.344,1223,5.344,1224,6.709,1225,5.344,1226,5.344,1227,5.344,1228,5.344,1229,5.344,1230,5.344]],["title/injectables/EmailService.html",[382,1.165,1181,2.664]],["body/injectables/EmailService.html",[3,0.162,4,0.127,5,0.144,7,0.275,9,1.157,19,0.237,20,0.012,25,0.217,26,0.419,27,0.162,28,0.008,37,0.008,116,0.53,132,0.01,133,0.237,144,2.973,147,1.315,149,1.581,199,1.315,202,1.314,238,3.128,242,3.618,348,2.384,367,6.073,382,2.015,383,2.762,429,2.227,443,3.459,790,3.618,884,3.618,898,3.826,1181,4.605,1231,5.218,1232,7.175,1233,5.218,1234,5.961,1235,7.175,1236,5.961,1237,5.218,1238,3.436,1239,5.961]],["title/injectables/ExcludeNullUndefinedInterceptor.html",[382,1.165,1240,3.291]],["body/injectables/ExcludeNullUndefinedInterceptor.html",[3,0.126,4,0.099,5,0.112,7,0.214,9,0.748,19,0.184,20,0.012,23,0.545,25,0.208,26,0.326,27,0.126,28,0.006,36,1.775,37,0.006,40,1.392,116,0.343,132,0.008,133,0.272,146,3.931,147,0.85,149,1.023,184,1.793,186,1.433,187,1.619,199,1.336,202,1.023,264,1.676,265,1.676,290,1.344,315,2.651,316,1.733,317,2.15,382,1.72,383,2.15,430,2.674,463,3.53,471,2.816,473,2.838,474,2.838,483,2.288,509,2.548,523,1.926,533,2.978,631,3.717,756,2.538,999,3.931,1140,4.481,1142,4.061,1238,3.53,1240,4.857,1241,4.857,1242,3.68,1243,6.125,1244,4.181,1245,6.125,1246,4.481,1247,4.857,1248,4.998,1249,5.697,1250,4.64,1251,5.335,1252,3.931,1253,4.481,1254,4.202,1255,4.978,1256,4.978,1257,4.181,1258,4.481,1259,3.931,1260,4.601,1261,4.481,1262,4.481,1263,4.481,1264,2.674,1265,4.181,1266,3.167,1267,4.061,1268,4.061,1269,4.061,1270,6.001,1271,4.64,1272,4.64,1273,4.64,1274,4.64,1275,4.061]],["title/interfaces/Follower.html",[0,0.219,128,1.405]],["body/interfaces/Follower.html",[0,0.443,1,2.569,2,0.897,3,0.098,4,0.077,5,0.087,6,1.261,7,0.166,8,0.804,10,0.953,11,0.752,12,1.85,13,1.586,14,0.87,15,0.982,16,1.403,17,0.87,18,1.343,19,0.301,20,0.012,21,1.036,22,2.034,23,0.777,24,1.407,25,0.109,26,0.253,27,0.23,28,0.007,29,1.744,30,1.744,31,1.744,32,1.744,33,1.744,34,1.744,35,1.744,36,1.535,37,0.007,38,2.771,39,1.347,40,1.686,41,1.347,42,1.347,43,1.347,44,1.347,45,1.347,46,1.347,47,1.261,48,1.347,49,1.347,50,1.182,51,2.015,52,1.261,53,0.87,54,1.924,55,1.347,56,2.171,57,1.347,58,1.347,59,1.347,60,1.347,61,1.347,62,1.347,63,1.347,64,1.347,65,1.347,66,1.347,67,1.347,68,2.692,69,1.924,70,1.347,71,1.347,72,1.347,73,2.364,74,1.347,75,1.347,76,1.924,77,1.347,78,1.347,79,1.347,80,1.347,81,1.347,82,2.291,83,1.347,84,1.801,85,1.801,86,1.347,87,1.347,88,1.347,89,1.347,90,1.347,91,1.347,92,1.347,93,1.347,94,1.347,95,1.924,96,1.347,97,1.347,98,1.347,99,1.261,100,1.347,101,1.347,102,2.291,103,1.347,104,1.347,105,1.347,106,1.347,107,1.347,108,1.347,109,1.347,110,1.347,111,1.182,112,1.347,113,1.347,114,1.347,115,1.347,116,0.266,117,1.347,118,1.347,119,1.347,120,1.347,121,1.347,122,1.261,123,2.101,124,1.347,125,1.347,126,1.347,127,1.801,128,2.034,129,2.448,130,2.448,131,2.448,132,0.007]],["title/interfaces/GetAppLaunchData.html",[0,0.219,29,1.405]],["body/interfaces/GetAppLaunchData.html",[0,0.444,1,2.669,2,0.923,3,0.101,4,0.079,5,0.09,6,1.297,7,0.171,8,0.82,10,0.98,11,0.767,12,1.88,13,1.619,14,0.895,15,1.011,16,1.432,17,0.895,18,1.342,19,0.263,20,0.012,21,1.057,22,2.066,23,0.776,24,1.429,25,0.112,26,0.261,27,0.231,28,0.007,29,2.066,30,1.779,31,1.779,32,1.779,33,1.779,34,1.779,35,1.779,36,1.554,37,0.007,38,2.944,39,1.386,40,1.791,41,1.386,42,1.386,43,1.386,44,1.386,45,1.386,46,1.386,47,1.297,48,1.386,49,1.386,50,1.217,51,1.985,52,1.297,53,0.895,54,1.963,55,1.386,56,2.205,57,1.386,58,1.386,59,1.386,60,1.386,61,1.386,62,1.386,63,1.386,64,1.386,65,1.386,66,1.386,67,1.386,68,2.28,69,1.963,70,1.386,71,1.386,72,1.386,73,2.001,74,1.386,75,1.386,76,1.963,77,1.386,78,1.386,79,1.386,80,1.386,81,1.386,82,2.321,83,1.386,84,1.838,85,1.838,86,1.386,87,1.386,88,1.386,89,1.386,90,1.386,91,1.386,92,1.386,93,1.386,94,1.386,95,1.963,96,1.386,97,1.386,98,1.386,99,1.297,100,1.386,101,1.386,102,2.321,103,1.386,104,1.386,105,1.386,106,1.386,107,1.386,108,1.386,109,1.386,110,1.386,111,1.217,112,1.386,113,1.386,114,1.386,115,1.386,116,0.274,117,1.386,118,1.386,119,1.386,120,1.386,121,1.386,122,1.297,123,2.134,124,1.386,125,1.386,126,1.386,127,1.838,128,1.779,129,1.386,130,1.386,131,1.386,132,0.007]],["title/interfaces/GetComments.html",[0,0.219,32,1.405]],["body/interfaces/GetComments.html",[0,0.444,1,2.669,2,0.923,3,0.101,4,0.079,5,0.09,6,1.297,7,0.171,8,0.82,10,0.98,11,0.767,12,1.88,13,1.619,14,0.895,15,1.011,16,1.432,17,0.895,18,1.342,19,0.263,20,0.012,21,1.057,22,2.066,23,0.776,24,1.429,25,0.112,26,0.261,27,0.231,28,0.007,29,1.779,30,1.779,31,1.779,32,2.066,33,1.779,34,1.779,35,1.779,36,1.554,37,0.007,38,2.944,39,1.386,40,1.791,41,1.386,42,1.386,43,1.386,44,1.386,45,1.386,46,1.386,47,1.297,48,1.386,49,1.386,50,1.217,51,1.985,52,1.297,53,0.895,54,1.963,55,1.386,56,2.205,57,1.386,58,1.386,59,1.386,60,1.386,61,1.386,62,1.386,63,1.386,64,1.386,65,1.386,66,1.386,67,1.386,68,2.28,69,1.963,70,1.386,71,1.386,72,1.386,73,2.001,74,1.386,75,1.386,76,1.963,77,1.386,78,1.386,79,1.386,80,1.386,81,1.386,82,2.321,83,1.386,84,1.838,85,1.838,86,1.386,87,1.386,88,1.386,89,1.386,90,1.386,91,1.386,92,1.386,93,1.386,94,1.386,95,1.963,96,1.386,97,1.386,98,1.386,99,1.297,100,1.386,101,1.386,102,2.321,103,1.386,104,1.386,105,1.386,106,1.386,107,1.386,108,1.386,109,1.386,110,1.386,111,1.217,112,1.386,113,1.386,114,1.386,115,1.386,116,0.274,117,1.386,118,1.386,119,1.386,120,1.386,121,1.386,122,1.297,123,2.134,124,1.386,125,1.386,126,1.386,127,1.838,128,1.779,129,1.386,130,1.386,131,1.386,132,0.007]],["title/interfaces/GetFollowers.html",[0,0.219,34,1.405]],["body/interfaces/GetFollowers.html",[0,0.444,1,2.669,2,0.923,3,0.101,4,0.079,5,0.09,6,1.297,7,0.171,8,0.82,10,0.98,11,0.767,12,1.88,13,1.619,14,0.895,15,1.011,16,1.432,17,0.895,18,1.342,19,0.263,20,0.012,21,1.057,22,2.066,23,0.776,24,1.429,25,0.112,26,0.261,27,0.231,28,0.007,29,1.779,30,1.779,31,1.779,32,1.779,33,1.779,34,2.066,35,1.779,36,1.554,37,0.007,38,2.944,39,1.386,40,1.791,41,1.386,42,1.386,43,1.386,44,1.386,45,1.386,46,1.386,47,1.297,48,1.386,49,1.386,50,1.217,51,1.985,52,1.297,53,0.895,54,1.963,55,1.386,56,2.205,57,1.386,58,1.386,59,1.386,60,1.386,61,1.386,62,1.386,63,1.386,64,1.386,65,1.386,66,1.386,67,1.386,68,2.28,69,1.963,70,1.386,71,1.386,72,1.386,73,2.001,74,1.386,75,1.386,76,1.963,77,1.386,78,1.386,79,1.386,80,1.386,81,1.386,82,2.321,83,1.386,84,1.838,85,1.838,86,1.386,87,1.386,88,1.386,89,1.386,90,1.386,91,1.386,92,1.386,93,1.386,94,1.386,95,1.963,96,1.386,97,1.386,98,1.386,99,1.297,100,1.386,101,1.386,102,2.321,103,1.386,104,1.386,105,1.386,106,1.386,107,1.386,108,1.386,109,1.386,110,1.386,111,1.217,112,1.386,113,1.386,114,1.386,115,1.386,116,0.274,117,1.386,118,1.386,119,1.386,120,1.386,121,1.386,122,1.297,123,2.134,124,1.386,125,1.386,126,1.386,127,1.838,128,1.779,129,1.386,130,1.386,131,1.386,132,0.007]],["title/interfaces/GetFollowing.html",[0,0.219,35,1.405]],["body/interfaces/GetFollowing.html",[0,0.444,1,2.669,2,0.923,3,0.101,4,0.079,5,0.09,6,1.297,7,0.171,8,0.82,10,0.98,11,0.767,12,1.88,13,1.619,14,0.895,15,1.011,16,1.432,17,0.895,18,1.342,19,0.263,20,0.012,21,1.057,22,2.066,23,0.776,24,1.429,25,0.112,26,0.261,27,0.231,28,0.007,29,1.779,30,1.779,31,1.779,32,1.779,33,1.779,34,1.779,35,2.066,36,1.554,37,0.007,38,2.944,39,1.386,40,1.791,41,1.386,42,1.386,43,1.386,44,1.386,45,1.386,46,1.386,47,1.297,48,1.386,49,1.386,50,1.217,51,1.985,52,1.297,53,0.895,54,1.963,55,1.386,56,2.205,57,1.386,58,1.386,59,1.386,60,1.386,61,1.386,62,1.386,63,1.386,64,1.386,65,1.386,66,1.386,67,1.386,68,2.28,69,1.963,70,1.386,71,1.386,72,1.386,73,2.001,74,1.386,75,1.386,76,1.963,77,1.386,78,1.386,79,1.386,80,1.386,81,1.386,82,2.321,83,1.386,84,1.838,85,1.838,86,1.386,87,1.386,88,1.386,89,1.386,90,1.386,91,1.386,92,1.386,93,1.386,94,1.386,95,1.963,96,1.386,97,1.386,98,1.386,99,1.297,100,1.386,101,1.386,102,2.321,103,1.386,104,1.386,105,1.386,106,1.386,107,1.386,108,1.386,109,1.386,110,1.386,111,1.217,112,1.386,113,1.386,114,1.386,115,1.386,116,0.274,117,1.386,118,1.386,119,1.386,120,1.386,121,1.386,122,1.297,123,2.134,124,1.386,125,1.386,126,1.386,127,1.838,128,1.779,129,1.386,130,1.386,131,1.386,132,0.007]],["title/interfaces/GetManyDefaultResponse.html",[0,0.219,501,2.001]],["body/interfaces/GetManyDefaultResponse.html",[0,0.388,2,1.051,3,0.115,4,0.09,5,0.102,7,0.195,8,0.898,10,1.855,11,1.025,14,1.694,15,1.912,17,1.694,18,1.313,19,0.313,20,0.012,21,1.412,23,0.69,25,0.174,26,0.297,27,0.22,28,0.006,36,1.347,37,0.006,51,1.871,116,0.425,132,0.008,136,1.814,140,1.477,184,2.222,186,1.236,257,1.547,264,2.078,265,2.078,284,2.036,315,2.011,316,2.148,317,1.957,450,1.477,461,1.526,469,2.434,470,2.319,481,2.036,482,2.319,483,1.578,484,2.216,485,2.216,486,3.018,487,2.89,488,3.926,489,3.926,490,2.883,491,2.883,492,2.711,493,2.711,494,2.122,495,2.711,496,2.711,497,2.711,498,2.711,499,3.691,500,2.122,501,2.773,502,3.49,503,2.883,504,2.883,505,2.563,506,2.883,507,2.883,508,3.49,509,2.319,510,2.036,511,2.216,512,2.883,513,2.883,514,1.883,515,3.707,516,2.036,517,2.711,518,2.883,519,2.883,520,2.216,521,2.216,522,2.216,523,2.216,524,1.689,525,2.883,526,2.036,527,2.883,528,2.216,529,2.711,530,2.122,531,2.711,532,2.883,533,2.711,534,2.883,535,2.883,536,2.883,537,2.883,538,3.926,539,2.883,540,2.319,541,2.883,542,2.471,543,2.711,544,2.036,545,2.711,546,2.711,547,2.711,548,2.122,549,3.018,550,2.216,551,2.883,552,2.883,553,2.883,554,2.883]],["title/interfaces/GetRescueList.html",[0,0.219,33,1.405]],["body/interfaces/GetRescueList.html",[0,0.444,1,2.669,2,0.923,3,0.101,4,0.079,5,0.09,6,1.297,7,0.171,8,0.82,10,0.98,11,0.767,12,1.88,13,1.619,14,0.895,15,1.011,16,1.432,17,0.895,18,1.342,19,0.263,20,0.012,21,1.057,22,2.066,23,0.776,24,1.429,25,0.112,26,0.261,27,0.231,28,0.007,29,1.779,30,1.779,31,1.779,32,1.779,33,2.066,34,1.779,35,1.779,36,1.554,37,0.007,38,2.944,39,1.386,40,1.791,41,1.386,42,1.386,43,1.386,44,1.386,45,1.386,46,1.386,47,1.297,48,1.386,49,1.386,50,1.217,51,1.985,52,1.297,53,0.895,54,1.963,55,1.386,56,2.205,57,1.386,58,1.386,59,1.386,60,1.386,61,1.386,62,1.386,63,1.386,64,1.386,65,1.386,66,1.386,67,1.386,68,2.28,69,1.963,70,1.386,71,1.386,72,1.386,73,2.001,74,1.386,75,1.386,76,1.963,77,1.386,78,1.386,79,1.386,80,1.386,81,1.386,82,2.321,83,1.386,84,1.838,85,1.838,86,1.386,87,1.386,88,1.386,89,1.386,90,1.386,91,1.386,92,1.386,93,1.386,94,1.386,95,1.963,96,1.386,97,1.386,98,1.386,99,1.297,100,1.386,101,1.386,102,2.321,103,1.386,104,1.386,105,1.386,106,1.386,107,1.386,108,1.386,109,1.386,110,1.386,111,1.217,112,1.386,113,1.386,114,1.386,115,1.386,116,0.274,117,1.386,118,1.386,119,1.386,120,1.386,121,1.386,122,1.297,123,2.134,124,1.386,125,1.386,126,1.386,127,1.838,128,1.779,129,1.386,130,1.386,131,1.386,132,0.007]],["title/interfaces/GetUserPosts.html",[0,0.219,31,1.405]],["body/interfaces/GetUserPosts.html",[0,0.444,1,2.669,2,0.923,3,0.101,4,0.079,5,0.09,6,1.297,7,0.171,8,0.82,10,0.98,11,0.767,12,1.88,13,1.619,14,0.895,15,1.011,16,1.432,17,0.895,18,1.342,19,0.263,20,0.012,21,1.057,22,2.066,23,0.776,24,1.429,25,0.112,26,0.261,27,0.231,28,0.007,29,1.779,30,1.779,31,2.066,32,1.779,33,1.779,34,1.779,35,1.779,36,1.554,37,0.007,38,2.944,39,1.386,40,1.791,41,1.386,42,1.386,43,1.386,44,1.386,45,1.386,46,1.386,47,1.297,48,1.386,49,1.386,50,1.217,51,1.985,52,1.297,53,0.895,54,1.963,55,1.386,56,2.205,57,1.386,58,1.386,59,1.386,60,1.386,61,1.386,62,1.386,63,1.386,64,1.386,65,1.386,66,1.386,67,1.386,68,2.28,69,1.963,70,1.386,71,1.386,72,1.386,73,2.001,74,1.386,75,1.386,76,1.963,77,1.386,78,1.386,79,1.386,80,1.386,81,1.386,82,2.321,83,1.386,84,1.838,85,1.838,86,1.386,87,1.386,88,1.386,89,1.386,90,1.386,91,1.386,92,1.386,93,1.386,94,1.386,95,1.963,96,1.386,97,1.386,98,1.386,99,1.297,100,1.386,101,1.386,102,2.321,103,1.386,104,1.386,105,1.386,106,1.386,107,1.386,108,1.386,109,1.386,110,1.386,111,1.217,112,1.386,113,1.386,114,1.386,115,1.386,116,0.274,117,1.386,118,1.386,119,1.386,120,1.386,121,1.386,122,1.297,123,2.134,124,1.386,125,1.386,126,1.386,127,1.838,128,1.779,129,1.386,130,1.386,131,1.386,132,0.007]],["title/interfaces/GetUserProfile.html",[0,0.219,30,1.405]],["body/interfaces/GetUserProfile.html",[0,0.444,1,2.669,2,0.923,3,0.101,4,0.079,5,0.09,6,1.297,7,0.171,8,0.82,10,0.98,11,0.767,12,1.88,13,1.619,14,0.895,15,1.011,16,1.432,17,0.895,18,1.342,19,0.263,20,0.012,21,1.057,22,2.066,23,0.776,24,1.429,25,0.112,26,0.261,27,0.231,28,0.007,29,1.779,30,2.066,31,1.779,32,1.779,33,1.779,34,1.779,35,1.779,36,1.554,37,0.007,38,2.944,39,1.386,40,1.791,41,1.386,42,1.386,43,1.386,44,1.386,45,1.386,46,1.386,47,1.297,48,1.386,49,1.386,50,1.217,51,1.985,52,1.297,53,0.895,54,1.963,55,1.386,56,2.205,57,1.386,58,1.386,59,1.386,60,1.386,61,1.386,62,1.386,63,1.386,64,1.386,65,1.386,66,1.386,67,1.386,68,2.28,69,1.963,70,1.386,71,1.386,72,1.386,73,2.001,74,1.386,75,1.386,76,1.963,77,1.386,78,1.386,79,1.386,80,1.386,81,1.386,82,2.321,83,1.386,84,1.838,85,1.838,86,1.386,87,1.386,88,1.386,89,1.386,90,1.386,91,1.386,92,1.386,93,1.386,94,1.386,95,1.963,96,1.386,97,1.386,98,1.386,99,1.297,100,1.386,101,1.386,102,2.321,103,1.386,104,1.386,105,1.386,106,1.386,107,1.386,108,1.386,109,1.386,110,1.386,111,1.217,112,1.386,113,1.386,114,1.386,115,1.386,116,0.274,117,1.386,118,1.386,119,1.386,120,1.386,121,1.386,122,1.297,123,2.134,124,1.386,125,1.386,126,1.386,127,1.838,128,1.779,129,1.386,130,1.386,131,1.386,132,0.007]],["title/controllers/HealthController.html",[195,1.783,231,3.036]],["body/controllers/HealthController.html",[3,0.113,4,0.088,5,0.101,7,0.192,9,0.918,11,0.607,18,1.14,19,0.277,20,0.012,23,0.578,25,0.238,26,0.292,27,0.113,28,0.006,37,0.006,116,0.42,132,0.008,133,0.165,140,1.454,143,3.042,144,1.723,147,1.338,149,1.254,150,2.537,172,1.502,186,1.319,195,1.786,197,1.927,199,1.043,202,1.61,203,2.523,206,1.281,231,5.103,233,6.104,234,4.98,236,5.677,237,2.838,238,3.403,239,6.601,242,2.523,246,3.297,257,0.916,264,2.639,265,2.639,286,4.98,290,1.204,313,3.639,315,1.454,316,2.728,317,1.927,318,3.297,319,3.297,320,3.297,321,3.297,322,3.639,348,2.594,367,4.163,473,1.927,474,1.927,617,3.453,671,5.677,747,3.639,748,4.98,756,2.89,790,3.453,791,3.639,877,2.669,884,2.523,1051,3.652,1138,5.531,1144,5.531,1260,3.936,1264,2.396,1265,2.838,1266,2.838,1276,3.639,1277,5.689,1278,7.304,1279,4.158,1280,4.158,1281,5.689,1282,4.158,1283,6.486,1284,4.158,1285,4.158,1286,5.689,1287,4.158,1288,4.158,1289,4.158,1290,5.689,1291,5.689,1292,5.689,1293,6.974,1294,5.677,1295,4.158,1296,4.158,1297,4.158,1298,5.689,1299,4.158,1300,4.158,1301,5.689,1302,4.158,1303,4.158,1304,4.158,1305,4.158,1306,4.158,1307,4.158,1308,4.158,1309,4.158,1310,4.158,1311,4.98,1312,5.689,1313,4.158,1314,4.158,1315,5.689,1316,5.689,1317,4.158,1318,4.158,1319,4.158,1320,4.158,1321,4.158,1322,4.158,1323,4.158]],["title/interfaces/IBaseModel.html",[0,0.219,418,3.036]],["body/interfaces/IBaseModel.html",[0,0.263,2,1.237,3,0.135,4,0.106,5,0.12,7,0.229,8,1,9,1.033,11,0.726,18,1.169,19,0.297,20,0.012,23,0.571,25,0.227,27,0.175,28,0.007,36,1.164,37,0.009,132,0.009,133,0.197,139,3.191,179,1.796,180,3.394,186,1.211,206,1.973,264,1.796,265,1.796,290,1.44,315,1.738,316,1.857,317,2.303,325,1.973,351,2.397,358,2.393,396,2.217,416,2.217,417,3.942,418,5.187,419,5.805,420,5.416,421,4.688,422,3.099,423,3.394,424,5.805,426,3.637,431,3.637,434,4.302,437,3.017,438,3.888,439,4.544,443,3.089,444,3.637,446,4.688,447,2.893,448,3.942,449,4.351,450,1.738,451,4.351,452,5.607,453,3.637,454,5.607,455,3.942,456,3.637,457,1.988,458,4.351,459,3.191,460,3.017,461,2.315,462,4.351,463,2.865,464,4.351,465,2.865,466,4.351,467,4.351,468,4.351,469,2.865,470,2.73,471,3.017,472,4.351,473,2.303,474,2.303,475,4.351,476,4.351,477,3.191,478,4.351,479,3.942,480,4.351]],["title/interfaces/ICrudService.html",[0,0.219,988,2.833]],["body/interfaces/ICrudService.html",[0,0.368,2,1.192,3,0.131,4,0.102,5,0.116,7,0.221,9,1.267,11,1.078,18,1.281,19,0.312,20,0.012,21,1.401,23,0.62,25,0.145,27,0.131,28,0.007,37,0.006,116,0.581,132,0.009,147,1.466,149,1.732,187,1.267,199,1.147,202,1.764,237,3.272,306,4.447,349,1.917,422,2.786,465,2.762,524,2.953,526,3.56,792,3.655,980,4.271,984,5.363,985,5.041,986,5.041,988,4.271,1004,4.314,1008,4.271,1013,4.271,1018,3.797,1029,2.909,1077,5.476,1079,5.041,1080,5.605,1091,4.271,1095,3.507,1324,4.195,1325,6.256,1326,5.476,1327,4.793,1328,4.793,1329,4.793,1330,4.793,1331,4.793,1332,4.793,1333,4.793]],["title/interfaces/IPaginationResult.html",[0,0.219,1029,2.519]],["body/interfaces/IPaginationResult.html",[0,0.356,2,1.114,3,0.122,4,0.095,5,0.108,7,0.207,8,0.934,9,1.16,11,1.05,12,2.374,13,2.374,14,1.735,16,1.959,17,1.081,18,1.248,19,0.321,20,0.012,21,1.446,22,2.434,23,0.712,24,1.684,25,0.227,26,0.315,27,0.184,28,0.006,37,0.006,40,1.359,132,0.008,133,0.267,142,3.63,151,5.701,172,1.618,187,1.183,340,1.997,348,2.996,465,3.882,505,2.717,516,2.159,585,3.535,733,4.088,749,4.083,796,2.581,817,3.447,854,3.63,977,4.377,994,4.377,1004,2.459,1026,3.551,1029,3.63,1034,5.64,1051,3.839,1103,4.744,1105,3.276,1128,3.551,1244,3.057,1334,3.276,1335,5.235,1336,5.235,1337,5.235,1338,5.235,1339,4.744,1340,6.292,1341,3.919,1342,4.744,1343,4.744,1344,4.744,1345,3.919,1346,5.235,1347,5.235,1348,5.235,1349,5.235,1350,5.896,1351,3.919,1352,3.919]],["title/interfaces/ITag.html",[0,0.219,557,2.664]],["body/interfaces/ITag.html",[0,0.347,2,1.285,3,0.141,4,0.11,5,0.125,7,0.238,8,1.185,19,0.323,20,0.012,23,0.714,25,0.23,27,0.214,28,0.007,37,0.007,116,0.609,132,0.009,133,0.311,172,1.866,199,0.946,206,2.022,272,2.709,281,2.302,290,1.901,339,3.042,340,2.302,416,2.927,422,2.065,447,2.536,450,2.295,457,2.625,514,2.302,523,1.45,555,2.709,556,3.314,557,4.874,560,2.976,561,3.299,562,3.783,563,3.783,564,4.159,565,3.963,566,3.605,567,2.709,568,2.709,569,2.709,570,3.134,571,2.976,572,3.218,573,2.976,574,2.976,575,2.976,576,3.444,577,2.976,578,2.976,579,2.49,580,2.976,581,2.976,582,2.976,583,3.525,584,2.976,585,2.709,586,2.976,587,2.976,588,2.976,589,2.976,590,3.525,591,3.525,592,2.976,593,2.976,594,3.134,595,3.778]],["title/interfaces/IUser.html",[0,0.219,598,2.664]],["body/interfaces/IUser.html",[0,0.275,2,0.913,3,0.1,4,0.078,5,0.089,7,0.169,8,1.031,9,1.066,19,0.329,20,0.012,23,0.767,25,0.22,27,0.19,28,0.005,37,0.005,50,2.446,51,1.75,53,0.886,73,2.5,116,0.448,132,0.007,133,0.277,172,1.327,186,0.694,199,0.673,206,1.869,257,1.338,260,1.468,272,1.927,281,1.637,290,1.511,325,1.869,339,3.36,340,1.637,346,2.357,348,1.468,349,3.102,351,3.675,358,2.607,402,3.166,409,3.561,416,2.326,422,1.468,437,2.228,438,2.228,439,4.236,447,2.345,450,1.824,457,2.087,459,2.357,461,1.327,477,2.357,514,1.637,523,1.031,530,1.845,560,2.116,561,3.507,562,4.179,563,4.179,564,3.497,565,3.332,566,2.865,567,1.927,569,1.927,571,2.116,572,2.706,573,2.116,574,2.116,575,2.116,576,3.184,577,2.116,578,2.116,579,1.77,580,2.116,581,2.116,582,2.116,584,4.022,585,1.927,586,2.116,587,2.116,588,2.116,589,2.116,592,3.808,593,2.116,596,1.927,597,2.357,598,4.241,599,5.674,600,5.674,605,3.348,611,3.561,612,4.834,613,2.228,614,3.561,615,2.686,616,2.506,617,3.166,618,2.686,619,2.686,620,2.686,621,2.686,622,2.686,623,2.686,624,2.686,625,2.686,626,2.686,627,3.817,628,2.686,629,2.686,630,2.686,631,2.228,632,2.686,633,2.686,634,2.686,635,2.686,636,2.506,637,2.686,638,2.506,639,2.686,640,2.686,641,2.686,642,2.686,643,2.686,644,3.561,645,2.686,646,2.686,647,2.506,648,3.817,649,2.506,650,2.357,651,2.686,652,2.686,653,3.817,654,3.817,655,2.506,656,2.506,657,2.686,658,2.116,659,2.686]],["title/injectables/JwtStrategy.html",[364,2.833,382,1.165]],["body/injectables/JwtStrategy.html",[3,0.147,4,0.115,5,0.131,7,0.249,9,1.088,19,0.268,20,0.012,25,0.245,26,0.379,27,0.147,28,0.007,37,0.007,53,1.628,116,0.498,132,0.009,133,0.214,144,2.794,147,1.236,149,1.487,165,5.385,179,1.947,186,1.392,199,1.236,202,1.188,242,3.271,257,1.188,260,2.156,325,2.267,337,3.271,342,4.047,343,3.943,348,2.697,355,5.385,358,2.013,364,4.604,367,5.927,378,4.717,382,1.894,383,2.497,406,3.943,412,3.943,457,2.156,1233,4.717,1353,4.717,1354,5.902,1355,5.389,1356,6.744,1357,5.643,1358,5.389,1359,6.744,1360,4.717,1361,5.389,1362,4.717,1363,4.274,1364,4.717,1365,5.389,1366,4.717,1367,4.717,1368,5.389,1369,5.389,1370,5.389,1371,5.389,1372,5.389,1373,5.389,1374,5.389,1375,5.389,1376,5.389]],["title/injectables/LocalStrategy.html",[365,2.833,382,1.165]],["body/injectables/LocalStrategy.html",[3,0.143,4,0.112,5,0.127,7,0.243,8,1.036,9,1.071,19,0.303,20,0.012,23,0.737,25,0.232,26,0.369,27,0.143,28,0.007,37,0.007,116,0.491,132,0.009,133,0.209,144,2.178,147,1.401,149,1.463,165,3.846,179,1.899,186,1.255,199,1.217,202,1.159,206,2.48,325,2.241,337,3.19,344,4.64,345,3.846,349,3.057,351,3.941,365,4.532,382,1.865,383,2.436,406,3.846,429,2.48,430,2.177,457,2.103,515,2.436,742,3.374,1140,3.846,1354,5.811,1360,4.601,1362,4.601,1363,4.169,1366,4.601,1367,4.601,1377,4.601,1378,7.644,1379,7.644,1380,5.257,1381,6.639,1382,6.639,1383,5.257,1384,5.257,1385,4.601,1386,5.257,1387,5.257,1388,5.257,1389,5.257,1390,5.257]],["title/classes/LoginCredsDto.html",[133,0.165,329,3.036]],["body/classes/LoginCredsDto.html",[3,0.14,4,0.109,5,0.124,7,0.236,8,1.019,11,0.954,16,1.395,19,0.285,20,0.012,23,0.674,24,1.2,25,0.246,26,0.36,27,0.178,28,0.007,37,0.007,53,1.236,132,0.009,133,0.285,135,1.734,140,1.791,144,2.122,147,1.197,150,2.912,172,1.851,186,0.968,190,3.764,195,2.201,203,3.109,206,1.578,257,1.585,306,2.688,323,3.497,324,4.062,325,1.578,326,4.062,328,5.716,329,5.261,332,6.627,333,4.192,334,3.288,335,4.062,336,4.062,337,3.109,338,3.948,339,3.331,340,2.284,341,4.062,342,3.427,343,3.748,344,4.144,345,3.748,346,4.192,347,4.483,348,3.291,349,3.028,350,4.483,351,3.651,352,4.483,353,4.483,354,4.062,355,3.748,356,4.483,357,4.483,358,1.913,359,4.483,360,2.688,1391,6.531,1392,5.122,1393,5.122,1394,5.122,1395,5.122]],["title/classes/PaginationParams.html",[133,0.165,1004,2.279]],["body/classes/PaginationParams.html",[0,0.318,3,0.123,4,0.096,5,0.109,7,0.208,8,0.939,9,1.246,11,0.659,12,1.853,13,1.853,14,1.934,16,1.23,17,1.09,18,1.298,19,0.286,20,0.012,21,1.21,22,2.037,23,0.642,24,1.409,25,0.228,26,0.317,27,0.184,28,0.006,37,0.006,40,1.026,132,0.008,133,0.269,135,1.529,142,2.74,147,1.24,150,3.016,151,5.721,172,1.632,187,1.193,340,2.013,348,3.304,465,3.899,505,2.74,516,2.9,585,3.55,733,4.105,749,3.083,796,2.602,817,2.602,854,2.74,977,5.278,994,5.497,1004,3.304,1026,3.581,1029,2.74,1034,4.401,1103,5.721,1105,3.304,1128,4.771,1244,3.083,1334,3.304,1335,3.952,1336,3.952,1337,3.952,1338,3.952,1339,3.581,1340,6.314,1341,3.952,1342,4.771,1343,4.771,1344,4.771,1345,5.265,1346,6.314,1347,5.265,1348,5.265,1349,5.265,1350,5.92,1351,3.952,1352,3.952,1396,4.515,1397,4.515,1398,6.015,1399,6.015,1400,4.515,1401,4.515]],["title/interfaces/ParamOption.html",[0,0.219,502,2.519]],["body/interfaces/ParamOption.html",[0,0.385,2,1.026,3,0.112,4,0.088,5,0.1,7,0.19,8,0.883,9,1.299,10,1.09,11,0.602,14,0.996,15,1.124,17,0.996,18,1.257,19,0.323,20,0.012,21,1.138,23,0.724,25,0.171,26,0.29,27,0.219,28,0.006,36,1.325,37,0.006,51,1.963,116,0.418,132,0.008,136,1.772,140,1.443,184,2.187,186,1.221,257,1.532,264,2.045,265,2.045,284,1.989,315,1.979,316,2.114,317,1.912,450,1.443,461,1.491,469,2.378,470,2.266,481,1.989,482,2.266,483,1.541,484,2.165,485,2.165,486,2.97,487,2.844,488,3.863,489,4.745,490,2.816,491,2.816,492,2.648,493,2.648,494,2.073,495,2.648,496,2.648,497,2.648,498,2.648,499,3.632,500,2.073,501,1.989,502,3.92,503,4.745,504,4.41,505,4.219,506,4.745,507,4.745,508,3.435,509,2.266,510,1.989,511,2.165,512,2.816,513,2.816,514,1.84,515,3.689,516,1.989,517,2.648,518,2.816,519,2.816,520,2.165,521,2.165,522,2.165,523,2.204,524,1.65,525,2.816,526,1.989,527,2.816,528,2.165,529,2.648,530,2.073,531,2.648,532,2.816,533,2.648,534,2.816,535,2.816,536,2.816,537,2.816,538,3.863,539,2.816,540,2.266,541,2.816,542,2.431,543,2.648,544,1.989,545,2.648,546,2.648,547,2.648,548,2.073,549,2.97,550,2.165,551,2.816,552,2.816,553,2.816,554,2.816]],["title/interfaces/ParamsOptions.html",[0,0.219,508,2.519]],["body/interfaces/ParamsOptions.html",[0,0.393,2,1.096,3,0.12,4,0.094,5,0.107,10,1.164,11,0.643,14,1.063,15,1.2,17,1.063,18,1.243,19,0.265,20,0.012,21,1.19,23,0.709,25,0.179,26,0.309,27,0.222,28,0.006,36,1.385,37,0.006,51,1.892,116,0.437,132,0.008,136,2.541,140,1.54,147,0.807,184,2.286,186,1.263,257,1.574,264,2.137,265,2.137,284,2.123,315,2.069,316,2.21,317,2.04,450,1.54,461,1.591,469,2.538,470,2.418,481,2.123,482,2.418,483,1.645,484,2.311,485,2.311,486,3.104,487,2.973,488,4.038,489,4.038,490,3.006,491,3.006,492,2.827,493,2.827,494,2.213,495,2.827,496,2.827,497,2.827,498,2.827,499,3.797,500,2.213,501,2.123,502,4.054,503,3.006,504,3.006,505,2.673,506,3.006,507,3.006,508,4.054,509,3.249,510,2.123,511,2.311,512,3.006,513,3.006,514,1.964,515,3.739,516,2.123,517,2.827,518,3.006,519,3.006,520,2.311,521,2.311,522,2.311,523,2.237,524,1.761,525,3.006,526,2.123,527,3.006,528,2.311,529,2.827,530,2.213,531,2.827,532,3.006,533,2.827,534,3.006,535,3.006,536,3.006,537,3.006,538,4.038,539,3.006,540,2.418,541,3.006,542,2.541,543,2.827,544,2.123,545,2.827,546,2.827,547,2.827,548,2.213,549,3.104,550,2.311,551,3.006,552,3.006,553,3.006,554,3.006,1402,4.404,1403,4.404]],["title/injectables/PersistedCronService.html",[382,1.165,663,2.833]],["body/injectables/PersistedCronService.html",[3,0.138,4,0.107,5,0.123,7,0.233,8,1.011,9,0.816,19,0.257,20,0.012,25,0.196,26,0.355,27,0.138,28,0.007,37,0.007,116,0.374,132,0.009,133,0.201,144,2.096,147,1.31,149,1.115,179,2.582,186,0.956,187,1.337,192,5.137,199,1.187,202,1.115,228,2.777,230,3.7,244,3.453,257,1.428,290,1.465,321,5.137,325,2.201,358,1.889,382,1.819,383,2.343,429,1.889,430,1.659,631,4.338,663,4.422,665,5.145,670,6.976,678,5.977,694,5.977,701,5.67,702,5.137,742,3.246,773,5.67,992,5.145,1087,4.74,1237,6.255,1238,2.915,1256,3.453,1257,3.453,1404,6.596,1405,4.426,1406,6.478,1407,5.668,1408,6.478,1409,6.478,1410,6.478,1411,6.478,1412,7.97,1413,5.057,1414,6.478,1415,5.057,1416,6.478,1417,5.057,1418,5.057,1419,5.057,1420,5.057,1421,5.057,1422,5.057,1423,5.057,1424,5.057,1425,5.057,1426,5.057,1427,5.057,1428,5.057,1429,4.426]],["title/interfaces/PostType.html",[0,0.219,82,1.451]],["body/interfaces/PostType.html",[0,0.444,1,2.585,2,0.919,3,0.101,4,0.078,5,0.089,6,1.291,7,0.17,8,0.818,10,0.976,11,0.765,12,1.875,13,1.613,14,0.891,15,1.006,16,1.427,17,0.891,18,1.345,19,0.278,20,0.012,21,1.054,22,2.061,23,0.777,24,1.426,25,0.112,26,0.259,27,0.231,28,0.007,29,1.774,30,1.774,31,1.774,32,1.774,33,1.774,34,1.774,35,1.774,36,1.551,37,0.007,38,2.791,39,1.379,40,1.698,41,1.379,42,1.379,43,1.379,44,1.379,45,1.379,46,1.379,47,1.291,48,1.379,49,1.379,50,1.211,51,1.984,52,1.291,53,0.891,54,1.957,55,1.379,56,2.199,57,1.379,58,1.379,59,1.379,60,1.379,61,1.379,62,1.379,63,1.379,64,1.379,65,1.379,66,1.379,67,1.379,68,2.274,69,1.957,70,1.379,71,1.379,72,1.379,73,1.996,74,1.379,75,1.379,76,1.957,77,1.379,78,1.379,79,1.379,80,1.379,81,1.379,82,2.67,83,2.474,84,1.832,85,1.832,86,1.379,87,1.379,88,1.379,89,1.379,90,1.379,91,1.379,92,1.379,93,1.379,94,1.379,95,1.957,96,1.379,97,1.379,98,1.379,99,1.291,100,1.379,101,1.379,102,2.316,103,1.379,104,1.379,105,1.379,106,1.379,107,1.379,108,1.379,109,1.379,110,1.379,111,1.211,112,1.379,113,1.379,114,1.379,115,1.379,116,0.273,117,1.379,118,1.379,119,1.379,120,1.379,121,1.379,122,1.291,123,2.129,124,1.379,125,1.379,126,1.379,127,1.832,128,1.774,129,1.379,130,1.379,131,1.379,132,0.007]],["title/interfaces/PostedByUser.html",[0,0.219,84,1.451]],["body/interfaces/PostedByUser.html",[0,0.442,1,2.563,2,0.89,3,0.097,4,0.076,5,0.087,6,1.251,7,0.165,8,0.799,10,0.945,11,0.748,12,1.842,13,1.577,14,0.863,15,0.975,16,1.395,17,0.863,18,1.342,19,0.306,20,0.012,21,1.03,22,2.025,23,0.778,24,1.401,25,0.108,26,0.251,27,0.23,28,0.007,29,1.734,30,1.734,31,1.734,32,1.734,33,1.734,34,1.734,35,1.734,36,1.529,37,0.007,38,2.765,39,1.336,40,1.682,41,1.336,42,1.336,43,1.336,44,1.336,45,1.336,46,1.336,47,1.251,48,1.336,49,1.336,50,1.173,51,2.013,52,1.251,53,0.863,54,2.581,55,1.336,56,2.597,57,1.336,58,1.336,59,1.336,60,1.336,61,1.336,62,1.336,63,1.336,64,1.336,65,1.336,66,1.336,67,1.336,68,2.685,69,2.581,70,1.336,71,1.336,72,1.336,73,2.358,74,1.336,75,1.336,76,2.581,77,1.336,78,1.336,79,1.336,80,1.336,81,1.336,82,2.283,83,1.336,84,2.092,85,1.791,86,1.336,87,1.336,88,1.336,89,1.336,90,1.336,91,1.336,92,1.336,93,1.336,94,1.336,95,1.913,96,1.336,97,1.336,98,1.336,99,1.251,100,1.336,101,1.336,102,2.283,103,1.336,104,1.336,105,1.336,106,1.336,107,1.336,108,1.336,109,1.336,110,1.336,111,1.173,112,1.336,113,1.336,114,1.336,115,1.336,116,0.264,117,1.336,118,1.336,119,1.336,120,1.336,121,1.336,122,1.251,123,2.092,124,1.336,125,1.336,126,1.336,127,1.791,128,1.734,129,1.336,130,1.336,131,1.336,132,0.007]],["title/classes/QueryFailedFilter.html",[133,0.165,1430,3.291]],["body/classes/QueryFailedFilter.html",[3,0.119,4,0.093,5,0.106,7,0.202,9,0.704,11,0.859,13,1.812,16,1.19,19,0.264,20,0.012,24,1.023,25,0.202,26,0.307,27,0.119,28,0.006,37,0.006,40,0.992,116,0.492,132,0.008,133,0.264,135,1.479,139,2.803,140,1.527,142,3.57,143,3.196,147,0.8,149,0.963,179,1.578,180,2.982,187,1.555,190,3.834,199,1.078,202,0.963,238,2.292,257,1.638,281,2.623,290,1.704,447,2.273,453,3.196,460,4.32,461,2.126,463,3.39,473,3.834,474,3.834,483,2.197,540,4.08,572,2.623,576,3.087,644,4.541,756,2.437,853,3.39,1238,3.39,1254,3.39,1407,4.665,1430,4.665,1431,5.149,1432,3.464,1433,5.149,1434,7.127,1435,5.822,1436,3.823,1437,7.429,1438,7.429,1439,7.429,1440,7.429,1441,7.429,1442,7.429,1443,7.429,1444,6.229,1445,6.229,1446,4.368,1447,5.149,1448,5.149,1449,5.149,1450,5.149,1451,3.823,1452,3.823,1453,3.823,1454,3.823,1455,3.823,1456,6.652,1457,5.883,1458,5.883,1459,3.464,1460,3.823]],["title/classes/R.html",[133,0.165,803,2.519]],["body/classes/R.html",[3,0.062,4,0.049,5,0.056,7,0.106,9,0.735,10,0.606,11,0.335,14,0.553,15,0.624,17,0.553,18,1.029,19,0.299,20,0.012,21,0.917,23,0.655,24,0.537,25,0.172,26,0.161,27,0.155,28,0.003,37,0.003,40,1.29,116,0.526,132,0.005,133,0.262,135,0.776,136,2.234,140,1.278,147,0.835,149,1.146,179,0.828,184,2.453,186,1.453,187,1.374,199,0.67,202,1.004,206,2.42,214,1.062,237,2.494,238,1.917,257,1.596,260,1.823,264,0.828,265,0.828,284,1.762,290,0.664,315,0.801,316,0.856,338,3.324,360,2.391,396,2.032,429,0.856,430,1.198,443,3.179,461,2.294,473,1.693,474,1.693,481,3.061,483,1.702,484,1.917,485,1.917,486,1.203,487,2.854,494,1.836,500,1.836,501,1.762,510,2.507,511,2.728,515,3.492,516,1.762,520,1.203,521,2.391,522,1.203,523,1.852,524,1.461,542,2.44,544,2.738,548,3.638,549,3.655,550,3.176,572,1.629,787,1.391,788,3.337,789,1.471,790,2.218,792,1.203,794,1.565,796,1.321,797,2.925,798,1.391,799,1.391,800,1.391,801,1.391,802,2.494,803,2.218,804,4.131,805,3.549,806,3.877,807,2.494,808,2.494,809,2.494,810,4.501,811,1.565,812,1.565,813,1.565,814,1.565,815,2.494,816,1.565,817,3.488,818,2.494,819,1.565,820,2.494,821,2.345,822,1.565,823,2.106,824,1.565,825,1.565,826,1.565,827,1.565,828,1.917,829,1.565,830,2.494,831,1.565,832,1.565,833,2.494,834,1.565,835,1.565,836,1.565,837,1.565,838,1.565,839,1.565,840,1.565,841,2.494,842,1.471,843,2.925,844,2.766,845,1.565,846,1.321,847,1.565,848,1.565,849,1.565,850,3.111,851,2.494,852,1.565,853,1.321,854,1.391,855,1.565,856,1.565,857,1.391,858,1.565,859,1.565,860,2.494,861,1.565,862,1.565,863,2.494,864,1.565,865,1.565,866,2.494,867,1.565,868,1.565,869,1.565,870,1.565,871,1.565,872,1.565,873,1.565,874,1.565,875,2.494,876,1.565,877,2.345,878,1.471,879,2.218,880,2.218,881,1.565,882,3.111,883,1.565,884,1.391,885,1.565,886,1.565,887,4.335,888,3.111,889,2.494,890,1.565,891,1.565,892,1.565,893,1.565,894,1.565,895,1.565,896,4.335,897,1.565,898,1.471,899,1.565,900,1.565,901,1.565,902,1.565,903,1.565,904,1.565,905,1.565,906,3.111,907,1.565,908,1.565,909,1.565,910,1.565,911,1.565,912,1.565,913,2.494,914,1.565,915,1.565,916,1.565,917,2.494,918,1.565,919,1.565,920,1.565,921,2.494,922,1.565,923,1.565,924,2.494,925,3.111,926,1.565,927,1.565,928,3.111,929,1.565,930,1.565,931,1.565,932,2.494,933,1.565,934,1.565,935,2.494,936,1.565,937,1.565,938,2.494,939,1.565,940,1.565,941,1.565,942,2.494,943,1.565,944,1.565,945,1.565,946,1.565,947,1.565,948,1.565,949,1.565,950,1.565,951,1.565,952,1.565,953,1.565,954,1.565,955,1.565,956,1.565,957,1.565,958,1.565,959,1.565,960,1.565,961,1.565,962,2.494,963,1.565,964,2.494,965,1.565,966,1.565,967,1.565,968,1.565,969,1.565,970,1.565,971,1.565,972,2.494,973,1.565,974,1.565,1255,1.565,1461,3.654,1462,2.292,1463,2.292,1464,2.292,1465,2.292,1466,2.292]],["title/guards/RequestGuard.html",[1467,2.833,1468,3.291]],["body/guards/RequestGuard.html",[3,0.131,4,0.102,5,0.116,7,0.222,9,1.011,19,0.249,20,0.012,23,0.558,25,0.19,26,0.338,27,0.131,28,0.007,37,0.006,51,1.513,116,0.463,132,0.009,133,0.191,147,1.149,149,1.382,184,1.857,186,1.319,187,1.657,190,4.809,199,1.149,202,1.538,257,1.538,260,1.923,264,1.737,265,1.737,290,1.392,306,3.289,315,1.681,316,1.796,382,1.761,396,2.143,430,2.515,456,4.587,471,2.917,483,2.342,509,2.64,749,5.367,756,2.597,1248,4.745,1252,4.921,1254,3.613,1259,4.024,1260,4.234,1264,2.77,1467,5.234,1468,4.971,1469,3.812,1470,4.207,1471,6.269,1472,6.711,1473,6.269,1474,4.807,1475,5.486,1476,4.207,1477,4.807,1478,5.486,1479,5.486,1480,5.486,1481,5.486,1482,5.486,1483,5.486,1484,5.486,1485,4.807,1486,6.976,1487,4.807,1488,4.807,1489,4.807,1490,4.807,1491,4.807,1492,4.807,1493,6.269,1494,3.812,1495,4.807,1496,4.807]],["title/interfaces/RescueLists.html",[0,0.219,122,1.451]],["body/interfaces/RescueLists.html",[0,0.444,1,2.59,2,0.926,3,0.101,4,0.079,5,0.09,6,1.302,7,0.172,8,0.822,10,0.984,11,0.769,12,1.883,13,1.623,14,0.899,15,1.014,16,1.435,17,0.899,18,1.342,19,0.264,20,0.012,21,1.06,22,2.07,23,0.776,24,1.432,25,0.113,26,0.262,27,0.231,28,0.007,29,1.784,30,1.784,31,1.784,32,1.784,33,1.784,34,1.784,35,1.784,36,1.557,37,0.007,38,2.797,39,1.391,40,1.702,41,1.391,42,1.391,43,1.391,44,1.391,45,1.391,46,1.391,47,1.302,48,1.391,49,1.391,50,1.221,51,1.986,52,1.302,53,0.899,54,1.968,55,1.391,56,2.209,57,1.391,58,1.391,59,1.391,60,1.391,61,1.391,62,1.391,63,1.391,64,1.391,65,1.391,66,1.391,67,1.391,68,2.284,69,1.968,70,1.391,71,1.391,72,1.391,73,2.005,74,1.391,75,1.391,76,1.968,77,1.391,78,1.391,79,1.391,80,1.391,81,1.391,82,2.325,83,1.391,84,1.842,85,1.842,86,1.391,87,1.391,88,1.391,89,1.391,90,1.391,91,1.391,92,1.391,93,1.391,94,1.391,95,1.968,96,1.391,97,1.391,98,1.391,99,1.302,100,1.391,101,1.391,102,2.721,103,1.391,104,1.391,105,1.391,106,1.391,107,1.391,108,1.391,109,1.391,110,1.391,111,1.221,112,1.391,113,1.391,114,1.391,115,1.391,116,0.275,117,1.391,118,1.391,119,1.391,120,1.391,121,1.391,122,1.842,123,2.138,124,1.391,125,1.391,126,1.391,127,1.842,128,1.784,129,1.391,130,1.391,131,1.391,132,0.007]],["title/interfaces/Rescues.html",[0,0.219,102,1.451]],["body/interfaces/Rescues.html",[0,0.439,1,2.525,2,0.842,3,0.092,4,0.072,5,0.082,6,1.183,7,0.156,8,0.768,10,0.894,11,0.718,12,1.786,13,1.515,14,0.817,15,0.922,16,1.34,17,0.817,18,1.344,19,0.327,20,0.012,21,0.99,22,1.963,23,0.78,24,1.358,25,0.103,26,0.238,27,0.229,28,0.007,29,1.666,30,1.666,31,1.666,32,1.666,33,1.666,34,1.666,35,1.666,36,1.49,37,0.007,38,2.719,39,1.264,40,1.654,41,1.264,42,1.264,43,1.264,44,1.264,45,1.264,46,1.264,47,1.183,48,1.264,49,1.264,50,1.11,51,1.957,52,1.183,53,0.817,54,1.838,55,1.264,56,2.095,57,1.264,58,1.264,59,1.264,60,1.264,61,1.264,62,1.264,63,1.264,64,1.264,65,1.264,66,1.264,67,1.264,68,2.165,69,1.838,70,1.264,71,1.264,72,1.264,73,1.901,74,1.264,75,1.264,76,1.838,77,1.264,78,1.264,79,1.264,80,1.264,81,1.264,82,2.225,83,1.264,84,1.721,85,1.721,86,1.264,87,1.264,88,1.264,89,1.264,90,1.264,91,1.264,92,1.264,93,1.264,94,1.264,95,1.838,96,1.264,97,1.264,98,1.264,99,1.183,100,1.264,101,1.264,102,2.364,103,2.377,104,2.377,105,2.377,106,2.377,107,2.377,108,2.377,109,2.377,110,2.377,111,1.901,112,2.377,113,2.377,114,2.377,115,1.264,116,0.25,117,1.264,118,1.264,119,1.264,120,2.377,121,2.377,122,1.183,123,2.027,124,1.264,125,1.264,126,1.264,127,1.721,128,1.666,129,1.264,130,1.264,131,1.264,132,0.007,1051,3.158]],["title/interfaces/Response.html",[0,0.219,40,0.943]],["body/interfaces/Response.html",[0,0.294,2,1.383,3,0.151,4,0.118,5,0.135,7,0.257,8,1.073,11,1.17,19,0.221,20,0.012,21,1.501,25,0.226,26,0.391,27,0.187,28,0.008,37,0.007,40,1.772,132,0.009,133,0.273,186,1.051,199,1.018,290,1.609,315,2.404,382,1.931,463,3.203,483,2.076,523,1.561,756,2.848,1238,3.203,1244,4.693,1246,4.067,1248,4.79,1249,5.461,1251,5.461,1252,4.412,1253,4.067,1254,3.962,1255,4.693,1256,4.693,1257,3.794,1258,4.067,1259,3.567,1260,4.53,1261,4.067,1262,4.067,1263,5.03,1264,3.203,1265,3.794,1266,3.794,1497,4.408,1498,4.408,1499,4.067,1500,4.864]],["title/guards/ResponseGuard.html",[1467,2.833,1501,3.291]],["body/guards/ResponseGuard.html",[3,0.12,4,0.093,5,0.106,7,0.203,9,0.952,11,1.087,12,1.353,13,2.197,19,0.234,20,0.012,23,0.594,25,0.179,26,0.309,27,0.12,28,0.006,36,1.028,37,0.006,40,1.779,51,1.425,116,0.436,132,0.008,133,0.174,139,4.282,142,4.652,147,1.082,149,1.301,184,2.756,186,1.449,187,1.56,190,4.111,199,1.082,202,1.47,257,0.968,260,2.668,290,1.272,306,3.098,382,1.658,396,2.974,430,1.936,456,4.32,471,2.665,483,2.206,515,2.035,749,5.232,756,2.446,821,3.79,853,2.531,1248,4.579,1252,4.777,1254,3.403,1259,3.79,1260,4.048,1264,2.531,1311,5.168,1339,5.29,1459,5.29,1467,4.87,1469,3.483,1472,6.514,1475,5.168,1476,3.844,1478,5.168,1479,5.168,1480,5.168,1481,5.168,1482,5.168,1483,5.168,1484,5.168,1501,4.683,1502,3.844,1503,5.904,1504,5.904,1505,4.392,1506,4.392,1507,4.392,1508,7.443,1509,5.904,1510,4.392,1511,4.392,1512,4.392,1513,4.392,1514,4.392,1515,4.392,1516,4.392,1517,5.904,1518,4.392,1519,4.392,1520,5.904,1521,4.392,1522,4.392,1523,4.392,1524,4.392,1525,4.392]],["title/interfaces/Result.html",[0,0.219,37,0.006]],["body/interfaces/Result.html",[0,0.442,1,2.568,2,0.896,3,0.098,4,0.077,5,0.087,6,1.259,7,0.166,8,0.803,9,1.056,10,0.952,11,1.012,12,2.219,13,2.134,14,0.869,15,0.981,16,1.887,17,0.869,18,1.339,19,0.294,20,0.012,21,1.317,22,2.346,23,0.777,24,1.622,25,0.109,26,0.253,27,0.23,28,0.007,29,1.742,30,1.742,31,1.742,32,1.742,33,1.742,34,1.742,35,1.742,36,1.534,37,0.008,38,2.771,39,1.345,40,1.685,41,1.345,42,1.345,43,1.345,44,1.345,45,1.345,46,1.345,47,1.259,48,1.345,49,1.345,50,1.181,51,1.976,52,1.259,53,0.869,54,1.922,55,1.345,56,2.169,57,1.345,58,1.345,59,1.345,60,1.345,61,1.345,62,1.345,63,1.345,64,1.345,65,1.345,66,1.345,67,1.345,68,2.243,69,1.922,70,1.345,71,1.345,72,1.345,73,1.969,74,1.345,75,1.345,76,1.922,77,1.345,78,1.345,79,1.345,80,1.345,81,1.345,82,2.29,83,1.345,84,1.799,85,1.799,86,1.345,87,1.345,88,1.345,89,1.345,90,1.345,91,1.345,92,1.345,93,1.345,94,1.345,95,1.922,96,1.345,97,1.345,98,1.345,99,1.259,100,1.345,101,1.345,102,2.29,103,1.345,104,1.345,105,1.345,106,1.345,107,1.345,108,1.345,109,1.345,110,1.345,111,1.181,112,1.345,113,1.345,114,1.345,115,1.345,116,0.266,117,1.345,118,1.345,119,1.345,120,1.345,121,1.345,122,1.259,123,2.099,124,1.345,125,1.345,126,1.345,127,1.799,128,1.742,129,1.345,130,1.345,131,1.345,132,0.007]],["title/classes/SerializeHelper.html",[133,0.165,857,2.519]],["body/classes/SerializeHelper.html",[3,0.065,4,0.051,5,0.058,7,0.11,9,0.607,10,0.629,11,0.348,14,0.575,15,0.649,17,0.575,18,1.043,19,0.294,20,0.012,21,0.479,23,0.64,24,0.557,25,0.175,26,0.167,27,0.158,28,0.003,37,0.003,40,1.315,116,0.521,132,0.005,133,0.265,135,0.806,136,2.007,140,1.317,147,0.69,149,0.83,179,0.86,184,2.236,186,1.463,187,1.404,199,0.69,202,0.83,206,2.403,214,1.103,257,1.612,260,1.869,264,0.86,265,0.86,284,1.816,290,0.689,315,0.832,316,0.889,338,3.379,360,2.452,396,2.083,429,0.889,430,1.235,443,3.222,461,2.329,473,1.745,474,1.745,481,2.79,483,1.745,484,1.976,485,1.976,486,1.249,487,2.908,494,1.892,500,1.892,501,1.816,510,2.561,511,3.036,515,3.52,516,1.816,520,1.249,521,2.452,522,1.249,523,1.492,524,1.506,542,2.486,544,2.79,548,3.358,549,3.229,550,1.976,572,1.679,787,1.445,788,2.999,789,1.528,790,2.285,792,1.249,794,1.625,796,1.372,797,2.999,798,1.445,799,1.445,800,1.445,801,1.445,802,2.571,803,1.445,804,3.626,805,2.571,806,3.189,807,2.571,808,2.571,809,1.625,810,4.2,811,1.625,812,1.625,813,1.625,814,1.625,815,2.571,816,1.625,817,3.546,818,2.571,819,1.625,820,2.571,821,2.417,822,1.625,823,2.17,824,1.625,825,1.625,826,1.625,827,1.625,828,1.976,829,1.625,830,2.571,831,1.625,832,1.625,833,2.571,834,1.625,835,1.625,836,1.625,837,1.625,838,1.625,839,1.625,840,1.625,841,2.571,842,1.528,843,2.999,844,2.835,845,1.625,846,1.372,847,1.625,848,1.625,849,1.625,850,3.189,851,2.571,852,1.625,853,1.372,854,1.445,855,1.625,856,1.625,857,2.285,858,2.571,859,3.626,860,2.571,861,1.625,862,1.625,863,2.571,864,1.625,865,2.571,866,2.571,867,1.625,868,1.625,869,1.625,870,1.625,871,1.625,872,1.625,873,1.625,874,1.625,875,2.571,876,1.625,877,2.417,878,1.528,879,2.285,880,2.285,881,1.625,882,3.189,883,1.625,884,1.445,885,1.625,886,1.625,887,4.399,888,3.189,889,2.571,890,1.625,891,1.625,892,1.625,893,1.625,894,1.625,895,1.625,896,4.399,897,1.625,898,1.528,899,1.625,900,1.625,901,1.625,902,1.625,903,1.625,904,1.625,905,1.625,906,3.189,907,1.625,908,1.625,909,1.625,910,1.625,911,1.625,912,1.625,913,2.571,914,1.625,915,1.625,916,1.625,917,2.571,918,1.625,919,1.625,920,1.625,921,2.571,922,1.625,923,1.625,924,2.571,925,3.189,926,1.625,927,1.625,928,3.189,929,1.625,930,1.625,931,1.625,932,2.571,933,1.625,934,1.625,935,2.571,936,1.625,937,1.625,938,2.571,939,1.625,940,1.625,941,1.625,942,2.571,943,1.625,944,1.625,945,1.625,946,1.625,947,1.625,948,1.625,949,1.625,950,1.625,951,1.625,952,1.625,953,1.625,954,1.625,955,1.625,956,1.625,957,1.625,958,1.625,959,1.625,960,1.625,961,1.625,962,2.571,963,1.625,964,2.571,965,1.625,966,1.625,967,1.625,968,1.625,969,1.625,970,1.625,971,1.625,972,2.571,973,1.625,974,1.625,1526,3.766,1527,3.766,1528,2.38,1529,2.38]],["title/classes/Swagger.html",[133,0.165,542,1.783]],["body/classes/Swagger.html",[3,0.061,4,0.048,5,0.054,7,0.103,9,0.905,10,0.591,11,0.327,14,0.54,15,0.61,17,0.54,18,1.052,19,0.311,20,0.012,21,0.45,23,0.56,24,0.524,25,0.17,26,0.157,27,0.153,28,0.003,37,0.003,40,1.36,116,0.547,132,0.005,133,0.259,135,0.758,136,2.572,140,1.253,147,1.028,149,1.237,179,0.808,184,2.605,186,1.446,187,1.355,199,0.657,202,1.237,206,2.464,214,1.037,238,1.881,257,1.586,260,1.794,264,0.808,265,0.808,284,1.728,290,0.648,315,0.782,316,0.836,338,3.288,360,2.353,396,2.502,429,0.836,430,1.176,443,3.334,461,2.272,473,1.661,474,1.661,481,2.706,483,1.675,484,1.881,485,1.881,486,1.174,487,3.16,494,1.801,500,1.801,501,1.728,510,2.887,511,2.691,515,3.473,516,1.728,520,1.174,521,2.353,522,1.174,523,1.44,524,1.434,542,2.808,544,2.706,548,3.388,549,3.142,550,1.881,572,1.598,787,1.358,788,3.843,789,1.436,790,2.175,792,1.174,794,1.527,796,1.29,797,2.878,798,1.358,799,1.358,800,1.358,801,1.358,802,2.447,803,1.358,804,3.501,805,2.447,806,3.061,807,2.447,808,2.447,809,1.527,810,4.602,811,1.527,812,1.527,813,1.527,814,1.527,815,3.501,816,2.447,817,3.885,818,3.501,819,2.447,820,3.061,821,2.301,822,1.527,823,2.066,824,1.527,825,1.527,826,1.527,827,1.527,828,1.881,829,1.527,830,2.447,831,1.527,832,1.527,833,2.447,834,2.447,835,1.527,836,2.447,837,1.527,838,2.447,839,1.527,840,3.061,841,3.831,842,1.436,843,2.878,844,2.722,845,1.527,846,1.29,847,1.527,848,1.527,849,1.527,850,3.061,851,2.447,852,1.527,853,1.29,854,1.358,855,1.527,856,1.527,857,1.358,858,1.527,859,1.527,860,2.447,861,1.527,862,1.527,863,2.447,864,1.527,865,1.527,866,2.447,867,1.527,868,1.527,869,1.527,870,1.527,871,1.527,872,1.527,873,1.527,874,1.527,875,2.447,876,1.527,877,2.301,878,1.436,879,2.175,880,2.175,881,1.527,882,3.061,883,1.527,884,1.358,885,1.527,886,1.527,887,4.293,888,3.061,889,2.447,890,1.527,891,1.527,892,1.527,893,1.527,894,1.527,895,1.527,896,4.293,897,1.527,898,1.436,899,1.527,900,1.527,901,1.527,902,1.527,903,1.527,904,1.527,905,1.527,906,3.061,907,1.527,908,1.527,909,1.527,910,1.527,911,1.527,912,1.527,913,2.447,914,1.527,915,1.527,916,1.527,917,2.447,918,1.527,919,1.527,920,1.527,921,2.447,922,1.527,923,1.527,924,2.447,925,3.061,926,1.527,927,1.527,928,3.061,929,1.527,930,1.527,931,1.527,932,2.447,933,1.527,934,1.527,935,2.447,936,1.527,937,1.527,938,2.447,939,1.527,940,1.527,941,1.527,942,2.447,943,1.527,944,1.527,945,1.527,946,1.527,947,1.527,948,1.527,949,1.527,950,1.527,951,1.527,952,1.527,953,1.527,954,1.527,955,1.527,956,1.527,957,1.527,958,1.527,959,1.527,960,1.527,961,1.527,962,2.447,963,1.527,964,2.447,965,1.527,966,1.527,967,1.527,968,1.527,969,1.527,970,1.527,971,1.527,972,2.447,973,1.527,974,1.527,1051,3.292,1530,3.584,1531,3.584,1532,3.584,1533,3.584,1534,2.237,1535,2.237,1536,2.237,1537,2.237,1538,2.237,1539,2.237]],["title/classes/Tag.html",[133,0.165,568,2.177]],["body/classes/Tag.html",[0,0.294,3,0.11,4,0.085,5,0.097,7,0.186,8,1.127,9,1.109,18,0.628,19,0.336,20,0.012,23,0.705,25,0.208,27,0.197,28,0.005,36,0.942,37,0.005,116,0.598,132,0.008,133,0.287,135,1.362,147,1.483,149,1.226,172,1.453,199,1.168,202,1.226,206,2.469,272,2.918,281,1.793,290,1.846,325,2.118,339,2.577,340,1.793,351,1.939,396,2.48,416,3.61,419,4.664,420,4.351,421,4.069,422,2.75,423,3.796,424,4.664,425,4.41,426,4.069,429,2.569,430,2.255,431,2.943,434,2.441,437,2.441,438,3.375,439,4.173,441,3.19,442,3.19,443,2.681,444,4.069,446,2.943,447,2.149,450,1.945,457,2.549,514,1.793,523,1.562,555,2.11,556,2.582,557,4.414,560,2.318,561,2.794,562,3.674,563,3.674,564,4.303,565,3.5,566,3.054,567,2.11,568,2.918,569,3.345,570,3.375,571,2.318,572,2.842,573,2.318,574,2.318,575,2.318,576,2.918,577,2.318,578,2.318,579,1.939,580,2.318,581,2.318,582,3.205,583,3.796,584,3.205,585,2.11,586,2.318,587,2.318,588,2.318,589,2.318,590,2.746,591,2.746,592,2.318,593,2.318,594,2.441,595,2.943,1540,4.022,1541,4.022,1542,4.022,1543,5.706,1544,3.52,1545,3.52,1546,3.52,1547,3.52,1548,3.52,1549,3.52,1550,3.52,1551,3.52]],["title/controllers/TagsController.html",[195,1.783,1552,3.036]],["body/controllers/TagsController.html",[3,0.138,4,0.108,5,0.123,7,0.234,9,1.046,11,1.138,16,1.767,18,1.116,19,0.257,20,0.012,24,1.186,25,0.242,26,0.356,27,0.138,28,0.007,37,0.007,116,0.479,132,0.009,133,0.201,140,1.771,147,1.188,149,1.429,150,2.891,172,1.83,186,1.226,195,2.176,197,2.347,199,1.188,202,1.429,203,3.074,206,1.56,257,1.429,325,2.456,333,4.162,334,4.591,335,4.017,336,4.017,337,3.074,358,2.422,360,2.658,422,2.594,457,2.026,524,2.594,526,3.448,528,2.658,555,3.957,568,2.658,570,3.074,594,4.576,742,3.251,756,2.099,975,4.427,992,3.458,996,3.251,1002,5.118,1018,3.074,1023,5.142,1024,4.017,1040,4.017,1045,4.017,1046,4.017,1047,4.017,1048,5.142,1050,4.017,1552,4.744,1553,4.433,1554,5.065,1555,5.065,1556,6.484,1557,3.706,1558,4.433,1559,4.162,1560,4.433,1561,5.065,1562,5.065,1563,5.065,1564,4.433,1565,4.433]],["title/modules/TagsModule.html",[209,1.66,224,2.833]],["body/modules/TagsModule.html",[3,0.161,4,0.125,5,0.143,20,0.012,25,0.232,26,0.414,27,0.161,28,0.008,37,0.008,132,0.01,133,0.234,187,1.558,197,3.302,209,3.259,211,2.963,212,3.094,213,3.398,214,2.732,215,3.094,216,4.207,217,4.207,224,5.718,226,4.107,227,3.398,228,3.238,570,4.325,1552,5.604,1559,5.538,1560,5.16,1566,5.16,1567,5.16,1568,5.16,1569,5.896,1570,5.896]],["title/injectables/TagsService.html",[382,1.165,1559,2.664]],["body/injectables/TagsService.html",[3,0.113,4,0.088,5,0.1,7,0.191,9,1.285,11,0.604,18,1.175,19,0.316,20,0.012,21,1.14,23,0.505,25,0.211,26,0.291,27,0.113,28,0.006,37,0.01,116,0.601,132,0.008,133,0.164,144,1.714,147,1.477,149,1.756,160,3.62,179,1.495,186,1.524,199,1.039,202,1.756,257,0.912,325,2.613,348,1.654,349,2.268,358,1.545,375,3.28,382,1.592,383,1.917,406,3.026,422,2.587,429,1.545,430,1.357,447,1.598,450,1.982,457,2.268,460,3.441,523,1.592,524,2.783,526,2.733,555,3.951,568,3.651,579,1.994,596,2.975,792,2.975,828,2.17,846,3.267,984,4.416,985,3.87,986,3.87,996,2.655,1002,4.152,1004,3.552,1008,2.824,1013,2.824,1014,3.026,1018,2.51,1019,3.026,1075,5.554,1078,4.496,1079,3.87,1080,4.148,1081,3.28,1082,5.519,1085,5.782,1087,5.334,1088,5.13,1089,3.28,1091,2.824,1093,3.28,1095,3.026,1098,3.28,1326,4.962,1543,5.745,1557,3.026,1558,3.62,1559,3.639,1571,3.62,1572,4.136,1573,4.136,1574,3.62,1575,3.62,1576,3.62,1577,3.62,1578,3.62,1579,3.62,1580,3.62,1581,3.62,1582,4.136,1583,3.62,1584,4.136,1585,4.136,1586,4.136,1587,4.136,1588,4.136]],["title/injectables/TimeoutInterceptor.html",[382,1.165,1589,3.291]],["body/injectables/TimeoutInterceptor.html",[3,0.136,4,0.106,5,0.121,7,0.231,9,0.807,19,0.199,20,0.012,25,0.215,26,0.351,27,0.136,28,0.007,37,0.007,40,1.461,116,0.37,132,0.009,133,0.282,147,0.917,149,1.103,186,1.344,187,1.7,190,4.098,199,1.375,202,1.103,290,1.449,315,2.624,382,1.807,383,2.318,430,2.11,463,3.707,483,2.403,523,1.807,675,6.795,704,4.378,752,3.967,756,2.665,1238,3.707,1246,4.706,1247,5.101,1248,5.101,1249,5.815,1251,5.815,1252,4.129,1253,4.706,1254,4.326,1255,5.123,1256,5.123,1257,4.391,1258,4.706,1259,4.129,1260,4.712,1261,4.706,1262,4.706,1263,4.706,1264,2.883,1266,3.415,1275,4.378,1494,3.967,1498,5.101,1589,5.101,1590,4.378,1591,6.432,1592,6.432,1593,5.63,1594,5.002,1595,6.432,1596,5.002,1597,6.432,1598,5.002,1599,5.002,1600,5.002,1601,5.002,1602,5.002,1603,5.002,1604,5.002]],["title/interfaces/TokenPayload.html",[0,0.219,1357,3.036]],["body/interfaces/TokenPayload.html",[0,0.343,2,1.615,3,0.177,4,0.138,5,0.157,7,0.3,8,1.178,19,0.258,20,0.011,23,0.711,27,0.177,28,0.009,37,0.009,132,0.01,349,3.285,429,2.426,1357,5.837,1605,5.683]],["title/injectables/TransformInterceptor.html",[382,1.165,1499,3.036]],["body/injectables/TransformInterceptor.html",[0,0.273,3,0.141,4,0.11,5,0.125,7,0.238,9,0.833,11,0.958,19,0.205,20,0.012,21,1.039,25,0.219,26,0.363,27,0.179,28,0.007,37,0.007,40,1.781,116,0.382,132,0.009,133,0.286,147,0.946,149,1.138,186,0.976,187,1.735,199,1.392,202,1.138,290,1.495,315,2.656,382,1.844,383,2.393,463,3.783,483,2.452,523,1.844,756,2.72,1238,3.783,1244,5.184,1246,5.28,1247,4.095,1248,5.143,1249,5.863,1251,5.863,1252,4.632,1253,4.803,1254,4.377,1255,5.184,1256,5.184,1257,4.481,1258,4.803,1259,4.213,1260,4.758,1261,4.803,1262,4.803,1263,4.803,1264,2.976,1265,3.525,1266,3.525,1497,4.095,1498,5.206,1499,4.803,1500,4.519,1606,5.163]],["title/classes/UpdateTagsDto.html",[133,0.165,594,2.519]],["body/classes/UpdateTagsDto.html",[0,0.35,3,0.143,4,0.112,5,0.127,8,1.035,19,0.319,20,0.012,23,0.68,25,0.231,27,0.215,28,0.007,37,0.007,116,0.582,132,0.009,133,0.313,135,1.777,172,1.896,199,0.962,206,2.043,272,2.754,281,2.34,290,1.921,339,3.073,340,2.34,416,2.957,422,2.099,447,2.563,450,2.319,457,2.653,514,2.34,523,1.474,555,2.754,556,3.369,557,4.667,560,3.025,561,3.333,562,3.822,563,3.822,564,4.191,565,3.993,566,3.642,567,2.754,568,2.754,569,2.754,570,3.185,571,3.025,572,3.242,573,3.025,574,3.025,575,3.025,576,3.48,577,3.025,578,3.025,579,2.53,580,3.025,581,3.025,582,3.025,583,3.583,584,3.025,585,2.754,586,3.025,587,3.025,588,3.025,589,3.025,590,3.583,591,3.583,592,3.025,593,3.025,594,4.025,595,3.84]],["title/classes/UpdateUserDto.html",[133,0.165,658,2.392]],["body/classes/UpdateUserDto.html",[0,0.287,3,0.106,4,0.083,5,0.094,8,0.848,19,0.319,20,0.012,23,0.757,25,0.224,27,0.194,28,0.005,37,0.005,50,2.223,51,1.636,53,0.939,73,2.339,116,0.463,132,0.007,133,0.283,135,1.317,172,1.406,186,0.735,199,0.713,206,1.929,257,1.38,260,1.556,272,2.041,281,1.735,290,1.573,325,1.929,339,3.423,340,1.735,346,2.497,348,1.556,349,2.955,351,3.438,358,2.664,402,3.298,409,3.709,416,2.423,422,1.556,437,2.361,438,2.361,439,4.328,447,2.42,450,1.9,457,2.173,459,2.497,461,1.406,477,2.497,514,1.735,523,1.093,530,1.955,560,2.242,561,3.584,562,4.258,563,4.258,564,3.609,565,3.439,566,2.984,567,2.041,569,2.041,571,2.242,572,2.792,573,2.242,574,2.242,575,2.242,576,3.286,577,2.242,578,2.242,579,1.876,580,2.242,581,2.242,582,2.242,584,4.11,585,2.041,586,2.242,587,2.242,588,2.242,589,2.242,592,3.907,593,2.242,596,2.041,597,2.497,598,4.019,599,5.405,600,5.405,605,3.488,611,3.709,612,4.96,613,2.361,614,3.709,615,2.846,616,2.656,617,3.298,618,2.846,619,2.846,620,2.846,621,2.846,622,2.846,623,2.846,624,2.846,625,2.846,626,2.846,627,3.976,628,2.846,629,2.846,630,2.846,631,2.361,632,2.846,633,2.846,634,2.846,635,2.846,636,2.656,637,2.846,638,2.656,639,2.846,640,2.846,641,2.846,642,2.846,643,2.846,644,3.709,645,2.846,646,2.846,647,2.656,648,3.976,649,2.656,650,2.497,651,2.846,652,2.846,653,3.976,654,3.976,655,2.656,656,2.656,657,2.846,658,3.132,659,2.846]],["title/classes/User.html",[53,1.002,133,0.165]],["body/classes/User.html",[0,0.217,3,0.073,4,0.057,5,0.065,7,0.123,8,0.953,9,1.174,18,0.416,19,0.336,20,0.012,23,0.755,25,0.195,27,0.166,28,0.004,36,0.624,37,0.004,50,2.205,51,1.557,53,0.993,73,2.337,116,0.538,132,0.006,133,0.242,135,0.903,147,1.467,149,1.245,172,0.963,186,0.504,199,0.921,202,1.245,206,2.345,257,1.345,260,1.646,272,2.159,281,1.189,290,1.455,325,2.281,339,2.989,340,1.189,346,2.641,348,1.646,349,2.962,351,3.571,358,2.28,396,1.834,402,2.497,409,3.856,416,3.302,419,3.676,420,3.43,421,3.01,422,2.259,423,2.809,424,3.676,425,3.263,426,3.01,429,2.28,430,2.002,431,1.951,434,1.618,437,2.497,438,3.049,439,4.562,441,2.114,442,2.114,443,1.984,444,3.01,446,1.951,447,1.941,450,1.439,457,2.009,459,2.641,461,0.963,477,1.711,514,1.189,523,1.155,530,2.067,560,1.536,561,3.067,562,4.268,563,4.268,564,3.718,565,2.759,566,2.259,567,1.399,569,2.636,571,1.536,572,2.24,573,1.536,574,1.536,575,1.536,576,2.636,577,1.536,578,1.536,579,1.285,580,1.536,581,1.536,582,2.371,584,4.194,585,1.399,586,1.536,587,1.536,588,1.536,589,1.536,592,3.255,593,1.536,596,1.399,597,1.711,598,3.625,599,5.419,600,5.419,605,2.641,611,2.809,612,4.919,613,2.497,614,3.856,615,3.01,616,2.809,617,3.428,618,1.951,619,1.951,620,1.951,621,1.951,622,3.01,623,3.01,624,3.01,625,3.01,626,3.01,627,4.133,628,3.01,629,3.01,630,3.01,631,2.497,632,3.01,633,3.01,634,3.01,635,3.01,636,2.809,637,3.01,638,2.809,639,3.01,640,3.01,641,3.01,642,3.01,643,3.01,644,3.856,645,3.01,646,3.01,647,2.809,648,3.01,649,1.82,650,1.711,651,3.01,652,1.951,653,3.01,654,3.01,655,1.82,656,1.82,657,1.951,658,1.536,659,1.951,1543,5.08,1544,2.333,1545,2.333,1546,2.333,1547,2.333,1548,2.333,1549,2.333,1550,2.333,1551,2.333,1607,4.114,1608,3.601,1609,2.666,1610,2.666,1611,2.666,1612,2.666,1613,2.666,1614,2.666,1615,2.666,1616,2.666,1617,2.666,1618,2.666,1619,2.666]],["title/interfaces/UserPost.html",[0,0.219,85,1.451]],["body/interfaces/UserPost.html",[0,0.438,1,2.513,2,0.827,3,0.091,4,0.071,5,0.081,6,1.163,7,0.153,8,0.758,10,0.879,11,0.709,12,1.767,13,1.496,14,0.802,15,0.906,16,1.323,17,0.802,18,1.342,19,0.325,20,0.012,21,0.977,22,1.943,23,0.778,24,1.344,25,0.101,26,0.234,27,0.228,28,0.007,29,1.644,30,1.644,31,1.644,32,1.644,33,1.644,34,1.644,35,1.644,36,1.802,37,0.007,38,2.704,39,1.242,40,1.645,41,1.242,42,1.242,43,1.242,44,1.242,45,1.242,46,1.242,47,1.163,48,1.242,49,1.242,50,1.09,51,1.995,52,1.163,53,0.802,54,1.814,55,1.242,56,2.073,57,1.242,58,1.242,59,1.242,60,1.242,61,1.242,62,1.242,63,1.242,64,1.242,65,1.242,66,1.242,67,1.242,68,2.143,69,1.814,70,1.242,71,1.242,72,1.242,73,1.882,74,1.242,75,1.242,76,1.814,77,1.242,78,1.242,79,1.242,80,1.242,81,1.242,82,2.647,83,1.242,84,2.207,85,2.007,86,2.357,87,2.357,88,2.357,89,2.357,90,2.357,91,2.357,92,2.357,93,2.357,94,2.357,95,2.507,96,2.357,97,2.357,98,2.357,99,1.163,100,1.242,101,1.242,102,2.207,103,1.242,104,1.242,105,1.242,106,1.242,107,1.242,108,1.242,109,1.242,110,1.242,111,1.09,112,1.242,113,1.242,114,1.242,115,1.242,116,0.246,117,1.242,118,1.242,119,1.242,120,1.242,121,1.242,122,1.163,123,2.007,124,1.242,125,1.242,126,1.242,127,1.698,128,1.644,129,1.242,130,1.242,131,1.242,132,0.007]],["title/interfaces/UserPosts.html",[0,0.219,99,1.451]],["body/interfaces/UserPosts.html",[0,0.444,1,2.585,2,0.919,3,0.101,4,0.078,5,0.089,6,1.291,7,0.17,8,0.818,10,0.976,11,0.765,12,1.875,13,1.613,14,0.891,15,1.006,16,1.427,17,0.891,18,1.342,19,0.278,20,0.012,21,1.054,22,2.061,23,0.776,24,1.426,25,0.112,26,0.259,27,0.231,28,0.007,29,1.774,30,1.774,31,1.774,32,1.774,33,1.774,34,1.774,35,1.774,36,1.551,37,0.007,38,2.791,39,1.379,40,1.698,41,1.379,42,1.379,43,1.379,44,1.379,45,1.379,46,1.379,47,1.291,48,1.379,49,1.379,50,1.211,51,2.004,52,1.291,53,0.891,54,1.957,55,1.379,56,2.199,57,1.379,58,1.379,59,1.379,60,1.379,61,1.379,62,1.379,63,1.379,64,1.379,65,1.379,66,1.379,67,1.379,68,2.274,69,1.957,70,1.379,71,1.379,72,1.379,73,1.996,74,1.379,75,1.379,76,1.957,77,1.379,78,1.379,79,1.379,80,1.379,81,1.379,82,2.316,83,1.379,84,1.832,85,2.316,86,1.379,87,1.379,88,1.379,89,1.379,90,1.379,91,1.379,92,1.379,93,1.379,94,1.379,95,1.957,96,1.379,97,1.379,98,1.379,99,1.832,100,2.474,101,2.474,102,2.316,103,1.379,104,1.379,105,1.379,106,1.379,107,1.379,108,1.379,109,1.379,110,1.379,111,1.211,112,1.379,113,1.379,114,1.379,115,1.379,116,0.273,117,1.379,118,1.379,119,1.379,120,1.379,121,1.379,122,1.291,123,2.129,124,1.379,125,1.379,126,1.379,127,1.832,128,1.774,129,1.379,130,1.379,131,1.379,132,0.007]],["title/controllers/UsersController.html",[195,1.783,1620,3.036]],["body/controllers/UsersController.html",[3,0.122,4,0.095,5,0.108,7,0.207,9,1.086,11,1.094,16,1.63,18,1.051,19,0.267,20,0.012,23,0.6,24,1.049,25,0.227,26,0.315,27,0.122,28,0.006,37,0.006,53,1.808,116,0.498,132,0.008,133,0.178,140,1.566,147,1.234,149,1.485,150,3.004,172,1.618,179,2.161,186,1.274,187,2.037,195,1.924,197,2.075,199,1.096,202,1.485,203,2.717,206,1.379,257,1.319,281,3.004,325,2.494,333,3.839,334,3.839,342,3.139,349,2.996,358,2.234,360,2.35,396,3.206,422,2.996,457,1.791,461,1.618,524,3.083,526,3.795,528,2.35,596,3.772,613,4.547,658,4.143,742,2.874,756,1.855,828,4.196,975,4.083,992,3.057,996,2.874,997,5.896,1002,4.947,1009,5.235,1018,2.717,1023,4.744,1024,3.551,1025,6.292,1031,5.896,1040,3.551,1045,3.551,1046,3.551,1047,3.551,1048,3.551,1050,3.551,1079,4.083,1091,3.057,1557,3.276,1564,3.919,1565,3.919,1620,4.377,1621,3.919,1622,5.982,1623,4.478,1624,4.478,1625,4.478,1626,4.478,1627,4.478,1628,4.478,1629,3.919,1630,3.919,1631,4.478,1632,4.478,1633,4.478,1634,4.478]],["title/modules/UsersModule.html",[209,1.66,225,2.664]],["body/modules/UsersModule.html",[3,0.161,4,0.125,5,0.143,20,0.012,25,0.232,26,0.414,27,0.161,28,0.008,37,0.008,132,0.01,133,0.234,187,1.558,197,3.302,209,3.259,211,2.963,212,3.094,213,3.398,214,2.732,215,3.094,216,4.207,217,4.207,225,5.376,226,4.107,227,3.398,228,3.238,342,4.527,613,4.325,1620,5.604,1630,5.16,1635,5.16,1636,5.16,1637,5.16,1638,5.896,1639,5.896]],["title/injectables/UsersService.html",[342,2.177,382,1.165]],["body/injectables/UsersService.html",[3,0.096,4,0.075,5,0.085,7,0.163,9,1.298,11,1.045,18,1.245,19,0.319,20,0.012,21,1.019,23,0.703,25,0.208,26,0.248,27,0.096,28,0.005,37,0.01,53,1.727,116,0.595,132,0.007,133,0.14,144,1.461,147,1.486,149,1.773,164,4.341,186,1.543,199,0.929,202,1.773,257,1.117,264,1.274,265,1.274,316,1.317,325,2.642,342,2.659,348,1.41,349,2.594,351,1.7,358,2.423,375,2.796,382,1.423,383,1.634,402,3.076,411,3.086,412,3.708,422,2.748,429,1.317,430,1.156,447,1.362,450,1.772,457,2.027,460,3.076,523,1.423,524,2.594,526,3.127,555,2.659,579,1.7,596,3.754,647,3.46,649,2.407,650,2.263,658,3.738,756,1.461,792,2.659,828,1.85,846,2.921,984,4.05,985,3.46,986,3.46,996,2.263,1002,3.808,1004,3.258,1008,2.407,1013,2.407,1014,2.58,1018,3.601,1019,2.58,1075,5.388,1078,5.144,1079,4.428,1080,3.708,1081,2.796,1082,5.144,1085,5.449,1087,5.027,1088,4.705,1089,2.796,1091,4.05,1093,2.796,1095,2.58,1098,2.796,1108,3.086,1109,3.086,1113,3.086,1144,2.796,1543,5.518,1557,2.58,1574,3.086,1575,3.086,1576,3.086,1577,3.086,1578,3.086,1579,3.086,1580,3.086,1581,3.086,1583,3.086,1608,4.436,1629,3.086,1640,3.086,1641,3.526,1642,5.068,1643,3.526,1644,5.068,1645,3.526,1646,3.526,1647,3.526,1648,3.526,1649,3.526,1650,3.526,1651,3.526,1652,3.526]],["title/classes/ValidationFailedFilter.html",[133,0.165,1653,3.291]],["body/classes/ValidationFailedFilter.html",[3,0.139,4,0.108,5,0.124,7,0.235,9,0.822,11,0.951,13,2.005,16,1.774,19,0.285,20,0.012,24,1.194,25,0.197,26,0.358,27,0.139,28,0.007,37,0.007,40,1.158,116,0.377,132,0.009,133,0.285,135,1.726,140,1.783,142,3.951,143,3.73,147,0.934,149,1.124,179,1.842,180,3.48,187,1.721,190,4.134,199,1.193,202,1.124,238,2.675,257,1.721,290,1.885,447,1.97,460,4.587,463,3.752,473,2.362,474,2.362,483,2.432,514,2.903,540,3.94,576,3.416,756,2.698,853,3.752,1238,3.752,1254,3.752,1432,4.043,1433,5.698,1434,7.265,1435,6.279,1436,5.698,1444,6.615,1445,6.615,1447,5.698,1448,5.698,1449,5.698,1450,5.698,1451,4.462,1452,4.462,1453,4.462,1454,4.462,1455,4.462,1459,4.043,1460,4.462,1653,5.163,1654,5.698,1655,7.558,1656,5.098,1657,5.098,1658,6.511,1659,5.098,1660,5.098]],["title/coverage.html",[1661,4.506]],["body/coverage.html",[0,0.439,1,0.836,5,0.06,6,2.781,19,0.098,20,0.012,28,0.003,29,0.836,30,0.836,31,0.836,32,0.836,33,0.836,34,0.836,35,0.836,37,0.005,40,0.561,47,0.863,53,0.935,82,0.863,84,0.863,85,0.863,99,0.863,102,0.863,122,0.863,123,0.863,127,0.863,128,0.836,132,0.005,133,0.317,134,1.958,136,3.635,137,2.835,138,3.073,179,0.892,184,3.034,185,1.806,195,2.685,196,1.806,198,2.161,215,1.295,229,1.958,231,1.806,258,1.958,323,1.685,324,3.073,329,1.806,338,1.356,339,1.144,342,1.295,344,1.423,364,1.685,365,1.685,382,2.072,384,2.161,416,1.101,417,3.073,418,1.806,434,1.498,481,1.19,482,3.822,501,1.19,502,1.498,508,1.498,510,1.19,542,1.665,544,1.19,555,1.295,556,3.478,557,1.584,561,1.24,568,1.295,569,2.033,594,1.498,596,1.295,597,3.478,598,1.584,605,1.584,638,1.685,658,1.423,662,1.685,663,1.685,668,2.161,672,1.806,733,5.334,787,1.498,788,3.779,789,3.779,798,1.498,799,1.498,800,1.498,801,1.498,803,1.498,823,1.423,857,1.498,879,1.498,975,1.685,976,2.161,980,1.685,988,1.685,999,2.487,1004,1.356,1029,1.498,1075,1.685,1076,2.161,1114,4.298,1161,3.794,1163,1.958,1167,1.958,1181,1.584,1184,1.685,1185,2.161,1190,1.958,1194,1.806,1195,2.161,1202,1.584,1215,2.161,1231,2.161,1240,1.958,1241,3.073,1242,3.073,1276,2.161,1324,2.161,1334,2.835,1353,2.161,1357,1.806,1377,2.161,1404,2.161,1405,2.161,1407,1.958,1430,1.958,1431,2.161,1432,3.073,1467,2.645,1468,1.958,1470,2.161,1497,3.073,1499,1.806,1501,1.958,1502,2.161,1552,1.806,1553,2.161,1559,1.584,1571,2.161,1589,1.958,1590,2.161,1605,2.161,1620,1.806,1621,2.161,1640,2.161,1653,1.958,1654,2.161,1661,1.958,1662,2.469,1663,2.469,1664,6.959,1665,8.39,1666,8.579,1667,7.656,1668,6.249,1669,5.888,1670,3.392,1671,2.161,1672,2.161,1673,7.728,1674,2.469,1675,2.469,1676,2.469,1677,2.469,1678,2.469,1679,2.161,1680,2.161,1681,1.958,1682,2.469,1683,3.875,1684,4.784,1685,2.469,1686,2.469,1687,2.161,1688,7.037,1689,2.161,1690,2.161,1691,2.161,1692,2.161,1693,2.161,1694,2.161,1695,2.161,1696,2.161,1697,2.161,1698,2.161,1699,2.161,1700,3.073,1701,2.161,1702,2.161,1703,2.161,1704,2.161,1705,3.392,1706,2.161,1707,5.419,1708,2.469,1709,2.161,1710,2.469,1711,2.469,1712,2.469,1713,2.469,1714,3.794,1715,3.392,1716,3.392,1717,3.794,1718,4.784,1719,2.161,1720,5.419,1721,2.161,1722,2.161,1723,3.392,1724,2.161,1725,2.161,1726,2.469,1727,2.469,1728,5.888,1729,3.875,1730,2.161,1731,5.153,1732,2.161,1733,2.161,1734,2.161,1735,2.469,1736,2.469,1737,2.469,1738,2.469,1739,2.469,1740,2.469,1741,2.469]],["title/dependencies.html",[212,2.622,1742,3.456]],["body/dependencies.html",[4,0.11,20,0.012,26,0.362,28,0.007,37,0.007,132,0.009,133,0.26,139,3.309,172,1.863,206,1.588,212,2.705,242,3.129,244,3.519,246,4.088,248,4.512,337,3.129,340,2.299,341,6.019,369,4.088,402,3.129,447,2.933,453,3.772,455,4.088,470,2.831,517,3.309,542,2.215,665,3.519,796,2.971,797,3.309,817,2.971,983,4.088,1137,4.512,1162,3.772,1170,4.088,1264,2.971,1265,3.519,1294,4.512,1363,5.719,1364,4.512,1385,4.512,1681,5.2,1743,5.155,1744,5.155,1745,6.557,1746,7.211,1747,5.155,1748,5.155,1749,5.155,1750,5.155,1751,5.155,1752,5.155,1753,6.557,1754,5.155,1755,5.155,1756,6.557,1757,5.155,1758,5.155,1759,5.155,1760,5.155,1761,5.155,1762,6.557,1763,6.557,1764,5.155,1765,5.155,1766,5.155,1767,5.155,1768,5.155,1769,5.155,1770,5.155,1771,5.155,1772,5.155,1773,5.155,1774,5.155,1775,5.155,1776,5.155,1777,5.155,1778,5.155,1779,5.155,1780,5.155,1781,5.155,1782,5.155,1783,5.155,1784,5.155,1785,5.155,1786,5.155,1787,5.155,1788,5.155,1789,5.155,1790,5.155,1791,5.155,1792,5.155,1793,5.155,1794,4.088,1795,5.155,1796,5.155,1797,5.155]],["title/miscellaneous/enumerations.html",[1798,1.992,1799,4.373]],["body/miscellaneous/enumerations.html",[7,0.306,20,0.011,28,0.009,37,0.009,132,0.01,430,2.505,1334,4.849,1342,6.056,1343,6.056,1344,6.056,1798,3.82,1799,5.801,1800,6.628]],["title/miscellaneous/functions.html",[1798,1.992,1801,4.373]],["body/miscellaneous/functions.html",[7,0.211,9,1.37,19,0.308,20,0.012,21,0.92,28,0.006,36,1.421,37,0.006,51,1.643,116,0.628,132,0.008,136,2.606,137,3.346,138,4.811,140,1.599,146,2.936,149,1.872,185,4.981,202,1.81,215,3.572,230,4.981,237,3.122,306,3.804,338,3.332,339,2.811,430,2.595,443,3.282,482,2.512,523,1.912,529,2.936,546,2.936,547,2.936,672,4.439,999,3.894,1114,3.627,1138,5.399,1139,4.003,1140,4.439,1141,4.003,1162,5.674,1241,3.627,1242,4.811,1267,4.003,1268,4.003,1269,4.003,1270,4.003,1700,4.811,1709,5.31,1714,3.627,1715,6.346,1716,6.346,1717,3.627,1719,5.31,1721,4.003,1722,5.31,1723,6.346,1724,4.003,1725,5.31,1730,5.31,1731,4.003,1732,5.31,1733,5.31,1734,5.31,1798,2.636,1801,4.003,1802,4.573,1803,4.811,1804,7.545,1805,5.31,1806,5.31,1807,6.808,1808,4.573,1809,4.573,1810,4.573,1811,4.573,1812,4.573,1813,4.573,1814,4.573,1815,4.573,1816,6.067,1817,6.067,1818,4.573,1819,6.067]],["title/index.html",[7,0.16,1820,3.456,1821,3.456]],["body/index.html",[4,0.121,20,0.012,28,0.008,37,0.008,132,0.01,187,1.511,192,4.534,230,4.183,274,4.534,275,5.547,307,6.614,317,2.649,672,6.014,1593,5.003,1661,4.534,1794,4.534,1822,5.717,1823,5.717,1824,6.994,1825,5.717,1826,5.717,1827,5.717,1828,5.717,1829,5.717,1830,5.717,1831,5.717,1832,5.717,1833,8.323,1834,5.717,1835,5.717,1836,5.717,1837,5.717,1838,6.994,1839,5.717,1840,5.717,1841,5.717,1842,6.994,1843,5.717,1844,5.717,1845,5.717,1846,6.994,1847,6.994,1848,5.717,1849,5.717,1850,5.717,1851,5.717,1852,5.717,1853,5.717,1854,5.717,1855,5.717,1856,5.717,1857,5.717,1858,5.717,1859,5.717,1860,5.717,1861,5.717,1862,5.717,1863,5.717,1864,5.717,1865,5.717,1866,5.717,1867,5.717,1868,5.717,1869,5.717]],["title/modules.html",[211,2.855]],["body/modules.html",[20,0.01,28,0.009,37,0.008,132,0.01,210,4.611,211,3.167,220,4.302,221,4.302,222,4.302,223,4.302,224,4.302,225,4.045,1177,4.302,1794,6.731,1870,8.487,1871,8.487,1872,8.549,1873,6.302,1874,6.302]],["title/overview.html",[1875,4.973]],["body/overview.html",[2,1.266,20,0.012,28,0.007,37,0.007,132,0.009,135,1.723,197,2.358,209,2.036,210,6.247,211,2.558,212,2.671,213,2.933,214,2.358,215,2.671,216,2.795,217,2.795,218,4.455,219,4.455,220,5.747,221,5.54,222,4.893,223,5.54,224,5.45,225,5.209,226,3.749,227,2.933,228,2.795,342,4.258,344,4.131,361,4.455,363,4.455,364,4.893,365,4.893,383,2.358,583,3.475,616,3.475,650,3.267,660,4.455,661,4.455,662,4.893,663,4.893,1177,5.45,1178,4.455,1179,4.455,1180,4.455,1181,5.209,1202,4.601,1209,4.455,1211,4.455,1469,4.036,1559,5.209,1566,4.455,1567,4.455,1568,4.455,1635,4.455,1636,4.455,1637,4.455,1875,4.455,1876,5.09,1877,5.09,1878,5.09]],["title/miscellaneous/typealiases.html",[1798,1.992,1879,4.996]],["body/miscellaneous/typealiases.html",[6,2.043,7,0.27,12,1.799,19,0.281,20,0.012,22,2.4,23,0.52,28,0.01,29,1.978,30,1.978,31,1.978,32,1.978,33,1.978,34,1.978,35,1.978,36,1.368,37,0.008,56,2.561,128,1.978,132,0.01,136,3.045,482,3.208,487,3.561,493,3.75,494,2.936,495,3.75,496,3.75,497,3.75,498,3.75,499,3.75,500,2.936,556,3.75,565,3.892,566,3.892,590,4.838,591,4.838,597,3.75,655,4.838,656,4.838,1051,3.75,1798,3.367,1803,4.633,1880,5.842,1881,7.629,1882,7.087,1883,5.842,1884,7.087,1885,7.087,1886,7.087,1887,5.842]],["title/miscellaneous/variables.html",[1798,1.992,1888,4.373]],["body/miscellaneous/variables.html",[7,0.142,18,0.479,19,0.288,20,0.012,23,0.606,28,0.004,36,0.718,37,0.004,51,1.991,53,0.74,111,1.501,132,0.006,136,2.607,184,1.185,186,1.147,229,2.432,257,0.676,258,3.629,259,2.684,260,2.723,261,2.684,262,2.684,263,2.684,264,1.653,265,1.108,266,2.684,267,2.684,268,2.684,269,2.684,270,2.684,271,2.684,272,1.609,273,2.684,274,2.432,275,2.432,276,2.684,277,2.684,278,2.684,279,5.96,280,2.684,281,1.367,282,2.684,283,2.684,284,1.479,325,1.409,376,2.432,429,3.197,430,2.803,443,2.206,450,1.072,471,4.133,473,1.421,474,1.421,482,1.684,509,1.684,515,1.421,523,1.823,542,1.966,543,1.968,544,2.206,545,1.968,548,1.541,561,2.299,568,1.609,569,3.184,570,1.861,605,2.937,613,1.861,733,3.683,798,2.777,799,2.777,800,2.777,801,2.777,823,2.637,842,1.968,843,1.968,979,3.348,980,3.124,999,2.937,1161,2.432,1162,4.005,1163,4.341,1164,2.684,1165,2.684,1166,2.684,1167,3.629,1168,2.684,1169,2.684,1170,2.432,1171,2.684,1172,2.684,1173,2.684,1174,2.684,1175,2.684,1176,2.684,1190,3.629,1429,2.684,1494,2.432,1670,2.684,1671,4.005,1672,4.005,1679,2.684,1680,4.005,1681,3.629,1687,2.684,1688,2.684,1689,4.005,1690,4.005,1691,4.005,1692,4.005,1693,4.005,1694,4.005,1695,4.005,1696,4.005,1697,4.005,1698,4.005,1699,4.005,1700,3.629,1701,4.005,1702,4.005,1703,4.005,1704,4.005,1705,2.684,1706,4.005,1714,2.432,1717,2.432,1798,1.767,1803,3.629,1805,2.684,1806,2.684,1888,2.684,1889,3.067,1890,3.067,1891,5.473,1892,4.576,1893,8.279,1894,4.576,1895,3.067,1896,4.576,1897,3.067,1898,8.581,1899,3.067,1900,3.067,1901,3.067,1902,4.576,1903,3.067,1904,3.067,1905,3.067,1906,3.067,1907,4.576,1908,3.067,1909,3.067,1910,4.576,1911,3.067,1912,3.067,1913,3.067,1914,3.067,1915,3.067,1916,3.067,1917,3.067,1918,3.067,1919,4.576,1920,3.067,1921,3.067,1922,3.067,1923,3.067,1924,3.067,1925,4.576,1926,3.067,1927,3.067,1928,3.067,1929,3.067,1930,3.067,1931,3.067,1932,3.067,1933,3.067,1934,3.067,1935,3.067,1936,3.067,1937,3.067,1938,3.067,1939,3.067,1940,3.067,1941,3.067]]],"invertedIndex":[["",{"_index":20,"title":{},"body":{"interfaces/APIResponse.html":{},"classes/ApiException.html":{},"controllers/AppController.html":{},"interfaces/AppLaunchAction.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseModel.html":{},"interfaces/BaseRoute.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"modules/CronModule.html":{},"injectables/CronService.html":{},"classes/CrudConfigService.html":{},"classes/CrudController.html":{},"interfaces/CrudOptions.html":{},"classes/CrudRoutesFactory.html":{},"classes/CrudService.html":{},"classes/CustomQueryBuilder.html":{},"modules/DatabaseModule.html":{},"modules/EmailModule.html":{},"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"modules/EmailSchedulingModule.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/ExcludeNullUndefinedInterceptor.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"controllers/HealthController.html":{},"interfaces/IBaseModel.html":{},"interfaces/ICrudService.html":{},"interfaces/IPaginationResult.html":{},"interfaces/ITag.html":{},"interfaces/IUser.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginCredsDto.html":{},"classes/PaginationParams.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"injectables/PersistedCronService.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"classes/QueryFailedFilter.html":{},"classes/R.html":{},"guards/RequestGuard.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Response.html":{},"guards/ResponseGuard.html":{},"interfaces/Result.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"classes/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"injectables/TimeoutInterceptor.html":{},"interfaces/TokenPayload.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateTagsDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/ValidationFailedFilter.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":733,"title":{},"body":{"injectables/CronService.html":{},"classes/CrudService.html":{},"classes/CustomQueryBuilder.html":{},"interfaces/IPaginationResult.html":{},"classes/PaginationParams.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["0.1.1",{"_index":1751,"title":{},"body":{"dependencies.html":{}}}],["0.1.13",{"_index":1790,"title":{},"body":{"dependencies.html":{}}}],["0.12.2",{"_index":1768,"title":{},"body":{"dependencies.html":{}}}],["0.21.15",{"_index":1777,"title":{},"body":{"dependencies.html":{}}}],["0.3.1",{"_index":1745,"title":{},"body":{"dependencies.html":{}}}],["0.4.1",{"_index":1756,"title":{},"body":{"dependencies.html":{}}}],["0.5.19",{"_index":1795,"title":{},"body":{"dependencies.html":{}}}],["0.6.1",{"_index":1747,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":1666,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":1682,"title":{},"body":{"coverage.html":{}}}],["0/12",{"_index":1735,"title":{},"body":{"coverage.html":{}}}],["0/14",{"_index":1683,"title":{},"body":{"coverage.html":{}}}],["0/15",{"_index":1727,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1664,"title":{},"body":{"coverage.html":{}}}],["0/20",{"_index":1738,"title":{},"body":{"coverage.html":{}}}],["0/23",{"_index":1726,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1667,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1684,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":1669,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":1668,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":1707,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":1708,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":1718,"title":{},"body":{"coverage.html":{}}}],["01]\\d",{"_index":1912,"title":{},"body":{"miscellaneous/variables.html":{}}}],["0})@isoptional()@min(0)@transform(undefined",{"_index":1399,"title":{},"body":{"classes/PaginationParams.html":{}}}],["1",{"_index":617,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/CronService.html":{},"classes/CustomQueryBuilder.html":{},"controllers/HealthController.html":{},"interfaces/IUser.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["1.0.0",{"_index":1787,"title":{},"body":{"dependencies.html":{}}}],["1.1.0",{"_index":1785,"title":{},"body":{"dependencies.html":{}}}],["1.1.2",{"_index":1783,"title":{},"body":{"dependencies.html":{}}}],["1.2.0",{"_index":1765,"title":{},"body":{"dependencies.html":{}}}],["1.8.2",{"_index":1769,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":1720,"title":{},"body":{"coverage.html":{}}}],["1/4",{"_index":1713,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":1350,"title":{},"body":{"interfaces/IPaginationResult.html":{},"classes/PaginationParams.html":{}}}],["10/10",{"_index":1676,"title":{},"body":{"coverage.html":{}}}],["10/19",{"_index":1711,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":1673,"title":{},"body":{"coverage.html":{}}}],["100000",{"_index":723,"title":{},"body":{"injectables/CronService.html":{}}}],["1024",{"_index":1316,"title":{},"body":{"controllers/HealthController.html":{}}}],["10_000",{"_index":1601,"title":{},"body":{"injectables/TimeoutInterceptor.html":{}}}],["12",{"_index":650,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/IUser.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["12345678",{"_index":350,"title":{},"body":{"controllers/AuthController.html":{},"classes/LoginCredsDto.html":{}}}],["12345678'})@isnotempty",{"_index":1394,"title":{},"body":{"classes/LoginCredsDto.html":{}}}],["15",{"_index":1145,"title":{},"body":{"classes/CustomQueryBuilder.html":{}}}],["17.1.1",{"_index":1743,"title":{},"body":{"dependencies.html":{}}}],["2",{"_index":583,"title":{},"body":{"classes/CreateTagsDto.html":{},"interfaces/ITag.html":{},"classes/Tag.html":{},"classes/UpdateTagsDto.html":{},"overview.html":{}}}],["2.0.21",{"_index":1788,"title":{},"body":{"dependencies.html":{}}}],["2.1.4",{"_index":1758,"title":{},"body":{"dependencies.html":{}}}],["2.2.6",{"_index":1782,"title":{},"body":{"dependencies.html":{}}}],["2.29.1",{"_index":1779,"title":{},"body":{"dependencies.html":{}}}],["2/2",{"_index":1728,"title":{},"body":{"coverage.html":{}}}],["2/6",{"_index":1686,"title":{},"body":{"coverage.html":{}}}],["200",{"_index":1509,"title":{},"body":{"guards/ResponseGuard.html":{}}}],["20922789888000",{"_index":735,"title":{},"body":{"injectables/CronService.html":{}}}],["21",{"_index":1877,"title":{},"body":{"overview.html":{}}}],["25",{"_index":1712,"title":{},"body":{"coverage.html":{}}}],["255",{"_index":584,"title":{},"body":{"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"interfaces/ITag.html":{},"interfaces/IUser.html":{},"classes/Tag.html":{},"classes/UpdateTagsDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["2]\\d(?::?[0",{"_index":1917,"title":{},"body":{"miscellaneous/variables.html":{}}}],["2]\\d:[0",{"_index":1914,"title":{},"body":{"miscellaneous/variables.html":{}}}],["3",{"_index":614,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/CrudService.html":{},"interfaces/IUser.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["3.0.1",{"_index":1784,"title":{},"body":{"dependencies.html":{}}}],["3.0.2",{"_index":1792,"title":{},"body":{"dependencies.html":{}}}],["3.20.0",{"_index":1767,"title":{},"body":{"dependencies.html":{}}}],["3/3",{"_index":1729,"title":{},"body":{"coverage.html":{}}}],["32",{"_index":1878,"title":{},"body":{"overview.html":{}}}],["33",{"_index":1685,"title":{},"body":{"coverage.html":{}}}],["3600",{"_index":1938,"title":{},"body":{"miscellaneous/variables.html":{}}}],["3]\\d(?:t[0",{"_index":1913,"title":{},"body":{"miscellaneous/variables.html":{}}}],["4.0.0",{"_index":1786,"title":{},"body":{"dependencies.html":{}}}],["4.0.2",{"_index":1781,"title":{},"body":{"dependencies.html":{}}}],["4.1.5",{"_index":1797,"title":{},"body":{"dependencies.html":{}}}],["4.17.1",{"_index":1772,"title":{},"body":{"dependencies.html":{}}}],["4.17.20",{"_index":1778,"title":{},"body":{"dependencies.html":{}}}],["4.2.0",{"_index":1776,"title":{},"body":{"dependencies.html":{}}}],["4.2.2",{"_index":1770,"title":{},"body":{"dependencies.html":{}}}],["4.7.5",{"_index":1759,"title":{},"body":{"dependencies.html":{}}}],["4/4",{"_index":1677,"title":{},"body":{"coverage.html":{}}}],["401",{"_index":1511,"title":{},"body":{"guards/ResponseGuard.html":{}}}],["5.0.0",{"_index":1763,"title":{},"body":{"dependencies.html":{}}}],["5.2.3",{"_index":1774,"title":{},"body":{"dependencies.html":{}}}],["50000",{"_index":726,"title":{},"body":{"injectables/CronService.html":{}}}],["50000000",{"_index":738,"title":{},"body":{"injectables/CronService.html":{}}}],["52",{"_index":1710,"title":{},"body":{"coverage.html":{}}}],["53",{"_index":1739,"title":{},"body":{"coverage.html":{}}}],["5]\\d(?:\\.\\d+)?(?:z",{"_index":1916,"title":{},"body":{"miscellaneous/variables.html":{}}}],["5]\\d)?)?)?$/g.test",{"_index":1918,"title":{},"body":{"miscellaneous/variables.html":{}}}],["5]\\d:[0",{"_index":1915,"title":{},"body":{"miscellaneous/variables.html":{}}}],["6",{"_index":1876,"title":{},"body":{"overview.html":{}}}],["6.6.3",{"_index":1793,"title":{},"body":{"dependencies.html":{}}}],["6/6",{"_index":1678,"title":{},"body":{"coverage.html":{}}}],["60",{"_index":748,"title":{},"body":{"injectables/CronService.html":{},"controllers/HealthController.html":{}}}],["7.0.1",{"_index":1760,"title":{},"body":{"dependencies.html":{}}}],["7.1.5",{"_index":1752,"title":{},"body":{"dependencies.html":{}}}],["7.2.0",{"_index":1749,"title":{},"body":{"dependencies.html":{}}}],["7.5.1",{"_index":1746,"title":{},"body":{"dependencies.html":{}}}],["7.6.5",{"_index":1755,"title":{},"body":{"dependencies.html":{}}}],["7/7",{"_index":1674,"title":{},"body":{"coverage.html":{}}}],["72",{"_index":1736,"title":{},"body":{"coverage.html":{}}}],["8",{"_index":616,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/IUser.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"overview.html":{}}}],["8.2.0",{"_index":1762,"title":{},"body":{"dependencies.html":{}}}],["8/11",{"_index":1737,"title":{},"body":{"coverage.html":{}}}],["8/15",{"_index":1740,"title":{},"body":{"coverage.html":{}}}],["8/8",{"_index":1675,"title":{},"body":{"coverage.html":{}}}],["9]*[.])?[0",{"_index":1928,"title":{},"body":{"miscellaneous/variables.html":{}}}],["9]+$/.test(val",{"_index":1929,"title":{},"body":{"miscellaneous/variables.html":{}}}],["_",{"_index":541,"title":{},"body":{"interfaces/BaseRoute.html":{},"interfaces/CrudOptions.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{}}}],["abortearly",{"_index":263,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["above",{"_index":300,"title":{},"body":{"modules/AppModule.html":{}}}],["abstract",{"_index":977,"title":{},"body":{"classes/CrudController.html":{},"classes/CrudService.html":{},"interfaces/IPaginationResult.html":{},"classes/PaginationParams.html":{}}}],["access",{"_index":1254,"title":{},"body":{"injectables/ExcludeNullUndefinedInterceptor.html":{},"classes/QueryFailedFilter.html":{},"guards/RequestGuard.html":{},"interfaces/Response.html":{},"guards/ResponseGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/ValidationFailedFilter.html":{}}}],["accessors",{"_index":1055,"title":{},"body":{"classes/CrudRoutesFactory.html":{}}}],["action",{"_index":49,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["actionid",{"_index":48,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["adcorporatelogourl",{"_index":96,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["addcronjob",{"_index":680,"title":{},"body":{"injectables/CronService.html":{}}}],["addcronjob(name",{"_index":697,"title":{},"body":{"injectables/CronService.html":{}}}],["added",{"_index":762,"title":{},"body":{"injectables/CronService.html":{},"injectables/EmailSchedulingService.html":{}}}],["addinterval",{"_index":681,"title":{},"body":{"injectables/CronService.html":{}}}],["addinterval(name",{"_index":703,"title":{},"body":{"injectables/CronService.html":{}}}],["addtimeout",{"_index":682,"title":{},"body":{"injectables/CronService.html":{}}}],["addtimeout(name",{"_index":707,"title":{},"body":{"injectables/CronService.html":{}}}],["admin@demo.com",{"_index":347,"title":{},"body":{"controllers/AuthController.html":{},"classes/LoginCredsDto.html":{}}}],["admin@demo.com'})@isnotempty",{"_index":1392,"title":{},"body":{"classes/LoginCredsDto.html":{}}}],["against",{"_index":581,"title":{},"body":{"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"interfaces/ITag.html":{},"interfaces/IUser.html":{},"classes/Tag.html":{},"classes/UpdateTagsDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["aliases",{"_index":1880,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["allowed",{"_index":1483,"title":{},"body":{"guards/RequestGuard.html":{},"guards/ResponseGuard.html":{}}}],["allowunknown",{"_index":262,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["alwayspaginate",{"_index":520,"title":{},"body":{"interfaces/BaseRoute.html":{},"classes/CrudConfigService.html":{},"interfaces/CrudOptions.html":{},"classes/CrudRoutesFactory.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["amazing",{"_index":1853,"title":{},"body":{"index.html":{}}}],["animalimageurl",{"_index":104,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["anu",{"_index":1337,"title":{},"body":{"interfaces/IPaginationResult.html":{},"classes/PaginationParams.html":{}}}],["any[]).every((o",{"_index":1903,"title":{},"body":{"miscellaneous/variables.html":{}}}],["api",{"_index":39,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["api:v1/rescue/getcomments?pageno=0&pagesize=10&postid=1230",{"_index":44,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["api:v1/rescue/getrescuelist?pageno=0&pagesize=10&status=pending|inprogress|completed|nearest",{"_index":43,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["api:v1/rescue/getuserfollowers?userid=1230",{"_index":45,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["api:v1/rescue/getuserfollowing?userid=1230",{"_index":46,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["api:v1/user/getuserposts?pageno=0&pagesize=25",{"_index":42,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["api:v1/user/getuserprofile?userid=25",{"_index":41,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["apibadrequestresponse",{"_index":166,"title":{},"body":{"classes/ApiException.html":{}}}],["apibearerauth",{"_index":1556,"title":{},"body":{"controllers/TagsController.html":{}}}],["apiconflictresponse",{"_index":171,"title":{},"body":{"classes/ApiException.html":{}}}],["apierror",{"_index":22,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/IPaginationResult.html":{},"classes/PaginationParams.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{},"miscellaneous/typealiases.html":{}}}],["apierrors",{"_index":185,"title":{},"body":{"classes/ApiException.html":{},"classes/CrudController.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["apiexception",{"_index":134,"title":{"classes/ApiException.html":{}},"body":{"classes/ApiException.html":{},"coverage.html":{}}}],["apiforbiddenresponse",{"_index":167,"title":{},"body":{"classes/ApiException.html":{}}}],["apiinternalservererrorresponse",{"_index":168,"title":{},"body":{"classes/ApiException.html":{}}}],["apinotfoundresponse",{"_index":169,"title":{},"body":{"classes/ApiException.html":{}}}],["apioperation",{"_index":1025,"title":{},"body":{"classes/CrudController.html":{},"controllers/UsersController.html":{}}}],["apioperation({summary",{"_index":997,"title":{},"body":{"classes/CrudController.html":{},"controllers/UsersController.html":{}}}],["apiproperty",{"_index":338,"title":{},"body":{"controllers/AuthController.html":{},"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/LoginCredsDto.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["apiproperty(options",{"_index":546,"title":{},"body":{"interfaces/BaseRoute.html":{},"interfaces/CrudOptions.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"miscellaneous/functions.html":{}}}],["apiproperty({example",{"_index":1391,"title":{},"body":{"classes/LoginCredsDto.html":{}}}],["apipropertydecorator",{"_index":551,"title":{},"body":{"interfaces/BaseRoute.html":{},"interfaces/CrudOptions.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{}}}],["apipropertydecorator(options)(target",{"_index":554,"title":{},"body":{"interfaces/BaseRoute.html":{},"interfaces/CrudOptions.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{}}}],["apipropertyoptional",{"_index":151,"title":{},"body":{"classes/ApiException.html":{},"interfaces/IPaginationResult.html":{},"classes/PaginationParams.html":{}}}],["apipropertyoptional()@isoptional",{"_index":1396,"title":{},"body":{"classes/PaginationParams.html":{}}}],["apipropertyoptional({type",{"_index":1398,"title":{},"body":{"classes/PaginationParams.html":{}}}],["apiresponse",{"_index":1,"title":{"interfaces/APIResponse.html":{}},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"classes/CrudController.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{},"coverage.html":{}}}],["apitags",{"_index":203,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/EmailSchedulingController.html":{},"controllers/HealthController.html":{},"classes/LoginCredsDto.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["apitags(appcontroller.name",{"_index":205,"title":{},"body":{"controllers/AppController.html":{}}}],["apitags(authcontroller.name",{"_index":353,"title":{},"body":{"controllers/AuthController.html":{},"classes/LoginCredsDto.html":{}}}],["apitags(emailschedulingcontroller.name",{"_index":1204,"title":{},"body":{"controllers/EmailSchedulingController.html":{}}}],["apitags(healthcontroller.name",{"_index":1295,"title":{},"body":{"controllers/HealthController.html":{}}}],["apitags(tagscontroller.name",{"_index":1562,"title":{},"body":{"controllers/TagsController.html":{}}}],["apitags(userscontroller.name",{"_index":1632,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiunauthorizedresponse",{"_index":170,"title":{},"body":{"classes/ApiException.html":{}}}],["app",{"_index":230,"title":{},"body":{"modules/AppModule.html":{},"injectables/PersistedCronService.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["app.controller",{"_index":249,"title":{},"body":{"modules/AppModule.html":{}}}],["appcontroller",{"_index":196,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["applaunchaction",{"_index":47,"title":{"interfaces/AppLaunchAction.html":{}},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{},"coverage.html":{}}}],["application",{"_index":291,"title":{},"body":{"modules/AppModule.html":{}}}],["applications",{"_index":1829,"title":{},"body":{"index.html":{}}}],["applicationshutdown",{"_index":321,"title":{},"body":{"modules/AppModule.html":{},"controllers/HealthController.html":{},"injectables/PersistedCronService.html":{}}}],["applydecorators",{"_index":159,"title":{},"body":{"classes/ApiException.html":{}}}],["appmodule",{"_index":210,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["areyoufollowing",{"_index":130,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["arguments",{"_index":1449,"title":{},"body":{"classes/QueryFailedFilter.html":{},"classes/ValidationFailedFilter.html":{}}}],["argumentshost",{"_index":1445,"title":{},"body":{"classes/QueryFailedFilter.html":{},"classes/ValidationFailedFilter.html":{}}}],["arr",{"_index":1920,"title":{},"body":{"miscellaneous/variables.html":{}}}],["arr.some((o",{"_index":1921,"title":{},"body":{"miscellaneous/variables.html":{}}}],["array",{"_index":853,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/QueryFailedFilter.html":{},"classes/R.html":{},"guards/ResponseGuard.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"classes/ValidationFailedFilter.html":{}}}],["array.isarray(val",{"_index":1906,"title":{},"body":{"miscellaneous/variables.html":{}}}],["array.isarray(value",{"_index":1142,"title":{},"body":{"classes/CustomQueryBuilder.html":{},"injectables/ExcludeNullUndefinedInterceptor.html":{}}}],["arraymerge",{"_index":876,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["arrayquerybuildertype",{"_index":1115,"title":{},"body":{"classes/CustomQueryBuilder.html":{}}}],["asc",{"_index":1344,"title":{},"body":{"interfaces/IPaginationResult.html":{},"classes/PaginationParams.html":{},"miscellaneous/enumerations.html":{}}}],["async",{"_index":325,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseModel.html":{},"classes/CreateUserDto.html":{},"classes/CrudController.html":{},"classes/CrudService.html":{},"classes/CustomQueryBuilder.html":{},"modules/DatabaseModule.html":{},"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"interfaces/IBaseModel.html":{},"interfaces/IUser.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginCredsDto.html":{},"injectables/PersistedCronService.html":{},"classes/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["asynchronous",{"_index":305,"title":{},"body":{"modules/AppModule.html":{}}}],["auth",{"_index":354,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/LoginCredsDto.html":{}}}],["auth.controller",{"_index":371,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.service",{"_index":345,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{},"classes/LoginCredsDto.html":{}}}],["auth/auth.module",{"_index":250,"title":{},"body":{"modules/AppModule.html":{}}}],["authcontroller",{"_index":323,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/LoginCredsDto.html":{},"coverage.html":{}}}],["authguard",{"_index":336,"title":{},"body":{"controllers/AuthController.html":{},"classes/LoginCredsDto.html":{},"controllers/TagsController.html":{}}}],["authmodule",{"_index":220,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":1862,"title":{},"body":{"index.html":{}}}],["authorized",{"_index":1374,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["authservice",{"_index":344,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"classes/LoginCredsDto.html":{},"coverage.html":{},"overview.html":{}}}],["available",{"_index":1874,"title":{},"body":{"modules.html":{}}}],["await",{"_index":358,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BaseModel.html":{},"classes/CreateUserDto.html":{},"classes/CrudController.html":{},"classes/CrudService.html":{},"classes/CustomQueryBuilder.html":{},"controllers/EmailSchedulingController.html":{},"interfaces/IBaseModel.html":{},"interfaces/IUser.html":{},"injectables/JwtStrategy.html":{},"classes/LoginCredsDto.html":{},"injectables/PersistedCronService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["awaits",{"_index":304,"title":{},"body":{"modules/AppModule.html":{}}}],["b",{"_index":877,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"controllers/HealthController.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["backers",{"_index":1854,"title":{},"body":{"index.html":{}}}],["bad",{"_index":189,"title":{},"body":{"classes/ApiException.html":{}}}],["badge",{"_index":74,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["badgedescription",{"_index":77,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["badgeid",{"_index":75,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["badgename",{"_index":76,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["badrequestexception",{"_index":160,"title":{},"body":{"classes/ApiException.html":{},"injectables/TagsService.html":{}}}],["badrequestexception([`duplicate",{"_index":1586,"title":{},"body":{"injectables/TagsService.html":{}}}],["base",{"_index":844,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudController.html":{},"classes/CrudRoutesFactory.html":{},"classes/CrudService.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["base/crud",{"_index":1557,"title":{},"body":{"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["based",{"_index":575,"title":{},"body":{"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"interfaces/ITag.html":{},"interfaces/IUser.html":{},"classes/Tag.html":{},"classes/UpdateTagsDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["basemodel",{"_index":416,"title":{"classes/BaseModel.html":{}},"body":{"classes/BaseModel.html":{},"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"classes/CrudController.html":{},"classes/CrudService.html":{},"interfaces/IBaseModel.html":{},"interfaces/ITag.html":{},"interfaces/IUser.html":{},"classes/Tag.html":{},"classes/UpdateTagsDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"coverage.html":{}}}],["basemodel:25",{"_index":1546,"title":{},"body":{"classes/Tag.html":{},"classes/User.html":{}}}],["basemodel:35",{"_index":1548,"title":{},"body":{"classes/Tag.html":{},"classes/User.html":{}}}],["basemodel:37",{"_index":1547,"title":{},"body":{"classes/Tag.html":{},"classes/User.html":{}}}],["basemodel:39",{"_index":1544,"title":{},"body":{"classes/Tag.html":{},"classes/User.html":{}}}],["basemodel:41",{"_index":1549,"title":{},"body":{"classes/Tag.html":{},"classes/User.html":{}}}],["basemodel:43",{"_index":1545,"title":{},"body":{"classes/Tag.html":{},"classes/User.html":{}}}],["basemodel:47",{"_index":1551,"title":{},"body":{"classes/Tag.html":{},"classes/User.html":{}}}],["basemodel:60",{"_index":1550,"title":{},"body":{"classes/Tag.html":{},"classes/User.html":{}}}],["basemodel})@apiresponse({status",{"_index":1015,"title":{},"body":{"classes/CrudController.html":{}}}],["basemodel})@get(':id",{"_index":1011,"title":{},"body":{"classes/CrudController.html":{}}}],["basemodel})@post(':id",{"_index":1000,"title":{},"body":{"classes/CrudController.html":{}}}],["basemodel})@put(':id",{"_index":1021,"title":{},"body":{"classes/CrudController.html":{}}}],["baseroute",{"_index":481,"title":{"interfaces/BaseRoute.html":{}},"body":{"interfaces/BaseRoute.html":{},"classes/CrudConfigService.html":{},"interfaces/CrudOptions.html":{},"classes/CrudRoutesFactory.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"coverage.html":{}}}],["baseroutename",{"_index":487,"title":{},"body":{"interfaces/BaseRoute.html":{},"classes/CrudConfigService.html":{},"interfaces/CrudOptions.html":{},"classes/CrudRoutesFactory.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"miscellaneous/typealiases.html":{}}}],["bcrypt",{"_index":402,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"interfaces/IUser.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["bcrypt.compare(enteredpassword",{"_index":403,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.hash(password",{"_index":649,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/IUser.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"injectables/UsersService.html":{}}}],["beforeapplicationshutdown",{"_index":297,"title":{},"body":{"modules/AppModule.html":{}}}],["beforeinsert",{"_index":1607,"title":{},"body":{"classes/User.html":{}}}],["beforeinsert(querycontext",{"_index":651,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/IUser.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["beforeupdate",{"_index":425,"title":{},"body":{"classes/BaseModel.html":{},"classes/Tag.html":{},"classes/User.html":{}}}],["beforeupdate(opt",{"_index":437,"title":{},"body":{"classes/BaseModel.html":{},"classes/CreateUserDto.html":{},"interfaces/IBaseModel.html":{},"interfaces/IUser.html":{},"classes/Tag.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["being",{"_index":1447,"title":{},"body":{"classes/QueryFailedFilter.html":{},"classes/ValidationFailedFilter.html":{}}}],["bind",{"_index":1475,"title":{},"body":{"guards/RequestGuard.html":{},"guards/ResponseGuard.html":{}}}],["bindrequesthelpers",{"_index":1471,"title":{},"body":{"guards/RequestGuard.html":{}}}],["bindrequesthelpers(request",{"_index":1473,"title":{},"body":{"guards/RequestGuard.html":{}}}],["bindresponsehelpers",{"_index":1503,"title":{},"body":{"guards/ResponseGuard.html":{}}}],["bindresponsehelpers(response",{"_index":1504,"title":{},"body":{"guards/ResponseGuard.html":{}}}],["blocked",{"_index":1764,"title":{},"body":{"dependencies.html":{}}}],["body",{"_index":333,"title":{},"body":{"controllers/AuthController.html":{},"classes/CrudController.html":{},"controllers/EmailSchedulingController.html":{},"classes/LoginCredsDto.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["boolean",{"_index":51,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/BaseRoute.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"classes/CreateUserDto.html":{},"interfaces/CrudOptions.html":{},"classes/CustomQueryBuilder.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/IUser.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"guards/RequestGuard.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"guards/ResponseGuard.html":{},"interfaces/Result.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["boot",{"_index":1812,"title":{},"body":{"miscellaneous/functions.html":{}}}],["bootstrap",{"_index":215,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CronModule.html":{},"modules/EmailModule.html":{},"modules/EmailSchedulingModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["bootstrapped",{"_index":1419,"title":{},"body":{"injectables/PersistedCronService.html":{}}}],["both",{"_index":633,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/IUser.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["browse",{"_index":1872,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1870,"title":{},"body":{"modules.html":{}}}],["builder",{"_index":464,"title":{},"body":{"classes/BaseModel.html":{},"interfaces/IBaseModel.html":{}}}],["building",{"_index":1825,"title":{},"body":{"index.html":{}}}],["bull",{"_index":1766,"title":{},"body":{"dependencies.html":{}}}],["c",{"_index":878,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/CustomQueryBuilder.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["cache",{"_index":519,"title":{},"body":{"interfaces/BaseRoute.html":{},"interfaces/CrudOptions.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{}}}],["call",{"_index":294,"title":{},"body":{"modules/AppModule.html":{}}}],["callback",{"_index":770,"title":{},"body":{"injectables/CronService.html":{}}}],["called",{"_index":746,"title":{},"body":{"injectables/CronService.html":{}}}],["callhandler",{"_index":1249,"title":{},"body":{"injectables/ExcludeNullUndefinedInterceptor.html":{},"interfaces/Response.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["calls",{"_index":818,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["canactivate",{"_index":1472,"title":{},"body":{"guards/RequestGuard.html":{},"guards/ResponseGuard.html":{}}}],["canactivate(context",{"_index":1476,"title":{},"body":{"guards/RequestGuard.html":{},"guards/ResponseGuard.html":{}}}],["case",{"_index":843,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"miscellaneous/variables.html":{}}}],["catch",{"_index":540,"title":{},"body":{"interfaces/BaseRoute.html":{},"injectables/CronService.html":{},"interfaces/CrudOptions.html":{},"classes/CrudService.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"classes/QueryFailedFilter.html":{},"classes/ValidationFailedFilter.html":{}}}],["catch(exception",{"_index":1436,"title":{},"body":{"classes/QueryFailedFilter.html":{},"classes/ValidationFailedFilter.html":{}}}],["catch(validationerror",{"_index":1657,"title":{},"body":{"classes/ValidationFailedFilter.html":{}}}],["catcherror",{"_index":1598,"title":{},"body":{"injectables/TimeoutInterceptor.html":{}}}],["catcherror((e",{"_index":1602,"title":{},"body":{"injectables/TimeoutInterceptor.html":{}}}],["cb",{"_index":1130,"title":{},"body":{"classes/CustomQueryBuilder.html":{}}}],["cb(records",{"_index":1160,"title":{},"body":{"classes/CustomQueryBuilder.html":{}}}],["check",{"_index":1138,"title":{},"body":{"classes/CustomQueryBuilder.html":{},"controllers/HealthController.html":{},"miscellaneous/functions.html":{}}}],["checked",{"_index":580,"title":{},"body":{"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"interfaces/ITag.html":{},"interfaces/IUser.html":{},"classes/Tag.html":{},"classes/UpdateTagsDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["checkviolationerror",{"_index":1437,"title":{},"body":{"classes/QueryFailedFilter.html":{}}}],["child",{"_index":993,"title":{},"body":{"classes/CrudController.html":{},"classes/CrudService.html":{}}}],["chunk",{"_index":1119,"title":{},"body":{"classes/CustomQueryBuilder.html":{}}}],["chunk(cb",{"_index":1127,"title":{},"body":{"classes/CustomQueryBuilder.html":{}}}],["class",{"_index":133,"title":{"classes/ApiException.html":{},"classes/BaseModel.html":{},"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"classes/CrudConfigService.html":{},"classes/CrudController.html":{},"classes/CrudRoutesFactory.html":{},"classes/CrudService.html":{},"classes/CustomQueryBuilder.html":{},"classes/EmailScheduleDto.html":{},"classes/LoginCredsDto.html":{},"classes/PaginationParams.html":{},"classes/QueryFailedFilter.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"classes/Tag.html":{},"classes/UpdateTagsDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/ValidationFailedFilter.html":{}},"body":{"classes/ApiException.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseModel.html":{},"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"modules/CronModule.html":{},"injectables/CronService.html":{},"classes/CrudConfigService.html":{},"classes/CrudController.html":{},"classes/CrudRoutesFactory.html":{},"classes/CrudService.html":{},"modules/DatabaseModule.html":{},"modules/EmailModule.html":{},"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"modules/EmailSchedulingModule.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/ExcludeNullUndefinedInterceptor.html":{},"controllers/HealthController.html":{},"interfaces/IBaseModel.html":{},"interfaces/IPaginationResult.html":{},"interfaces/ITag.html":{},"interfaces/IUser.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginCredsDto.html":{},"classes/PaginationParams.html":{},"injectables/PersistedCronService.html":{},"classes/QueryFailedFilter.html":{},"classes/R.html":{},"guards/RequestGuard.html":{},"interfaces/Response.html":{},"guards/ResponseGuard.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"classes/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateTagsDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/ValidationFailedFilter.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":135,"title":{},"body":{"classes/ApiException.html":{},"classes/BaseModel.html":{},"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"classes/CrudConfigService.html":{},"classes/CrudController.html":{},"classes/CrudRoutesFactory.html":{},"classes/CrudService.html":{},"classes/CustomQueryBuilder.html":{},"classes/EmailScheduleDto.html":{},"classes/LoginCredsDto.html":{},"classes/PaginationParams.html":{},"classes/QueryFailedFilter.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"classes/Tag.html":{},"classes/UpdateTagsDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/ValidationFailedFilter.html":{},"overview.html":{}}}],["clean",{"_index":587,"title":{},"body":{"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"interfaces/ITag.html":{},"interfaces/IUser.html":{},"classes/Tag.html":{},"classes/UpdateTagsDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["client",{"_index":1169,"title":{},"body":{"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["clonedeep",{"_index":1136,"title":{},"body":{"classes/CustomQueryBuilder.html":{}}}],["clonedeep(this",{"_index":1156,"title":{},"body":{"classes/CustomQueryBuilder.html":{}}}],["cluster_appmodule",{"_index":218,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":219,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":361,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":362,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":363,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_cronmodule",{"_index":660,"title":{},"body":{"modules/CronModule.html":{},"overview.html":{}}}],["cluster_cronmodule_providers",{"_index":661,"title":{},"body":{"modules/CronModule.html":{},"overview.html":{}}}],["cluster_emailmodule",{"_index":1178,"title":{},"body":{"modules/EmailModule.html":{},"overview.html":{}}}],["cluster_emailmodule_exports",{"_index":1179,"title":{},"body":{"modules/EmailModule.html":{},"overview.html":{}}}],["cluster_emailmodule_providers",{"_index":1180,"title":{},"body":{"modules/EmailModule.html":{},"overview.html":{}}}],["cluster_emailschedulingmodule",{"_index":1209,"title":{},"body":{"modules/EmailSchedulingModule.html":{},"overview.html":{}}}],["cluster_emailschedulingmodule_imports",{"_index":1210,"title":{},"body":{"modules/EmailSchedulingModule.html":{}}}],["cluster_emailschedulingmodule_providers",{"_index":1211,"title":{},"body":{"modules/EmailSchedulingModule.html":{},"overview.html":{}}}],["cluster_tagsmodule",{"_index":1566,"title":{},"body":{"modules/TagsModule.html":{},"overview.html":{}}}],["cluster_tagsmodule_exports",{"_index":1567,"title":{},"body":{"modules/TagsModule.html":{},"overview.html":{}}}],["cluster_tagsmodule_providers",{"_index":1568,"title":{},"body":{"modules/TagsModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":1635,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":1636,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":1637,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["code",{"_index":1339,"title":{},"body":{"interfaces/IPaginationResult.html":{},"classes/PaginationParams.html":{},"guards/ResponseGuard.html":{}}}],["collectosmetrics",{"_index":1277,"title":{},"body":{"controllers/HealthController.html":{}}}],["collectosmetrics(metrics",{"_index":1281,"title":{},"body":{"controllers/HealthController.html":{}}}],["column",{"_index":644,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/IUser.html":{},"classes/QueryFailedFilter.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["columns",{"_index":1456,"title":{},"body":{"classes/QueryFailedFilter.html":{}}}],["comment",{"_index":123,"title":{"interfaces/Comment.html":{}},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{},"coverage.html":{}}}],["commented",{"_index":1420,"title":{},"body":{"injectables/PersistedCronService.html":{}}}],["commentedusename",{"_index":125,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["commenteduserid",{"_index":126,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["commentid",{"_index":124,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["comments",{"_index":127,"title":{"interfaces/Comments.html":{}},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{},"coverage.html":{}}}],["commentscount",{"_index":87,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["comparepassword",{"_index":385,"title":{},"body":{"injectables/AuthService.html":{}}}],["comparepassword(enteredpassword",{"_index":391,"title":{},"body":{"injectables/AuthService.html":{}}}],["config",{"_index":790,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"injectables/EmailService.html":{},"controllers/HealthController.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["config.params",{"_index":872,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["config.query",{"_index":870,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["config.serialize",{"_index":874,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["configmodule",{"_index":241,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EmailModule.html":{}}}],["configmodule.forroot(configmoduleoptions",{"_index":285,"title":{},"body":{"modules/AppModule.html":{}}}],["configmoduleoptions",{"_index":258,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["configservice",{"_index":367,"title":{},"body":{"modules/AuthModule.html":{},"injectables/EmailService.html":{},"controllers/HealthController.html":{},"injectables/JwtStrategy.html":{}}}],["configservice.get('jwtkey",{"_index":378,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["configservice.get('token_expiration",{"_index":381,"title":{},"body":{"modules/AuthModule.html":{}}}],["conflictexception",{"_index":161,"title":{},"body":{"classes/ApiException.html":{}}}],["connection",{"_index":1172,"title":{},"body":{"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["console.error",{"_index":314,"title":{},"body":{"modules/AppModule.html":{}}}],["console.info(`moduleinit",{"_index":312,"title":{},"body":{"modules/AppModule.html":{}}}],["console.log",{"_index":884,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"injectables/EmailService.html":{},"controllers/HealthController.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["console.log(`moduleinit",{"_index":1322,"title":{},"body":{"controllers/HealthController.html":{}}}],["const",{"_index":257,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/BaseRoute.html":{},"classes/CreateUserDto.html":{},"injectables/CronService.html":{},"classes/CrudConfigService.html":{},"classes/CrudController.html":{},"interfaces/CrudOptions.html":{},"classes/CrudRoutesFactory.html":{},"classes/CrudService.html":{},"classes/CustomQueryBuilder.html":{},"modules/DatabaseModule.html":{},"injectables/EmailSchedulingService.html":{},"interfaces/GetManyDefaultResponse.html":{},"controllers/HealthController.html":{},"interfaces/IUser.html":{},"injectables/JwtStrategy.html":{},"classes/LoginCredsDto.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"injectables/PersistedCronService.html":{},"classes/QueryFailedFilter.html":{},"classes/R.html":{},"guards/RequestGuard.html":{},"guards/ResponseGuard.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/ValidationFailedFilter.html":{},"miscellaneous/variables.html":{}}}],["constraint",{"_index":1457,"title":{},"body":{"classes/QueryFailedFilter.html":{}}}],["constraintviolationerror",{"_index":1438,"title":{},"body":{"classes/QueryFailedFilter.html":{}}}],["constructor",{"_index":144,"title":{},"body":{"classes/ApiException.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CronService.html":{},"classes/CrudController.html":{},"classes/CrudRoutesFactory.html":{},"classes/CrudService.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"controllers/HealthController.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginCredsDto.html":{},"injectables/PersistedCronService.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["constructor(@inject(tag.name",{"_index":1582,"title":{},"body":{"injectables/TagsService.html":{}}}],["constructor(@inject(user.name",{"_index":1649,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(authservice",{"_index":1380,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["constructor(configservice",{"_index":1233,"title":{},"body":{"injectables/EmailService.html":{},"injectables/JwtStrategy.html":{}}}],["constructor(emailservice",{"_index":1216,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["constructor(message",{"_index":145,"title":{},"body":{"classes/ApiException.html":{}}}],["constructor(model",{"_index":1081,"title":{},"body":{"classes/CrudService.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["constructor(private",{"_index":881,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["constructor(protected",{"_index":1030,"title":{},"body":{"classes/CrudController.html":{},"classes/CrudService.html":{}}}],["constructor(readonly",{"_index":742,"title":{},"body":{"injectables/CronService.html":{},"controllers/EmailSchedulingController.html":{},"injectables/LocalStrategy.html":{},"injectables/PersistedCronService.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["constructor(schedule",{"_index":1413,"title":{},"body":{"injectables/PersistedCronService.html":{}}}],["constructor(scheduler",{"_index":693,"title":{},"body":{"injectables/CronService.html":{}}}],["constructor(service",{"_index":987,"title":{},"body":{"classes/CrudController.html":{}}}],["constructor(target",{"_index":1056,"title":{},"body":{"classes/CrudRoutesFactory.html":{}}}],["constructor(userservice",{"_index":388,"title":{},"body":{"injectables/AuthService.html":{}}}],["contact",{"_index":115,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["content",{"_index":1186,"title":{},"body":{"classes/EmailScheduleDto.html":{}}}],["context",{"_index":1252,"title":{},"body":{"injectables/ExcludeNullUndefinedInterceptor.html":{},"guards/RequestGuard.html":{},"interfaces/Response.html":{},"guards/ResponseGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["continue",{"_index":308,"title":{},"body":{"modules/AppModule.html":{}}}],["controller",{"_index":195,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/EmailSchedulingController.html":{},"controllers/HealthController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/CrudController.html":{},"controllers/EmailSchedulingController.html":{},"controllers/HealthController.html":{},"classes/LoginCredsDto.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller(appcontroller.path",{"_index":204,"title":{},"body":{"controllers/AppController.html":{}}}],["controller(authcontroller.path",{"_index":352,"title":{},"body":{"controllers/AuthController.html":{},"classes/LoginCredsDto.html":{}}}],["controller(emailschedulingcontroller.path",{"_index":1205,"title":{},"body":{"controllers/EmailSchedulingController.html":{}}}],["controller(healthcontroller.path",{"_index":1296,"title":{},"body":{"controllers/HealthController.html":{}}}],["controller(tagscontroller.path",{"_index":1561,"title":{},"body":{"controllers/TagsController.html":{}}}],["controller(userscontroller.path",{"_index":1631,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":197,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"modules/EmailModule.html":{},"controllers/EmailSchedulingController.html":{},"modules/EmailSchedulingModule.html":{},"controllers/HealthController.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["convert",{"_index":1313,"title":{},"body":{"controllers/HealthController.html":{}}}],["corporatedescription",{"_index":97,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["corporatename",{"_index":98,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["corresponding",{"_index":301,"title":{},"body":{"modules/AppModule.html":{}}}],["count",{"_index":10,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/BaseRoute.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"injectables/CronService.html":{},"classes/CrudConfigService.html":{},"interfaces/CrudOptions.html":{},"classes/CrudRoutesFactory.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"classes/R.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["coverage",{"_index":1661,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["coverimage",{"_index":55,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["create",{"_index":524,"title":{},"body":{"interfaces/BaseRoute.html":{},"classes/CrudConfigService.html":{},"classes/CrudController.html":{},"interfaces/CrudOptions.html":{},"classes/CrudRoutesFactory.html":{},"classes/CrudService.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ICrudService.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["create(@body",{"_index":1045,"title":{},"body":{"classes/CrudController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["create(data",{"_index":1326,"title":{},"body":{"interfaces/ICrudService.html":{},"injectables/TagsService.html":{}}}],["create(input",{"_index":996,"title":{},"body":{"classes/CrudController.html":{},"classes/CrudService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["create(target",{"_index":890,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["create(user",{"_index":1642,"title":{},"body":{"injectables/UsersService.html":{}}}],["created",{"_index":579,"title":{},"body":{"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"classes/CrudController.html":{},"classes/CrudService.html":{},"interfaces/ITag.html":{},"interfaces/IUser.html":{},"classes/Tag.html":{},"injectables/TagsService.html":{},"classes/UpdateTagsDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"injectables/UsersService.html":{}}}],["created_at",{"_index":419,"title":{},"body":{"classes/BaseModel.html":{},"interfaces/IBaseModel.html":{},"classes/Tag.html":{},"classes/User.html":{}}}],["creategetmanydto",{"_index":1526,"title":{},"body":{"classes/SerializeHelper.html":{}}}],["creategetmanydto(dto",{"_index":858,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["creategetoneresponsedto",{"_index":1527,"title":{},"body":{"classes/SerializeHelper.html":{}}}],["creategetoneresponsedto(resourcename",{"_index":865,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["createmany",{"_index":525,"title":{},"body":{"interfaces/BaseRoute.html":{},"interfaces/CrudOptions.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{}}}],["createmanybase",{"_index":496,"title":{},"body":{"interfaces/BaseRoute.html":{},"interfaces/CrudOptions.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"miscellaneous/typealiases.html":{}}}],["createonebase",{"_index":495,"title":{},"body":{"interfaces/BaseRoute.html":{},"interfaces/CrudOptions.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"miscellaneous/typealiases.html":{}}}],["createresponsemeta",{"_index":840,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["createresponsemeta(name",{"_index":1534,"title":{},"body":{"classes/Swagger.html":{}}}],["createroutes",{"_index":1052,"title":{},"body":{"classes/CrudRoutesFactory.html":{}}}],["createroutes(routesschema",{"_index":967,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["creates",{"_index":636,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/CrudController.html":{},"interfaces/IUser.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["createtagsdto",{"_index":555,"title":{"classes/CreateTagsDto.html":{}},"body":{"classes/CreateTagsDto.html":{},"classes/CrudService.html":{},"interfaces/ITag.html":{},"classes/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"classes/UpdateTagsDto.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["createuserdto",{"_index":596,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/CrudService.html":{},"interfaces/IUser.html":{},"injectables/TagsService.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["credentials",{"_index":408,"title":{},"body":{"injectables/AuthService.html":{}}}],["cron",{"_index":665,"title":{},"body":{"modules/CronModule.html":{},"injectables/CronService.html":{},"injectables/EmailSchedulingService.html":{},"injectables/PersistedCronService.html":{},"dependencies.html":{}}}],["cron(cronexpression.every_minute",{"_index":719,"title":{},"body":{"injectables/CronService.html":{}}}],["cron.service",{"_index":666,"title":{},"body":{"modules/CronModule.html":{}}}],["cron.service.ts",{"_index":1405,"title":{},"body":{"injectables/PersistedCronService.html":{},"coverage.html":{}}}],["cron.service.ts:11",{"_index":1414,"title":{},"body":{"injectables/PersistedCronService.html":{}}}],["cron.service.ts:16",{"_index":1415,"title":{},"body":{"injectables/PersistedCronService.html":{}}}],["cron.start",{"_index":1428,"title":{},"body":{"injectables/PersistedCronService.html":{}}}],["cron/cron.module",{"_index":251,"title":{},"body":{"modules/AppModule.html":{}}}],["cronexpression",{"_index":740,"title":{},"body":{"injectables/CronService.html":{}}}],["cronjob",{"_index":741,"title":{},"body":{"injectables/CronService.html":{},"injectables/EmailSchedulingService.html":{}}}],["cronjob(`${seconds",{"_index":757,"title":{},"body":{"injectables/CronService.html":{}}}],["cronjob(date",{"_index":1222,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["cronjob(job.time",{"_index":1425,"title":{},"body":{"injectables/PersistedCronService.html":{}}}],["cronmodule",{"_index":221,"title":{"modules/CronModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CronModule.html":{},"modules.html":{},"overview.html":{}}}],["cronmodules",{"_index":288,"title":{},"body":{"modules/AppModule.html":{}}}],["cronservice",{"_index":662,"title":{"injectables/CronService.html":{}},"body":{"modules/CronModule.html":{},"injectables/CronService.html":{},"coverage.html":{},"overview.html":{}}}],["cronservice.count",{"_index":744,"title":{},"body":{"injectables/CronService.html":{}}}],["crud",{"_index":980,"title":{},"body":{"classes/CrudController.html":{},"classes/CrudService.html":{},"interfaces/ICrudService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["crud.service.interface",{"_index":1028,"title":{},"body":{"classes/CrudController.html":{},"classes/CrudService.html":{}}}],["crudconfigservice",{"_index":787,"title":{"classes/CrudConfigService.html":{}},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"coverage.html":{}}}],["crudconfigservice.config",{"_index":875,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["crudconfigservice.config.query",{"_index":918,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["crudconfigservice.config.serialize",{"_index":922,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["crudcontroller",{"_index":975,"title":{"classes/CrudController.html":{}},"body":{"classes/CrudController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["crudoptions",{"_index":510,"title":{"interfaces/CrudOptions.html":{}},"body":{"interfaces/BaseRoute.html":{},"classes/CrudConfigService.html":{},"interfaces/CrudOptions.html":{},"classes/CrudRoutesFactory.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"coverage.html":{}}}],["crudroutesfactory",{"_index":879,"title":{"classes/CrudRoutesFactory.html":{}},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"coverage.html":{}}}],["crudroutesfactory(target",{"_index":891,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["crudroutesfactory.create(target",{"_index":1897,"title":{},"body":{"miscellaneous/variables.html":{}}}],["crudroutesfactory.getroutesschema",{"_index":900,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["crudroutesfactory::constructor",{"_index":885,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["crudservice",{"_index":1075,"title":{"classes/CrudService.html":{}},"body":{"classes/CrudService.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["crudservice:112",{"_index":1581,"title":{},"body":{"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["crudservice:27",{"_index":1575,"title":{},"body":{"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["crudservice:38",{"_index":1579,"title":{},"body":{"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["crudservice:56",{"_index":1576,"title":{},"body":{"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["crudservice:67",{"_index":1578,"title":{},"body":{"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["crudservice:78",{"_index":1577,"title":{},"body":{"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["crudservice:89",{"_index":1580,"title":{},"body":{"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["crudservice:99",{"_index":1574,"title":{},"body":{"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["ctx",{"_index":1451,"title":{},"body":{"classes/QueryFailedFilter.html":{},"classes/ValidationFailedFilter.html":{}}}],["ctx.getrequest",{"_index":1454,"title":{},"body":{"classes/QueryFailedFilter.html":{},"classes/ValidationFailedFilter.html":{}}}],["ctx.getresponse",{"_index":1453,"title":{},"body":{"classes/QueryFailedFilter.html":{},"classes/ValidationFailedFilter.html":{}}}],["current",{"_index":749,"title":{},"body":{"injectables/CronService.html":{},"interfaces/IPaginationResult.html":{},"classes/PaginationParams.html":{},"guards/RequestGuard.html":{},"guards/ResponseGuard.html":{}}}],["currentpage",{"_index":1147,"title":{},"body":{"classes/CustomQueryBuilder.html":{}}}],["custom",{"_index":463,"title":{},"body":{"classes/BaseModel.html":{},"injectables/ExcludeNullUndefinedInterceptor.html":{},"interfaces/IBaseModel.html":{},"classes/QueryFailedFilter.html":{},"interfaces/Response.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/ValidationFailedFilter.html":{}}}],["customquerybuilder",{"_index":434,"title":{"classes/CustomQueryBuilder.html":{}},"body":{"classes/BaseModel.html":{},"classes/CustomQueryBuilder.html":{},"interfaces/IBaseModel.html":{},"classes/Tag.html":{},"classes/User.html":{},"coverage.html":{}}}],["data",{"_index":11,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"controllers/AuthController.html":{},"classes/BaseModel.html":{},"interfaces/BaseRoute.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"classes/CrudConfigService.html":{},"classes/CrudController.html":{},"interfaces/CrudOptions.html":{},"classes/CrudRoutesFactory.html":{},"classes/CrudService.html":{},"classes/CustomQueryBuilder.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"controllers/HealthController.html":{},"interfaces/IBaseModel.html":{},"interfaces/ICrudService.html":{},"interfaces/IPaginationResult.html":{},"classes/LoginCredsDto.html":{},"classes/PaginationParams.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"classes/QueryFailedFilter.html":{},"classes/R.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Response.html":{},"guards/ResponseGuard.html":{},"interfaces/Result.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/TransformInterceptor.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/ValidationFailedFilter.html":{}}}],["data.name",{"_index":1585,"title":{},"body":{"injectables/TagsService.html":{}}}],["database",{"_index":281,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"classes/CrudController.html":{},"modules/DatabaseModule.html":{},"interfaces/ITag.html":{},"interfaces/IUser.html":{},"classes/QueryFailedFilter.html":{},"classes/Tag.html":{},"classes/UpdateTagsDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["database'})@post",{"_index":1623,"title":{},"body":{"controllers/UsersController.html":{}}}],["database/database.module",{"_index":252,"title":{},"body":{"modules/AppModule.html":{}}}],["database/models/base.model",{"_index":567,"title":{},"body":{"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"classes/CrudController.html":{},"classes/CrudService.html":{},"interfaces/ITag.html":{},"interfaces/IUser.html":{},"classes/Tag.html":{},"classes/UpdateTagsDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["databasemodule",{"_index":222,"title":{"modules/DatabaseModule.html":{}},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules.html":{},"overview.html":{}}}],["databaseproviders",{"_index":1167,"title":{},"body":{"modules/DatabaseModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["dataerror",{"_index":1439,"title":{},"body":{"classes/QueryFailedFilter.html":{}}}],["dataobj",{"_index":1520,"title":{},"body":{"guards/ResponseGuard.html":{}}}],["datapoints",{"_index":1300,"title":{},"body":{"controllers/HealthController.html":{}}}],["date",{"_index":111,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"injectables/CronService.html":{},"classes/EmailScheduleDto.html":{},"injectables/EmailSchedulingService.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{},"miscellaneous/variables.html":{}}}],["date().toisostring",{"_index":180,"title":{},"body":{"classes/ApiException.html":{},"classes/BaseModel.html":{},"interfaces/IBaseModel.html":{},"classes/QueryFailedFilter.html":{},"classes/ValidationFailedFilter.html":{}}}],["date(emailschedule.date",{"_index":1221,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["date.now",{"_index":1318,"title":{},"body":{"controllers/HealthController.html":{}}}],["date.tolocaledatestring",{"_index":1230,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["db",{"_index":453,"title":{},"body":{"classes/BaseModel.html":{},"interfaces/IBaseModel.html":{},"classes/QueryFailedFilter.html":{},"dependencies.html":{}}}],["dberrors",{"_index":452,"title":{},"body":{"classes/BaseModel.html":{},"interfaces/IBaseModel.html":{}}}],["dbpassword",{"_index":392,"title":{},"body":{"injectables/AuthService.html":{}}}],["debug",{"_index":1175,"title":{},"body":{"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["declarations",{"_index":214,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CronModule.html":{},"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"modules/EmailModule.html":{},"modules/EmailSchedulingModule.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["declare",{"_index":492,"title":{},"body":{"interfaces/BaseRoute.html":{},"injectables/CronService.html":{},"interfaces/CrudOptions.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{}}}],["decorators",{"_index":150,"title":{},"body":{"classes/ApiException.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"injectables/CronService.html":{},"classes/CrudController.html":{},"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"controllers/HealthController.html":{},"classes/LoginCredsDto.html":{},"classes/PaginationParams.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["deepmerge",{"_index":797,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"dependencies.html":{}}}],["default",{"_index":429,"title":{},"body":{"classes/BaseModel.html":{},"injectables/CronService.html":{},"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/CrudService.html":{},"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/LocalStrategy.html":{},"injectables/PersistedCronService.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"classes/Tag.html":{},"injectables/TagsService.html":{},"interfaces/TokenPayload.html":{},"classes/User.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["default('development",{"_index":277,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["define",{"_index":1426,"title":{},"body":{"injectables/PersistedCronService.html":{}}}],["defined",{"_index":147,"title":{},"body":{"classes/ApiException.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BaseModel.html":{},"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"injectables/CronService.html":{},"classes/CrudConfigService.html":{},"classes/CrudController.html":{},"classes/CrudRoutesFactory.html":{},"classes/CrudService.html":{},"classes/CustomQueryBuilder.html":{},"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/ExcludeNullUndefinedInterceptor.html":{},"controllers/HealthController.html":{},"interfaces/ICrudService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginCredsDto.html":{},"classes/PaginationParams.html":{},"interfaces/ParamsOptions.html":{},"injectables/PersistedCronService.html":{},"classes/QueryFailedFilter.html":{},"classes/R.html":{},"guards/RequestGuard.html":{},"guards/ResponseGuard.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"classes/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/ValidationFailedFilter.html":{}}}],["delete",{"_index":528,"title":{},"body":{"interfaces/BaseRoute.html":{},"injectables/CronService.html":{},"classes/CrudController.html":{},"interfaces/CrudOptions.html":{},"classes/CrudService.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["delete(':id",{"_index":1041,"title":{},"body":{"classes/CrudController.html":{}}}],["deletecron",{"_index":683,"title":{},"body":{"injectables/CronService.html":{}}}],["deletecron(name",{"_index":709,"title":{},"body":{"injectables/CronService.html":{}}}],["deleted",{"_index":766,"title":{},"body":{"injectables/CronService.html":{},"classes/CrudController.html":{}}}],["deleted_at",{"_index":420,"title":{},"body":{"classes/BaseModel.html":{},"classes/CrudService.html":{},"interfaces/IBaseModel.html":{},"classes/Tag.html":{},"classes/User.html":{}}}],["deleteinterval",{"_index":684,"title":{},"body":{"injectables/CronService.html":{}}}],["deleteinterval(name",{"_index":712,"title":{},"body":{"injectables/CronService.html":{}}}],["deleteonebase",{"_index":499,"title":{},"body":{"interfaces/BaseRoute.html":{},"interfaces/CrudOptions.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"miscellaneous/typealiases.html":{}}}],["deletes",{"_index":1098,"title":{},"body":{"classes/CrudService.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["deletetimeout",{"_index":685,"title":{},"body":{"injectables/CronService.html":{}}}],["deletetimeout(name",{"_index":714,"title":{},"body":{"injectables/CronService.html":{}}}],["dependencies",{"_index":212,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CronModule.html":{},"modules/EmailModule.html":{},"modules/EmailSchedulingModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["deps",{"_index":289,"title":{},"body":{"modules/AppModule.html":{}}}],["desc",{"_index":1343,"title":{},"body":{"interfaces/IPaginationResult.html":{},"classes/PaginationParams.html":{},"miscellaneous/enumerations.html":{}}}],["described",{"_index":299,"title":{},"body":{"modules/AppModule.html":{}}}],["describes",{"_index":1345,"title":{},"body":{"interfaces/IPaginationResult.html":{},"classes/PaginationParams.html":{}}}],["description",{"_index":187,"title":{},"body":{"classes/ApiException.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CronModule.html":{},"injectables/CronService.html":{},"classes/CrudConfigService.html":{},"classes/CrudController.html":{},"classes/CrudRoutesFactory.html":{},"classes/CrudService.html":{},"modules/DatabaseModule.html":{},"modules/EmailModule.html":{},"modules/EmailSchedulingModule.html":{},"injectables/ExcludeNullUndefinedInterceptor.html":{},"interfaces/ICrudService.html":{},"interfaces/IPaginationResult.html":{},"classes/PaginationParams.html":{},"injectables/PersistedCronService.html":{},"classes/QueryFailedFilter.html":{},"classes/R.html":{},"guards/RequestGuard.html":{},"guards/ResponseGuard.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"modules/TagsModule.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"classes/ValidationFailedFilter.html":{},"index.html":{}}}],["details",{"_index":1479,"title":{},"body":{"guards/RequestGuard.html":{},"guards/ResponseGuard.html":{}}}],["development",{"_index":1835,"title":{},"body":{"index.html":{}}}],["disable",{"_index":265,"title":{},"body":{"modules/AppModule.html":{},"classes/BaseModel.html":{},"interfaces/BaseRoute.html":{},"injectables/CronService.html":{},"classes/CrudConfigService.html":{},"interfaces/CrudOptions.html":{},"classes/CrudRoutesFactory.html":{},"classes/CustomQueryBuilder.html":{},"injectables/ExcludeNullUndefinedInterceptor.html":{},"interfaces/GetManyDefaultResponse.html":{},"controllers/HealthController.html":{},"interfaces/IBaseModel.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"classes/R.html":{},"guards/RequestGuard.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["disabled",{"_index":507,"title":{},"body":{"interfaces/BaseRoute.html":{},"interfaces/CrudOptions.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{}}}],["distance",{"_index":105,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["distanceaway",{"_index":106,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["dns",{"_index":1297,"title":{},"body":{"controllers/HealthController.html":{}}}],["dnshealthindicator",{"_index":1290,"title":{},"body":{"controllers/HealthController.html":{}}}],["docs",{"_index":1308,"title":{},"body":{"controllers/HealthController.html":{}}}],["documentation",{"_index":1662,"title":{},"body":{"coverage.html":{}}}],["domain",{"_index":1026,"title":{},"body":{"classes/CrudController.html":{},"interfaces/IPaginationResult.html":{},"classes/PaginationParams.html":{}}}],["don't",{"_index":639,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/IUser.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["dotenv",{"_index":1771,"title":{},"body":{"dependencies.html":{}}}],["down",{"_index":1715,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["down(knex",{"_index":1816,"title":{},"body":{"miscellaneous/functions.html":{}}}],["dto",{"_index":511,"title":{},"body":{"interfaces/BaseRoute.html":{},"classes/CrudConfigService.html":{},"interfaces/CrudOptions.html":{},"classes/CrudRoutesFactory.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["dumb",{"_index":624,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/IUser.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["dynamic",{"_index":536,"title":{},"body":{"interfaces/BaseRoute.html":{},"interfaces/CrudOptions.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{}}}],["dynamically",{"_index":700,"title":{},"body":{"injectables/CronService.html":{}}}],["d{4",{"_index":1911,"title":{},"body":{"miscellaneous/variables.html":{}}}],["e",{"_index":752,"title":{},"body":{"injectables/CronService.html":{},"classes/CrudService.html":{},"injectables/TimeoutInterceptor.html":{}}}],["e2e",{"_index":1843,"title":{},"body":{"index.html":{}}}],["each",{"_index":631,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/CronService.html":{},"injectables/ExcludeNullUndefinedInterceptor.html":{},"interfaces/IUser.html":{},"injectables/PersistedCronService.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["efficient",{"_index":1826,"title":{},"body":{"index.html":{}}}],["email",{"_index":349,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/CrudService.html":{},"modules/EmailModule.html":{},"controllers/EmailSchedulingController.html":{},"modules/EmailSchedulingModule.html":{},"interfaces/ICrudService.html":{},"interfaces/IUser.html":{},"injectables/LocalStrategy.html":{},"classes/LoginCredsDto.html":{},"injectables/TagsService.html":{},"interfaces/TokenPayload.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["email'})@get",{"_index":1625,"title":{},"body":{"controllers/UsersController.html":{}}}],["email.service",{"_index":1183,"title":{},"body":{"modules/EmailModule.html":{}}}],["email/email.module",{"_index":1213,"title":{},"body":{"modules/EmailSchedulingModule.html":{}}}],["email/email.service",{"_index":1220,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["emailmodule",{"_index":1177,"title":{"modules/EmailModule.html":{}},"body":{"modules/EmailModule.html":{},"modules/EmailSchedulingModule.html":{},"modules.html":{},"overview.html":{}}}],["emailschedule",{"_index":1200,"title":{},"body":{"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{}}}],["emailschedule.content",{"_index":1226,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["emailschedule.dto",{"_index":1201,"title":{},"body":{"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{}}}],["emailschedule.recipient",{"_index":1227,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["emailschedule.subject",{"_index":1224,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["emailscheduledto",{"_index":1184,"title":{"classes/EmailScheduleDto.html":{}},"body":{"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"coverage.html":{}}}],["emailscheduling.controller",{"_index":1214,"title":{},"body":{"modules/EmailSchedulingModule.html":{}}}],["emailscheduling.service",{"_index":1203,"title":{},"body":{"controllers/EmailSchedulingController.html":{},"modules/EmailSchedulingModule.html":{}}}],["emailscheduling/emailscheduling.module",{"_index":253,"title":{},"body":{"modules/AppModule.html":{}}}],["emailschedulingcontroller",{"_index":1194,"title":{"controllers/EmailSchedulingController.html":{}},"body":{"controllers/EmailSchedulingController.html":{},"modules/EmailSchedulingModule.html":{},"coverage.html":{}}}],["emailschedulingmodule",{"_index":223,"title":{"modules/EmailSchedulingModule.html":{}},"body":{"modules/AppModule.html":{},"modules/EmailSchedulingModule.html":{},"modules.html":{},"overview.html":{}}}],["emailschedulingservice",{"_index":1202,"title":{"injectables/EmailSchedulingService.html":{}},"body":{"controllers/EmailSchedulingController.html":{},"modules/EmailSchedulingModule.html":{},"injectables/EmailSchedulingService.html":{},"coverage.html":{},"overview.html":{}}}],["emailservice",{"_index":1181,"title":{"injectables/EmailService.html":{}},"body":{"modules/EmailModule.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"coverage.html":{},"overview.html":{}}}],["emergencytype",{"_index":107,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["empty",{"_index":1140,"title":{},"body":{"classes/CustomQueryBuilder.html":{},"injectables/ExcludeNullUndefinedInterceptor.html":{},"injectables/LocalStrategy.html":{},"miscellaneous/functions.html":{}}}],["enable",{"_index":284,"title":{},"body":{"modules/AppModule.html":{},"interfaces/BaseRoute.html":{},"classes/CrudConfigService.html":{},"interfaces/CrudOptions.html":{},"classes/CrudRoutesFactory.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"miscellaneous/variables.html":{}}}],["enableroutes",{"_index":1053,"title":{},"body":{"classes/CrudRoutesFactory.html":{}}}],["enableroutes(routesschema",{"_index":961,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["end",{"_index":1600,"title":{},"body":{"injectables/TimeoutInterceptor.html":{}}}],["enforce",{"_index":1325,"title":{},"body":{"interfaces/ICrudService.html":{}}}],["enteredpassword",{"_index":394,"title":{},"body":{"injectables/AuthService.html":{}}}],["entries",{"_index":1088,"title":{},"body":{"classes/CrudService.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["entry",{"_index":1085,"title":{},"body":{"classes/CrudService.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["enum",{"_index":505,"title":{},"body":{"interfaces/BaseRoute.html":{},"interfaces/CrudOptions.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/IPaginationResult.html":{},"classes/PaginationParams.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{}}}],["enum.type",{"_index":491,"title":{},"body":{"interfaces/BaseRoute.html":{},"interfaces/CrudOptions.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{}}}],["enumerations",{"_index":1799,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["eq",{"_index":1919,"title":{},"body":{"miscellaneous/variables.html":{}}}],["err",{"_index":1311,"title":{},"body":{"controllers/HealthController.html":{},"guards/ResponseGuard.html":{}}}],["err.errors",{"_index":1516,"title":{},"body":{"guards/ResponseGuard.html":{}}}],["err.message",{"_index":1515,"title":{},"body":{"guards/ResponseGuard.html":{}}}],["error",{"_index":12,"title":{},"body":{"interfaces/APIResponse.html":{},"classes/ApiException.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"injectables/CronService.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/IPaginationResult.html":{},"classes/PaginationParams.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"guards/ResponseGuard.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{},"miscellaneous/typealiases.html":{}}}],["error(err",{"_index":1510,"title":{},"body":{"guards/ResponseGuard.html":{}}}],["errorhash",{"_index":1659,"title":{},"body":{"classes/ValidationFailedFilter.html":{}}}],["errors",{"_index":139,"title":{},"body":{"classes/ApiException.html":{},"classes/BaseModel.html":{},"interfaces/IBaseModel.html":{},"classes/QueryFailedFilter.html":{},"guards/ResponseGuard.html":{},"dependencies.html":{}}}],["errors.decorator",{"_index":1027,"title":{},"body":{"classes/CrudController.html":{}}}],["errors.decorator.ts",{"_index":138,"title":{},"body":{"classes/ApiException.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["errors.decorator.ts:22",{"_index":157,"title":{},"body":{"classes/ApiException.html":{}}}],["errors.decorator.ts:24",{"_index":154,"title":{},"body":{"classes/ApiException.html":{}}}],["errors.decorator.ts:26",{"_index":156,"title":{},"body":{"classes/ApiException.html":{}}}],["errors.decorator.ts:28",{"_index":152,"title":{},"body":{"classes/ApiException.html":{}}}],["errors.decorator.ts:30",{"_index":153,"title":{},"body":{"classes/ApiException.html":{}}}],["errors.decorator.ts:32",{"_index":158,"title":{},"body":{"classes/ApiException.html":{}}}],["errors.decorator.ts:34",{"_index":155,"title":{},"body":{"classes/ApiException.html":{}}}],["errors.decorator.ts:36",{"_index":148,"title":{},"body":{"classes/ApiException.html":{}}}],["eslint",{"_index":264,"title":{},"body":{"modules/AppModule.html":{},"classes/BaseModel.html":{},"interfaces/BaseRoute.html":{},"injectables/CronService.html":{},"classes/CrudConfigService.html":{},"interfaces/CrudOptions.html":{},"classes/CrudRoutesFactory.html":{},"classes/CustomQueryBuilder.html":{},"injectables/ExcludeNullUndefinedInterceptor.html":{},"interfaces/GetManyDefaultResponse.html":{},"controllers/HealthController.html":{},"interfaces/IBaseModel.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"classes/R.html":{},"guards/RequestGuard.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["eslint/ban",{"_index":469,"title":{},"body":{"classes/BaseModel.html":{},"interfaces/BaseRoute.html":{},"interfaces/CrudOptions.html":{},"classes/CustomQueryBuilder.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/IBaseModel.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{}}}],["eslint/no",{"_index":533,"title":{},"body":{"interfaces/BaseRoute.html":{},"interfaces/CrudOptions.html":{},"injectables/ExcludeNullUndefinedInterceptor.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{}}}],["eslint/restrict",{"_index":318,"title":{},"body":{"modules/AppModule.html":{},"injectables/CronService.html":{},"controllers/HealthController.html":{}}}],["example",{"_index":346,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateUserDto.html":{},"interfaces/IUser.html":{},"classes/LoginCredsDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["exception",{"_index":1434,"title":{},"body":{"classes/QueryFailedFilter.html":{},"classes/ValidationFailedFilter.html":{}}}],["exceptionfilter",{"_index":1435,"title":{},"body":{"classes/QueryFailedFilter.html":{},"classes/ValidationFailedFilter.html":{}}}],["excludenullundefinedinterceptor",{"_index":1240,"title":{"injectables/ExcludeNullUndefinedInterceptor.html":{}},"body":{"injectables/ExcludeNullUndefinedInterceptor.html":{},"coverage.html":{}}}],["executing",{"_index":772,"title":{},"body":{"injectables/CronService.html":{}}}],["execution",{"_index":1478,"title":{},"body":{"guards/RequestGuard.html":{},"guards/ResponseGuard.html":{}}}],["executioncontext",{"_index":1248,"title":{},"body":{"injectables/ExcludeNullUndefinedInterceptor.html":{},"guards/RequestGuard.html":{},"interfaces/Response.html":{},"guards/ResponseGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["exists",{"_index":1120,"title":{},"body":{"classes/CustomQueryBuilder.html":{}}}],["expiresin",{"_index":380,"title":{},"body":{"modules/AuthModule.html":{}}}],["export",{"_index":27,"title":{},"body":{"interfaces/APIResponse.html":{},"classes/ApiException.html":{},"controllers/AppController.html":{},"interfaces/AppLaunchAction.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseModel.html":{},"interfaces/BaseRoute.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"modules/CronModule.html":{},"injectables/CronService.html":{},"classes/CrudConfigService.html":{},"classes/CrudController.html":{},"interfaces/CrudOptions.html":{},"classes/CrudRoutesFactory.html":{},"classes/CrudService.html":{},"classes/CustomQueryBuilder.html":{},"modules/DatabaseModule.html":{},"modules/EmailModule.html":{},"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"modules/EmailSchedulingModule.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/ExcludeNullUndefinedInterceptor.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"controllers/HealthController.html":{},"interfaces/IBaseModel.html":{},"interfaces/ICrudService.html":{},"interfaces/IPaginationResult.html":{},"interfaces/ITag.html":{},"interfaces/IUser.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginCredsDto.html":{},"classes/PaginationParams.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"injectables/PersistedCronService.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"classes/QueryFailedFilter.html":{},"classes/R.html":{},"guards/RequestGuard.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Response.html":{},"guards/ResponseGuard.html":{},"interfaces/Result.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"classes/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"injectables/TimeoutInterceptor.html":{},"interfaces/TokenPayload.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateTagsDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/ValidationFailedFilter.html":{}}}],["exports",{"_index":217,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CronModule.html":{},"modules/DatabaseModule.html":{},"modules/EmailModule.html":{},"modules/EmailSchedulingModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":341,"title":{},"body":{"controllers/AuthController.html":{},"classes/LoginCredsDto.html":{},"dependencies.html":{}}}],["expression",{"_index":446,"title":{},"body":{"classes/BaseModel.html":{},"interfaces/IBaseModel.html":{},"classes/Tag.html":{},"classes/User.html":{}}}],["expression.tostring",{"_index":472,"title":{},"body":{"classes/BaseModel.html":{},"interfaces/IBaseModel.html":{}}}],["expressions",{"_index":320,"title":{},"body":{"modules/AppModule.html":{},"injectables/CronService.html":{},"controllers/HealthController.html":{}}}],["extend",{"_index":978,"title":{},"body":{"classes/CrudController.html":{},"classes/CrudService.html":{}}}],["extend.ts",{"_index":1680,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["extendmoment(momentdefault",{"_index":1941,"title":{},"body":{"miscellaneous/variables.html":{}}}],["extends",{"_index":457,"title":{},"body":{"classes/BaseModel.html":{},"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"classes/CustomQueryBuilder.html":{},"interfaces/IBaseModel.html":{},"interfaces/ITag.html":{},"interfaces/IUser.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"classes/UpdateTagsDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["extra",{"_index":816,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["extractjwt",{"_index":1361,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":1371,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["fact16",{"_index":677,"title":{},"body":{"injectables/CronService.html":{}}}],["factorial",{"_index":686,"title":{},"body":{"injectables/CronService.html":{}}}],["factorial(n",{"_index":716,"title":{},"body":{"injectables/CronService.html":{}}}],["factory",{"_index":1896,"title":{},"body":{"miscellaneous/variables.html":{}}}],["failed",{"_index":1433,"title":{},"body":{"classes/QueryFailedFilter.html":{},"classes/ValidationFailedFilter.html":{}}}],["failed.filter.ts",{"_index":1432,"title":{},"body":{"classes/QueryFailedFilter.html":{},"classes/ValidationFailedFilter.html":{},"coverage.html":{}}}],["failed.filter.ts:17",{"_index":1656,"title":{},"body":{"classes/ValidationFailedFilter.html":{}}}],["failed.filter.ts:33",{"_index":1446,"title":{},"body":{"classes/QueryFailedFilter.html":{}}}],["false",{"_index":515,"title":{},"body":{"interfaces/BaseRoute.html":{},"classes/CrudConfigService.html":{},"interfaces/CrudOptions.html":{},"classes/CrudRoutesFactory.html":{},"interfaces/GetManyDefaultResponse.html":{},"injectables/LocalStrategy.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"classes/R.html":{},"guards/ResponseGuard.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"miscellaneous/variables.html":{}}}],["feed",{"_index":101,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["fetch",{"_index":466,"title":{},"body":{"classes/BaseModel.html":{},"interfaces/IBaseModel.html":{}}}],["fetchrelation",{"_index":426,"title":{},"body":{"classes/BaseModel.html":{},"interfaces/IBaseModel.html":{},"classes/Tag.html":{},"classes/User.html":{}}}],["fetchrelation(expression",{"_index":442,"title":{},"body":{"classes/BaseModel.html":{},"classes/Tag.html":{},"classes/User.html":{}}}],["field",{"_index":503,"title":{},"body":{"interfaces/BaseRoute.html":{},"interfaces/CrudOptions.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{}}}],["fields",{"_index":459,"title":{},"body":{"classes/BaseModel.html":{},"classes/CreateUserDto.html":{},"interfaces/IBaseModel.html":{},"interfaces/IUser.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["file",{"_index":5,"title":{},"body":{"interfaces/APIResponse.html":{},"classes/ApiException.html":{},"controllers/AppController.html":{},"interfaces/AppLaunchAction.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseModel.html":{},"interfaces/BaseRoute.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"modules/CronModule.html":{},"injectables/CronService.html":{},"classes/CrudConfigService.html":{},"classes/CrudController.html":{},"interfaces/CrudOptions.html":{},"classes/CrudRoutesFactory.html":{},"classes/CrudService.html":{},"classes/CustomQueryBuilder.html":{},"modules/DatabaseModule.html":{},"modules/EmailModule.html":{},"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"modules/EmailSchedulingModule.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/ExcludeNullUndefinedInterceptor.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"controllers/HealthController.html":{},"interfaces/IBaseModel.html":{},"interfaces/ICrudService.html":{},"interfaces/IPaginationResult.html":{},"interfaces/ITag.html":{},"interfaces/IUser.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginCredsDto.html":{},"classes/PaginationParams.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"injectables/PersistedCronService.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"classes/QueryFailedFilter.html":{},"classes/R.html":{},"guards/RequestGuard.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Response.html":{},"guards/ResponseGuard.html":{},"interfaces/Result.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"classes/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"injectables/TimeoutInterceptor.html":{},"interfaces/TokenPayload.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateTagsDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/ValidationFailedFilter.html":{},"coverage.html":{}}}],["filename",{"_index":1173,"title":{},"body":{"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["filter",{"_index":460,"title":{},"body":{"classes/BaseModel.html":{},"classes/CrudService.html":{},"interfaces/IBaseModel.html":{},"classes/QueryFailedFilter.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{},"classes/ValidationFailedFilter.html":{}}}],["filter((one",{"_index":827,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["find",{"_index":983,"title":{},"body":{"classes/CrudController.html":{},"classes/CrudService.html":{},"dependencies.html":{}}}],["findall",{"_index":984,"title":{},"body":{"classes/CrudController.html":{},"classes/CrudService.html":{},"interfaces/ICrudService.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["findall(paginationparams",{"_index":1003,"title":{},"body":{"classes/CrudController.html":{}}}],["findone",{"_index":1078,"title":{},"body":{"classes/CrudService.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["findone(filter",{"_index":1089,"title":{},"body":{"classes/CrudService.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["findone(id",{"_index":1644,"title":{},"body":{"injectables/UsersService.html":{}}}],["findonebyemail",{"_index":1079,"title":{},"body":{"classes/CrudService.html":{},"interfaces/ICrudService.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["findonebyemail(@query",{"_index":1633,"title":{},"body":{"controllers/UsersController.html":{}}}],["findonebyemail(email",{"_index":1091,"title":{},"body":{"classes/CrudService.html":{},"interfaces/ICrudService.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["findonebyid",{"_index":985,"title":{},"body":{"classes/CrudController.html":{},"classes/CrudService.html":{},"interfaces/ICrudService.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["findonebyid(@param('id",{"_index":1037,"title":{},"body":{"classes/CrudController.html":{}}}],["findonebyid(id",{"_index":1008,"title":{},"body":{"classes/CrudController.html":{},"classes/CrudService.html":{},"interfaces/ICrudService.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["finds",{"_index":1087,"title":{},"body":{"classes/CrudService.html":{},"injectables/PersistedCronService.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["fire",{"_index":753,"title":{},"body":{"injectables/CronService.html":{}}}],["first",{"_index":302,"title":{},"body":{"modules/AppModule.html":{}}}],["firstname",{"_index":599,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/IUser.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["flight",{"_index":1450,"title":{},"body":{"classes/QueryFailedFilter.html":{},"classes/ValidationFailedFilter.html":{}}}],["flow",{"_index":1421,"title":{},"body":{"injectables/PersistedCronService.html":{}}}],["fn.now",{"_index":480,"title":{},"body":{"classes/BaseModel.html":{},"interfaces/IBaseModel.html":{}}}],["follower",{"_index":128,"title":{"interfaces/Follower.html":{}},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["following",{"_index":56,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{},"miscellaneous/typealiases.html":{}}}],["forbidden",{"_index":194,"title":{},"body":{"classes/ApiException.html":{}}}],["forbiddenexception",{"_index":162,"title":{},"body":{"classes/ApiException.html":{}}}],["foreignkeyviolationerror",{"_index":1440,"title":{},"body":{"classes/QueryFailedFilter.html":{}}}],["format",{"_index":615,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/IUser.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["found",{"_index":188,"title":{},"body":{"classes/ApiException.html":{},"injectables/CronService.html":{},"classes/CrudController.html":{}}}],["framework",{"_index":1824,"title":{},"body":{"index.html":{}}}],["frontend",{"_index":588,"title":{},"body":{"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"interfaces/ITag.html":{},"interfaces/IUser.html":{},"classes/Tag.html":{},"classes/UpdateTagsDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["func",{"_index":810,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["function",{"_index":184,"title":{},"body":{"classes/ApiException.html":{},"modules/AppModule.html":{},"interfaces/BaseRoute.html":{},"classes/CrudConfigService.html":{},"interfaces/CrudOptions.html":{},"classes/CrudRoutesFactory.html":{},"classes/CustomQueryBuilder.html":{},"injectables/ExcludeNullUndefinedInterceptor.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"classes/R.html":{},"guards/RequestGuard.html":{},"guards/ResponseGuard.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["functionality",{"_index":981,"title":{},"body":{"classes/CrudController.html":{},"classes/CrudService.html":{}}}],["functions",{"_index":1801,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["fuzzy",{"_index":625,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/IUser.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["gen/api",{"_index":137,"title":{},"body":{"classes/ApiException.html":{},"classes/CrudController.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["gen/crud",{"_index":788,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"coverage.html":{}}}],["gen/crud.decorator.ts",{"_index":1687,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["gen/utils/checks.util.ts",{"_index":1688,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["gen/utils/obj.util.ts",{"_index":1705,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["gen/utils/other.ts",{"_index":482,"title":{},"body":{"interfaces/BaseRoute.html":{},"interfaces/CrudOptions.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["gen/utils/other.ts:40",{"_index":1403,"title":{},"body":{"interfaces/ParamsOptions.html":{}}}],["gen/utils/types/object",{"_index":1887,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["gender",{"_index":57,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["generated",{"_index":574,"title":{},"body":{"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"interfaces/ITag.html":{},"interfaces/IUser.html":{},"classes/Tag.html":{},"classes/UpdateTagsDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["generatetoken",{"_index":386,"title":{},"body":{"injectables/AuthService.html":{}}}],["generatetoken(user",{"_index":395,"title":{},"body":{"injectables/AuthService.html":{}}}],["generic",{"_index":585,"title":{},"body":{"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"interfaces/IPaginationResult.html":{},"interfaces/ITag.html":{},"interfaces/IUser.html":{},"classes/PaginationParams.html":{},"classes/Tag.html":{},"classes/UpdateTagsDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["get(':id",{"_index":1036,"title":{},"body":{"classes/CrudController.html":{}}}],["get()@httpcode(200)@healthcheck",{"_index":1279,"title":{},"body":{"controllers/HealthController.html":{}}}],["get(key",{"_index":1936,"title":{},"body":{"miscellaneous/variables.html":{}}}],["get(metadatakey",{"_index":1462,"title":{},"body":{"classes/R.html":{}}}],["getapplaunchdata",{"_index":29,"title":{"interfaces/GetAppLaunchData.html":{}},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["getcomments",{"_index":32,"title":{"interfaces/GetComments.html":{}},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["getextramodels",{"_index":1530,"title":{},"body":{"classes/Swagger.html":{}}}],["getextramodels(target",{"_index":836,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["getfollowers",{"_index":34,"title":{"interfaces/GetFollowers.html":{}},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["getfollowing",{"_index":35,"title":{"interfaces/GetFollowing.html":{}},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["gethello",{"_index":200,"title":{},"body":{"controllers/AppController.html":{}}}],["getmany",{"_index":522,"title":{},"body":{"interfaces/BaseRoute.html":{},"classes/CrudConfigService.html":{},"interfaces/CrudOptions.html":{},"classes/CrudRoutesFactory.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["getmany${resourcename}responsedto",{"_index":864,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["getmanybase",{"_index":493,"title":{},"body":{"interfaces/BaseRoute.html":{},"interfaces/CrudOptions.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"miscellaneous/typealiases.html":{}}}],["getmanydefaultresponse",{"_index":501,"title":{"interfaces/GetManyDefaultResponse.html":{}},"body":{"interfaces/BaseRoute.html":{},"classes/CrudConfigService.html":{},"interfaces/CrudOptions.html":{},"classes/CrudRoutesFactory.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"coverage.html":{}}}],["getmanyresponsedto",{"_index":860,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["getmodelname",{"_index":1071,"title":{},"body":{"classes/CrudRoutesFactory.html":{}}}],["getmodeltype",{"_index":1073,"title":{},"body":{"classes/CrudRoutesFactory.html":{}}}],["getnotifications",{"_index":81,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["getone",{"_index":500,"title":{},"body":{"interfaces/BaseRoute.html":{},"classes/CrudConfigService.html":{},"interfaces/CrudOptions.html":{},"classes/CrudRoutesFactory.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"miscellaneous/typealiases.html":{}}}],["getone(name",{"_index":905,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["getone(req",{"_index":907,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["getonebase",{"_index":494,"title":{},"body":{"interfaces/BaseRoute.html":{},"classes/CrudConfigService.html":{},"interfaces/CrudOptions.html":{},"classes/CrudRoutesFactory.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"miscellaneous/typealiases.html":{}}}],["getonebase(name",{"_index":909,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["getonebase(req",{"_index":910,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["getoneresponsedto",{"_index":866,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["getownpropnames",{"_index":1706,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["getrescuelist",{"_index":33,"title":{"interfaces/GetRescueList.html":{}},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["getresponseok",{"_index":1531,"title":{},"body":{"classes/Swagger.html":{}}}],["getresponseok(func",{"_index":838,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["getroutesschema",{"_index":912,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["gettargetproto",{"_index":1069,"title":{},"body":{"classes/CrudRoutesFactory.html":{}}}],["getting",{"_index":1820,"title":{"index.html":{}},"body":{}}],["getuserposts",{"_index":31,"title":{"interfaces/GetUserPosts.html":{}},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["getuserprofile",{"_index":30,"title":{"interfaces/GetUserProfile.html":{}},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["gives",{"_index":586,"title":{},"body":{"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"interfaces/ITag.html":{},"interfaces/IUser.html":{},"classes/Tag.html":{},"classes/UpdateTagsDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["global",{"_index":531,"title":{},"body":{"interfaces/BaseRoute.html":{},"interfaces/CrudOptions.html":{},"modules/DatabaseModule.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{}}}],["gracefully",{"_index":1410,"title":{},"body":{"injectables/PersistedCronService.html":{}}}],["graph",{"_index":1873,"title":{},"body":{"modules.html":{}}}],["grow",{"_index":1850,"title":{},"body":{"index.html":{}}}],["guard",{"_index":1467,"title":{"guards/RequestGuard.html":{},"guards/ResponseGuard.html":{}},"body":{"guards/RequestGuard.html":{},"guards/ResponseGuard.html":{},"coverage.html":{}}}],["guards",{"_index":1469,"title":{},"body":{"guards/RequestGuard.html":{},"guards/ResponseGuard.html":{},"overview.html":{}}}],["handlecron",{"_index":687,"title":{},"body":{"injectables/CronService.html":{}}}],["handlecronfn",{"_index":720,"title":{},"body":{"injectables/CronService.html":{}}}],["handled",{"_index":1448,"title":{},"body":{"classes/QueryFailedFilter.html":{},"classes/ValidationFailedFilter.html":{}}}],["handleinterval",{"_index":688,"title":{},"body":{"injectables/CronService.html":{}}}],["handler",{"_index":1256,"title":{},"body":{"injectables/ExcludeNullUndefinedInterceptor.html":{},"injectables/PersistedCronService.html":{},"interfaces/Response.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["handletimeout",{"_index":689,"title":{},"body":{"injectables/CronService.html":{}}}],["hapi/joi",{"_index":248,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["hash",{"_index":648,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/IUser.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["hashpassword",{"_index":1608,"title":{},"body":{"classes/User.html":{},"injectables/UsersService.html":{}}}],["hashpassword(password",{"_index":647,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/IUser.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"injectables/UsersService.html":{}}}],["haslength",{"_index":1689,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["haslength(objkeys(val",{"_index":1931,"title":{},"body":{"miscellaneous/variables.html":{}}}],["haslength(val",{"_index":1907,"title":{},"body":{"miscellaneous/variables.html":{}}}],["hasmore",{"_index":1155,"title":{},"body":{"classes/CustomQueryBuilder.html":{}}}],["hasvalue",{"_index":1690,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["health",{"_index":286,"title":{},"body":{"modules/AppModule.html":{},"controllers/HealthController.html":{}}}],["health/health.controller",{"_index":254,"title":{},"body":{"modules/AppModule.html":{}}}],["healthcheck",{"_index":1291,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthcheckservice",{"_index":1292,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthcontroller",{"_index":231,"title":{"controllers/HealthController.html":{}},"body":{"modules/AppModule.html":{},"controllers/HealthController.html":{},"coverage.html":{}}}],["hello",{"_index":207,"title":{},"body":{"controllers/AppController.html":{}}}],["helmet",{"_index":1775,"title":{},"body":{"dependencies.html":{}}}],["helpers",{"_index":456,"title":{},"body":{"classes/BaseModel.html":{},"interfaces/IBaseModel.html":{},"guards/RequestGuard.html":{},"guards/ResponseGuard.html":{}}}],["here",{"_index":1859,"title":{},"body":{"index.html":{}}}],["hidden",{"_index":421,"title":{},"body":{"classes/BaseModel.html":{},"interfaces/IBaseModel.html":{},"classes/Tag.html":{},"classes/User.html":{}}}],["hook",{"_index":1418,"title":{},"body":{"injectables/PersistedCronService.html":{}}}],["host",{"_index":1444,"title":{},"body":{"classes/QueryFailedFilter.html":{},"classes/ValidationFailedFilter.html":{}}}],["host.switchtohttp",{"_index":1452,"title":{},"body":{"classes/QueryFailedFilter.html":{},"classes/ValidationFailedFilter.html":{}}}],["http",{"_index":1338,"title":{},"body":{"interfaces/IPaginationResult.html":{},"classes/PaginationParams.html":{}}}],["httpcode",{"_index":1288,"title":{},"body":{"controllers/HealthController.html":{}}}],["httpcode(200",{"_index":1305,"title":{},"body":{"controllers/HealthController.html":{}}}],["https://docs.nestjs.com",{"_index":1309,"title":{},"body":{"controllers/HealthController.html":{}}}],["https://nestjs.com",{"_index":1866,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":24,"title":{},"body":{"interfaces/APIResponse.html":{},"classes/ApiException.html":{},"interfaces/AppLaunchAction.html":{},"controllers/AuthController.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"classes/CrudConfigService.html":{},"classes/CrudController.html":{},"classes/CrudRoutesFactory.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/IPaginationResult.html":{},"classes/LoginCredsDto.html":{},"classes/PaginationParams.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"classes/QueryFailedFilter.html":{},"classes/R.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"controllers/TagsController.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{},"controllers/UsersController.html":{},"classes/ValidationFailedFilter.html":{}}}],["httpstatus.created",{"_index":1047,"title":{},"body":{"classes/CrudController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["httpstatus.no_content",{"_index":1040,"title":{},"body":{"classes/CrudController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["httpstatus.ok",{"_index":360,"title":{},"body":{"controllers/AuthController.html":{},"classes/CrudConfigService.html":{},"classes/CrudController.html":{},"classes/CrudRoutesFactory.html":{},"classes/LoginCredsDto.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["httpstatus.precondition_failed",{"_index":1455,"title":{},"body":{"classes/QueryFailedFilter.html":{},"classes/ValidationFailedFilter.html":{}}}],["httpstatus[statuscode",{"_index":183,"title":{},"body":{"classes/ApiException.html":{}}}],["ibasemodel",{"_index":418,"title":{"interfaces/IBaseModel.html":{}},"body":{"classes/BaseModel.html":{},"interfaces/IBaseModel.html":{},"coverage.html":{}}}],["icrudservice",{"_index":988,"title":{"interfaces/ICrudService.html":{}},"body":{"classes/CrudController.html":{},"classes/CrudService.html":{},"interfaces/ICrudService.html":{},"coverage.html":{}}}],["id",{"_index":422,"title":{},"body":{"classes/BaseModel.html":{},"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"classes/CrudController.html":{},"classes/CrudService.html":{},"interfaces/IBaseModel.html":{},"interfaces/ICrudService.html":{},"interfaces/ITag.html":{},"interfaces/IUser.html":{},"classes/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"classes/UpdateTagsDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["id'})@apiresponse({status",{"_index":1010,"title":{},"body":{"classes/CrudController.html":{}}}],["id'})@put(':id",{"_index":1627,"title":{},"body":{"controllers/UsersController.html":{}}}],["identifier",{"_index":1663,"title":{},"body":{"coverage.html":{}}}],["ignore",{"_index":474,"title":{},"body":{"classes/BaseModel.html":{},"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/CrudService.html":{},"injectables/ExcludeNullUndefinedInterceptor.html":{},"controllers/HealthController.html":{},"interfaces/IBaseModel.html":{},"classes/QueryFailedFilter.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"classes/ValidationFailedFilter.html":{},"miscellaneous/variables.html":{}}}],["ignoreexpiration",{"_index":1368,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["implement",{"_index":1238,"title":{},"body":{"injectables/EmailService.html":{},"injectables/ExcludeNullUndefinedInterceptor.html":{},"injectables/PersistedCronService.html":{},"classes/QueryFailedFilter.html":{},"interfaces/Response.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/ValidationFailedFilter.html":{}}}],["implements",{"_index":290,"title":{},"body":{"modules/AppModule.html":{},"classes/BaseModel.html":{},"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/CrudService.html":{},"injectables/ExcludeNullUndefinedInterceptor.html":{},"controllers/HealthController.html":{},"interfaces/IBaseModel.html":{},"interfaces/ITag.html":{},"interfaces/IUser.html":{},"injectables/PersistedCronService.html":{},"classes/QueryFailedFilter.html":{},"classes/R.html":{},"guards/RequestGuard.html":{},"interfaces/Response.html":{},"guards/ResponseGuard.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"classes/Tag.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateTagsDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/ValidationFailedFilter.html":{}}}],["import",{"_index":25,"title":{},"body":{"interfaces/APIResponse.html":{},"classes/ApiException.html":{},"controllers/AppController.html":{},"interfaces/AppLaunchAction.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseModel.html":{},"interfaces/BaseRoute.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"modules/CronModule.html":{},"injectables/CronService.html":{},"classes/CrudConfigService.html":{},"classes/CrudController.html":{},"interfaces/CrudOptions.html":{},"classes/CrudRoutesFactory.html":{},"classes/CrudService.html":{},"classes/CustomQueryBuilder.html":{},"modules/DatabaseModule.html":{},"modules/EmailModule.html":{},"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"modules/EmailSchedulingModule.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/ExcludeNullUndefinedInterceptor.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"controllers/HealthController.html":{},"interfaces/IBaseModel.html":{},"interfaces/ICrudService.html":{},"interfaces/IPaginationResult.html":{},"interfaces/ITag.html":{},"interfaces/IUser.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginCredsDto.html":{},"classes/PaginationParams.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"injectables/PersistedCronService.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"classes/QueryFailedFilter.html":{},"classes/R.html":{},"guards/RequestGuard.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Response.html":{},"guards/ResponseGuard.html":{},"interfaces/Result.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"classes/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateTagsDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/ValidationFailedFilter.html":{}}}],["imports",{"_index":232,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EmailModule.html":{},"modules/EmailSchedulingModule.html":{}}}],["in,no",{"_index":1490,"title":{},"body":{"guards/RequestGuard.html":{}}}],["included",{"_index":1335,"title":{},"body":{"interfaces/IPaginationResult.html":{},"classes/PaginationParams.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"interfaces/APIResponse.html":{},"classes/ApiException.html":{},"controllers/AppController.html":{},"interfaces/AppLaunchAction.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BaseModel.html":{},"interfaces/BaseRoute.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"injectables/CronService.html":{},"classes/CrudConfigService.html":{},"classes/CrudController.html":{},"interfaces/CrudOptions.html":{},"classes/CrudRoutesFactory.html":{},"classes/CrudService.html":{},"classes/CustomQueryBuilder.html":{},"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/ExcludeNullUndefinedInterceptor.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"controllers/HealthController.html":{},"interfaces/IBaseModel.html":{},"interfaces/ICrudService.html":{},"interfaces/IPaginationResult.html":{},"interfaces/ITag.html":{},"interfaces/IUser.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginCredsDto.html":{},"classes/PaginationParams.html":{},"interfaces/ParamOption.html":{},"injectables/PersistedCronService.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"classes/QueryFailedFilter.html":{},"classes/R.html":{},"guards/RequestGuard.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Response.html":{},"guards/ResponseGuard.html":{},"interfaces/Result.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"classes/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/TimeoutInterceptor.html":{},"interfaces/TokenPayload.html":{},"injectables/TransformInterceptor.html":{},"classes/User.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/ValidationFailedFilter.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["indexable",{"_index":1402,"title":{},"body":{"interfaces/ParamsOptions.html":{}}}],["indicating",{"_index":1481,"title":{},"body":{"guards/RequestGuard.html":{},"guards/ResponseGuard.html":{}}}],["info",{"_index":3,"title":{},"body":{"interfaces/APIResponse.html":{},"classes/ApiException.html":{},"controllers/AppController.html":{},"interfaces/AppLaunchAction.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseModel.html":{},"interfaces/BaseRoute.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"modules/CronModule.html":{},"injectables/CronService.html":{},"classes/CrudConfigService.html":{},"classes/CrudController.html":{},"interfaces/CrudOptions.html":{},"classes/CrudRoutesFactory.html":{},"classes/CrudService.html":{},"classes/CustomQueryBuilder.html":{},"modules/DatabaseModule.html":{},"modules/EmailModule.html":{},"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"modules/EmailSchedulingModule.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/ExcludeNullUndefinedInterceptor.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"controllers/HealthController.html":{},"interfaces/IBaseModel.html":{},"interfaces/ICrudService.html":{},"interfaces/IPaginationResult.html":{},"interfaces/ITag.html":{},"interfaces/IUser.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginCredsDto.html":{},"classes/PaginationParams.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"injectables/PersistedCronService.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"classes/QueryFailedFilter.html":{},"classes/R.html":{},"guards/RequestGuard.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Response.html":{},"guards/ResponseGuard.html":{},"interfaces/Result.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"classes/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"injectables/TimeoutInterceptor.html":{},"interfaces/TokenPayload.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateTagsDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/ValidationFailedFilter.html":{}}}],["inherited",{"_index":1543,"title":{},"body":{"classes/Tag.html":{},"injectables/TagsService.html":{},"classes/User.html":{},"injectables/UsersService.html":{}}}],["initialized",{"_index":313,"title":{},"body":{"modules/AppModule.html":{},"controllers/HealthController.html":{}}}],["inject",{"_index":375,"title":{},"body":{"modules/AuthModule.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["injectable",{"_index":382,"title":{"injectables/AuthService.html":{},"injectables/CronService.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/ExcludeNullUndefinedInterceptor.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/PersistedCronService.html":{},"injectables/TagsService.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/CronService.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/ExcludeNullUndefinedInterceptor.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/PersistedCronService.html":{},"guards/RequestGuard.html":{},"interfaces/Response.html":{},"guards/ResponseGuard.html":{},"injectables/TagsService.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":383,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CronService.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/ExcludeNullUndefinedInterceptor.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/PersistedCronService.html":{},"injectables/TagsService.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injected",{"_index":991,"title":{},"body":{"classes/CrudController.html":{},"classes/CrudService.html":{}}}],["input",{"_index":1002,"title":{},"body":{"classes/CrudController.html":{},"classes/CrudService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["inputs",{"_index":1486,"title":{},"body":{"guards/RequestGuard.html":{}}}],["inputs[key",{"_index":1493,"title":{},"body":{"guards/RequestGuard.html":{}}}],["installation",{"_index":1832,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":1834,"title":{},"body":{"index.html":{}}}],["instance",{"_index":578,"title":{},"body":{"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"interfaces/ITag.html":{},"interfaces/IUser.html":{},"classes/Tag.html":{},"classes/UpdateTagsDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["instanceof",{"_index":1494,"title":{},"body":{"guards/RequestGuard.html":{},"injectables/TimeoutInterceptor.html":{},"miscellaneous/variables.html":{}}}],["integer",{"_index":582,"title":{},"body":{"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"interfaces/ITag.html":{},"interfaces/IUser.html":{},"classes/Tag.html":{},"classes/UpdateTagsDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["intercept",{"_index":1246,"title":{},"body":{"injectables/ExcludeNullUndefinedInterceptor.html":{},"interfaces/Response.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["intercept(context",{"_index":1247,"title":{},"body":{"injectables/ExcludeNullUndefinedInterceptor.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["interceptor",{"_index":1251,"title":{},"body":{"injectables/ExcludeNullUndefinedInterceptor.html":{},"interfaces/Response.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["interceptors",{"_index":1243,"title":{},"body":{"injectables/ExcludeNullUndefinedInterceptor.html":{}}}],["interface",{"_index":0,"title":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/BaseRoute.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/CrudOptions.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/IBaseModel.html":{},"interfaces/ICrudService.html":{},"interfaces/IPaginationResult.html":{},"interfaces/ITag.html":{},"interfaces/IUser.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Response.html":{},"interfaces/Result.html":{},"interfaces/TokenPayload.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"classes/BaseModel.html":{},"interfaces/BaseRoute.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"interfaces/CrudOptions.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/IBaseModel.html":{},"interfaces/ICrudService.html":{},"interfaces/IPaginationResult.html":{},"interfaces/ITag.html":{},"interfaces/IUser.html":{},"classes/PaginationParams.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Response.html":{},"interfaces/Result.html":{},"classes/Tag.html":{},"interfaces/TokenPayload.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateTagsDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{},"coverage.html":{}}}],["interfaces",{"_index":2,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/BaseRoute.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/CrudOptions.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/IBaseModel.html":{},"interfaces/ICrudService.html":{},"interfaces/IPaginationResult.html":{},"interfaces/ITag.html":{},"interfaces/IUser.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Response.html":{},"interfaces/Result.html":{},"interfaces/TokenPayload.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{},"overview.html":{}}}],["internal",{"_index":191,"title":{},"body":{"classes/ApiException.html":{}}}],["internalservererrorexception",{"_index":163,"title":{},"body":{"classes/ApiException.html":{}}}],["interval",{"_index":671,"title":{},"body":{"injectables/CronService.html":{},"controllers/HealthController.html":{}}}],["interval('handleintervalfn",{"_index":722,"title":{},"body":{"injectables/CronService.html":{}}}],["interval(5000).pipe",{"_index":1302,"title":{},"body":{"controllers/HealthController.html":{}}}],["intervals",{"_index":730,"title":{},"body":{"injectables/CronService.html":{}}}],["intervals.foreach((key",{"_index":768,"title":{},"body":{"injectables/CronService.html":{}}}],["invoked",{"_index":1257,"title":{},"body":{"injectables/ExcludeNullUndefinedInterceptor.html":{},"injectables/PersistedCronService.html":{},"interfaces/Response.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["ipagination",{"_index":1033,"title":{},"body":{"classes/CrudController.html":{}}}],["ipaginationresult",{"_index":1029,"title":{"interfaces/IPaginationResult.html":{}},"body":{"classes/CrudController.html":{},"classes/CrudService.html":{},"interfaces/ICrudService.html":{},"interfaces/IPaginationResult.html":{},"classes/PaginationParams.html":{},"coverage.html":{}}}],["isactive",{"_index":50,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"classes/CreateUserDto.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/IUser.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["isarray",{"_index":861,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["isarrayfull",{"_index":1691,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["isarrayfull(val",{"_index":1902,"title":{},"body":{"miscellaneous/variables.html":{}}}],["isarraystrings",{"_index":1692,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["isboolean",{"_index":605,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/IUser.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["isboolean(val",{"_index":1934,"title":{},"body":{"miscellaneous/variables.html":{}}}],["isdate",{"_index":1693,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["isdate(val",{"_index":1935,"title":{},"body":{"miscellaneous/variables.html":{}}}],["isdatestring",{"_index":1190,"title":{},"body":{"classes/EmailScheduleDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["isemail",{"_index":611,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/EmailScheduleDto.html":{},"interfaces/IUser.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["isemail()@isnotempty()@minlength(2",{"_index":601,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isempty",{"_index":1719,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["isempty(value",{"_index":1141,"title":{},"body":{"classes/CustomQueryBuilder.html":{},"miscellaneous/functions.html":{}}}],["isequal",{"_index":1694,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["isequal(val",{"_index":1922,"title":{},"body":{"miscellaneous/variables.html":{}}}],["isfalse",{"_index":798,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["isfalse(this.options.serialize?.create",{"_index":931,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["isfalse(this.options.serialize?.delete",{"_index":940,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["isfalse(this.options.serialize?.get",{"_index":924,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["isfalse(this.options.serialize?.getmany",{"_index":927,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["isfalse(this.options.serialize?.replace",{"_index":937,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["isfalse(this.options.serialize?.update",{"_index":934,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["isfunction",{"_index":799,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["isfunction(this.modeltype",{"_index":946,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["isfunction(this.options.serialize?.create",{"_index":953,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["isfunction(this.options.serialize?.delete",{"_index":959,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["isfunction(this.options.serialize?.get",{"_index":949,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["isfunction(this.options.serialize?.replace",{"_index":957,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["isfunction(this.options.serialize?.update",{"_index":955,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["isglobal",{"_index":259,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["isin",{"_index":1695,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["isnil",{"_index":1696,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["isnotempty",{"_index":339,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"classes/EmailScheduleDto.html":{},"interfaces/ITag.html":{},"interfaces/IUser.html":{},"classes/LoginCredsDto.html":{},"classes/Tag.html":{},"classes/UpdateTagsDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["isnotempty(records",{"_index":1159,"title":{},"body":{"classes/CustomQueryBuilder.html":{}}}],["isnotempty(value",{"_index":1818,"title":{},"body":{"miscellaneous/functions.html":{}}}],["isnull",{"_index":1697,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["isnull(val",{"_index":1925,"title":{},"body":{"miscellaneous/variables.html":{}}}],["isnumber",{"_index":1698,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["isnumber(val",{"_index":1933,"title":{},"body":{"miscellaneous/variables.html":{}}}],["isnumeric",{"_index":1699,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["isobject",{"_index":1700,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["isobject(val",{"_index":1930,"title":{},"body":{"miscellaneous/variables.html":{}}}],["isobject(value",{"_index":1139,"title":{},"body":{"classes/CustomQueryBuilder.html":{},"miscellaneous/functions.html":{}}}],["isobjectfull",{"_index":800,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["isobjectfull(config.params",{"_index":871,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["isobjectfull(config.query",{"_index":869,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["isobjectfull(config.serialize",{"_index":873,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["isobjectfull(this.options.dto",{"_index":919,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["isobjectfull(this.options.query",{"_index":916,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["isoptional",{"_index":1340,"title":{},"body":{"interfaces/IPaginationResult.html":{},"classes/PaginationParams.html":{}}}],["isownprofile",{"_index":58,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["isrecent",{"_index":100,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["isrescuer",{"_index":59,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["isstring",{"_index":561,"title":{},"body":{"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"classes/EmailScheduleDto.html":{},"interfaces/ITag.html":{},"interfaces/IUser.html":{},"classes/Tag.html":{},"classes/UpdateTagsDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["isstring()@isnotempty",{"_index":1188,"title":{},"body":{"classes/EmailScheduleDto.html":{}}}],["isstring()@isnotempty()@minlength(2",{"_index":603,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@isnotempty()@minlength(2)@maxlength(36",{"_index":558,"title":{},"body":{"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{}}}],["isstring()@isnotempty()@minlength(8",{"_index":608,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring(val",{"_index":1932,"title":{},"body":{"miscellaneous/variables.html":{}}}],["isstringfull",{"_index":1701,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["isstringfull(v",{"_index":1909,"title":{},"body":{"miscellaneous/variables.html":{}}}],["isstringfull(val",{"_index":1910,"title":{},"body":{"miscellaneous/variables.html":{}}}],["istrue",{"_index":1702,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["isundefined",{"_index":1703,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["isundefined(val",{"_index":1924,"title":{},"body":{"miscellaneous/variables.html":{}}}],["isuserreactedtopost",{"_index":88,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["isvalue",{"_index":1704,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["isvalue(o",{"_index":1904,"title":{},"body":{"miscellaneous/variables.html":{}}}],["isvalue(val",{"_index":1905,"title":{},"body":{"miscellaneous/variables.html":{}}}],["itag",{"_index":557,"title":{"interfaces/ITag.html":{}},"body":{"classes/CreateTagsDto.html":{},"interfaces/ITag.html":{},"classes/Tag.html":{},"classes/UpdateTagsDto.html":{},"coverage.html":{}}}],["items",{"_index":854,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"interfaces/IPaginationResult.html":{},"classes/PaginationParams.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["iuser",{"_index":598,"title":{"interfaces/IUser.html":{}},"body":{"classes/CreateUserDto.html":{},"interfaces/IUser.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"coverage.html":{}}}],["job",{"_index":702,"title":{},"body":{"injectables/CronService.html":{},"injectables/EmailSchedulingService.html":{},"injectables/PersistedCronService.html":{}}}],["job.find",{"_index":1422,"title":{},"body":{"injectables/PersistedCronService.html":{}}}],["job.start",{"_index":760,"title":{},"body":{"injectables/CronService.html":{},"injectables/EmailSchedulingService.html":{}}}],["jobs",{"_index":670,"title":{},"body":{"injectables/CronService.html":{},"injectables/PersistedCronService.html":{}}}],["jobs.foreach((job",{"_index":1424,"title":{},"body":{"injectables/PersistedCronService.html":{}}}],["joi",{"_index":247,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.number().default(3000",{"_index":269,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["joi.object",{"_index":267,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["joi.string",{"_index":271,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["joi.string().required",{"_index":279,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["join",{"_index":1856,"title":{},"body":{"index.html":{}}}],["json",{"_index":571,"title":{},"body":{"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"interfaces/ITag.html":{},"interfaces/IUser.html":{},"classes/Tag.html":{},"classes/UpdateTagsDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["jsonschema",{"_index":564,"title":{},"body":{"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"interfaces/ITag.html":{},"interfaces/IUser.html":{},"classes/Tag.html":{},"classes/UpdateTagsDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["jwt",{"_index":1364,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["jwt.strategy",{"_index":372,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwt_access_token_expiration_time",{"_index":1937,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jwtfromrequest",{"_index":1370,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtkey",{"_index":278,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["jwtmodule",{"_index":368,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.registerasync",{"_index":374,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtservice",{"_index":389,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":364,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["kamil",{"_index":1863,"title":{},"body":{"index.html":{}}}],["keep",{"_index":1299,"title":{},"body":{"controllers/HealthController.html":{}}}],["key",{"_index":509,"title":{},"body":{"interfaces/BaseRoute.html":{},"injectables/CronService.html":{},"interfaces/CrudOptions.html":{},"injectables/ExcludeNullUndefinedInterceptor.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"guards/RequestGuard.html":{},"miscellaneous/variables.html":{}}}],["keyof",{"_index":1352,"title":{},"body":{"interfaces/IPaginationResult.html":{},"classes/PaginationParams.html":{}}}],["knex",{"_index":1162,"title":{},"body":{"modules/DatabaseModule.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["knex.sqlite",{"_index":1174,"title":{},"body":{"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["knexconnection",{"_index":1168,"title":{},"body":{"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["lastname",{"_index":600,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/IUser.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["latitude",{"_index":60,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["legend",{"_index":213,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CronModule.html":{},"modules/EmailModule.html":{},"modules/EmailSchedulingModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["license",{"_index":1869,"title":{},"body":{"index.html":{}}}],["licensed",{"_index":1847,"title":{},"body":{"index.html":{}}}],["limit",{"_index":517,"title":{},"body":{"interfaces/BaseRoute.html":{},"interfaces/CrudOptions.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"dependencies.html":{}}}],["line",{"_index":316,"title":{},"body":{"modules/AppModule.html":{},"classes/BaseModel.html":{},"interfaces/BaseRoute.html":{},"injectables/CronService.html":{},"classes/CrudConfigService.html":{},"interfaces/CrudOptions.html":{},"classes/CrudRoutesFactory.html":{},"classes/CustomQueryBuilder.html":{},"injectables/ExcludeNullUndefinedInterceptor.html":{},"interfaces/GetManyDefaultResponse.html":{},"controllers/HealthController.html":{},"interfaces/IBaseModel.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"classes/R.html":{},"guards/RequestGuard.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"injectables/UsersService.html":{}}}],["link",{"_index":38,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["listing",{"_index":1336,"title":{},"body":{"interfaces/IPaginationResult.html":{},"classes/PaginationParams.html":{}}}],["literal",{"_index":1051,"title":{},"body":{"interfaces/CrudOptions.html":{},"controllers/HealthController.html":{},"interfaces/IPaginationResult.html":{},"interfaces/Rescues.html":{},"classes/Swagger.html":{},"miscellaneous/typealiases.html":{}}}],["literal.type.ts",{"_index":1884,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["load",{"_index":791,"title":{},"body":{"classes/CrudConfigService.html":{},"controllers/HealthController.html":{}}}],["load(config",{"_index":794,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["local",{"_index":1385,"title":{},"body":{"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["local.strategy",{"_index":373,"title":{},"body":{"modules/AuthModule.html":{}}}],["localstrategy",{"_index":365,"title":{"injectables/LocalStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["localstrategy.passwordfield",{"_index":1387,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["localstrategy.usernamefield",{"_index":1386,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["lodash",{"_index":1137,"title":{},"body":{"classes/CustomQueryBuilder.html":{},"dependencies.html":{}}}],["logallcrons",{"_index":690,"title":{},"body":{"injectables/CronService.html":{}}}],["logger",{"_index":678,"title":{},"body":{"injectables/CronService.html":{},"injectables/EmailSchedulingService.html":{},"injectables/PersistedCronService.html":{}}}],["logger(cronservice.name",{"_index":736,"title":{},"body":{"injectables/CronService.html":{}}}],["logger(emailschedulingservice.name",{"_index":1219,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["logger(persistedcronservice.name",{"_index":1416,"title":{},"body":{"injectables/PersistedCronService.html":{}}}],["logging",{"_index":282,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["login",{"_index":326,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginCredsDto.html":{}}}],["login(req",{"_index":327,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(user",{"_index":398,"title":{},"body":{"injectables/AuthService.html":{}}}],["logincreds",{"_index":328,"title":{},"body":{"controllers/AuthController.html":{},"classes/LoginCredsDto.html":{}}}],["logincredsdto",{"_index":329,"title":{"classes/LoginCredsDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/LoginCredsDto.html":{},"coverage.html":{}}}],["logintervals",{"_index":691,"title":{},"body":{"injectables/CronService.html":{}}}],["logtimeouts",{"_index":692,"title":{},"body":{"injectables/CronService.html":{}}}],["longitude",{"_index":61,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["loop",{"_index":1158,"title":{},"body":{"classes/CustomQueryBuilder.html":{}}}],["make",{"_index":1409,"title":{},"body":{"injectables/PersistedCronService.html":{}}}],["many",{"_index":848,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["map",{"_index":1265,"title":{},"body":{"injectables/ExcludeNullUndefinedInterceptor.html":{},"controllers/HealthController.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"dependencies.html":{}}}],["map((_",{"_index":1303,"title":{},"body":{"controllers/HealthController.html":{}}}],["map((name",{"_index":825,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["mapping",{"_index":468,"title":{},"body":{"classes/BaseModel.html":{},"interfaces/IBaseModel.html":{}}}],["match",{"_index":409,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"interfaces/IUser.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["matching",{"_index":132,"title":{},"body":{"interfaces/APIResponse.html":{},"classes/ApiException.html":{},"controllers/AppController.html":{},"interfaces/AppLaunchAction.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseModel.html":{},"interfaces/BaseRoute.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"modules/CronModule.html":{},"injectables/CronService.html":{},"classes/CrudConfigService.html":{},"classes/CrudController.html":{},"interfaces/CrudOptions.html":{},"classes/CrudRoutesFactory.html":{},"classes/CrudService.html":{},"classes/CustomQueryBuilder.html":{},"modules/DatabaseModule.html":{},"modules/EmailModule.html":{},"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"modules/EmailSchedulingModule.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/ExcludeNullUndefinedInterceptor.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"controllers/HealthController.html":{},"interfaces/IBaseModel.html":{},"interfaces/ICrudService.html":{},"interfaces/IPaginationResult.html":{},"interfaces/ITag.html":{},"interfaces/IUser.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginCredsDto.html":{},"classes/PaginationParams.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"injectables/PersistedCronService.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"classes/QueryFailedFilter.html":{},"classes/R.html":{},"guards/RequestGuard.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Response.html":{},"guards/ResponseGuard.html":{},"interfaces/Result.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"classes/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"injectables/TimeoutInterceptor.html":{},"interfaces/TokenPayload.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateTagsDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/ValidationFailedFilter.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["math.ceil(result.total",{"_index":1148,"title":{},"body":{"classes/CustomQueryBuilder.html":{}}}],["math.ceil(total",{"_index":1106,"title":{},"body":{"classes/CrudService.html":{}}}],["maxlength",{"_index":562,"title":{},"body":{"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"interfaces/ITag.html":{},"interfaces/IUser.html":{},"classes/Tag.html":{},"classes/UpdateTagsDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["maxlength(36",{"_index":593,"title":{},"body":{"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"interfaces/ITag.html":{},"interfaces/IUser.html":{},"classes/Tag.html":{},"classes/UpdateTagsDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["maxlimit",{"_index":518,"title":{},"body":{"interfaces/BaseRoute.html":{},"interfaces/CrudOptions.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{}}}],["mb",{"_index":1314,"title":{},"body":{"controllers/HealthController.html":{}}}],["memory",{"_index":1301,"title":{},"body":{"controllers/HealthController.html":{}}}],["merge",{"_index":915,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["mergeoptions",{"_index":914,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["message",{"_index":13,"title":{},"body":{"interfaces/APIResponse.html":{},"classes/ApiException.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/IPaginationResult.html":{},"classes/PaginationParams.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"classes/QueryFailedFilter.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"guards/ResponseGuard.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{},"classes/ValidationFailedFilter.html":{}}}],["messageevent",{"_index":1289,"title":{},"body":{"controllers/HealthController.html":{}}}],["meta",{"_index":821,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"guards/ResponseGuard.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["metadata",{"_index":817,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"interfaces/IPaginationResult.html":{},"classes/PaginationParams.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"dependencies.html":{}}}],["metadatakey",{"_index":805,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["metadatatoadd",{"_index":972,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["metadatavalue",{"_index":806,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["method",{"_index":483,"title":{},"body":{"interfaces/BaseRoute.html":{},"injectables/CronService.html":{},"classes/CrudConfigService.html":{},"interfaces/CrudOptions.html":{},"classes/CrudRoutesFactory.html":{},"injectables/ExcludeNullUndefinedInterceptor.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"classes/QueryFailedFilter.html":{},"classes/R.html":{},"guards/RequestGuard.html":{},"interfaces/Response.html":{},"guards/ResponseGuard.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/ValidationFailedFilter.html":{}}}],["methods",{"_index":199,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BaseModel.html":{},"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"injectables/CronService.html":{},"classes/CrudConfigService.html":{},"classes/CrudController.html":{},"classes/CrudRoutesFactory.html":{},"classes/CrudService.html":{},"classes/CustomQueryBuilder.html":{},"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/ExcludeNullUndefinedInterceptor.html":{},"controllers/HealthController.html":{},"interfaces/ICrudService.html":{},"interfaces/ITag.html":{},"interfaces/IUser.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/PersistedCronService.html":{},"classes/QueryFailedFilter.html":{},"classes/R.html":{},"guards/RequestGuard.html":{},"interfaces/Response.html":{},"guards/ResponseGuard.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"classes/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateTagsDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/ValidationFailedFilter.html":{}}}],["metrics",{"_index":1283,"title":{},"body":{"controllers/HealthController.html":{}}}],["metrics.os",{"_index":1321,"title":{},"body":{"controllers/HealthController.html":{}}}],["milliseconds",{"_index":704,"title":{},"body":{"injectables/CronService.html":{},"injectables/TimeoutInterceptor.html":{}}}],["min",{"_index":1341,"title":{},"body":{"interfaces/IPaginationResult.html":{},"classes/PaginationParams.html":{}}}],["min(0",{"_index":1347,"title":{},"body":{"interfaces/IPaginationResult.html":{},"classes/PaginationParams.html":{}}}],["minimum",{"_index":1346,"title":{},"body":{"interfaces/IPaginationResult.html":{},"classes/PaginationParams.html":{}}}],["minlength",{"_index":563,"title":{},"body":{"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"interfaces/ITag.html":{},"interfaces/IUser.html":{},"classes/Tag.html":{},"classes/UpdateTagsDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["minlength(2",{"_index":592,"title":{},"body":{"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"interfaces/ITag.html":{},"interfaces/IUser.html":{},"classes/Tag.html":{},"classes/UpdateTagsDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["minlength(8",{"_index":657,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/IUser.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["minute",{"_index":763,"title":{},"body":{"injectables/CronService.html":{}}}],["miscellaneous",{"_index":1798,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":1846,"title":{},"body":{"index.html":{}}}],["mixed",{"_index":640,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/IUser.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["mixin",{"_index":449,"title":{},"body":{"classes/BaseModel.html":{},"interfaces/IBaseModel.html":{}}}],["mixin(model",{"_index":458,"title":{},"body":{"classes/BaseModel.html":{},"interfaces/IBaseModel.html":{}}}],["mockedconfigservice",{"_index":1671,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["mockedjwtservice",{"_index":1672,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["mode",{"_index":1838,"title":{},"body":{"index.html":{}}}],["model",{"_index":450,"title":{},"body":{"classes/BaseModel.html":{},"interfaces/BaseRoute.html":{},"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"interfaces/CrudOptions.html":{},"classes/CrudService.html":{},"classes/CustomQueryBuilder.html":{},"modules/DatabaseModule.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/IBaseModel.html":{},"interfaces/ITag.html":{},"interfaces/IUser.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"classes/Tag.html":{},"injectables/TagsService.html":{},"classes/UpdateTagsDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["model.knex(knex",{"_index":1176,"title":{},"body":{"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["model.name",{"_index":1165,"title":{},"body":{"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["modelclass",{"_index":1082,"title":{},"body":{"classes/CrudService.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["modelname",{"_index":894,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["modelobject",{"_index":565,"title":{},"body":{"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"interfaces/ITag.html":{},"interfaces/IUser.html":{},"classes/Tag.html":{},"classes/UpdateTagsDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"miscellaneous/typealiases.html":{}}}],["modeloptions",{"_index":438,"title":{},"body":{"classes/BaseModel.html":{},"classes/CreateUserDto.html":{},"interfaces/IBaseModel.html":{},"interfaces/IUser.html":{},"classes/Tag.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["modelproviders",{"_index":1163,"title":{},"body":{"modules/DatabaseModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["models",{"_index":823,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"modules/DatabaseModule.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["models.map((model",{"_index":1164,"title":{},"body":{"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["modeltype",{"_index":896,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["modifier",{"_index":622,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/IUser.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["modifiers",{"_index":612,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/IUser.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["module",{"_index":209,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CronModule.html":{},"modules/DatabaseModule.html":{},"modules/EmailModule.html":{},"modules/EmailSchedulingModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CronModule.html":{},"modules/DatabaseModule.html":{},"modules/EmailModule.html":{},"modules/EmailSchedulingModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["modules",{"_index":211,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CronModule.html":{},"modules/DatabaseModule.html":{},"modules/EmailModule.html":{},"modules/EmailSchedulingModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["moment",{"_index":1681,"title":{},"body":{"coverage.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["more",{"_index":1593,"title":{},"body":{"injectables/TimeoutInterceptor.html":{},"index.html":{}}}],["myśliwiec",{"_index":1864,"title":{},"body":{"index.html":{}}}],["n",{"_index":718,"title":{},"body":{"injectables/CronService.html":{}}}],["name",{"_index":116,"title":{},"body":{"interfaces/APIResponse.html":{},"classes/ApiException.html":{},"interfaces/AppLaunchAction.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BaseModel.html":{},"interfaces/BaseRoute.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"injectables/CronService.html":{},"classes/CrudConfigService.html":{},"classes/CrudController.html":{},"interfaces/CrudOptions.html":{},"classes/CrudRoutesFactory.html":{},"classes/CrudService.html":{},"classes/CustomQueryBuilder.html":{},"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/ExcludeNullUndefinedInterceptor.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"controllers/HealthController.html":{},"interfaces/ICrudService.html":{},"interfaces/ITag.html":{},"interfaces/IUser.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"injectables/PersistedCronService.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"classes/QueryFailedFilter.html":{},"classes/R.html":{},"guards/RequestGuard.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"guards/ResponseGuard.html":{},"interfaces/Result.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"classes/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateTagsDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/ValidationFailedFilter.html":{},"miscellaneous/functions.html":{}}}],["name.trim().split(/\\s",{"_index":643,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/IUser.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["named",{"_index":706,"title":{},"body":{"injectables/CronService.html":{}}}],["namepart",{"_index":642,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/IUser.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["namepart.tolowercase",{"_index":646,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/IUser.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["nativeerror",{"_index":1458,"title":{},"body":{"classes/QueryFailedFilter.html":{}}}],["nest",{"_index":307,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["nestframework",{"_index":1868,"title":{},"body":{"index.html":{}}}],["nestinterceptor",{"_index":1263,"title":{},"body":{"injectables/ExcludeNullUndefinedInterceptor.html":{},"interfaces/Response.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["nestjs",{"_index":1417,"title":{},"body":{"injectables/PersistedCronService.html":{}}}],["nestjs/bull",{"_index":1744,"title":{},"body":{"dependencies.html":{}}}],["nestjs/common",{"_index":26,"title":{},"body":{"interfaces/APIResponse.html":{},"classes/ApiException.html":{},"controllers/AppController.html":{},"interfaces/AppLaunchAction.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/BaseRoute.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"modules/CronModule.html":{},"injectables/CronService.html":{},"classes/CrudConfigService.html":{},"classes/CrudController.html":{},"interfaces/CrudOptions.html":{},"classes/CrudRoutesFactory.html":{},"classes/CrudService.html":{},"modules/DatabaseModule.html":{},"modules/EmailModule.html":{},"controllers/EmailSchedulingController.html":{},"modules/EmailSchedulingModule.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/ExcludeNullUndefinedInterceptor.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"controllers/HealthController.html":{},"interfaces/IPaginationResult.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginCredsDto.html":{},"classes/PaginationParams.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"injectables/PersistedCronService.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"classes/QueryFailedFilter.html":{},"classes/R.html":{},"guards/RequestGuard.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Response.html":{},"guards/ResponseGuard.html":{},"interfaces/Result.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/ValidationFailedFilter.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":242,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"controllers/HealthController.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":1748,"title":{},"body":{"dependencies.html":{}}}],["nestjs/jwt",{"_index":369,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":1750,"title":{},"body":{"dependencies.html":{}}}],["nestjs/passport",{"_index":337,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginCredsDto.html":{},"controllers/TagsController.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":1753,"title":{},"body":{"dependencies.html":{}}}],["nestjs/schedule",{"_index":244,"title":{},"body":{"modules/AppModule.html":{},"injectables/CronService.html":{},"injectables/EmailSchedulingService.html":{},"injectables/PersistedCronService.html":{},"dependencies.html":{}}}],["nestjs/serve",{"_index":1757,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":172,"title":{},"body":{"classes/ApiException.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"classes/CrudController.html":{},"controllers/EmailSchedulingController.html":{},"controllers/HealthController.html":{},"interfaces/IPaginationResult.html":{},"interfaces/ITag.html":{},"interfaces/IUser.html":{},"classes/LoginCredsDto.html":{},"classes/PaginationParams.html":{},"classes/Tag.html":{},"controllers/TagsController.html":{},"classes/UpdateTagsDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["nestjs/swagger/dist/types/swagger",{"_index":490,"title":{},"body":{"interfaces/BaseRoute.html":{},"interfaces/CrudOptions.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{}}}],["nestjs/terminus",{"_index":246,"title":{},"body":{"modules/AppModule.html":{},"controllers/HealthController.html":{},"dependencies.html":{}}}],["new",{"_index":179,"title":{},"body":{"classes/ApiException.html":{},"injectables/AuthService.html":{},"classes/BaseModel.html":{},"injectables/CronService.html":{},"classes/CrudConfigService.html":{},"classes/CrudController.html":{},"classes/CrudRoutesFactory.html":{},"injectables/EmailSchedulingService.html":{},"interfaces/IBaseModel.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/PersistedCronService.html":{},"classes/QueryFailedFilter.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"classes/ValidationFailedFilter.html":{},"coverage.html":{}}}],["next",{"_index":315,"title":{},"body":{"modules/AppModule.html":{},"classes/BaseModel.html":{},"interfaces/BaseRoute.html":{},"injectables/CronService.html":{},"classes/CrudConfigService.html":{},"interfaces/CrudOptions.html":{},"classes/CrudRoutesFactory.html":{},"classes/CustomQueryBuilder.html":{},"injectables/ExcludeNullUndefinedInterceptor.html":{},"interfaces/GetManyDefaultResponse.html":{},"controllers/HealthController.html":{},"interfaces/IBaseModel.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"classes/R.html":{},"guards/RequestGuard.html":{},"interfaces/Response.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["next.handle().pipe",{"_index":1275,"title":{},"body":{"injectables/ExcludeNullUndefinedInterceptor.html":{},"injectables/TimeoutInterceptor.html":{}}}],["next.handle().pipe(map((data",{"_index":1500,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["nocontent",{"_index":1517,"title":{},"body":{"guards/ResponseGuard.html":{}}}],["node.js",{"_index":1823,"title":{},"body":{"index.html":{}}}],["node_env",{"_index":270,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["notfounderror",{"_index":1443,"title":{},"body":{"classes/QueryFailedFilter.html":{}}}],["notfoundexception",{"_index":164,"title":{},"body":{"classes/ApiException.html":{},"classes/CrudController.html":{},"classes/CrudService.html":{},"injectables/UsersService.html":{}}}],["nothing",{"_index":573,"title":{},"body":{"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"interfaces/ITag.html":{},"interfaces/IUser.html":{},"classes/Tag.html":{},"classes/UpdateTagsDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["notnullviolationerror",{"_index":1441,"title":{},"body":{"classes/QueryFailedFilter.html":{}}}],["npm",{"_index":1833,"title":{},"body":{"index.html":{}}}],["null",{"_index":36,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"classes/BaseModel.html":{},"interfaces/BaseRoute.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/CrudOptions.html":{},"classes/CustomQueryBuilder.html":{},"injectables/ExcludeNullUndefinedInterceptor.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/IBaseModel.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"guards/ResponseGuard.html":{},"interfaces/Result.html":{},"classes/Tag.html":{},"classes/User.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["number",{"_index":18,"title":{},"body":{"interfaces/APIResponse.html":{},"classes/ApiException.html":{},"interfaces/AppLaunchAction.html":{},"classes/BaseModel.html":{},"interfaces/BaseRoute.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"injectables/CronService.html":{},"classes/CrudConfigService.html":{},"classes/CrudController.html":{},"interfaces/CrudOptions.html":{},"classes/CrudRoutesFactory.html":{},"classes/CrudService.html":{},"classes/CustomQueryBuilder.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"controllers/HealthController.html":{},"interfaces/IBaseModel.html":{},"interfaces/ICrudService.html":{},"interfaces/IPaginationResult.html":{},"classes/PaginationParams.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"classes/R.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"classes/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"classes/User.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["number.isfinite(val",{"_index":1927,"title":{},"body":{"miscellaneous/variables.html":{}}}],["number.isnan(val",{"_index":1926,"title":{},"body":{"miscellaneous/variables.html":{}}}],["numberoffollowers",{"_index":62,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["numberoffollowing",{"_index":63,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["numberofposts",{"_index":64,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["numberofrescuescompleted",{"_index":65,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["numberofrescuescreated",{"_index":66,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["numberofrescuesinprogress",{"_index":67,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["numberquerybuildertype",{"_index":1116,"title":{},"body":{"classes/CustomQueryBuilder.html":{}}}],["o",{"_index":1923,"title":{},"body":{"miscellaneous/variables.html":{}}}],["object",{"_index":523,"title":{},"body":{"interfaces/BaseRoute.html":{},"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"classes/CrudConfigService.html":{},"interfaces/CrudOptions.html":{},"classes/CrudRoutesFactory.html":{},"classes/CrudService.html":{},"classes/CustomQueryBuilder.html":{},"injectables/ExcludeNullUndefinedInterceptor.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ITag.html":{},"interfaces/IUser.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"classes/R.html":{},"interfaces/Response.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"classes/Tag.html":{},"injectables/TagsService.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateTagsDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["object.defineproperty(getmanyresponsedto",{"_index":862,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["object.defineproperty(getoneresponsedto",{"_index":867,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["object.entries(value).map(([key",{"_index":1274,"title":{},"body":{"injectables/ExcludeNullUndefinedInterceptor.html":{}}}],["object.fromentries",{"_index":1272,"title":{},"body":{"injectables/ExcludeNullUndefinedInterceptor.html":{}}}],["object.getownpropertynames(val",{"_index":1899,"title":{},"body":{"miscellaneous/variables.html":{}}}],["object.keys(val",{"_index":1900,"title":{},"body":{"miscellaneous/variables.html":{}}}],["objection",{"_index":447,"title":{},"body":{"classes/BaseModel.html":{},"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"classes/CrudService.html":{},"classes/CustomQueryBuilder.html":{},"modules/DatabaseModule.html":{},"interfaces/IBaseModel.html":{},"interfaces/ITag.html":{},"interfaces/IUser.html":{},"classes/QueryFailedFilter.html":{},"classes/Tag.html":{},"injectables/TagsService.html":{},"classes/UpdateTagsDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"injectables/UsersService.html":{},"classes/ValidationFailedFilter.html":{},"dependencies.html":{}}}],["objection.fetchgraphoptions",{"_index":444,"title":{},"body":{"classes/BaseModel.html":{},"interfaces/IBaseModel.html":{},"classes/Tag.html":{},"classes/User.html":{}}}],["objectliteral",{"_index":1882,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["objkeys",{"_index":801,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["objkeys(swaggermodels",{"_index":824,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["observable",{"_index":1260,"title":{},"body":{"injectables/ExcludeNullUndefinedInterceptor.html":{},"controllers/HealthController.html":{},"guards/RequestGuard.html":{},"interfaces/Response.html":{},"guards/ResponseGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["observer",{"_index":1498,"title":{},"body":{"interfaces/Response.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["occurrence",{"_index":1245,"title":{},"body":{"injectables/ExcludeNullUndefinedInterceptor.html":{}}}],["offset",{"_index":1154,"title":{},"body":{"classes/CustomQueryBuilder.html":{}}}],["ok",{"_index":750,"title":{},"body":{"injectables/CronService.html":{}}}],["onapplicationbootstrap",{"_index":1412,"title":{},"body":{"injectables/PersistedCronService.html":{}}}],["onapplicationshutdown",{"_index":233,"title":{},"body":{"modules/AppModule.html":{},"controllers/HealthController.html":{}}}],["onapplicationshutdown(signal",{"_index":234,"title":{},"body":{"modules/AppModule.html":{},"controllers/HealthController.html":{}}}],["once",{"_index":676,"title":{},"body":{"injectables/CronService.html":{}}}],["one",{"_index":828,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudController.html":{},"classes/CrudRoutesFactory.html":{},"classes/CrudService.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["one.name",{"_index":829,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["oneof",{"_index":849,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["onlycount",{"_index":1121,"title":{},"body":{"classes/CustomQueryBuilder.html":{}}}],["onmoduledestroy",{"_index":296,"title":{},"body":{"modules/AppModule.html":{}}}],["onmoduleinit",{"_index":239,"title":{},"body":{"modules/AppModule.html":{},"controllers/HealthController.html":{}}}],["onw",{"_index":1093,"title":{},"body":{"classes/CrudService.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["open",{"_index":1848,"title":{},"body":{"index.html":{}}}],["operation",{"_index":1376,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["opt",{"_index":441,"title":{},"body":{"classes/BaseModel.html":{},"classes/Tag.html":{},"classes/User.html":{}}}],["optional",{"_index":9,"title":{},"body":{"interfaces/APIResponse.html":{},"classes/ApiException.html":{},"interfaces/AppLaunchAction.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BaseModel.html":{},"classes/CreateUserDto.html":{},"injectables/CronService.html":{},"classes/CrudConfigService.html":{},"classes/CrudController.html":{},"interfaces/CrudOptions.html":{},"classes/CrudRoutesFactory.html":{},"classes/CrudService.html":{},"classes/CustomQueryBuilder.html":{},"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/ExcludeNullUndefinedInterceptor.html":{},"controllers/HealthController.html":{},"interfaces/IBaseModel.html":{},"interfaces/ICrudService.html":{},"interfaces/IPaginationResult.html":{},"interfaces/IUser.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/PaginationParams.html":{},"interfaces/ParamOption.html":{},"injectables/PersistedCronService.html":{},"classes/QueryFailedFilter.html":{},"classes/R.html":{},"guards/RequestGuard.html":{},"guards/ResponseGuard.html":{},"interfaces/Result.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"classes/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/ValidationFailedFilter.html":{},"miscellaneous/functions.html":{}}}],["options",{"_index":443,"title":{},"body":{"classes/BaseModel.html":{},"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"injectables/EmailService.html":{},"interfaces/IBaseModel.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"classes/Tag.html":{},"classes/User.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["order",{"_index":994,"title":{},"body":{"classes/CrudController.html":{},"classes/CrudService.html":{},"interfaces/IPaginationResult.html":{},"classes/PaginationParams.html":{}}}],["ordertype",{"_index":1342,"title":{},"body":{"interfaces/IPaginationResult.html":{},"classes/PaginationParams.html":{},"miscellaneous/enumerations.html":{}}}],["os",{"_index":1293,"title":{},"body":{"controllers/HealthController.html":{}}}],["os.loadavg",{"_index":1320,"title":{},"body":{"controllers/HealthController.html":{}}}],["out",{"_index":228,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CronModule.html":{},"modules/EmailModule.html":{},"modules/EmailSchedulingModule.html":{},"injectables/PersistedCronService.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["override",{"_index":484,"title":{},"body":{"interfaces/BaseRoute.html":{},"classes/CrudConfigService.html":{},"interfaces/CrudOptions.html":{},"classes/CrudRoutesFactory.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["override.ts",{"_index":1242,"title":{},"body":{"injectables/ExcludeNullUndefinedInterceptor.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["override.ts:51",{"_index":1250,"title":{},"body":{"injectables/ExcludeNullUndefinedInterceptor.html":{}}}],["overview",{"_index":1875,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["ownpage",{"_index":89,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["p",{"_index":1351,"title":{},"body":{"interfaces/IPaginationResult.html":{},"classes/PaginationParams.html":{}}}],["pack",{"_index":538,"title":{},"body":{"interfaces/BaseRoute.html":{},"interfaces/CrudOptions.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{}}}],["package",{"_index":1742,"title":{"dependencies.html":{}},"body":{}}],["page",{"_index":14,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/BaseRoute.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"classes/CrudConfigService.html":{},"interfaces/CrudOptions.html":{},"classes/CrudRoutesFactory.html":{},"classes/CrudService.html":{},"classes/CustomQueryBuilder.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/IPaginationResult.html":{},"classes/PaginationParams.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"classes/R.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["pagecount",{"_index":15,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/BaseRoute.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"classes/CrudConfigService.html":{},"interfaces/CrudOptions.html":{},"classes/CrudRoutesFactory.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"classes/R.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["pagequerybuildertype",{"_index":1117,"title":{},"body":{"classes/CustomQueryBuilder.html":{}}}],["pagesize",{"_index":1103,"title":{},"body":{"classes/CrudService.html":{},"interfaces/IPaginationResult.html":{},"classes/PaginationParams.html":{}}}],["paginate",{"_index":1122,"title":{},"body":{"classes/CustomQueryBuilder.html":{}}}],["paginate(page",{"_index":1133,"title":{},"body":{"classes/CustomQueryBuilder.html":{}}}],["paginated",{"_index":846,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/CrudService.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["paginatedfindall",{"_index":1080,"title":{},"body":{"classes/CrudService.html":{},"interfaces/ICrudService.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["paginatedfindall(paginationparams",{"_index":1095,"title":{},"body":{"classes/CrudService.html":{},"interfaces/ICrudService.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["pagination",{"_index":465,"title":{},"body":{"classes/BaseModel.html":{},"classes/CrudController.html":{},"classes/CrudService.html":{},"classes/CustomQueryBuilder.html":{},"interfaces/IBaseModel.html":{},"interfaces/ICrudService.html":{},"interfaces/IPaginationResult.html":{},"classes/PaginationParams.html":{}}}],["paginationparams",{"_index":1004,"title":{"classes/PaginationParams.html":{}},"body":{"classes/CrudController.html":{},"classes/CrudService.html":{},"interfaces/ICrudService.html":{},"interfaces/IPaginationResult.html":{},"classes/PaginationParams.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["paging",{"_index":1034,"title":{},"body":{"classes/CrudController.html":{},"classes/CrudService.html":{},"interfaces/IPaginationResult.html":{},"classes/PaginationParams.html":{}}}],["param",{"_index":756,"title":{},"body":{"injectables/CronService.html":{},"classes/CrudController.html":{},"classes/CrudService.html":{},"classes/CustomQueryBuilder.html":{},"injectables/ExcludeNullUndefinedInterceptor.html":{},"controllers/HealthController.html":{},"classes/QueryFailedFilter.html":{},"guards/RequestGuard.html":{},"interfaces/Response.html":{},"guards/ResponseGuard.html":{},"controllers/TagsController.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/ValidationFailedFilter.html":{}}}],["param('id",{"_index":1565,"title":{},"body":{"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["parameter",{"_index":303,"title":{},"body":{"modules/AppModule.html":{}}}],["parameters",{"_index":149,"title":{},"body":{"classes/ApiException.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BaseModel.html":{},"injectables/CronService.html":{},"classes/CrudConfigService.html":{},"classes/CrudController.html":{},"classes/CrudRoutesFactory.html":{},"classes/CrudService.html":{},"classes/CustomQueryBuilder.html":{},"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/ExcludeNullUndefinedInterceptor.html":{},"controllers/HealthController.html":{},"interfaces/ICrudService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/PersistedCronService.html":{},"classes/QueryFailedFilter.html":{},"classes/R.html":{},"guards/RequestGuard.html":{},"guards/ResponseGuard.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"classes/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/ValidationFailedFilter.html":{},"miscellaneous/functions.html":{}}}],["paramoption",{"_index":502,"title":{"interfaces/ParamOption.html":{}},"body":{"interfaces/BaseRoute.html":{},"interfaces/CrudOptions.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"coverage.html":{}}}],["params",{"_index":516,"title":{},"body":{"interfaces/BaseRoute.html":{},"classes/CrudConfigService.html":{},"interfaces/CrudOptions.html":{},"classes/CrudRoutesFactory.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/IPaginationResult.html":{},"classes/PaginationParams.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["paramsoptions",{"_index":508,"title":{"interfaces/ParamsOptions.html":{}},"body":{"interfaces/BaseRoute.html":{},"interfaces/CrudOptions.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"coverage.html":{}}}],["parentheses",{"_index":637,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/IUser.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["parseint(val",{"_index":1349,"title":{},"body":{"interfaces/IPaginationResult.html":{},"classes/PaginationParams.html":{}}}],["parseintpipe",{"_index":1023,"title":{},"body":{"classes/CrudController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["partial",{"_index":792,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudController.html":{},"classes/CrudRoutesFactory.html":{},"classes/CrudService.html":{},"interfaces/ICrudService.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["partially",{"_index":630,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/IUser.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["partialmodelobject",{"_index":566,"title":{},"body":{"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"interfaces/ITag.html":{},"interfaces/IUser.html":{},"classes/Tag.html":{},"classes/UpdateTagsDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"miscellaneous/typealiases.html":{}}}],["partialtagshape",{"_index":591,"title":{},"body":{"classes/CreateTagsDto.html":{},"interfaces/ITag.html":{},"classes/Tag.html":{},"classes/UpdateTagsDto.html":{},"miscellaneous/typealiases.html":{}}}],["partialtype",{"_index":560,"title":{},"body":{"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"interfaces/ITag.html":{},"interfaces/IUser.html":{},"classes/Tag.html":{},"classes/UpdateTagsDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["partialtype(createtagsdto",{"_index":595,"title":{},"body":{"classes/CreateTagsDto.html":{},"interfaces/ITag.html":{},"classes/Tag.html":{},"classes/UpdateTagsDto.html":{}}}],["partialtype(createuserdto",{"_index":659,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/IUser.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["partialusershape",{"_index":656,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/IUser.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"miscellaneous/typealiases.html":{}}}],["passport",{"_index":1363,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":370,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":1360,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passportstrategy(strategy",{"_index":1366,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["password",{"_index":351,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BaseModel.html":{},"classes/CreateUserDto.html":{},"interfaces/IBaseModel.html":{},"interfaces/IUser.html":{},"injectables/LocalStrategy.html":{},"classes/LoginCredsDto.html":{},"classes/Tag.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"injectables/UsersService.html":{}}}],["passwordfield",{"_index":1378,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["past",{"_index":754,"title":{},"body":{"injectables/CronService.html":{}}}],["path",{"_index":140,"title":{},"body":{"classes/ApiException.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"interfaces/BaseRoute.html":{},"classes/CrudConfigService.html":{},"interfaces/CrudOptions.html":{},"classes/CrudRoutesFactory.html":{},"controllers/EmailSchedulingController.html":{},"interfaces/GetManyDefaultResponse.html":{},"controllers/HealthController.html":{},"classes/LoginCredsDto.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"classes/QueryFailedFilter.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{},"classes/ValidationFailedFilter.html":{},"miscellaneous/functions.html":{}}}],["payload",{"_index":1359,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.email",{"_index":1372,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["perform",{"_index":1375,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["perpage",{"_index":1134,"title":{},"body":{"classes/CustomQueryBuilder.html":{}}}],["persisted",{"_index":667,"title":{},"body":{"modules/CronModule.html":{}}}],["persistedcronservice",{"_index":663,"title":{"injectables/PersistedCronService.html":{}},"body":{"modules/CronModule.html":{},"injectables/PersistedCronService.html":{},"coverage.html":{},"overview.html":{}}}],["pidusage",{"_index":1294,"title":{},"body":{"controllers/HealthController.html":{},"dependencies.html":{}}}],["pieces",{"_index":627,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/IUser.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["pipeline",{"_index":1480,"title":{},"body":{"guards/RequestGuard.html":{},"guards/ResponseGuard.html":{}}}],["places",{"_index":621,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/IUser.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["please",{"_index":1857,"title":{},"body":{"index.html":{}}}],["port",{"_index":268,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["post",{"_index":334,"title":{},"body":{"controllers/AuthController.html":{},"classes/CrudController.html":{},"controllers/EmailSchedulingController.html":{},"classes/LoginCredsDto.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["post(':id",{"_index":1044,"title":{},"body":{"classes/CrudController.html":{}}}],["post('login",{"_index":357,"title":{},"body":{"controllers/AuthController.html":{},"classes/LoginCredsDto.html":{}}}],["post('schedule",{"_index":1198,"title":{},"body":{"controllers/EmailSchedulingController.html":{}}}],["postby",{"_index":90,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["postedby",{"_index":108,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["postedbyuser",{"_index":84,"title":{"interfaces/PostedByUser.html":{}},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{},"coverage.html":{}}}],["postedminago",{"_index":109,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["postid",{"_index":86,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["postimage",{"_index":91,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["posttime",{"_index":92,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["posttype",{"_index":82,"title":{"interfaces/PostType.html":{}},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{},"coverage.html":{}}}],["posttypeid",{"_index":83,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["postvideo",{"_index":93,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["primary",{"_index":506,"title":{},"body":{"interfaces/BaseRoute.html":{},"interfaces/CrudOptions.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{}}}],["private",{"_index":898,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"injectables/EmailService.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["proceed",{"_index":1484,"title":{},"body":{"guards/RequestGuard.html":{},"guards/ResponseGuard.html":{}}}],["process.pid",{"_index":1310,"title":{},"body":{"controllers/HealthController.html":{}}}],["production",{"_index":274,"title":{},"body":{"modules/AppModule.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["profileid",{"_index":117,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["profileimage",{"_index":68,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["profileimageurl",{"_index":118,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["progressive",{"_index":1822,"title":{},"body":{"index.html":{}}}],["project",{"_index":1849,"title":{},"body":{"index.html":{}}}],["promise",{"_index":306,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/CrudController.html":{},"classes/CrudService.html":{},"classes/CustomQueryBuilder.html":{},"interfaces/ICrudService.html":{},"classes/LoginCredsDto.html":{},"guards/RequestGuard.html":{},"guards/ResponseGuard.html":{},"miscellaneous/functions.html":{}}}],["promise.reject",{"_index":406,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/TagsService.html":{}}}],["promise.reject(e",{"_index":1112,"title":{},"body":{"classes/CrudService.html":{}}}],["promise.reject(new",{"_index":412,"title":{},"body":{"injectables/AuthService.html":{},"classes/CrudService.html":{},"injectables/JwtStrategy.html":{},"injectables/UsersService.html":{}}}],["promise.resolve",{"_index":1429,"title":{},"body":{"injectables/PersistedCronService.html":{},"miscellaneous/variables.html":{}}}],["proper",{"_index":995,"title":{},"body":{"classes/CrudController.html":{},"classes/CrudService.html":{}}}],["properties",{"_index":8,"title":{},"body":{"interfaces/APIResponse.html":{},"classes/ApiException.html":{},"interfaces/AppLaunchAction.html":{},"classes/BaseModel.html":{},"interfaces/BaseRoute.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"injectables/CronService.html":{},"classes/CrudConfigService.html":{},"interfaces/CrudOptions.html":{},"classes/CrudRoutesFactory.html":{},"classes/CustomQueryBuilder.html":{},"classes/EmailScheduleDto.html":{},"injectables/EmailSchedulingService.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/IBaseModel.html":{},"interfaces/IPaginationResult.html":{},"interfaces/ITag.html":{},"interfaces/IUser.html":{},"injectables/LocalStrategy.html":{},"classes/LoginCredsDto.html":{},"classes/PaginationParams.html":{},"interfaces/ParamOption.html":{},"injectables/PersistedCronService.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Response.html":{},"interfaces/Result.html":{},"classes/Tag.html":{},"interfaces/TokenPayload.html":{},"classes/UpdateTagsDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["propertydecorator",{"_index":547,"title":{},"body":{"interfaces/BaseRoute.html":{},"interfaces/CrudOptions.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"miscellaneous/functions.html":{}}}],["propertykey",{"_index":549,"title":{},"body":{"interfaces/BaseRoute.html":{},"classes/CrudConfigService.html":{},"interfaces/CrudOptions.html":{},"classes/CrudRoutesFactory.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["protected",{"_index":880,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudController.html":{},"classes/CrudRoutesFactory.html":{},"classes/CrudService.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["provide",{"_index":979,"title":{},"body":{"classes/CrudController.html":{},"classes/CrudService.html":{},"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["provided",{"_index":1009,"title":{},"body":{"classes/CrudController.html":{},"controllers/UsersController.html":{}}}],["providers",{"_index":216,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CronModule.html":{},"modules/DatabaseModule.html":{},"modules/EmailModule.html":{},"modules/EmailSchedulingModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["provides",{"_index":1259,"title":{},"body":{"injectables/ExcludeNullUndefinedInterceptor.html":{},"guards/RequestGuard.html":{},"interfaces/Response.html":{},"guards/ResponseGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["providing",{"_index":1253,"title":{},"body":{"injectables/ExcludeNullUndefinedInterceptor.html":{},"interfaces/Response.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["provision",{"_index":276,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["put",{"_index":1024,"title":{},"body":{"classes/CrudController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["put(':id",{"_index":1048,"title":{},"body":{"classes/CrudController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["q.orwhereraw('lower",{"_index":645,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/IUser.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["query",{"_index":461,"title":{},"body":{"classes/BaseModel.html":{},"interfaces/BaseRoute.html":{},"classes/CreateUserDto.html":{},"classes/CrudConfigService.html":{},"classes/CrudController.html":{},"interfaces/CrudOptions.html":{},"classes/CrudRoutesFactory.html":{},"classes/CustomQueryBuilder.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/IBaseModel.html":{},"interfaces/IUser.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"classes/QueryFailedFilter.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{}}}],["query.offset(offset).limit(size",{"_index":1157,"title":{},"body":{"classes/CustomQueryBuilder.html":{}}}],["query.where((q",{"_index":641,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/IUser.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["query?.alwayspaginate",{"_index":845,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["querybuilder",{"_index":423,"title":{},"body":{"classes/BaseModel.html":{},"classes/CustomQueryBuilder.html":{},"interfaces/IBaseModel.html":{},"classes/Tag.html":{},"classes/User.html":{}}}],["querybuildertype",{"_index":462,"title":{},"body":{"classes/BaseModel.html":{},"interfaces/IBaseModel.html":{}}}],["querycontext",{"_index":439,"title":{},"body":{"classes/BaseModel.html":{},"classes/CreateUserDto.html":{},"interfaces/IBaseModel.html":{},"interfaces/IUser.html":{},"classes/Tag.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["queryfailedfilter",{"_index":1430,"title":{"classes/QueryFailedFilter.html":{}},"body":{"classes/QueryFailedFilter.html":{},"coverage.html":{}}}],["r",{"_index":803,"title":{"classes/R.html":{}},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"coverage.html":{}}}],["r.get(swaggerconst.api_extra_models",{"_index":837,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["r.get(swaggerconst.decorators.api_response",{"_index":839,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["r.set",{"_index":831,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["r.set('crud_options_metadata",{"_index":943,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["r.set('method",{"_index":813,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["r.set('path",{"_index":811,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["r.set(swaggerconst.decorators.api_response",{"_index":835,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["r.setroute(route",{"_index":965,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["range",{"_index":1780,"title":{},"body":{"dependencies.html":{}}}],["rate",{"_index":1773,"title":{},"body":{"dependencies.html":{}}}],["raw",{"_index":448,"title":{},"body":{"classes/BaseModel.html":{},"classes/CrudService.html":{},"interfaces/IBaseModel.html":{}}}],["raw('current_timestamp",{"_index":479,"title":{},"body":{"classes/BaseModel.html":{},"classes/CrudService.html":{},"interfaces/IBaseModel.html":{}}}],["reactionscount",{"_index":94,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["read",{"_index":1858,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":348,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/CrudController.html":{},"classes/CrudService.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"controllers/HealthController.html":{},"interfaces/IPaginationResult.html":{},"interfaces/IUser.html":{},"injectables/JwtStrategy.html":{},"classes/LoginCredsDto.html":{},"classes/PaginationParams.html":{},"injectables/TagsService.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"injectables/UsersService.html":{}}}],["reassign",{"_index":1144,"title":{},"body":{"classes/CustomQueryBuilder.html":{},"controllers/HealthController.html":{},"injectables/UsersService.html":{}}}],["receive",{"_index":990,"title":{},"body":{"classes/CrudController.html":{},"classes/CrudService.html":{}}}],["receives",{"_index":292,"title":{},"body":{"modules/AppModule.html":{}}}],["recipient",{"_index":1187,"title":{},"body":{"classes/EmailScheduleDto.html":{}}}],["record",{"_index":396,"title":{},"body":{"injectables/AuthService.html":{},"classes/BaseModel.html":{},"classes/CrudConfigService.html":{},"classes/CrudController.html":{},"classes/CrudRoutesFactory.html":{},"interfaces/IBaseModel.html":{},"classes/R.html":{},"guards/RequestGuard.html":{},"guards/ResponseGuard.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"classes/Tag.html":{},"classes/User.html":{},"controllers/UsersController.html":{}}}],["record'})@apiresponse({status",{"_index":998,"title":{},"body":{"classes/CrudController.html":{}}}],["record'})@delete(':id",{"_index":1016,"title":{},"body":{"classes/CrudController.html":{}}}],["records",{"_index":1032,"title":{},"body":{"classes/CrudController.html":{},"classes/CustomQueryBuilder.html":{}}}],["records'})@apiresponse({status",{"_index":1005,"title":{},"body":{"classes/CrudController.html":{}}}],["records'})@get",{"_index":1006,"title":{},"body":{"classes/CrudController.html":{}}}],["recuescompletionneeded",{"_index":78,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["recurring",{"_index":673,"title":{},"body":{"injectables/CronService.html":{}}}],["recursively",{"_index":1267,"title":{},"body":{"injectables/ExcludeNullUndefinedInterceptor.html":{},"miscellaneous/functions.html":{}}}],["recursivelystripnullvalues",{"_index":1730,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["recursivelystripnullvalues(value",{"_index":1270,"title":{},"body":{"injectables/ExcludeNullUndefinedInterceptor.html":{},"miscellaneous/functions.html":{}}}],["ref",{"_index":850,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["reference",{"_index":1258,"title":{},"body":{"injectables/ExcludeNullUndefinedInterceptor.html":{},"interfaces/Response.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["reflect",{"_index":1789,"title":{},"body":{"dependencies.html":{}}}],["reflect.definemetadata(metadatakey",{"_index":807,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["reflect.getmetadata(metadatakey",{"_index":808,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["registered",{"_index":295,"title":{},"body":{"modules/AppModule.html":{}}}],["regular",{"_index":669,"title":{},"body":{"injectables/CronService.html":{}}}],["rejected",{"_index":311,"title":{},"body":{"modules/AppModule.html":{}}}],["relation",{"_index":467,"title":{},"body":{"classes/BaseModel.html":{},"interfaces/IBaseModel.html":{}}}],["relationexpression",{"_index":451,"title":{},"body":{"classes/BaseModel.html":{},"interfaces/IBaseModel.html":{}}}],["remove",{"_index":986,"title":{},"body":{"classes/CrudController.html":{},"classes/CrudService.html":{},"interfaces/ICrudService.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["remove(@param('id",{"_index":1042,"title":{},"body":{"classes/CrudController.html":{}}}],["remove(id",{"_index":1013,"title":{},"body":{"classes/CrudController.html":{},"classes/CrudService.html":{},"interfaces/ICrudService.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["replace",{"_index":527,"title":{},"body":{"interfaces/BaseRoute.html":{},"interfaces/CrudOptions.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{}}}],["replaceonebase",{"_index":498,"title":{},"body":{"interfaces/BaseRoute.html":{},"interfaces/CrudOptions.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"miscellaneous/typealiases.html":{}}}],["repository",{"_index":1831,"title":{},"body":{"index.html":{}}}],["representing",{"_index":1261,"title":{},"body":{"injectables/ExcludeNullUndefinedInterceptor.html":{},"interfaces/Response.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["req",{"_index":332,"title":{},"body":{"controllers/AuthController.html":{},"classes/LoginCredsDto.html":{}}}],["request",{"_index":190,"title":{},"body":{"classes/ApiException.html":{},"controllers/AuthController.html":{},"classes/LoginCredsDto.html":{},"classes/QueryFailedFilter.html":{},"guards/RequestGuard.html":{},"guards/ResponseGuard.html":{},"injectables/TimeoutInterceptor.html":{},"classes/ValidationFailedFilter.html":{}}}],["request.all",{"_index":1496,"title":{},"body":{"guards/RequestGuard.html":{}}}],["request.body",{"_index":1488,"title":{},"body":{"guards/RequestGuard.html":{}}}],["request.params",{"_index":1489,"title":{},"body":{"guards/RequestGuard.html":{}}}],["request.query",{"_index":1487,"title":{},"body":{"guards/RequestGuard.html":{}}}],["request.url",{"_index":1460,"title":{},"body":{"classes/QueryFailedFilter.html":{},"classes/ValidationFailedFilter.html":{}}}],["requestguard",{"_index":1468,"title":{"guards/RequestGuard.html":{}},"body":{"guards/RequestGuard.html":{},"coverage.html":{}}}],["requestmethod",{"_index":486,"title":{},"body":{"interfaces/BaseRoute.html":{},"classes/CrudConfigService.html":{},"interfaces/CrudOptions.html":{},"classes/CrudRoutesFactory.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["requestmethod.get",{"_index":913,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["requesttimeoutexception",{"_index":1595,"title":{},"body":{"injectables/TimeoutInterceptor.html":{}}}],["require",{"_index":537,"title":{},"body":{"interfaces/BaseRoute.html":{},"interfaces/CrudOptions.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{}}}],["require(path",{"_index":539,"title":{},"body":{"interfaces/BaseRoute.html":{},"interfaces/CrudOptions.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{}}}],["require,@typescript",{"_index":532,"title":{},"body":{"interfaces/BaseRoute.html":{},"interfaces/CrudOptions.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{}}}],["required",{"_index":272,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"interfaces/ITag.html":{},"interfaces/IUser.html":{},"classes/Tag.html":{},"classes/UpdateTagsDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"miscellaneous/variables.html":{}}}],["requires,import/no",{"_index":535,"title":{},"body":{"interfaces/BaseRoute.html":{},"interfaces/CrudOptions.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{}}}],["rescuedate",{"_index":110,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["rescuedpetname",{"_index":112,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["rescueid",{"_index":103,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["rescuelists",{"_index":122,"title":{"interfaces/RescueLists.html":{}},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{},"coverage.html":{}}}],["rescuelocality",{"_index":113,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["rescuer",{"_index":69,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["rescuers",{"_index":114,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["rescues",{"_index":102,"title":{"interfaces/Rescues.html":{}},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{},"coverage.html":{}}}],["rescuestatus",{"_index":120,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["reset",{"_index":227,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CronModule.html":{},"modules/EmailModule.html":{},"modules/EmailSchedulingModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["resolved",{"_index":310,"title":{},"body":{"modules/AppModule.html":{}}}],["resourcename",{"_index":859,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["resourcename}responsedto",{"_index":868,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["response",{"_index":40,"title":{"interfaces/Response.html":{}},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"injectables/ExcludeNullUndefinedInterceptor.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/IPaginationResult.html":{},"classes/PaginationParams.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"classes/QueryFailedFilter.html":{},"classes/R.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Response.html":{},"guards/ResponseGuard.html":{},"interfaces/Result.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{},"classes/ValidationFailedFilter.html":{},"coverage.html":{}}}],["response.error",{"_index":1521,"title":{},"body":{"guards/ResponseGuard.html":{}}}],["response.nocontent",{"_index":1525,"title":{},"body":{"guards/ResponseGuard.html":{}}}],["response.status(204).end",{"_index":1518,"title":{},"body":{"guards/ResponseGuard.html":{}}}],["response.status(status).json",{"_index":1459,"title":{},"body":{"classes/QueryFailedFilter.html":{},"guards/ResponseGuard.html":{},"classes/ValidationFailedFilter.html":{}}}],["response.success",{"_index":1522,"title":{},"body":{"guards/ResponseGuard.html":{}}}],["response.withmeta",{"_index":1523,"title":{},"body":{"guards/ResponseGuard.html":{}}}],["responseguard",{"_index":1501,"title":{"guards/ResponseGuard.html":{}},"body":{"guards/ResponseGuard.html":{},"coverage.html":{}}}],["restarts",{"_index":1406,"title":{},"body":{"injectables/PersistedCronService.html":{}}}],["restored",{"_index":1408,"title":{},"body":{"injectables/PersistedCronService.html":{}}}],["restricted",{"_index":1491,"title":{},"body":{"guards/RequestGuard.html":{}}}],["result",{"_index":37,"title":{"interfaces/Result.html":{}},"body":{"interfaces/APIResponse.html":{},"classes/ApiException.html":{},"controllers/AppController.html":{},"interfaces/AppLaunchAction.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseModel.html":{},"interfaces/BaseRoute.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"modules/CronModule.html":{},"injectables/CronService.html":{},"classes/CrudConfigService.html":{},"classes/CrudController.html":{},"interfaces/CrudOptions.html":{},"classes/CrudRoutesFactory.html":{},"classes/CrudService.html":{},"classes/CustomQueryBuilder.html":{},"modules/DatabaseModule.html":{},"modules/EmailModule.html":{},"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"modules/EmailSchedulingModule.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/ExcludeNullUndefinedInterceptor.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"controllers/HealthController.html":{},"interfaces/IBaseModel.html":{},"interfaces/ICrudService.html":{},"interfaces/IPaginationResult.html":{},"interfaces/ITag.html":{},"interfaces/IUser.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginCredsDto.html":{},"classes/PaginationParams.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"injectables/PersistedCronService.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"classes/QueryFailedFilter.html":{},"classes/R.html":{},"guards/RequestGuard.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Response.html":{},"guards/ResponseGuard.html":{},"interfaces/Result.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"classes/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"injectables/TimeoutInterceptor.html":{},"interfaces/TokenPayload.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateTagsDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/ValidationFailedFilter.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["result.results",{"_index":1150,"title":{},"body":{"classes/CustomQueryBuilder.html":{}}}],["result.total",{"_index":1149,"title":{},"body":{"classes/CustomQueryBuilder.html":{}}}],["result[0].c",{"_index":1152,"title":{},"body":{"classes/CustomQueryBuilder.html":{}}}],["results",{"_index":28,"title":{},"body":{"interfaces/APIResponse.html":{},"classes/ApiException.html":{},"controllers/AppController.html":{},"interfaces/AppLaunchAction.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseModel.html":{},"interfaces/BaseRoute.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"modules/CronModule.html":{},"injectables/CronService.html":{},"classes/CrudConfigService.html":{},"classes/CrudController.html":{},"interfaces/CrudOptions.html":{},"classes/CrudRoutesFactory.html":{},"classes/CrudService.html":{},"classes/CustomQueryBuilder.html":{},"modules/DatabaseModule.html":{},"modules/EmailModule.html":{},"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"modules/EmailSchedulingModule.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/ExcludeNullUndefinedInterceptor.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"controllers/HealthController.html":{},"interfaces/IBaseModel.html":{},"interfaces/ICrudService.html":{},"interfaces/IPaginationResult.html":{},"interfaces/ITag.html":{},"interfaces/IUser.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginCredsDto.html":{},"classes/PaginationParams.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"injectables/PersistedCronService.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"classes/QueryFailedFilter.html":{},"classes/R.html":{},"guards/RequestGuard.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Response.html":{},"guards/ResponseGuard.html":{},"interfaces/Result.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"classes/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"injectables/TimeoutInterceptor.html":{},"interfaces/TokenPayload.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateTagsDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/ValidationFailedFilter.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["retention",{"_index":1298,"title":{},"body":{"controllers/HealthController.html":{}}}],["return",{"_index":186,"title":{},"body":{"classes/ApiException.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BaseModel.html":{},"interfaces/BaseRoute.html":{},"classes/CreateUserDto.html":{},"injectables/CronService.html":{},"classes/CrudConfigService.html":{},"classes/CrudController.html":{},"interfaces/CrudOptions.html":{},"classes/CrudRoutesFactory.html":{},"classes/CrudService.html":{},"classes/CustomQueryBuilder.html":{},"modules/DatabaseModule.html":{},"injectables/ExcludeNullUndefinedInterceptor.html":{},"interfaces/GetManyDefaultResponse.html":{},"controllers/HealthController.html":{},"interfaces/IBaseModel.html":{},"interfaces/IUser.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginCredsDto.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"injectables/PersistedCronService.html":{},"classes/R.html":{},"guards/RequestGuard.html":{},"interfaces/Response.html":{},"guards/ResponseGuard.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["returndeleted",{"_index":513,"title":{},"body":{"interfaces/BaseRoute.html":{},"interfaces/CrudOptions.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{}}}],["returns",{"_index":202,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BaseModel.html":{},"injectables/CronService.html":{},"classes/CrudConfigService.html":{},"classes/CrudController.html":{},"classes/CrudRoutesFactory.html":{},"classes/CrudService.html":{},"classes/CustomQueryBuilder.html":{},"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/ExcludeNullUndefinedInterceptor.html":{},"controllers/HealthController.html":{},"interfaces/ICrudService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/PersistedCronService.html":{},"classes/QueryFailedFilter.html":{},"classes/R.html":{},"guards/RequestGuard.html":{},"guards/ResponseGuard.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"classes/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/ValidationFailedFilter.html":{},"miscellaneous/functions.html":{}}}],["reusable",{"_index":618,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/IUser.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["rimraf",{"_index":1791,"title":{},"body":{"dependencies.html":{}}}],["route",{"_index":1255,"title":{},"body":{"injectables/ExcludeNullUndefinedInterceptor.html":{},"classes/R.html":{},"interfaces/Response.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["route.enable",{"_index":964,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["route.method",{"_index":814,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["route.override",{"_index":963,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["route.path",{"_index":812,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["routes",{"_index":512,"title":{},"body":{"interfaces/BaseRoute.html":{},"interfaces/CrudOptions.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{}}}],["routes.factory.ts",{"_index":789,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"coverage.html":{}}}],["routes.factory.ts:161",{"_index":1528,"title":{},"body":{"classes/SerializeHelper.html":{}}}],["routes.factory.ts:188",{"_index":1529,"title":{},"body":{"classes/SerializeHelper.html":{}}}],["routes.factory.ts:20",{"_index":1465,"title":{},"body":{"classes/R.html":{}}}],["routes.factory.ts:201",{"_index":793,"title":{},"body":{"classes/CrudConfigService.html":{}}}],["routes.factory.ts:207",{"_index":795,"title":{},"body":{"classes/CrudConfigService.html":{}}}],["routes.factory.ts:221",{"_index":1058,"title":{},"body":{"classes/CrudRoutesFactory.html":{}}}],["routes.factory.ts:223",{"_index":1057,"title":{},"body":{"classes/CrudRoutesFactory.html":{}}}],["routes.factory.ts:239",{"_index":1059,"title":{},"body":{"classes/CrudRoutesFactory.html":{}}}],["routes.factory.ts:243",{"_index":1070,"title":{},"body":{"classes/CrudRoutesFactory.html":{}}}],["routes.factory.ts:248",{"_index":1072,"title":{},"body":{"classes/CrudRoutesFactory.html":{}}}],["routes.factory.ts:252",{"_index":1074,"title":{},"body":{"classes/CrudRoutesFactory.html":{}}}],["routes.factory.ts:256",{"_index":1060,"title":{},"body":{"classes/CrudRoutesFactory.html":{}}}],["routes.factory.ts:264",{"_index":1063,"title":{},"body":{"classes/CrudRoutesFactory.html":{}}}],["routes.factory.ts:270",{"_index":1064,"title":{},"body":{"classes/CrudRoutesFactory.html":{}}}],["routes.factory.ts:276",{"_index":1065,"title":{},"body":{"classes/CrudRoutesFactory.html":{}}}],["routes.factory.ts:297",{"_index":1066,"title":{},"body":{"classes/CrudRoutesFactory.html":{}}}],["routes.factory.ts:33",{"_index":1463,"title":{},"body":{"classes/R.html":{}}}],["routes.factory.ts:349",{"_index":1067,"title":{},"body":{"classes/CrudRoutesFactory.html":{}}}],["routes.factory.ts:381",{"_index":1062,"title":{},"body":{"classes/CrudRoutesFactory.html":{}}}],["routes.factory.ts:389",{"_index":1061,"title":{},"body":{"classes/CrudRoutesFactory.html":{}}}],["routes.factory.ts:400",{"_index":1068,"title":{},"body":{"classes/CrudRoutesFactory.html":{}}}],["routes.factory.ts:43",{"_index":1466,"title":{},"body":{"classes/R.html":{}}}],["routes.factory.ts:53",{"_index":1538,"title":{},"body":{"classes/Swagger.html":{}}}],["routes.factory.ts:77",{"_index":1539,"title":{},"body":{"classes/Swagger.html":{}}}],["routes.factory.ts:83",{"_index":1536,"title":{},"body":{"classes/Swagger.html":{}}}],["routes.factory.ts:89",{"_index":1537,"title":{},"body":{"classes/Swagger.html":{}}}],["routes.factory.ts:95",{"_index":1535,"title":{},"body":{"classes/Swagger.html":{}}}],["routesschema",{"_index":899,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["routesschema.foreach((route",{"_index":962,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["run",{"_index":672,"title":{},"body":{"injectables/CronService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["run(boot",{"_index":1811,"title":{},"body":{"miscellaneous/functions.html":{}}}],["rxjs",{"_index":1264,"title":{},"body":{"injectables/ExcludeNullUndefinedInterceptor.html":{},"controllers/HealthController.html":{},"guards/RequestGuard.html":{},"interfaces/Response.html":{},"guards/ResponseGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":1266,"title":{},"body":{"injectables/ExcludeNullUndefinedInterceptor.html":{},"controllers/HealthController.html":{},"interfaces/Response.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["saferequire",{"_index":1709,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["saferequire('@nestjs/swagger",{"_index":543,"title":{},"body":{"interfaces/BaseRoute.html":{},"interfaces/CrudOptions.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"miscellaneous/variables.html":{}}}],["saferequire('@nestjs/swagger/dist/constants",{"_index":545,"title":{},"body":{"interfaces/BaseRoute.html":{},"interfaces/CrudOptions.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"miscellaneous/variables.html":{}}}],["saferequire(path",{"_index":529,"title":{},"body":{"interfaces/BaseRoute.html":{},"interfaces/CrudOptions.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"miscellaneous/functions.html":{}}}],["salt",{"_index":431,"title":{},"body":{"classes/BaseModel.html":{},"interfaces/IBaseModel.html":{},"classes/Tag.html":{},"classes/User.html":{}}}],["saved",{"_index":1423,"title":{},"body":{"injectables/PersistedCronService.html":{}}}],["scalable",{"_index":1827,"title":{},"body":{"index.html":{}}}],["schedule",{"_index":701,"title":{},"body":{"injectables/CronService.html":{},"injectables/PersistedCronService.html":{}}}],["scheduled",{"_index":711,"title":{},"body":{"injectables/CronService.html":{}}}],["scheduleemail",{"_index":1196,"title":{},"body":{"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{}}}],["scheduleemail(@body",{"_index":1207,"title":{},"body":{"controllers/EmailSchedulingController.html":{}}}],["scheduleemail(emailschedule",{"_index":1197,"title":{},"body":{"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{}}}],["schedulemodule",{"_index":243,"title":{},"body":{"modules/AppModule.html":{}}}],["schedulemodule.forroot",{"_index":287,"title":{},"body":{"modules/AppModule.html":{}}}],["scheduler",{"_index":696,"title":{},"body":{"injectables/CronService.html":{},"injectables/EmailSchedulingService.html":{}}}],["schedulerregistry",{"_index":694,"title":{},"body":{"injectables/CronService.html":{},"injectables/EmailSchedulingService.html":{},"injectables/PersistedCronService.html":{}}}],["scheduling",{"_index":1206,"title":{},"body":{"controllers/EmailSchedulingController.html":{},"modules/EmailSchedulingModule.html":{}}}],["schema",{"_index":572,"title":{},"body":{"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"interfaces/ITag.html":{},"interfaces/IUser.html":{},"classes/QueryFailedFilter.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"classes/Tag.html":{},"classes/UpdateTagsDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["searchbyname(query",{"_index":634,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/IUser.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["second",{"_index":747,"title":{},"body":{"injectables/CronService.html":{},"controllers/HealthController.html":{}}}],["seconds",{"_index":698,"title":{},"body":{"injectables/CronService.html":{}}}],["secret",{"_index":377,"title":{},"body":{"modules/AuthModule.html":{}}}],["secretorkey",{"_index":1369,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["seed",{"_index":1723,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["seed(knex",{"_index":1819,"title":{},"body":{"miscellaneous/functions.html":{}}}],["semi",{"_index":623,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/IUser.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["sendmail",{"_index":1232,"title":{},"body":{"injectables/EmailService.html":{}}}],["sendmail(options",{"_index":1235,"title":{},"body":{"injectables/EmailService.html":{}}}],["sequence",{"_index":298,"title":{},"body":{"modules/AppModule.html":{}}}],["serialize",{"_index":521,"title":{},"body":{"interfaces/BaseRoute.html":{},"classes/CrudConfigService.html":{},"interfaces/CrudOptions.html":{},"classes/CrudRoutesFactory.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["serializehelper",{"_index":857,"title":{"classes/SerializeHelper.html":{}},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"coverage.html":{}}}],["serializehelper.creategetmanydto",{"_index":929,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["serializehelper.creategetmanydto(this.swaggermodels.get",{"_index":951,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["serializehelper.creategetoneresponsedto(this.modelname",{"_index":947,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["server",{"_index":192,"title":{},"body":{"classes/ApiException.html":{},"injectables/PersistedCronService.html":{},"index.html":{}}}],["service",{"_index":992,"title":{},"body":{"classes/CrudController.html":{},"classes/CrudService.html":{},"injectables/PersistedCronService.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["services",{"_index":1077,"title":{},"body":{"classes/CrudService.html":{},"interfaces/ICrudService.html":{}}}],["session",{"_index":1388,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["set",{"_index":804,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["set(metadatakey",{"_index":1464,"title":{},"body":{"classes/R.html":{}}}],["setextramodels",{"_index":1532,"title":{},"body":{"classes/Swagger.html":{}}}],["setextramodels(swaggermodels",{"_index":819,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["setinterval(callback",{"_index":774,"title":{},"body":{"injectables/CronService.html":{}}}],["setresponsemodels",{"_index":945,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["setresponseok",{"_index":1533,"title":{},"body":{"classes/Swagger.html":{}}}],["setresponseok(metadata",{"_index":834,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["setroute",{"_index":1461,"title":{},"body":{"classes/R.html":{}}}],["setroute(route",{"_index":809,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["sets",{"_index":815,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["setswaggerresponseok",{"_index":1054,"title":{},"body":{"classes/CrudRoutesFactory.html":{}}}],["setswaggerresponseok(name",{"_index":970,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["settimeout(callback",{"_index":783,"title":{},"body":{"injectables/CronService.html":{}}}],["setting",{"_index":79,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["setupinfra",{"_index":1732,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["setupinfra(app",{"_index":1813,"title":{},"body":{"miscellaneous/functions.html":{}}}],["setupmiddlewares",{"_index":1733,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["setupmiddlewares(app",{"_index":1814,"title":{},"body":{"miscellaneous/functions.html":{}}}],["setupswaggerdocs",{"_index":1734,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["setupswaggerdocs(app",{"_index":1815,"title":{},"body":{"miscellaneous/functions.html":{}}}],["shadow",{"_index":1273,"title":{},"body":{"injectables/ExcludeNullUndefinedInterceptor.html":{}}}],["showmycontacts",{"_index":80,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["showmynumber",{"_index":119,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["showremoveoption",{"_index":131,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["shutdown",{"_index":322,"title":{},"body":{"modules/AppModule.html":{},"controllers/HealthController.html":{}}}],["side",{"_index":1828,"title":{},"body":{"index.html":{}}}],["sign",{"_index":1939,"title":{},"body":{"miscellaneous/variables.html":{}}}],["signal",{"_index":236,"title":{},"body":{"modules/AppModule.html":{},"controllers/HealthController.html":{}}}],["signasync",{"_index":1940,"title":{},"body":{"miscellaneous/variables.html":{}}}],["signoptions",{"_index":379,"title":{},"body":{"modules/AuthModule.html":{}}}],["simply",{"_index":635,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/IUser.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["singlequerybuildertype",{"_index":1118,"title":{},"body":{"classes/CustomQueryBuilder.html":{}}}],["size",{"_index":1128,"title":{},"body":{"classes/CustomQueryBuilder.html":{},"interfaces/IPaginationResult.html":{},"classes/PaginationParams.html":{}}}],["snippets",{"_index":619,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/IUser.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["socket.io",{"_index":1754,"title":{},"body":{"dependencies.html":{}}}],["soft",{"_index":1014,"title":{},"body":{"classes/CrudController.html":{},"classes/CrudService.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["something",{"_index":1512,"title":{},"body":{"guards/ResponseGuard.html":{}}}],["source",{"_index":4,"title":{},"body":{"interfaces/APIResponse.html":{},"classes/ApiException.html":{},"controllers/AppController.html":{},"interfaces/AppLaunchAction.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseModel.html":{},"interfaces/BaseRoute.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"modules/CronModule.html":{},"injectables/CronService.html":{},"classes/CrudConfigService.html":{},"classes/CrudController.html":{},"interfaces/CrudOptions.html":{},"classes/CrudRoutesFactory.html":{},"classes/CrudService.html":{},"classes/CustomQueryBuilder.html":{},"modules/DatabaseModule.html":{},"modules/EmailModule.html":{},"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"modules/EmailSchedulingModule.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/ExcludeNullUndefinedInterceptor.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"controllers/HealthController.html":{},"interfaces/IBaseModel.html":{},"interfaces/ICrudService.html":{},"interfaces/IPaginationResult.html":{},"interfaces/ITag.html":{},"interfaces/IUser.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginCredsDto.html":{},"classes/PaginationParams.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"injectables/PersistedCronService.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"classes/QueryFailedFilter.html":{},"classes/R.html":{},"guards/RequestGuard.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Response.html":{},"guards/ResponseGuard.html":{},"interfaces/Result.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"classes/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"injectables/TimeoutInterceptor.html":{},"interfaces/TokenPayload.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateTagsDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/ValidationFailedFilter.html":{},"dependencies.html":{},"index.html":{}}}],["specified",{"_index":674,"title":{},"body":{"injectables/CronService.html":{}}}],["split",{"_index":626,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/IUser.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["sponsors",{"_index":1852,"title":{},"body":{"index.html":{}}}],["sqlite3",{"_index":1170,"title":{},"body":{"modules/DatabaseModule.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["src/.../01",{"_index":1809,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../02",{"_index":1810,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../20190609143930_createtag.ts",{"_index":1805,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../20190609143930_createuser.ts",{"_index":1806,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../api",{"_index":1802,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../app.module.ts",{"_index":1889,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../checks.util.ts",{"_index":1893,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../crud.decorator.ts",{"_index":1890,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../database.module.ts",{"_index":1891,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../domain.ts",{"_index":1881,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../helpers.ts",{"_index":1807,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../main.ts",{"_index":1804,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../mocks.ts",{"_index":1894,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../moment",{"_index":1895,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../null",{"_index":1808,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../obj.util.ts",{"_index":1892,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../object",{"_index":1883,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../other.ts",{"_index":1803,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../pagination.ts",{"_index":1800,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../tag.model.ts",{"_index":1885,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../user.model.ts",{"_index":1886,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/app.controller.ts",{"_index":198,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:9",{"_index":201,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":229,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app.module.ts:69",{"_index":240,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.module.ts:73",{"_index":235,"title":{},"body":{"modules/AppModule.html":{}}}],["src/auth/auth.controller.ts",{"_index":324,"title":{},"body":{"controllers/AuthController.html":{},"classes/LoginCredsDto.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:14",{"_index":1393,"title":{},"body":{"classes/LoginCredsDto.html":{}}}],["src/auth/auth.controller.ts:18",{"_index":1395,"title":{},"body":{"classes/LoginCredsDto.html":{}}}],["src/auth/auth.controller.ts:33",{"_index":331,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module.ts",{"_index":366,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":384,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:15",{"_index":393,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:19",{"_index":397,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:23",{"_index":401,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:39",{"_index":399,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:9",{"_index":390,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/jwt.strategy.ts",{"_index":1353,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/auth/jwt.strategy.ts:11",{"_index":1355,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/jwt.strategy.ts:23",{"_index":1358,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/local.strategy.ts",{"_index":1377,"title":{},"body":{"injectables/LocalStrategy.html":{},"coverage.html":{}}}],["src/auth/local.strategy.ts:10",{"_index":1384,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/auth/local.strategy.ts:12",{"_index":1381,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/auth/local.strategy.ts:22",{"_index":1383,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/auth/spec/mocks.ts",{"_index":1670,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/tokenpayload.interface.ts",{"_index":1605,"title":{},"body":{"interfaces/TokenPayload.html":{},"coverage.html":{}}}],["src/base/crud/crud.controller.ts",{"_index":976,"title":{},"body":{"classes/CrudController.html":{},"coverage.html":{}}}],["src/base/crud/crud.controller.ts:102",{"_index":1017,"title":{},"body":{"classes/CrudController.html":{}}}],["src/base/crud/crud.controller.ts:124",{"_index":1001,"title":{},"body":{"classes/CrudController.html":{}}}],["src/base/crud/crud.controller.ts:146",{"_index":1022,"title":{},"body":{"classes/CrudController.html":{}}}],["src/base/crud/crud.controller.ts:26",{"_index":989,"title":{},"body":{"classes/CrudController.html":{}}}],["src/base/crud/crud.controller.ts:45",{"_index":1007,"title":{},"body":{"classes/CrudController.html":{}}}],["src/base/crud/crud.controller.ts:72",{"_index":1012,"title":{},"body":{"classes/CrudController.html":{}}}],["src/base/crud/crud.service.interface.ts",{"_index":1324,"title":{},"body":{"interfaces/ICrudService.html":{},"coverage.html":{}}}],["src/base/crud/crud.service.interface.ts:10",{"_index":1328,"title":{},"body":{"interfaces/ICrudService.html":{}}}],["src/base/crud/crud.service.interface.ts:15",{"_index":1330,"title":{},"body":{"interfaces/ICrudService.html":{}}}],["src/base/crud/crud.service.interface.ts:20",{"_index":1329,"title":{},"body":{"interfaces/ICrudService.html":{}}}],["src/base/crud/crud.service.interface.ts:25",{"_index":1331,"title":{},"body":{"interfaces/ICrudService.html":{}}}],["src/base/crud/crud.service.interface.ts:32",{"_index":1332,"title":{},"body":{"interfaces/ICrudService.html":{}}}],["src/base/crud/crud.service.interface.ts:37",{"_index":1327,"title":{},"body":{"interfaces/ICrudService.html":{}}}],["src/base/crud/crud.service.interface.ts:42",{"_index":1333,"title":{},"body":{"interfaces/ICrudService.html":{}}}],["src/base/crud/crud.service.ts",{"_index":1076,"title":{},"body":{"classes/CrudService.html":{},"coverage.html":{}}}],["src/base/crud/crud.service.ts:112",{"_index":1099,"title":{},"body":{"classes/CrudService.html":{}}}],["src/base/crud/crud.service.ts:15",{"_index":1083,"title":{},"body":{"classes/CrudService.html":{}}}],["src/base/crud/crud.service.ts:27",{"_index":1086,"title":{},"body":{"classes/CrudService.html":{}}}],["src/base/crud/crud.service.ts:38",{"_index":1096,"title":{},"body":{"classes/CrudService.html":{}}}],["src/base/crud/crud.service.ts:56",{"_index":1090,"title":{},"body":{"classes/CrudService.html":{}}}],["src/base/crud/crud.service.ts:67",{"_index":1094,"title":{},"body":{"classes/CrudService.html":{}}}],["src/base/crud/crud.service.ts:78",{"_index":1092,"title":{},"body":{"classes/CrudService.html":{}}}],["src/base/crud/crud.service.ts:89",{"_index":1097,"title":{},"body":{"classes/CrudService.html":{}}}],["src/base/crud/crud.service.ts:99",{"_index":1084,"title":{},"body":{"classes/CrudService.html":{}}}],["src/base/crud/pagination.ts",{"_index":1334,"title":{},"body":{"interfaces/IPaginationResult.html":{},"classes/PaginationParams.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/base/crud/pagination.ts:25",{"_index":1400,"title":{},"body":{"classes/PaginationParams.html":{}}}],["src/base/crud/pagination.ts:34",{"_index":1401,"title":{},"body":{"classes/PaginationParams.html":{}}}],["src/base/crud/pagination.ts:41",{"_index":1397,"title":{},"body":{"classes/PaginationParams.html":{}}}],["src/base/moment",{"_index":1679,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/base/swagger",{"_index":136,"title":{},"body":{"classes/ApiException.html":{},"interfaces/BaseRoute.html":{},"classes/CrudConfigService.html":{},"interfaces/CrudOptions.html":{},"classes/CrudRoutesFactory.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/cron/cron.module.ts",{"_index":664,"title":{},"body":{"modules/CronModule.html":{}}}],["src/cron/cron.service.ts",{"_index":668,"title":{},"body":{"injectables/CronService.html":{},"coverage.html":{}}}],["src/cron/cron.service.ts:112",{"_index":710,"title":{},"body":{"injectables/CronService.html":{}}}],["src/cron/cron.service.ts:126",{"_index":729,"title":{},"body":{"injectables/CronService.html":{}}}],["src/cron/cron.service.ts:136",{"_index":705,"title":{},"body":{"injectables/CronService.html":{}}}],["src/cron/cron.service.ts:151",{"_index":713,"title":{},"body":{"injectables/CronService.html":{}}}],["src/cron/cron.service.ts:164",{"_index":731,"title":{},"body":{"injectables/CronService.html":{}}}],["src/cron/cron.service.ts:174",{"_index":708,"title":{},"body":{"injectables/CronService.html":{}}}],["src/cron/cron.service.ts:187",{"_index":715,"title":{},"body":{"injectables/CronService.html":{}}}],["src/cron/cron.service.ts:22",{"_index":734,"title":{},"body":{"injectables/CronService.html":{}}}],["src/cron/cron.service.ts:24",{"_index":737,"title":{},"body":{"injectables/CronService.html":{}}}],["src/cron/cron.service.ts:26",{"_index":739,"title":{},"body":{"injectables/CronService.html":{}}}],["src/cron/cron.service.ts:28",{"_index":695,"title":{},"body":{"injectables/CronService.html":{}}}],["src/cron/cron.service.ts:32",{"_index":717,"title":{},"body":{"injectables/CronService.html":{}}}],["src/cron/cron.service.ts:38",{"_index":721,"title":{},"body":{"injectables/CronService.html":{}}}],["src/cron/cron.service.ts:52",{"_index":724,"title":{},"body":{"injectables/CronService.html":{}}}],["src/cron/cron.service.ts:63",{"_index":727,"title":{},"body":{"injectables/CronService.html":{}}}],["src/cron/cron.service.ts:76",{"_index":728,"title":{},"body":{"injectables/CronService.html":{}}}],["src/cron/cron.service.ts:97",{"_index":699,"title":{},"body":{"injectables/CronService.html":{}}}],["src/cron/persisted",{"_index":1404,"title":{},"body":{"injectables/PersistedCronService.html":{},"coverage.html":{}}}],["src/database/database.module.ts",{"_index":1161,"title":{},"body":{"modules/DatabaseModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/database/migrations/20190609143930_createtag.ts",{"_index":1714,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/database/migrations/20190609143930_createuser.ts",{"_index":1717,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/database/models/base.model.ts",{"_index":417,"title":{},"body":{"classes/BaseModel.html":{},"interfaces/IBaseModel.html":{},"coverage.html":{}}}],["src/database/models/base.model.ts:25",{"_index":432,"title":{},"body":{"classes/BaseModel.html":{}}}],["src/database/models/base.model.ts:35",{"_index":435,"title":{},"body":{"classes/BaseModel.html":{}}}],["src/database/models/base.model.ts:37",{"_index":433,"title":{},"body":{"classes/BaseModel.html":{}}}],["src/database/models/base.model.ts:39",{"_index":427,"title":{},"body":{"classes/BaseModel.html":{}}}],["src/database/models/base.model.ts:41",{"_index":436,"title":{},"body":{"classes/BaseModel.html":{}}}],["src/database/models/base.model.ts:43",{"_index":428,"title":{},"body":{"classes/BaseModel.html":{}}}],["src/database/models/base.model.ts:47",{"_index":445,"title":{},"body":{"classes/BaseModel.html":{}}}],["src/database/models/base.model.ts:60",{"_index":440,"title":{},"body":{"classes/BaseModel.html":{}}}],["src/database/models/helpers.ts",{"_index":1114,"title":{},"body":{"classes/CustomQueryBuilder.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/database/models/helpers.ts:37",{"_index":1123,"title":{},"body":{"classes/CustomQueryBuilder.html":{}}}],["src/database/models/helpers.ts:39",{"_index":1126,"title":{},"body":{"classes/CustomQueryBuilder.html":{}}}],["src/database/models/helpers.ts:41",{"_index":1124,"title":{},"body":{"classes/CustomQueryBuilder.html":{}}}],["src/database/models/helpers.ts:43",{"_index":1125,"title":{},"body":{"classes/CustomQueryBuilder.html":{}}}],["src/database/models/helpers.ts:45",{"_index":1135,"title":{},"body":{"classes/CustomQueryBuilder.html":{}}}],["src/database/models/helpers.ts:61",{"_index":1132,"title":{},"body":{"classes/CustomQueryBuilder.html":{}}}],["src/database/models/helpers.ts:70",{"_index":1131,"title":{},"body":{"classes/CustomQueryBuilder.html":{}}}],["src/database/models/helpers.ts:75",{"_index":1129,"title":{},"body":{"classes/CustomQueryBuilder.html":{}}}],["src/database/seeds/01",{"_index":1721,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/database/seeds/02",{"_index":1724,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/domain.ts",{"_index":6,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/email/email.module.ts",{"_index":1182,"title":{},"body":{"modules/EmailModule.html":{}}}],["src/email/email.service.ts",{"_index":1231,"title":{},"body":{"injectables/EmailService.html":{},"coverage.html":{}}}],["src/email/email.service.ts:11",{"_index":1236,"title":{},"body":{"injectables/EmailService.html":{}}}],["src/email/email.service.ts:5",{"_index":1234,"title":{},"body":{"injectables/EmailService.html":{}}}],["src/emailscheduling/emailschedule.dto.ts",{"_index":1185,"title":{},"body":{"classes/EmailScheduleDto.html":{},"coverage.html":{}}}],["src/emailscheduling/emailschedule.dto.ts:13",{"_index":1189,"title":{},"body":{"classes/EmailScheduleDto.html":{}}}],["src/emailscheduling/emailschedule.dto.ts:16",{"_index":1191,"title":{},"body":{"classes/EmailScheduleDto.html":{}}}],["src/emailscheduling/emailschedule.dto.ts:5",{"_index":1192,"title":{},"body":{"classes/EmailScheduleDto.html":{}}}],["src/emailscheduling/emailschedule.dto.ts:9",{"_index":1193,"title":{},"body":{"classes/EmailScheduleDto.html":{}}}],["src/emailscheduling/emailscheduling.controller.ts",{"_index":1195,"title":{},"body":{"controllers/EmailSchedulingController.html":{},"coverage.html":{}}}],["src/emailscheduling/emailscheduling.controller.ts:15",{"_index":1199,"title":{},"body":{"controllers/EmailSchedulingController.html":{}}}],["src/emailscheduling/emailscheduling.module.ts",{"_index":1212,"title":{},"body":{"modules/EmailSchedulingModule.html":{}}}],["src/emailscheduling/emailscheduling.service.ts",{"_index":1215,"title":{},"body":{"injectables/EmailSchedulingService.html":{},"coverage.html":{}}}],["src/emailscheduling/emailscheduling.service.ts:11",{"_index":1217,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["src/emailscheduling/emailscheduling.service.ts:18",{"_index":1218,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["src/health/health.controller.ts",{"_index":1276,"title":{},"body":{"controllers/HealthController.html":{},"coverage.html":{}}}],["src/health/health.controller.ts:36",{"_index":1287,"title":{},"body":{"controllers/HealthController.html":{}}}],["src/health/health.controller.ts:55",{"_index":1280,"title":{},"body":{"controllers/HealthController.html":{}}}],["src/health/health.controller.ts:61",{"_index":1282,"title":{},"body":{"controllers/HealthController.html":{}}}],["src/health/health.controller.ts:80",{"_index":1285,"title":{},"body":{"controllers/HealthController.html":{}}}],["src/health/health.controller.ts:86",{"_index":1284,"title":{},"body":{"controllers/HealthController.html":{}}}],["src/infra/filters/query",{"_index":1431,"title":{},"body":{"classes/QueryFailedFilter.html":{},"coverage.html":{}}}],["src/infra/filters/validation",{"_index":1654,"title":{},"body":{"classes/ValidationFailedFilter.html":{},"coverage.html":{}}}],["src/infra/guards/req.ts",{"_index":1470,"title":{},"body":{"guards/RequestGuard.html":{},"coverage.html":{}}}],["src/infra/guards/req.ts:20",{"_index":1477,"title":{},"body":{"guards/RequestGuard.html":{}}}],["src/infra/guards/req.ts:33",{"_index":1474,"title":{},"body":{"guards/RequestGuard.html":{}}}],["src/infra/guards/res.ts",{"_index":1502,"title":{},"body":{"guards/ResponseGuard.html":{},"coverage.html":{}}}],["src/infra/guards/res.ts:19",{"_index":1506,"title":{},"body":{"guards/ResponseGuard.html":{}}}],["src/infra/guards/res.ts:32",{"_index":1505,"title":{},"body":{"guards/ResponseGuard.html":{}}}],["src/infra/interceptors/null",{"_index":1241,"title":{},"body":{"injectables/ExcludeNullUndefinedInterceptor.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/infra/interceptors/timeout.ts",{"_index":1590,"title":{},"body":{"injectables/TimeoutInterceptor.html":{},"coverage.html":{}}}],["src/infra/interceptors/timeout.ts:25",{"_index":1594,"title":{},"body":{"injectables/TimeoutInterceptor.html":{}}}],["src/infra/interceptors/transform.ts",{"_index":1497,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"coverage.html":{}}}],["src/infra/interceptors/transform.ts:28",{"_index":1606,"title":{},"body":{"injectables/TransformInterceptor.html":{}}}],["src/main.ts",{"_index":1731,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/tags/tag.model.ts",{"_index":556,"title":{},"body":{"classes/CreateTagsDto.html":{},"interfaces/ITag.html":{},"classes/Tag.html":{},"classes/UpdateTagsDto.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/tags/tag.model.ts:13",{"_index":1542,"title":{},"body":{"classes/Tag.html":{}}}],["src/tags/tag.model.ts:15",{"_index":1541,"title":{},"body":{"classes/Tag.html":{}}}],["src/tags/tag.model.ts:19",{"_index":1540,"title":{},"body":{"classes/Tag.html":{}}}],["src/tags/tag.model.ts:38",{"_index":559,"title":{},"body":{"classes/CreateTagsDto.html":{}}}],["src/tags/tags.controller.ts",{"_index":1553,"title":{},"body":{"controllers/TagsController.html":{},"coverage.html":{}}}],["src/tags/tags.controller.ts:32",{"_index":1554,"title":{},"body":{"controllers/TagsController.html":{}}}],["src/tags/tags.controller.ts:42",{"_index":1555,"title":{},"body":{"controllers/TagsController.html":{}}}],["src/tags/tags.module.ts",{"_index":1569,"title":{},"body":{"modules/TagsModule.html":{}}}],["src/tags/tags.service.ts",{"_index":1571,"title":{},"body":{"injectables/TagsService.html":{},"coverage.html":{}}}],["src/tags/tags.service.ts:14",{"_index":1573,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/tags.service.ts:9",{"_index":1572,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/users/user.model.ts",{"_index":597,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/IUser.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/users/user.model.ts:111",{"_index":610,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["src/users/user.model.ts:116",{"_index":602,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["src/users/user.model.ts:121",{"_index":609,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["src/users/user.model.ts:126",{"_index":604,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["src/users/user.model.ts:131",{"_index":607,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["src/users/user.model.ts:134",{"_index":606,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["src/users/user.model.ts:28",{"_index":1616,"title":{},"body":{"classes/User.html":{}}}],["src/users/user.model.ts:30",{"_index":1617,"title":{},"body":{"classes/User.html":{}}}],["src/users/user.model.ts:32",{"_index":1609,"title":{},"body":{"classes/User.html":{}}}],["src/users/user.model.ts:34",{"_index":1610,"title":{},"body":{"classes/User.html":{}}}],["src/users/user.model.ts:36",{"_index":1613,"title":{},"body":{"classes/User.html":{}}}],["src/users/user.model.ts:38",{"_index":1611,"title":{},"body":{"classes/User.html":{}}}],["src/users/user.model.ts:40",{"_index":1615,"title":{},"body":{"classes/User.html":{}}}],["src/users/user.model.ts:44",{"_index":1612,"title":{},"body":{"classes/User.html":{}}}],["src/users/user.model.ts:64",{"_index":1614,"title":{},"body":{"classes/User.html":{}}}],["src/users/user.model.ts:84",{"_index":1619,"title":{},"body":{"classes/User.html":{}}}],["src/users/user.model.ts:89",{"_index":1618,"title":{},"body":{"classes/User.html":{}}}],["src/users/users.controller.ts",{"_index":1621,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:33",{"_index":1626,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:42",{"_index":1624,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:56",{"_index":1628,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module.ts",{"_index":1638,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/users/users.service.ts",{"_index":1640,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/users.service.ts:10",{"_index":1641,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:15",{"_index":1647,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:19",{"_index":1645,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:27",{"_index":1646,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:35",{"_index":1643,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:39",{"_index":1648,"title":{},"body":{"injectables/UsersService.html":{}}}],["sse",{"_index":1278,"title":{},"body":{"controllers/HealthController.html":{}}}],["sse('sse",{"_index":1286,"title":{},"body":{"controllers/HealthController.html":{}}}],["stack",{"_index":141,"title":{},"body":{"classes/ApiException.html":{}}}],["start",{"_index":1836,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":1839,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":1840,"title":{},"body":{"index.html":{}}}],["started",{"_index":1821,"title":{"index.html":{}},"body":{}}],["starter",{"_index":1830,"title":{},"body":{"index.html":{}}}],["stat",{"_index":1312,"title":{},"body":{"controllers/HealthController.html":{}}}],["stat.load",{"_index":1319,"title":{},"body":{"controllers/HealthController.html":{}}}],["stat.memory",{"_index":1315,"title":{},"body":{"controllers/HealthController.html":{}}}],["stat.timestamp",{"_index":1317,"title":{},"body":{"controllers/HealthController.html":{}}}],["statements",{"_index":638,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/IUser.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"coverage.html":{}}}],["static",{"_index":206,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/BaseModel.html":{},"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"injectables/CronService.html":{},"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"controllers/EmailSchedulingController.html":{},"controllers/HealthController.html":{},"interfaces/IBaseModel.html":{},"interfaces/ITag.html":{},"interfaces/IUser.html":{},"injectables/LocalStrategy.html":{},"classes/LoginCredsDto.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"classes/Tag.html":{},"controllers/TagsController.html":{},"classes/UpdateTagsDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["status",{"_index":142,"title":{},"body":{"classes/ApiException.html":{},"classes/CrudController.html":{},"interfaces/IPaginationResult.html":{},"classes/PaginationParams.html":{},"classes/QueryFailedFilter.html":{},"guards/ResponseGuard.html":{},"classes/ValidationFailedFilter.html":{}}}],["statuscode",{"_index":16,"title":{},"body":{"interfaces/APIResponse.html":{},"classes/ApiException.html":{},"interfaces/AppLaunchAction.html":{},"controllers/AuthController.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"classes/CrudController.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/IPaginationResult.html":{},"classes/LoginCredsDto.html":{},"classes/PaginationParams.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"classes/QueryFailedFilter.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"controllers/TagsController.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{},"controllers/UsersController.html":{},"classes/ValidationFailedFilter.html":{}}}],["stay",{"_index":1860,"title":{},"body":{"index.html":{}}}],["stop",{"_index":1411,"title":{},"body":{"injectables/PersistedCronService.html":{}}}],["store",{"_index":1622,"title":{},"body":{"controllers/UsersController.html":{}}}],["strategy",{"_index":1362,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["stream",{"_index":1262,"title":{},"body":{"injectables/ExcludeNullUndefinedInterceptor.html":{},"interfaces/Response.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["string",{"_index":23,"title":{},"body":{"interfaces/APIResponse.html":{},"classes/ApiException.html":{},"controllers/AppController.html":{},"interfaces/AppLaunchAction.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BaseModel.html":{},"interfaces/BaseRoute.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"injectables/CronService.html":{},"classes/CrudConfigService.html":{},"interfaces/CrudOptions.html":{},"classes/CrudRoutesFactory.html":{},"classes/CrudService.html":{},"classes/EmailScheduleDto.html":{},"injectables/ExcludeNullUndefinedInterceptor.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"controllers/HealthController.html":{},"interfaces/IBaseModel.html":{},"interfaces/ICrudService.html":{},"interfaces/IPaginationResult.html":{},"interfaces/ITag.html":{},"interfaces/IUser.html":{},"injectables/LocalStrategy.html":{},"classes/LoginCredsDto.html":{},"classes/PaginationParams.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"classes/R.html":{},"guards/RequestGuard.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"guards/ResponseGuard.html":{},"interfaces/Result.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"classes/Tag.html":{},"injectables/TagsService.html":{},"interfaces/TokenPayload.html":{},"classes/UpdateTagsDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["string[]).every((v",{"_index":1908,"title":{},"body":{"miscellaneous/variables.html":{}}}],["strip",{"_index":1268,"title":{},"body":{"injectables/ExcludeNullUndefinedInterceptor.html":{},"miscellaneous/functions.html":{}}}],["subject",{"_index":52,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"classes/EmailScheduleDto.html":{},"injectables/EmailSchedulingService.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["success",{"_index":1508,"title":{},"body":{"guards/ResponseGuard.html":{}}}],["such",{"_index":982,"title":{},"body":{"classes/CrudController.html":{},"classes/CrudService.html":{}}}],["summary",{"_index":1031,"title":{},"body":{"classes/CrudController.html":{},"controllers/UsersController.html":{}}}],["super",{"_index":1367,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["super(model",{"_index":1583,"title":{},"body":{"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["super(service",{"_index":1564,"title":{},"body":{"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["super.$beforeinsert(querycontext",{"_index":652,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/IUser.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["super.$beforeupdate(opt",{"_index":477,"title":{},"body":{"classes/BaseModel.html":{},"classes/CreateUserDto.html":{},"interfaces/IBaseModel.html":{},"interfaces/IUser.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["super.create(data",{"_index":1588,"title":{},"body":{"injectables/TagsService.html":{}}}],["support",{"_index":1794,"title":{},"body":{"dependencies.html":{},"index.html":{},"modules.html":{}}}],["svg",{"_index":1871,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":542,"title":{"classes/Swagger.html":{}},"body":{"interfaces/BaseRoute.html":{},"classes/CrudConfigService.html":{},"classes/CrudController.html":{},"interfaces/CrudOptions.html":{},"classes/CrudRoutesFactory.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["swagger.apimodelproperty",{"_index":553,"title":{},"body":{"interfaces/BaseRoute.html":{},"interfaces/CrudOptions.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{}}}],["swagger.apiproperty",{"_index":552,"title":{},"body":{"interfaces/BaseRoute.html":{},"interfaces/CrudOptions.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{}}}],["swagger.createresponsemeta(name",{"_index":973,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["swagger.getextramodels(swaggermodels.get",{"_index":822,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["swagger.getresponseok(this.targetproto[name",{"_index":971,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["swagger.getschemapath",{"_index":851,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["swagger.getschemapath(dto.name",{"_index":856,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["swagger.setextramodels(this.swaggermodels",{"_index":960,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["swagger.setresponseok",{"_index":974,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["swaggerconst",{"_index":544,"title":{},"body":{"interfaces/BaseRoute.html":{},"classes/CrudConfigService.html":{},"interfaces/CrudOptions.html":{},"classes/CrudRoutesFactory.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["swaggerconst.decorators.api_extra_models",{"_index":832,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["swaggerenumtype",{"_index":489,"title":{},"body":{"interfaces/BaseRoute.html":{},"interfaces/CrudOptions.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{}}}],["swaggermodels",{"_index":841,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["swaggermodels.get",{"_index":833,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["swaggermodels.get.name",{"_index":830,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["swaggermodels.getmany",{"_index":847,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["swaggermodels.getmany.name",{"_index":852,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["swaggermodels[name",{"_index":826,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["swaggermodels[name.split('onebase')[0",{"_index":855,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["switch",{"_index":842,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"miscellaneous/variables.html":{}}}],["symbol",{"_index":550,"title":{},"body":{"interfaces/BaseRoute.html":{},"classes/CrudConfigService.html":{},"interfaces/CrudOptions.html":{},"classes/CrudRoutesFactory.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["synchronize",{"_index":283,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["syntax",{"_index":1492,"title":{},"body":{"guards/RequestGuard.html":{}}}],["t",{"_index":21,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/BaseRoute.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"classes/CrudConfigService.html":{},"classes/CrudController.html":{},"interfaces/CrudOptions.html":{},"classes/CrudRoutesFactory.html":{},"classes/CrudService.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/ICrudService.html":{},"interfaces/IPaginationResult.html":{},"classes/PaginationParams.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"classes/R.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Response.html":{},"interfaces/Result.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"injectables/TagsService.html":{},"injectables/TransformInterceptor.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["table",{"_index":1407,"title":{},"body":{"injectables/PersistedCronService.html":{},"classes/QueryFailedFilter.html":{},"coverage.html":{}}}],["tablename",{"_index":569,"title":{},"body":{"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"interfaces/ITag.html":{},"interfaces/IUser.html":{},"classes/Tag.html":{},"classes/UpdateTagsDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1741,"title":{},"body":{"coverage.html":{}}}],["tag",{"_index":568,"title":{"classes/Tag.html":{}},"body":{"classes/CreateTagsDto.html":{},"modules/DatabaseModule.html":{},"interfaces/ITag.html":{},"classes/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"classes/UpdateTagsDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["tag.model",{"_index":1558,"title":{},"body":{"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["tag.name",{"_index":1587,"title":{},"body":{"injectables/TagsService.html":{}}}],["tag.ts",{"_index":1725,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["tags",{"_index":570,"title":{},"body":{"classes/CreateTagsDto.html":{},"interfaces/ITag.html":{},"classes/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"classes/UpdateTagsDto.html":{},"miscellaneous/variables.html":{}}}],["tags.controller",{"_index":1570,"title":{},"body":{"modules/TagsModule.html":{}}}],["tags.service",{"_index":1560,"title":{},"body":{"controllers/TagsController.html":{},"modules/TagsModule.html":{}}}],["tags/tag.model",{"_index":1100,"title":{},"body":{"classes/CrudService.html":{},"modules/DatabaseModule.html":{}}}],["tags/tags.module",{"_index":255,"title":{},"body":{"modules/AppModule.html":{}}}],["tagscontroller",{"_index":1552,"title":{"controllers/TagsController.html":{}},"body":{"controllers/TagsController.html":{},"modules/TagsModule.html":{},"coverage.html":{}}}],["tagshape",{"_index":590,"title":{},"body":{"classes/CreateTagsDto.html":{},"interfaces/ITag.html":{},"classes/Tag.html":{},"classes/UpdateTagsDto.html":{},"miscellaneous/typealiases.html":{}}}],["tagsmodule",{"_index":224,"title":{"modules/TagsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/TagsModule.html":{},"modules.html":{},"overview.html":{}}}],["tagsservice",{"_index":1559,"title":{"injectables/TagsService.html":{}},"body":{"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"coverage.html":{},"overview.html":{}}}],["takes",{"_index":1592,"title":{},"body":{"injectables/TimeoutInterceptor.html":{}}}],["target",{"_index":548,"title":{},"body":{"interfaces/BaseRoute.html":{},"classes/CrudConfigService.html":{},"interfaces/CrudOptions.html":{},"classes/CrudRoutesFactory.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"miscellaneous/variables.html":{}}}],["targetproto",{"_index":892,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["template",{"_index":319,"title":{},"body":{"modules/AppModule.html":{},"injectables/CronService.html":{},"controllers/HealthController.html":{}}}],["terminate",{"_index":1591,"title":{},"body":{"injectables/TimeoutInterceptor.html":{}}}],["termination",{"_index":293,"title":{},"body":{"modules/AppModule.html":{}}}],["terminusmodule",{"_index":245,"title":{},"body":{"modules/AppModule.html":{}}}],["test",{"_index":275,"title":{},"body":{"modules/AppModule.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["test:covsupport",{"_index":1845,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":1844,"title":{},"body":{"index.html":{}}}],["tests",{"_index":1842,"title":{},"body":{"index.html":{}}}],["text",{"_index":1225,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["thanks",{"_index":1851,"title":{},"body":{"index.html":{}}}],["this.$fetchgraph(expression",{"_index":476,"title":{},"body":{"classes/BaseModel.html":{},"interfaces/IBaseModel.html":{}}}],["this.authservice.login(user",{"_index":359,"title":{},"body":{"controllers/AuthController.html":{},"classes/LoginCredsDto.html":{}}}],["this.authservice.validateuser(email",{"_index":1390,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["this.bindrequesthelpers(context.switchtohttp().getrequest",{"_index":1485,"title":{},"body":{"guards/RequestGuard.html":{}}}],["this.bindresponsehelpers(context.switchtohttp().getresponse",{"_index":1507,"title":{},"body":{"guards/ResponseGuard.html":{}}}],["this.collectosmetrics(metrics",{"_index":1304,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.comparepassword(password",{"_index":410,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.config.get('node_env",{"_index":1323,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.configservice.get('node_env",{"_index":1239,"title":{},"body":{"injectables/EmailService.html":{}}}],["this.count",{"_index":1151,"title":{},"body":{"classes/CustomQueryBuilder.html":{}}}],["this.create",{"_index":883,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["this.createroutes(routesschema",{"_index":903,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["this.dns.pingcheck('nestjs",{"_index":1307,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.emailschedulingservice.scheduleemail(emailschedule",{"_index":1208,"title":{},"body":{"controllers/EmailSchedulingController.html":{}}}],["this.emailservice.sendmail",{"_index":1223,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["this.enableroutes(routesschema",{"_index":904,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["this.error",{"_index":174,"title":{},"body":{"classes/ApiException.html":{}}}],["this.errors",{"_index":176,"title":{},"body":{"classes/ApiException.html":{}}}],["this.factorial(n",{"_index":743,"title":{},"body":{"injectables/CronService.html":{}}}],["this.findone",{"_index":1584,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.generatetoken(user",{"_index":415,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.hashpassword(this.password",{"_index":654,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/IUser.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["this.hashpassword(user.password",{"_index":1652,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.health.check",{"_index":1306,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.jwtservice.signasync(user",{"_index":404,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.logger.debug",{"_index":745,"title":{},"body":{"injectables/CronService.html":{}}}],["this.logger.log(`email",{"_index":1229,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["this.logger.log(`interval",{"_index":769,"title":{},"body":{"injectables/CronService.html":{}}}],["this.logger.log(`job",{"_index":755,"title":{},"body":{"injectables/CronService.html":{}}}],["this.logger.log(`timeout",{"_index":781,"title":{},"body":{"injectables/CronService.html":{}}}],["this.logger.warn",{"_index":771,"title":{},"body":{"injectables/CronService.html":{}}}],["this.logger.warn(`interval",{"_index":778,"title":{},"body":{"injectables/CronService.html":{}}}],["this.logger.warn(`job",{"_index":761,"title":{},"body":{"injectables/CronService.html":{}}}],["this.logger.warn(`time",{"_index":758,"title":{},"body":{"injectables/CronService.html":{}}}],["this.logger.warn(`timeout",{"_index":782,"title":{},"body":{"injectables/CronService.html":{}}}],["this.mergeoptions",{"_index":901,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["this.message",{"_index":173,"title":{},"body":{"classes/ApiException.html":{}}}],["this.model.query",{"_index":1102,"title":{},"body":{"classes/CrudService.html":{}}}],["this.model.query().findbyid(id).first",{"_index":1108,"title":{},"body":{"classes/CrudService.html":{},"injectables/UsersService.html":{}}}],["this.model.query().findone",{"_index":1109,"title":{},"body":{"classes/CrudService.html":{},"injectables/UsersService.html":{}}}],["this.model.query().findone(filter",{"_index":1107,"title":{},"body":{"classes/CrudService.html":{}}}],["this.model.query().insertandfetch(input",{"_index":1111,"title":{},"body":{"classes/CrudService.html":{}}}],["this.model.query().insertandfetch(user",{"_index":1650,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.model.query().page(page",{"_index":1104,"title":{},"body":{"classes/CrudService.html":{}}}],["this.model.query().patchandfetchbyid(id",{"_index":1113,"title":{},"body":{"classes/CrudService.html":{},"injectables/UsersService.html":{}}}],["this.modelname",{"_index":888,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["this.modeltype",{"_index":887,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["this.onlycount",{"_index":1153,"title":{},"body":{"classes/CustomQueryBuilder.html":{}}}],["this.options",{"_index":882,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["this.options.dto",{"_index":920,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["this.options.model.type",{"_index":897,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["this.options.model.type?.name",{"_index":895,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["this.options.query",{"_index":917,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["this.options.routes?.deleteonebase?.returndeleted",{"_index":941,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["this.options.serialize",{"_index":921,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["this.options.serialize.create",{"_index":930,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["this.options.serialize.delete",{"_index":939,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["this.options.serialize.get",{"_index":923,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["this.options.serialize.getmany",{"_index":926,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["this.options.serialize.replace",{"_index":936,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["this.options.serialize.update",{"_index":933,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["this.options.serialize?.create",{"_index":932,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["this.options.serialize?.delete",{"_index":942,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["this.options.serialize?.get",{"_index":925,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["this.options.serialize?.getmany",{"_index":928,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["this.options.serialize?.replace",{"_index":938,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["this.options.serialize?.update",{"_index":935,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["this.page(page",{"_index":1146,"title":{},"body":{"classes/CustomQueryBuilder.html":{}}}],["this.password",{"_index":653,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/IUser.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["this.path",{"_index":177,"title":{},"body":{"classes/ApiException.html":{}}}],["this.schedule.addcronjob(job.name",{"_index":1427,"title":{},"body":{"injectables/PersistedCronService.html":{}}}],["this.scheduler.addcronjob(`${date.now",{"_index":1228,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["this.scheduler.addcronjob(name",{"_index":759,"title":{},"body":{"injectables/CronService.html":{}}}],["this.scheduler.addinterval(name",{"_index":775,"title":{},"body":{"injectables/CronService.html":{}}}],["this.scheduler.addtimeout(name",{"_index":784,"title":{},"body":{"injectables/CronService.html":{}}}],["this.scheduler.deletecronjob(name",{"_index":765,"title":{},"body":{"injectables/CronService.html":{}}}],["this.scheduler.deleteinterval(name",{"_index":777,"title":{},"body":{"injectables/CronService.html":{}}}],["this.scheduler.deletetimeout(name",{"_index":786,"title":{},"body":{"injectables/CronService.html":{}}}],["this.scheduler.getcronjob(name",{"_index":764,"title":{},"body":{"injectables/CronService.html":{}}}],["this.scheduler.getinterval(name",{"_index":776,"title":{},"body":{"injectables/CronService.html":{}}}],["this.scheduler.getintervals",{"_index":767,"title":{},"body":{"injectables/CronService.html":{}}}],["this.scheduler.gettimeout(name",{"_index":785,"title":{},"body":{"injectables/CronService.html":{}}}],["this.scheduler.gettimeouts",{"_index":779,"title":{},"body":{"injectables/CronService.html":{}}}],["this.service.create(input",{"_index":1046,"title":{},"body":{"classes/CrudController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["this.service.findonebyemail(email",{"_index":1634,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.service.findonebyid(id",{"_index":1038,"title":{},"body":{"classes/CrudController.html":{}}}],["this.service.getone(req",{"_index":908,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["this.service.getonebase(req",{"_index":911,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["this.service.paginatedfindall",{"_index":1035,"title":{},"body":{"classes/CrudController.html":{}}}],["this.service.remove(id",{"_index":1043,"title":{},"body":{"classes/CrudController.html":{}}}],["this.service.update(id",{"_index":1050,"title":{},"body":{"classes/CrudController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["this.setresponsemodels",{"_index":902,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["this.setswaggerresponseok(route.name",{"_index":969,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["this.stack",{"_index":175,"title":{},"body":{"classes/ApiException.html":{}}}],["this.status",{"_index":182,"title":{},"body":{"classes/ApiException.html":{}}}],["this.statuscode",{"_index":181,"title":{},"body":{"classes/ApiException.html":{}}}],["this.swaggermodels",{"_index":889,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["this.swaggermodels.create",{"_index":952,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["this.swaggermodels.delete",{"_index":958,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["this.swaggermodels.get",{"_index":948,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["this.swaggermodels.getmany",{"_index":950,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["this.swaggermodels.replace",{"_index":956,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["this.swaggermodels.update",{"_index":954,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["this.target",{"_index":944,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["this.target.prototype",{"_index":893,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["this.targetproto",{"_index":886,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["this.targetproto[name",{"_index":906,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["this.targetproto[route.name",{"_index":966,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["this.timestamp",{"_index":178,"title":{},"body":{"classes/ApiException.html":{}}}],["this.update(id",{"_index":1110,"title":{},"body":{"classes/CrudService.html":{}}}],["this.updated_at",{"_index":478,"title":{},"body":{"classes/BaseModel.html":{},"interfaces/IBaseModel.html":{}}}],["this.userservice.findonebyemail(email",{"_index":405,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservice.findonebyemail(payload.email",{"_index":1373,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["this[expression.tostring",{"_index":475,"title":{},"body":{"classes/BaseModel.html":{},"interfaces/IBaseModel.html":{}}}],["this[route.name](route.name",{"_index":968,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["those",{"_index":632,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/IUser.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["throw",{"_index":1039,"title":{},"body":{"classes/CrudController.html":{}}}],["throwerror",{"_index":1596,"title":{},"body":{"injectables/TimeoutInterceptor.html":{}}}],["throwerror(e",{"_index":1604,"title":{},"body":{"injectables/TimeoutInterceptor.html":{}}}],["throwerror(new",{"_index":1603,"title":{},"body":{"injectables/TimeoutInterceptor.html":{}}}],["time",{"_index":773,"title":{},"body":{"injectables/CronService.html":{},"injectables/PersistedCronService.html":{}}}],["timeago",{"_index":95,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["timeout",{"_index":675,"title":{},"body":{"injectables/CronService.html":{},"injectables/TimeoutInterceptor.html":{}}}],["timeout('handletimeoutfn",{"_index":725,"title":{},"body":{"injectables/CronService.html":{}}}],["timeout(10000",{"_index":1599,"title":{},"body":{"injectables/TimeoutInterceptor.html":{}}}],["timeouterror",{"_index":1597,"title":{},"body":{"injectables/TimeoutInterceptor.html":{}}}],["timeoutinterceptor",{"_index":1589,"title":{"injectables/TimeoutInterceptor.html":{}},"body":{"injectables/TimeoutInterceptor.html":{},"coverage.html":{}}}],["timeouts",{"_index":732,"title":{},"body":{"injectables/CronService.html":{}}}],["timeouts.foreach((key",{"_index":780,"title":{},"body":{"injectables/CronService.html":{}}}],["times",{"_index":679,"title":{},"body":{"injectables/CronService.html":{}}}],["timestamp",{"_index":143,"title":{},"body":{"classes/ApiException.html":{},"controllers/HealthController.html":{},"classes/QueryFailedFilter.html":{},"classes/ValidationFailedFilter.html":{}}}],["todo",{"_index":1237,"title":{},"body":{"injectables/EmailService.html":{},"injectables/PersistedCronService.html":{}}}],["token_expiration",{"_index":280,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["tokenpayload",{"_index":1357,"title":{"interfaces/TokenPayload.html":{}},"body":{"injectables/JwtStrategy.html":{},"interfaces/TokenPayload.html":{},"coverage.html":{}}}],["tokenpayload.interface",{"_index":1365,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["total",{"_index":17,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/BaseRoute.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"classes/CrudConfigService.html":{},"interfaces/CrudOptions.html":{},"classes/CrudRoutesFactory.html":{},"classes/CrudService.html":{},"classes/CustomQueryBuilder.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/IPaginationResult.html":{},"classes/PaginationParams.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"classes/R.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["totalpages",{"_index":1105,"title":{},"body":{"classes/CrudService.html":{},"classes/CustomQueryBuilder.html":{},"interfaces/IPaginationResult.html":{},"classes/PaginationParams.html":{}}}],["touch",{"_index":1861,"title":{},"body":{"index.html":{}}}],["transform",{"_index":1244,"title":{},"body":{"injectables/ExcludeNullUndefinedInterceptor.html":{},"interfaces/IPaginationResult.html":{},"classes/PaginationParams.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["transform((val",{"_index":1348,"title":{},"body":{"interfaces/IPaginationResult.html":{},"classes/PaginationParams.html":{}}}],["transformer",{"_index":796,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"interfaces/IPaginationResult.html":{},"classes/PaginationParams.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"dependencies.html":{}}}],["transforminterceptor",{"_index":1499,"title":{"injectables/TransformInterceptor.html":{}},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"coverage.html":{}}}],["true",{"_index":260,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateUserDto.html":{},"injectables/CronService.html":{},"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/CustomQueryBuilder.html":{},"modules/DatabaseModule.html":{},"interfaces/IUser.html":{},"injectables/JwtStrategy.html":{},"classes/R.html":{},"guards/RequestGuard.html":{},"guards/ResponseGuard.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"miscellaneous/variables.html":{}}}],["try",{"_index":530,"title":{},"body":{"interfaces/BaseRoute.html":{},"classes/CreateUserDto.html":{},"injectables/CronService.html":{},"interfaces/CrudOptions.html":{},"classes/CrudService.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/IUser.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["ts",{"_index":473,"title":{},"body":{"classes/BaseModel.html":{},"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/CrudService.html":{},"injectables/ExcludeNullUndefinedInterceptor.html":{},"controllers/HealthController.html":{},"interfaces/IBaseModel.html":{},"classes/QueryFailedFilter.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"classes/ValidationFailedFilter.html":{},"miscellaneous/variables.html":{}}}],["twitter",{"_index":1867,"title":{},"body":{"index.html":{}}}],["type",{"_index":19,"title":{},"body":{"interfaces/APIResponse.html":{},"classes/ApiException.html":{},"interfaces/AppLaunchAction.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BaseModel.html":{},"interfaces/BaseRoute.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"injectables/CronService.html":{},"classes/CrudConfigService.html":{},"classes/CrudController.html":{},"interfaces/CrudOptions.html":{},"classes/CrudRoutesFactory.html":{},"classes/CrudService.html":{},"classes/CustomQueryBuilder.html":{},"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/ExcludeNullUndefinedInterceptor.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"controllers/HealthController.html":{},"interfaces/IBaseModel.html":{},"interfaces/ICrudService.html":{},"interfaces/IPaginationResult.html":{},"interfaces/ITag.html":{},"interfaces/IUser.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginCredsDto.html":{},"classes/PaginationParams.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"injectables/PersistedCronService.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"classes/QueryFailedFilter.html":{},"classes/R.html":{},"guards/RequestGuard.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Response.html":{},"guards/ResponseGuard.html":{},"interfaces/Result.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"classes/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/TimeoutInterceptor.html":{},"interfaces/TokenPayload.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateTagsDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/ValidationFailedFilter.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":1879,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeof",{"_index":471,"title":{},"body":{"classes/BaseModel.html":{},"classes/CustomQueryBuilder.html":{},"injectables/ExcludeNullUndefinedInterceptor.html":{},"interfaces/IBaseModel.html":{},"guards/RequestGuard.html":{},"guards/ResponseGuard.html":{},"miscellaneous/variables.html":{}}}],["types",{"_index":470,"title":{},"body":{"classes/BaseModel.html":{},"interfaces/BaseRoute.html":{},"interfaces/CrudOptions.html":{},"classes/CustomQueryBuilder.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/IBaseModel.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"dependencies.html":{}}}],["types/dotenv",{"_index":1761,"title":{},"body":{"dependencies.html":{}}}],["typescript",{"_index":317,"title":{},"body":{"modules/AppModule.html":{},"classes/BaseModel.html":{},"interfaces/BaseRoute.html":{},"injectables/CronService.html":{},"interfaces/CrudOptions.html":{},"classes/CustomQueryBuilder.html":{},"injectables/ExcludeNullUndefinedInterceptor.html":{},"interfaces/GetManyDefaultResponse.html":{},"controllers/HealthController.html":{},"interfaces/IBaseModel.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"index.html":{}}}],["ui",{"_index":1796,"title":{},"body":{"dependencies.html":{}}}],["unauthorized",{"_index":193,"title":{},"body":{"classes/ApiException.html":{}}}],["unauthorizedexception",{"_index":165,"title":{},"body":{"classes/ApiException.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["unauthorizedexception('credentials",{"_index":1389,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["unauthorizedexception('invalid",{"_index":413,"title":{},"body":{"injectables/AuthService.html":{}}}],["unauthorizedexception('unknown",{"_index":407,"title":{},"body":{"injectables/AuthService.html":{}}}],["undefined",{"_index":999,"title":{},"body":{"classes/CrudController.html":{},"interfaces/CrudOptions.html":{},"injectables/ExcludeNullUndefinedInterceptor.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["uniqueviolationerror",{"_index":1442,"title":{},"body":{"classes/QueryFailedFilter.html":{}}}],["unit",{"_index":1841,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":146,"title":{},"body":{"classes/ApiException.html":{},"classes/CrudController.html":{},"classes/CrudService.html":{},"classes/CustomQueryBuilder.html":{},"injectables/ExcludeNullUndefinedInterceptor.html":{},"miscellaneous/functions.html":{}}}],["until",{"_index":309,"title":{},"body":{"modules/AppModule.html":{}}}],["up",{"_index":1716,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["up(knex",{"_index":1817,"title":{},"body":{"miscellaneous/functions.html":{}}}],["update",{"_index":526,"title":{},"body":{"interfaces/BaseRoute.html":{},"classes/CrudController.html":{},"interfaces/CrudOptions.html":{},"classes/CrudService.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ICrudService.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["update(@param('id",{"_index":1049,"title":{},"body":{"classes/CrudController.html":{}}}],["update(id",{"_index":1018,"title":{},"body":{"classes/CrudController.html":{},"classes/CrudService.html":{},"interfaces/ICrudService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["updated",{"_index":1020,"title":{},"body":{"classes/CrudController.html":{}}}],["updated_at",{"_index":424,"title":{},"body":{"classes/BaseModel.html":{},"interfaces/IBaseModel.html":{},"classes/Tag.html":{},"classes/User.html":{}}}],["updateonebase",{"_index":497,"title":{},"body":{"interfaces/BaseRoute.html":{},"interfaces/CrudOptions.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"miscellaneous/typealiases.html":{}}}],["updates",{"_index":1019,"title":{},"body":{"classes/CrudController.html":{},"classes/CrudService.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["updatetagsdto",{"_index":594,"title":{"classes/UpdateTagsDto.html":{}},"body":{"classes/CreateTagsDto.html":{},"interfaces/ITag.html":{},"classes/Tag.html":{},"controllers/TagsController.html":{},"classes/UpdateTagsDto.html":{},"coverage.html":{}}}],["updateuserdto",{"_index":658,"title":{"classes/UpdateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"interfaces/IUser.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["used",{"_index":576,"title":{},"body":{"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"interfaces/ITag.html":{},"interfaces/IUser.html":{},"classes/QueryFailedFilter.html":{},"classes/Tag.html":{},"classes/UpdateTagsDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/ValidationFailedFilter.html":{}}}],["usefactory",{"_index":376,"title":{},"body":{"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["useguards",{"_index":335,"title":{},"body":{"controllers/AuthController.html":{},"classes/LoginCredsDto.html":{},"controllers/TagsController.html":{}}}],["useguards(authguard('jwt",{"_index":1563,"title":{},"body":{"controllers/TagsController.html":{}}}],["useguards(authguard('local",{"_index":356,"title":{},"body":{"controllers/AuthController.html":{},"classes/LoginCredsDto.html":{}}}],["useguards(undefined)@post('login",{"_index":330,"title":{},"body":{"controllers/AuthController.html":{}}}],["usenullasdefault",{"_index":1171,"title":{},"body":{"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["user",{"_index":53,"title":{"classes/User.html":{}},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/IUser.html":{},"injectables/JwtStrategy.html":{},"classes/LoginCredsDto.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["user.model",{"_index":1629,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["user.password",{"_index":411,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["user.tojson",{"_index":414,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.ts",{"_index":1722,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["user?.password",{"_index":1651,"title":{},"body":{"injectables/UsersService.html":{}}}],["useraddress",{"_index":70,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["usercontacts",{"_index":71,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["useremail",{"_index":72,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["userid",{"_index":129,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["username",{"_index":73,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"classes/CreateUserDto.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/IUser.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["usernamefield",{"_index":1379,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["userpost",{"_index":85,"title":{"interfaces/UserPost.html":{}},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{},"coverage.html":{}}}],["userposts",{"_index":99,"title":{"interfaces/UserPosts.html":{}},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{},"coverage.html":{}}}],["users",{"_index":613,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/IUser.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"miscellaneous/variables.html":{}}}],["users.controller",{"_index":1639,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.service",{"_index":1630,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users/user.model",{"_index":1101,"title":{},"body":{"classes/CrudService.html":{},"modules/DatabaseModule.html":{}}}],["users/users.module",{"_index":256,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["users/users.service",{"_index":343,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/LoginCredsDto.html":{}}}],["userscontroller",{"_index":1620,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["userservice",{"_index":355,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/LoginCredsDto.html":{}}}],["usershape",{"_index":655,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/IUser.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"miscellaneous/typealiases.html":{}}}],["usersmodule",{"_index":225,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersservice",{"_index":342,"title":{"injectables/UsersService.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/LoginCredsDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["usesid",{"_index":54,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["usevalue",{"_index":1166,"title":{},"body":{"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["using",{"_index":628,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/IUser.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["utils",{"_index":802,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["uuid",{"_index":504,"title":{},"body":{"interfaces/BaseRoute.html":{},"interfaces/CrudOptions.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{}}}],["val",{"_index":1898,"title":{},"body":{"miscellaneous/variables.html":{}}}],["val.length",{"_index":1901,"title":{},"body":{"miscellaneous/variables.html":{}}}],["valid('development",{"_index":273,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["validate",{"_index":1354,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["validate(email",{"_index":1382,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["validate(payload",{"_index":1356,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validateuser",{"_index":387,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser(email",{"_index":400,"title":{},"body":{"injectables/AuthService.html":{}}}],["validation",{"_index":514,"title":{},"body":{"interfaces/BaseRoute.html":{},"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"interfaces/CrudOptions.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ITag.html":{},"interfaces/IUser.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"classes/Tag.html":{},"classes/UpdateTagsDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/ValidationFailedFilter.html":{}}}],["validationerror",{"_index":1655,"title":{},"body":{"classes/ValidationFailedFilter.html":{}}}],["validationerrorcode",{"_index":1658,"title":{},"body":{"classes/ValidationFailedFilter.html":{}}}],["validationerrortype",{"_index":1660,"title":{},"body":{"classes/ValidationFailedFilter.html":{}}}],["validationfailedfilter",{"_index":1653,"title":{"classes/ValidationFailedFilter.html":{}},"body":{"classes/ValidationFailedFilter.html":{},"coverage.html":{}}}],["validationoptions",{"_index":261,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["validationpipeoptions",{"_index":488,"title":{},"body":{"interfaces/BaseRoute.html":{},"interfaces/CrudOptions.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{}}}],["validationschema",{"_index":266,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["validator",{"_index":340,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"classes/EmailScheduleDto.html":{},"interfaces/IPaginationResult.html":{},"interfaces/ITag.html":{},"interfaces/IUser.html":{},"classes/LoginCredsDto.html":{},"classes/PaginationParams.html":{},"classes/Tag.html":{},"classes/UpdateTagsDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"dependencies.html":{}}}],["value",{"_index":430,"title":{},"body":{"classes/BaseModel.html":{},"injectables/CronService.html":{},"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/CrudService.html":{},"classes/CustomQueryBuilder.html":{},"injectables/EmailSchedulingService.html":{},"injectables/ExcludeNullUndefinedInterceptor.html":{},"injectables/LocalStrategy.html":{},"injectables/PersistedCronService.html":{},"classes/R.html":{},"guards/RequestGuard.html":{},"guards/ResponseGuard.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{},"classes/Tag.html":{},"injectables/TagsService.html":{},"injectables/TimeoutInterceptor.html":{},"classes/User.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["value.length",{"_index":1143,"title":{},"body":{"classes/CustomQueryBuilder.html":{}}}],["value.map(recursivelystripnullvalues",{"_index":1271,"title":{},"body":{"injectables/ExcludeNullUndefinedInterceptor.html":{}}}],["value.nextdates().todate",{"_index":751,"title":{},"body":{"injectables/CronService.html":{}}}],["value.trim",{"_index":1495,"title":{},"body":{"guards/RequestGuard.html":{}}}],["values",{"_index":1269,"title":{},"body":{"injectables/ExcludeNullUndefinedInterceptor.html":{},"miscellaneous/functions.html":{}}}],["var",{"_index":534,"title":{},"body":{"interfaces/BaseRoute.html":{},"interfaces/CrudOptions.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{}}}],["variable",{"_index":1665,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1888,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["various",{"_index":620,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/IUser.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["viewscont",{"_index":121,"title":{},"body":{"interfaces/APIResponse.html":{},"interfaces/AppLaunchAction.html":{},"interfaces/Comment.html":{},"interfaces/Comments.html":{},"interfaces/Follower.html":{},"interfaces/GetAppLaunchData.html":{},"interfaces/GetComments.html":{},"interfaces/GetFollowers.html":{},"interfaces/GetFollowing.html":{},"interfaces/GetRescueList.html":{},"interfaces/GetUserPosts.html":{},"interfaces/GetUserProfile.html":{},"interfaces/PostType.html":{},"interfaces/PostedByUser.html":{},"interfaces/RescueLists.html":{},"interfaces/Rescues.html":{},"interfaces/Result.html":{},"interfaces/UserPost.html":{},"interfaces/UserPosts.html":{}}}],["visibility",{"_index":455,"title":{},"body":{"classes/BaseModel.html":{},"interfaces/IBaseModel.html":{},"dependencies.html":{}}}],["visibilityplugin",{"_index":454,"title":{},"body":{"classes/BaseModel.html":{},"interfaces/IBaseModel.html":{}}}],["void",{"_index":238,"title":{},"body":{"modules/AppModule.html":{},"injectables/CronService.html":{},"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"injectables/EmailService.html":{},"controllers/HealthController.html":{},"classes/QueryFailedFilter.html":{},"classes/R.html":{},"classes/Swagger.html":{},"classes/ValidationFailedFilter.html":{}}}],["watch",{"_index":1837,"title":{},"body":{"index.html":{}}}],["website",{"_index":1865,"title":{},"body":{"index.html":{}}}],["went",{"_index":1513,"title":{},"body":{"guards/ResponseGuard.html":{}}}],["whenever",{"_index":577,"title":{},"body":{"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"interfaces/ITag.html":{},"interfaces/IUser.html":{},"classes/Tag.html":{},"classes/UpdateTagsDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["whether",{"_index":1482,"title":{},"body":{"guards/RequestGuard.html":{},"guards/ResponseGuard.html":{}}}],["whitespace",{"_index":629,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/IUser.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["withmeta",{"_index":1524,"title":{},"body":{"guards/ResponseGuard.html":{}}}],["withmeta(data",{"_index":1519,"title":{},"body":{"guards/ResponseGuard.html":{}}}],["without",{"_index":589,"title":{},"body":{"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"interfaces/ITag.html":{},"interfaces/IUser.html":{},"classes/Tag.html":{},"classes/UpdateTagsDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["withparams",{"_index":485,"title":{},"body":{"interfaces/BaseRoute.html":{},"classes/CrudConfigService.html":{},"interfaces/CrudOptions.html":{},"classes/CrudRoutesFactory.html":{},"interfaces/GetManyDefaultResponse.html":{},"interfaces/ParamOption.html":{},"interfaces/ParamsOptions.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["world",{"_index":208,"title":{},"body":{"controllers/AppController.html":{}}}],["writable",{"_index":863,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["wrong",{"_index":1514,"title":{},"body":{"guards/ResponseGuard.html":{}}}],["x",{"_index":820,"title":{},"body":{"classes/CrudConfigService.html":{},"classes/CrudRoutesFactory.html":{},"classes/R.html":{},"classes/SerializeHelper.html":{},"classes/Swagger.html":{}}}],["yes",{"_index":237,"title":{},"body":{"modules/AppModule.html":{},"controllers/HealthController.html":{},"interfaces/ICrudService.html":{},"classes/R.html":{},"miscellaneous/functions.html":{}}}],["you'd",{"_index":1855,"title":{},"body":{"index.html":{}}}],["zoom",{"_index":226,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CronModule.html":{},"modules/EmailModule.html":{},"modules/EmailSchedulingModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"interfaces/APIResponse.html":{"url":"interfaces/APIResponse.html","title":"interface - APIResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  APIResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/domain.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        count\n                                \n                                \n                                        data\n                                \n                                \n                                            Optional\n                                        error\n                                \n                                \n                                            Optional\n                                        message\n                                \n                                \n                                            Optional\n                                        page\n                                \n                                \n                                            Optional\n                                        pageCount\n                                \n                                \n                                        statusCode\n                                \n                                \n                                            Optional\n                                        total\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        count\n                                    \n                                \n                                \n                                    \n                                        count:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                    \n                                \n                                \n                                    \n                                        data:     T\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        error\n                                    \n                                \n                                \n                                    \n                                        error:         APIError\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         APIError\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                    \n                                \n                                \n                                    \n                                        message:     string | string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string | string[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        page\n                                    \n                                \n                                \n                                    \n                                        page:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        pageCount\n                                    \n                                \n                                \n                                    \n                                        pageCount:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        statusCode\n                                    \n                                \n                                \n                                    \n                                        statusCode:     HttpStatus\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     HttpStatus\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        total\n                                    \n                                \n                                \n                                    \n                                        total:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { HttpStatus } from '@nestjs/common'\n\nexport type Results =\n    | GetAppLaunchData\n    | GetUserProfile\n    | GetUserPosts\n    | GetComments\n    | GetRescueList\n    | GetFollowers\n    | GetFollowing\n\nexport type APIError = Error | string | null\n\nexport interface Result {\n    data: T\n    error?: APIError\n    message?: string | string[]\n    statusCode: HttpStatus\n}\n\nexport interface APIResponse {\n    data: T\n    error?: APIError\n    message?: string | string[]\n    statusCode: HttpStatus\n\n    count?: number\n    page?: number\n    pageCount?: number\n    total?: number\n}\n\nexport interface GetAppLaunchData {\n    link: 'api:/'\n    response: APIResponse\n}\n\nexport interface GetUserProfile {\n    link: 'api:v1/user/getUserProfile?userId=25'\n    response: APIResponse\n}\n\nexport interface GetUserPosts {\n    link: 'api:v1/user/getUserPosts?pageNo=0&pageSize=25'\n    response: APIResponse\n}\n\nexport interface GetRescueList {\n    link: 'api:v1/rescue/getRescueList?pageNo=0&pageSize=10&status=pending|inProgress|completed|nearest'\n    response: APIResponse\n}\n\nexport interface GetComments {\n    link: 'api:v1/rescue/getComments?pageNo=0&pageSize=10&postId=1230'\n    response: APIResponse\n}\n\nexport interface GetFollowers {\n    link: 'api:v1/rescue/getUserFollowers?userId=1230'\n    response: APIResponse\n}\n\nexport interface GetFollowing {\n    link: 'api:v1/rescue/getUserFollowing?userId=1230'\n    response: APIResponse\n}\n\nexport interface AppLaunchAction {\n    actionId: number\n    action: string\n    isActive: boolean\n    subject?: string\n}\n\nexport interface User {\n    usesId: number\n\n    coverImage: string\n    following: boolean\n    gender: string\n    isOwnProfile: number\n    isRescuer: boolean\n    latitude: number\n    longitude: number\n    numberOfFollowers: number\n    numberOfFollowing: number\n    numberOfPosts: number\n    numberOfRescuesCompleted: number\n    numberOfRescuesCreated: number\n    numberOfRescuesInProgress: number\n    profileImage: string\n    rescuer: boolean\n    userAddress: string\n    userContacts: string\n    userEmail: string\n    userName: string\n    badge: {\n        badgeId: number\n        badgeName: string\n        badgeDescription: string\n        recuesCompletionNeeded: number\n    }\n    setting: {\n        showMyContacts: boolean\n        getNotifications: boolean\n    }\n}\n\nexport interface PostType {\n    postTypeId: number\n    postType: string\n}\n\nexport interface PostedByUser {\n    usesId: number\n    badgeName: string\n    following: boolean\n    profileImage: string\n    rescuer: boolean\n    userName: string\n}\n\nexport interface UserPost {\n    postId: number\n    commentsCount: number\n    isUserReactedToPost: boolean\n    ownPage: boolean\n    postBy: PostedByUser\n    postImage: string\n    postTime: string\n    postType: PostType\n    postVideo: string\n    reactionsCount: number\n    timeAgo: string\n\n    adCorporateLogoUrl: string | null\n    corporateDescription: string | null\n    corporateName: string | null\n}\n\nexport interface UserPosts {\n    isRecent: boolean\n    feed: UserPost[]\n}\n\nexport interface Rescues {\n    rescueId: number\n    animalImageUrl: string\n    distance: number\n    distanceAway: string\n    emergencyType: string\n    postedBy: string\n    postedMinAgo: string\n    rescueDate: Date\n    rescuedPetName: string\n    rescueLocality: string\n    rescuers: {\n        contact: number\n        name: string\n        profileId: number\n        profileImageUrl: string\n        rescues: boolean\n        showMyNumber: boolean\n    }\n    rescueStatus: string\n    viewsCont: number\n}\n\nexport interface RescueLists {\n    rescues: Rescues[]\n}\n\nexport interface Comment {\n    commentId: number\n    comment: string\n    commentedUseName: string\n    commentedUserId: number\n    timeAgo: string\n}\n\nexport interface Comments {\n    comments: Comment[]\n}\n\nexport interface Follower {\n    userId: number\n    userName: string\n    profileImage: string\n    areYouFollowing: boolean\n    showRemoveOption: boolean\n}\n\nexport type Following = Follower\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ApiException.html":{"url":"classes/ApiException.html","title":"class - ApiException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ApiException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/base/swagger-gen/api-errors.decorator.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                error\n                            \n                            \n                                    Optional\n                                errors\n                            \n                            \n                                    Optional\n                                message\n                            \n                            \n                                    Optional\n                                path\n                            \n                            \n                                    Optional\n                                stack\n                            \n                            \n                                    Optional\n                                status\n                            \n                            \n                                    Optional\n                                statusCode\n                            \n                            \n                                    Optional\n                                timestamp\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(message: string, error: string, stack: string, errors: unknown, path: string, statusCode: number)\n                    \n                \n                        \n                            \n                                Defined in src/base/swagger-gen/api-errors.decorator.ts:36\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        message\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        error\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        stack\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        errors\n                                                  \n                                                        \n                                                                    unknown\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        path\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        statusCode\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            error\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiPropertyOptional()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/base/swagger-gen/api-errors.decorator.ts:28\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            errors\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     unknown\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiPropertyOptional()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/base/swagger-gen/api-errors.decorator.ts:30\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            message\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiPropertyOptional()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/base/swagger-gen/api-errors.decorator.ts:24\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            path\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiPropertyOptional()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/base/swagger-gen/api-errors.decorator.ts:34\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            stack\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiPropertyOptional()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/base/swagger-gen/api-errors.decorator.ts:36\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            status\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiPropertyOptional()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/base/swagger-gen/api-errors.decorator.ts:26\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            statusCode\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiPropertyOptional()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/base/swagger-gen/api-errors.decorator.ts:22\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            timestamp\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiPropertyOptional()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/base/swagger-gen/api-errors.decorator.ts:32\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n    applyDecorators,\n    BadRequestException,\n    ConflictException,\n    ForbiddenException,\n    HttpStatus,\n    InternalServerErrorException,\n    NotFoundException,\n    UnauthorizedException,\n} from '@nestjs/common'\nimport {\n    ApiBadRequestResponse,\n    ApiForbiddenResponse,\n    ApiInternalServerErrorResponse,\n    ApiNotFoundResponse,\n    ApiUnauthorizedResponse,\n    ApiConflictResponse,\n    ApiPropertyOptional,\n} from '@nestjs/swagger'\n\nexport class ApiException {\n    @ApiPropertyOptional() statusCode?: number\n\n    @ApiPropertyOptional() message?: string\n\n    @ApiPropertyOptional() status?: string\n\n    @ApiPropertyOptional() error?: string\n\n    @ApiPropertyOptional() errors?: unknown\n\n    @ApiPropertyOptional() timestamp?: string\n\n    @ApiPropertyOptional() path?: string\n\n    @ApiPropertyOptional() stack?: string\n\n    constructor(\n        message: string,\n        error: string,\n        stack: string,\n        errors: unknown,\n        path: string,\n        statusCode: number,\n    ) {\n        this.message = message\n        this.error = error\n        this.stack = stack\n        this.errors = errors\n        this.path = path\n        this.timestamp = new Date().toISOString()\n        this.statusCode = statusCode\n        this.status = HttpStatus[statusCode]\n    }\n}\n\nexport function ApiErrors() {\n    return applyDecorators(\n        ApiBadRequestResponse({\n            type: BadRequestException,\n            description: 'BadRequestException',\n        }),\n        ApiInternalServerErrorResponse({\n            type: InternalServerErrorException,\n        }),\n        ApiUnauthorizedResponse({\n            type: UnauthorizedException,\n        }),\n        ApiForbiddenResponse({\n            type: ForbiddenException,\n        }),\n        ApiConflictResponse({\n            type: ConflictException,\n        }),\n        ApiNotFoundResponse({ type: NotFoundException, description: 'Not found' }),\n    )\n\n    return applyDecorators(\n        ApiNotFoundResponse({ type: ApiException, description: 'Not found' }),\n        ApiBadRequestResponse({ type: ApiException, description: 'Bad Request' }),\n        ApiInternalServerErrorResponse({\n            type: ApiException,\n            description: 'Internal Server Error',\n        }),\n        ApiUnauthorizedResponse({\n            type: ApiException,\n            description: 'Unauthorized',\n        }),\n        ApiForbiddenResponse({ type: ApiException, description: 'Forbidden' }),\n    )\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getHello\n                        \n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common'\nimport { ApiTags } from '@nestjs/swagger'\n\n@Controller(AppController.path)\n@ApiTags(AppController.name)\nexport class AppController {\n    static path = '/'\n\n    @Get() getHello() {\n        return 'Hello World!'\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/AppLaunchAction.html":{"url":"interfaces/AppLaunchAction.html","title":"interface - AppLaunchAction","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  AppLaunchAction\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/domain.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        action\n                                \n                                \n                                        actionId\n                                \n                                \n                                        isActive\n                                \n                                \n                                            Optional\n                                        subject\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        action\n                                    \n                                \n                                \n                                    \n                                        action:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        actionId\n                                    \n                                \n                                \n                                    \n                                        actionId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        isActive\n                                    \n                                \n                                \n                                    \n                                        isActive:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        subject\n                                    \n                                \n                                \n                                    \n                                        subject:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { HttpStatus } from '@nestjs/common'\n\nexport type Results =\n    | GetAppLaunchData\n    | GetUserProfile\n    | GetUserPosts\n    | GetComments\n    | GetRescueList\n    | GetFollowers\n    | GetFollowing\n\nexport type APIError = Error | string | null\n\nexport interface Result {\n    data: T\n    error?: APIError\n    message?: string | string[]\n    statusCode: HttpStatus\n}\n\nexport interface APIResponse {\n    data: T\n    error?: APIError\n    message?: string | string[]\n    statusCode: HttpStatus\n\n    count?: number\n    page?: number\n    pageCount?: number\n    total?: number\n}\n\nexport interface GetAppLaunchData {\n    link: 'api:/'\n    response: APIResponse\n}\n\nexport interface GetUserProfile {\n    link: 'api:v1/user/getUserProfile?userId=25'\n    response: APIResponse\n}\n\nexport interface GetUserPosts {\n    link: 'api:v1/user/getUserPosts?pageNo=0&pageSize=25'\n    response: APIResponse\n}\n\nexport interface GetRescueList {\n    link: 'api:v1/rescue/getRescueList?pageNo=0&pageSize=10&status=pending|inProgress|completed|nearest'\n    response: APIResponse\n}\n\nexport interface GetComments {\n    link: 'api:v1/rescue/getComments?pageNo=0&pageSize=10&postId=1230'\n    response: APIResponse\n}\n\nexport interface GetFollowers {\n    link: 'api:v1/rescue/getUserFollowers?userId=1230'\n    response: APIResponse\n}\n\nexport interface GetFollowing {\n    link: 'api:v1/rescue/getUserFollowing?userId=1230'\n    response: APIResponse\n}\n\nexport interface AppLaunchAction {\n    actionId: number\n    action: string\n    isActive: boolean\n    subject?: string\n}\n\nexport interface User {\n    usesId: number\n\n    coverImage: string\n    following: boolean\n    gender: string\n    isOwnProfile: number\n    isRescuer: boolean\n    latitude: number\n    longitude: number\n    numberOfFollowers: number\n    numberOfFollowing: number\n    numberOfPosts: number\n    numberOfRescuesCompleted: number\n    numberOfRescuesCreated: number\n    numberOfRescuesInProgress: number\n    profileImage: string\n    rescuer: boolean\n    userAddress: string\n    userContacts: string\n    userEmail: string\n    userName: string\n    badge: {\n        badgeId: number\n        badgeName: string\n        badgeDescription: string\n        recuesCompletionNeeded: number\n    }\n    setting: {\n        showMyContacts: boolean\n        getNotifications: boolean\n    }\n}\n\nexport interface PostType {\n    postTypeId: number\n    postType: string\n}\n\nexport interface PostedByUser {\n    usesId: number\n    badgeName: string\n    following: boolean\n    profileImage: string\n    rescuer: boolean\n    userName: string\n}\n\nexport interface UserPost {\n    postId: number\n    commentsCount: number\n    isUserReactedToPost: boolean\n    ownPage: boolean\n    postBy: PostedByUser\n    postImage: string\n    postTime: string\n    postType: PostType\n    postVideo: string\n    reactionsCount: number\n    timeAgo: string\n\n    adCorporateLogoUrl: string | null\n    corporateDescription: string | null\n    corporateName: string | null\n}\n\nexport interface UserPosts {\n    isRecent: boolean\n    feed: UserPost[]\n}\n\nexport interface Rescues {\n    rescueId: number\n    animalImageUrl: string\n    distance: number\n    distanceAway: string\n    emergencyType: string\n    postedBy: string\n    postedMinAgo: string\n    rescueDate: Date\n    rescuedPetName: string\n    rescueLocality: string\n    rescuers: {\n        contact: number\n        name: string\n        profileId: number\n        profileImageUrl: string\n        rescues: boolean\n        showMyNumber: boolean\n    }\n    rescueStatus: string\n    viewsCont: number\n}\n\nexport interface RescueLists {\n    rescues: Rescues[]\n}\n\nexport interface Comment {\n    commentId: number\n    comment: string\n    commentedUseName: string\n    commentedUserId: number\n    timeAgo: string\n}\n\nexport interface Comments {\n    comments: Comment[]\n}\n\nexport interface Follower {\n    userId: number\n    userName: string\n    profileImage: string\n    areYouFollowing: boolean\n    showRemoveOption: boolean\n}\n\nexport type Following = Follower\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nCronModule\n\nCronModule\n\nAppModule -->\n\nCronModule->AppModule\n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\n\n\nEmailSchedulingModule\n\nEmailSchedulingModule\n\nAppModule -->\n\nEmailSchedulingModule->AppModule\n\n\n\n\n\nTagsModule\n\nTagsModule\n\nAppModule -->\n\nTagsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n        \n            Description\n        \n        \n            App module\n\n        \n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                        \n                            HealthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            CronModule\n                        \n                        \n                            DatabaseModule\n                        \n                        \n                            EmailSchedulingModule\n                        \n                        \n                            TagsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onApplicationShutdown\n                        \n                        \n                    \n                \n            \n            \n                \nonApplicationShutdown(signal?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app.module.ts:73\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    signal\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onModuleInit\n                        \n                        \n                    \n                \n            \n            \n                \nonModuleInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app.module.ts:69\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import { Module, OnApplicationShutdown, OnModuleInit } from '@nestjs/common'\nimport { ConfigModule } from '@nestjs/config'\nimport { ScheduleModule } from '@nestjs/schedule'\nimport { TerminusModule } from '@nestjs/terminus'\n\nimport * as Joi from '@hapi/joi'\n\nimport { AppController } from './app.controller'\nimport { AuthModule } from './auth/auth.module'\nimport { CronModule } from './cron/cron.module'\nimport { DatabaseModule } from './database/database.module'\nimport { EmailSchedulingModule } from './emailScheduling/emailScheduling.module'\nimport { HealthController } from './health/health.controller'\nimport { TagsModule } from './tags/tags.module'\nimport { UsersModule } from './users/users.module'\n\nconst ConfigModuleOptions = {\n    isGlobal: true,\n    validationOptions: {\n        allowUnknown: true,\n        abortEarly: true,\n    },\n    /* eslint-disable */\n    validationSchema: Joi.object({\n        PORT: Joi.number().default(3000),\n        NODE_ENV: Joi.string()\n            .required()\n            .valid('development', 'production', 'test', 'provision')\n            .default('development'),\n\n        JWTKEY: Joi.string().required(),\n        TOKEN_EXPIRATION: Joi.string().required(),\n\n        database: Joi.string().required(),\n        type: Joi.string().required(),\n        logging: Joi.string().required(),\n        synchronize: Joi.string().required(),\n    }),\n    /* eslint-enable */\n}\n\n/**\n * App module\n */\n@Module({\n    controllers: [AppController, HealthController],\n    imports: [\n        ConfigModule.forRoot(ConfigModuleOptions),\n        DatabaseModule,\n        TerminusModule, // Health module\n        ScheduleModule.forRoot(), // CronModules deps\n        CronModule,\n        EmailSchedulingModule,\n        AuthModule,\n        TagsModule,\n        UsersModule,\n    ],\n    providers: [],\n})\nexport class AppModule implements OnModuleInit, OnApplicationShutdown {\n    /*\n     * When the application receives a termination signal it will call any registered\n     * onModuleDestroy(), beforeApplicationShutdown(), then onApplicationShutdown() methods\n     * (in the sequence described above) with the corresponding signal as the first parameter.\n     * If a registered function awaits an asynchronous call (returns a promise), Nest will not\n     * continue in the sequence until the promise is resolved or rejected.\n     */\n\n    onModuleInit(): void {\n        console.info(`ModuleInit - AppModule has been initialized.`)\n    }\n\n    onApplicationShutdown(signal?: string): void {\n        console.error(\n            // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n            `ApplicationShutdown - AppModule has been shutdown with ${signal} signal`,\n        )\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            login\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    login(req: Request, loginCreds: LoginCredsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Post('login')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    loginCreds\n                                    \n                                                LoginCredsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, HttpStatus, Post, Req, UseGuards } from '@nestjs/common'\nimport { AuthGuard } from '@nestjs/passport'\nimport { ApiProperty, ApiTags } from '@nestjs/swagger'\n\nimport { IsNotEmpty } from 'class-validator'\nimport type { Request } from 'express'\n\nimport { UsersService } from '../users/users.service'\nimport { AuthService } from './auth.service'\n\nexport class LoginCredsDto {\n    @ApiProperty({ example: 'admin@demo.com' })\n    @IsNotEmpty()\n    readonly email!: string\n\n    @ApiProperty({ example: '12345678' })\n    @IsNotEmpty()\n    readonly password!: string\n}\n\n@Controller(AuthController.path)\n@ApiTags(AuthController.name)\nexport class AuthController {\n    static path = 'auth'\n\n    constructor(\n        readonly authService: AuthService,\n        readonly userService: UsersService,\n    ) {}\n\n    @UseGuards(AuthGuard('local'))\n    @Post('login')\n    async login(\n        @Req() req: Request,\n        @Body() loginCreds: LoginCredsDto,\n    ): Promise {\n        const { user } = req\n        const { email, password } = loginCreds\n\n        const data = await this.authService.login(user)\n\n        return {\n            data,\n            statusCode: HttpStatus.OK,\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n        \n            Description\n        \n        \n            Auth module\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            LocalStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common'\nimport { ConfigModule, ConfigService } from '@nestjs/config'\nimport { JwtModule } from '@nestjs/jwt'\nimport { PassportModule } from '@nestjs/passport'\n\nimport { UsersModule } from '../users/users.module'\nimport { AuthController } from './auth.controller'\nimport { AuthService } from './auth.service'\nimport { JwtStrategy } from './jwt.strategy'\nimport { LocalStrategy } from './local.strategy'\n\n/**\n * Auth module\n */\n@Module({\n    imports: [\n        ConfigModule,\n        UsersModule,\n        PassportModule,\n        JwtModule.registerAsync({\n            imports: [ConfigModule],\n            inject: [ConfigService],\n            useFactory: async (\n                configService: ConfigService,\n            ) => ({\n                secret: configService.get('JWTKEY'),\n                signOptions: {\n                    expiresIn: configService.get('TOKEN_EXPIRATION'),\n                },\n            }),\n        }),\n    ],\n    providers: [AuthService, LocalStrategy, JwtStrategy],\n    controllers: [AuthController],\n    exports: [PassportModule, JwtModule],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                comparePassword\n                            \n                            \n                                    Async\n                                generateToken\n                            \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UsersService, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            comparePassword\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    comparePassword(enteredPassword: string, dbPassword: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    enteredPassword\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dbPassword\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            generateToken\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    generateToken(user: Record)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                Record\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            login\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    login(user: Record)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                Record\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validateUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validateUser(email: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common'\nimport { JwtService } from '@nestjs/jwt'\n\nimport * as bcrypt from 'bcrypt'\n\nimport { UsersService } from '../users/users.service'\n\n@Injectable()\nexport class AuthService {\n    constructor(\n        readonly userService: UsersService,\n        readonly jwtService: JwtService,\n    ) {}\n\n    async comparePassword(enteredPassword: string, dbPassword: string) {\n        return bcrypt.compare(enteredPassword, dbPassword)\n    }\n\n    async generateToken(user: Record) {\n        return this.jwtService.signAsync(user)\n    }\n\n    async validateUser(email: string, password: string) {\n        const user = await this.userService.findOneByEmail(email)\n\n        if (!user)\n            return Promise.reject(\n                new UnauthorizedException('Unknown User Credentials'),\n            )\n\n        const match = await this.comparePassword(password, user.password)\n\n        if (!match)\n            return Promise.reject(new UnauthorizedException('Invalid Credentials'))\n\n        return user.toJSON()\n    }\n\n    async login(user: Record) {\n        return this.generateToken(user)\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BaseModel.html":{"url":"classes/BaseModel.html","title":"class - BaseModel","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BaseModel\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/models/base.model.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                            IBaseModel\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                created_at\n                            \n                            \n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Static\n                                hidden\n                            \n                            \n                                id\n                            \n                            \n                                    Static\n                                QueryBuilder\n                            \n                            \n                                updated_at\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                $beforeUpdate\n                            \n                            \n                                    Async\n                                fetchRelation\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            created_at\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                        \n                            \n                                    Defined in src/database/models/base.model.ts:39\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            deleted_at\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     any | null\n\n                        \n                    \n                        \n                            \n                                    Defined in src/database/models/base.model.ts:43\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            hidden\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : [\n        'salt',\n        'password',\n        'created_at',\n        'updated_at',\n        // 'deleted_at'\n    ]\n                        \n                    \n                        \n                            \n                                    Defined in src/database/models/base.model.ts:25\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/database/models/base.model.ts:37\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            QueryBuilder\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : CustomQueryBuilder\n                        \n                    \n                        \n                            \n                                    Defined in src/database/models/base.model.ts:35\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updated_at\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                        \n                            \n                                    Defined in src/database/models/base.model.ts:41\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            $beforeUpdate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    $beforeUpdate(opt: ModelOptions, queryContext: QueryContext)\n                \n            \n\n\n            \n                \n                    Defined in src/database/models/base.model.ts:60\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    opt\n                                    \n                                            ModelOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    queryContext\n                                    \n                                            QueryContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            fetchRelation\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    fetchRelation(expression: string | Record, options: Objection.FetchGraphOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/database/models/base.model.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    expression\n                                    \n                                                string | Record\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                            Objection.FetchGraphOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import Objection, {\n    raw,\n    mixin,\n    Model,\n    ModelOptions,\n    QueryContext,\n    RelationExpression,\n} from 'objection'\nimport { DBErrors } from 'objection-db-errors'\nimport visibilityPlugin from 'objection-visibility'\n\nimport { CustomQueryBuilder } from './helpers'\n\nexport interface IBaseModel {\n    id: number\n    created_at: any\n    updated_at: any\n    deleted_at?: any\n}\n\nexport class BaseModel\n    extends mixin(Model, [visibilityPlugin, DBErrors])\n    implements IBaseModel {\n    // hidden fields to filter from query result\n    static hidden = [\n        'salt',\n        'password',\n        'created_at',\n        'updated_at',\n        // 'deleted_at'\n    ]\n\n    // QueryBuilderType!: CustomQueryBuilder // custom query builder for pagination\n\n    static QueryBuilder = CustomQueryBuilder\n\n    id!: number\n\n    created_at: any\n\n    updated_at: any\n\n    deleted_at?: any | null\n\n    // fetch data with relation mapping\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    async fetchRelation(\n        expression: string | Record,\n        options: Objection.FetchGraphOptions,\n    ) {\n        if (typeof expression === 'string' && expression.toString() in this) {\n            // @ts-ignore\n            if (this[expression.toString()]) return this\n        }\n\n        await this.$fetchGraph(expression, options)\n        return this\n    }\n\n    async $beforeUpdate(opt: ModelOptions, queryContext: QueryContext) {\n        await super.$beforeUpdate(opt, queryContext)\n\n        this.updated_at = raw('CURRENT_TIMESTAMP') // new Date().toISOString() // fn.now()\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/BaseRoute.html":{"url":"interfaces/BaseRoute.html","title":"interface - BaseRoute","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  BaseRoute\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/base/swagger-gen/utils/other.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        enable\n                                \n                                \n                                        method\n                                \n                                \n                                        name\n                                \n                                \n                                        override\n                                \n                                \n                                        path\n                                \n                                \n                                        withParams\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        enable\n                                    \n                                \n                                \n                                    \n                                        enable:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        method\n                                    \n                                \n                                \n                                    \n                                        method:         RequestMethod\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         RequestMethod\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                    \n                                \n                                \n                                    \n                                        name:         BaseRouteName\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         BaseRouteName\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        override\n                                    \n                                \n                                \n                                    \n                                        override:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        path\n                                    \n                                \n                                \n                                    \n                                        path:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        withParams\n                                    \n                                \n                                \n                                    \n                                        withParams:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { RequestMethod, ValidationPipeOptions } from '@nestjs/common'\nimport { SwaggerEnumType } from '@nestjs/swagger/dist/types/swagger-enum.type'\n\nexport declare type BaseRouteName =\n    | 'getManyBase'\n    | 'getOneBase'\n    | 'createOneBase'\n    | 'createManyBase'\n    | 'updateOneBase'\n    | 'replaceOneBase'\n    | 'deleteOneBase'\n    | 'getOne'\n\nexport interface BaseRoute {\n    name: BaseRouteName\n    path: string\n    method: RequestMethod\n    enable: boolean\n    override: boolean\n    withParams: boolean\n}\n\nexport interface GetManyDefaultResponse {\n    data: T[]\n    count: number\n    total: number\n    page: number\n    pageCount: number\n}\n\nexport interface ParamOption {\n    field?: string\n    type?: 'number' | 'string' | 'uuid'\n    enum?: SwaggerEnumType\n    primary?: boolean\n    disabled?: boolean\n}\n\nexport interface ParamsOptions {\n    [key: string]: ParamOption\n}\n\nexport interface CrudOptions {\n    model: {\n        type: { name: string }\n    }\n    dto?: {}\n    routes?: {\n        deleteOneBase?: { returnDeleted?: boolean }\n    }\n    validation?: ValidationPipeOptions | false\n    params?: ParamsOptions\n    query?: {\n        limit?: number\n        maxLimit?: number\n        cache?: number | false\n        alwaysPaginate?: boolean\n    }\n    serialize?: {\n        getMany?: false | object\n        get?: false | object\n        create?: false | object\n        createMany?: false | object\n        update?: false | object\n        replace?: false | object\n        delete?: false | object\n    }\n}\n\nexport function safeRequire(path: string): T | null {\n    try {\n        // eslint-disable-next-line global-require,@typescript-eslint/no-var-requires,import/no-dynamic-require\n        const pack = require(path)\n        return pack\n    } catch (_) {\n        return null\n    }\n}\n\nexport const swagger = safeRequire('@nestjs/swagger')\nexport const swaggerConst = safeRequire('@nestjs/swagger/dist/constants')\n\nexport function ApiProperty(options?: any): PropertyDecorator {\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    return (target: object, propertyKey: string | symbol) => {\n        if (swagger) {\n            const ApiPropertyDecorator =\n                swagger.ApiProperty || swagger.ApiModelProperty\n            ApiPropertyDecorator(options)(target, propertyKey)\n        }\n    }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Comment.html":{"url":"interfaces/Comment.html","title":"interface - Comment","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Comment\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/domain.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        comment\n                                \n                                \n                                        commentedUseName\n                                \n                                \n                                        commentedUserId\n                                \n                                \n                                        commentId\n                                \n                                \n                                        timeAgo\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        comment\n                                    \n                                \n                                \n                                    \n                                        comment:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        commentedUseName\n                                    \n                                \n                                \n                                    \n                                        commentedUseName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        commentedUserId\n                                    \n                                \n                                \n                                    \n                                        commentedUserId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        commentId\n                                    \n                                \n                                \n                                    \n                                        commentId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        timeAgo\n                                    \n                                \n                                \n                                    \n                                        timeAgo:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { HttpStatus } from '@nestjs/common'\n\nexport type Results =\n    | GetAppLaunchData\n    | GetUserProfile\n    | GetUserPosts\n    | GetComments\n    | GetRescueList\n    | GetFollowers\n    | GetFollowing\n\nexport type APIError = Error | string | null\n\nexport interface Result {\n    data: T\n    error?: APIError\n    message?: string | string[]\n    statusCode: HttpStatus\n}\n\nexport interface APIResponse {\n    data: T\n    error?: APIError\n    message?: string | string[]\n    statusCode: HttpStatus\n\n    count?: number\n    page?: number\n    pageCount?: number\n    total?: number\n}\n\nexport interface GetAppLaunchData {\n    link: 'api:/'\n    response: APIResponse\n}\n\nexport interface GetUserProfile {\n    link: 'api:v1/user/getUserProfile?userId=25'\n    response: APIResponse\n}\n\nexport interface GetUserPosts {\n    link: 'api:v1/user/getUserPosts?pageNo=0&pageSize=25'\n    response: APIResponse\n}\n\nexport interface GetRescueList {\n    link: 'api:v1/rescue/getRescueList?pageNo=0&pageSize=10&status=pending|inProgress|completed|nearest'\n    response: APIResponse\n}\n\nexport interface GetComments {\n    link: 'api:v1/rescue/getComments?pageNo=0&pageSize=10&postId=1230'\n    response: APIResponse\n}\n\nexport interface GetFollowers {\n    link: 'api:v1/rescue/getUserFollowers?userId=1230'\n    response: APIResponse\n}\n\nexport interface GetFollowing {\n    link: 'api:v1/rescue/getUserFollowing?userId=1230'\n    response: APIResponse\n}\n\nexport interface AppLaunchAction {\n    actionId: number\n    action: string\n    isActive: boolean\n    subject?: string\n}\n\nexport interface User {\n    usesId: number\n\n    coverImage: string\n    following: boolean\n    gender: string\n    isOwnProfile: number\n    isRescuer: boolean\n    latitude: number\n    longitude: number\n    numberOfFollowers: number\n    numberOfFollowing: number\n    numberOfPosts: number\n    numberOfRescuesCompleted: number\n    numberOfRescuesCreated: number\n    numberOfRescuesInProgress: number\n    profileImage: string\n    rescuer: boolean\n    userAddress: string\n    userContacts: string\n    userEmail: string\n    userName: string\n    badge: {\n        badgeId: number\n        badgeName: string\n        badgeDescription: string\n        recuesCompletionNeeded: number\n    }\n    setting: {\n        showMyContacts: boolean\n        getNotifications: boolean\n    }\n}\n\nexport interface PostType {\n    postTypeId: number\n    postType: string\n}\n\nexport interface PostedByUser {\n    usesId: number\n    badgeName: string\n    following: boolean\n    profileImage: string\n    rescuer: boolean\n    userName: string\n}\n\nexport interface UserPost {\n    postId: number\n    commentsCount: number\n    isUserReactedToPost: boolean\n    ownPage: boolean\n    postBy: PostedByUser\n    postImage: string\n    postTime: string\n    postType: PostType\n    postVideo: string\n    reactionsCount: number\n    timeAgo: string\n\n    adCorporateLogoUrl: string | null\n    corporateDescription: string | null\n    corporateName: string | null\n}\n\nexport interface UserPosts {\n    isRecent: boolean\n    feed: UserPost[]\n}\n\nexport interface Rescues {\n    rescueId: number\n    animalImageUrl: string\n    distance: number\n    distanceAway: string\n    emergencyType: string\n    postedBy: string\n    postedMinAgo: string\n    rescueDate: Date\n    rescuedPetName: string\n    rescueLocality: string\n    rescuers: {\n        contact: number\n        name: string\n        profileId: number\n        profileImageUrl: string\n        rescues: boolean\n        showMyNumber: boolean\n    }\n    rescueStatus: string\n    viewsCont: number\n}\n\nexport interface RescueLists {\n    rescues: Rescues[]\n}\n\nexport interface Comment {\n    commentId: number\n    comment: string\n    commentedUseName: string\n    commentedUserId: number\n    timeAgo: string\n}\n\nexport interface Comments {\n    comments: Comment[]\n}\n\nexport interface Follower {\n    userId: number\n    userName: string\n    profileImage: string\n    areYouFollowing: boolean\n    showRemoveOption: boolean\n}\n\nexport type Following = Follower\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Comments.html":{"url":"interfaces/Comments.html","title":"interface - Comments","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Comments\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/domain.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        comments\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        comments\n                                    \n                                \n                                \n                                    \n                                        comments:         Comment[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Comment[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { HttpStatus } from '@nestjs/common'\n\nexport type Results =\n    | GetAppLaunchData\n    | GetUserProfile\n    | GetUserPosts\n    | GetComments\n    | GetRescueList\n    | GetFollowers\n    | GetFollowing\n\nexport type APIError = Error | string | null\n\nexport interface Result {\n    data: T\n    error?: APIError\n    message?: string | string[]\n    statusCode: HttpStatus\n}\n\nexport interface APIResponse {\n    data: T\n    error?: APIError\n    message?: string | string[]\n    statusCode: HttpStatus\n\n    count?: number\n    page?: number\n    pageCount?: number\n    total?: number\n}\n\nexport interface GetAppLaunchData {\n    link: 'api:/'\n    response: APIResponse\n}\n\nexport interface GetUserProfile {\n    link: 'api:v1/user/getUserProfile?userId=25'\n    response: APIResponse\n}\n\nexport interface GetUserPosts {\n    link: 'api:v1/user/getUserPosts?pageNo=0&pageSize=25'\n    response: APIResponse\n}\n\nexport interface GetRescueList {\n    link: 'api:v1/rescue/getRescueList?pageNo=0&pageSize=10&status=pending|inProgress|completed|nearest'\n    response: APIResponse\n}\n\nexport interface GetComments {\n    link: 'api:v1/rescue/getComments?pageNo=0&pageSize=10&postId=1230'\n    response: APIResponse\n}\n\nexport interface GetFollowers {\n    link: 'api:v1/rescue/getUserFollowers?userId=1230'\n    response: APIResponse\n}\n\nexport interface GetFollowing {\n    link: 'api:v1/rescue/getUserFollowing?userId=1230'\n    response: APIResponse\n}\n\nexport interface AppLaunchAction {\n    actionId: number\n    action: string\n    isActive: boolean\n    subject?: string\n}\n\nexport interface User {\n    usesId: number\n\n    coverImage: string\n    following: boolean\n    gender: string\n    isOwnProfile: number\n    isRescuer: boolean\n    latitude: number\n    longitude: number\n    numberOfFollowers: number\n    numberOfFollowing: number\n    numberOfPosts: number\n    numberOfRescuesCompleted: number\n    numberOfRescuesCreated: number\n    numberOfRescuesInProgress: number\n    profileImage: string\n    rescuer: boolean\n    userAddress: string\n    userContacts: string\n    userEmail: string\n    userName: string\n    badge: {\n        badgeId: number\n        badgeName: string\n        badgeDescription: string\n        recuesCompletionNeeded: number\n    }\n    setting: {\n        showMyContacts: boolean\n        getNotifications: boolean\n    }\n}\n\nexport interface PostType {\n    postTypeId: number\n    postType: string\n}\n\nexport interface PostedByUser {\n    usesId: number\n    badgeName: string\n    following: boolean\n    profileImage: string\n    rescuer: boolean\n    userName: string\n}\n\nexport interface UserPost {\n    postId: number\n    commentsCount: number\n    isUserReactedToPost: boolean\n    ownPage: boolean\n    postBy: PostedByUser\n    postImage: string\n    postTime: string\n    postType: PostType\n    postVideo: string\n    reactionsCount: number\n    timeAgo: string\n\n    adCorporateLogoUrl: string | null\n    corporateDescription: string | null\n    corporateName: string | null\n}\n\nexport interface UserPosts {\n    isRecent: boolean\n    feed: UserPost[]\n}\n\nexport interface Rescues {\n    rescueId: number\n    animalImageUrl: string\n    distance: number\n    distanceAway: string\n    emergencyType: string\n    postedBy: string\n    postedMinAgo: string\n    rescueDate: Date\n    rescuedPetName: string\n    rescueLocality: string\n    rescuers: {\n        contact: number\n        name: string\n        profileId: number\n        profileImageUrl: string\n        rescues: boolean\n        showMyNumber: boolean\n    }\n    rescueStatus: string\n    viewsCont: number\n}\n\nexport interface RescueLists {\n    rescues: Rescues[]\n}\n\nexport interface Comment {\n    commentId: number\n    comment: string\n    commentedUseName: string\n    commentedUserId: number\n    timeAgo: string\n}\n\nexport interface Comments {\n    comments: Comment[]\n}\n\nexport interface Follower {\n    userId: number\n    userName: string\n    profileImage: string\n    areYouFollowing: boolean\n    showRemoveOption: boolean\n}\n\nexport type Following = Follower\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateTagsDto.html":{"url":"classes/CreateTagsDto.html","title":"class - CreateTagsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateTagsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/tag.model.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                            ITag\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@IsNotEmpty()@MinLength(2)@MaxLength(36)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tags/tag.model.ts:38\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger'\n\nimport { IsNotEmpty, IsString, MaxLength, MinLength } from 'class-validator'\nimport type { JSONSchema, ModelObject, PartialModelObject } from 'objection'\n\nimport { BaseModel } from '../database/models/base.model'\n\ninterface ITag {\n    name: string\n}\n\nexport class Tag extends BaseModel implements ITag {\n    static tableName = 'tags'\n\n    name!: string\n\n    // JSON schema is not the database schema! Nothing is generated based on this.\n    // This is only used for validation. Whenever a model instance is created it is checked against this schema.\n    static jsonSchema: JSONSchema = {\n        type: 'object',\n        required: ['name'],\n        properties: {\n            id: { type: 'integer' },\n            name: { type: 'string', minLength: 2, maxLength: 255 },\n        },\n    }\n}\n\n// The `ModelObject` generic gives you a clean interface that can be used on the frontend, without any of the objection Model class properties or methods.\nexport type TagShape = ModelObject\nexport type PartialTagShape = PartialModelObject\n\nexport class CreateTagsDto implements ITag {\n    @IsString()\n    @IsNotEmpty()\n    @MinLength(2)\n    @MaxLength(36)\n    name!: string\n}\n\nexport class UpdateTagsDto extends PartialType(CreateTagsDto) {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/user.model.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                            IUser\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                    Optional\n                                firstName\n                            \n                            \n                                isActive\n                            \n                            \n                                    Optional\n                                lastName\n                            \n                            \n                                password\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            email\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsEmail()@IsNotEmpty()@MinLength(2)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/user.model.ts:116\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            firstName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@IsNotEmpty()@MinLength(2)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/user.model.ts:126\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isActive\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsBoolean()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/user.model.ts:134\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            lastName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@IsNotEmpty()@MinLength(2)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/user.model.ts:131\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@IsNotEmpty()@MinLength(8)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/user.model.ts:121\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            username\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@IsNotEmpty()@MinLength(2)@MaxLength(36)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/user.model.ts:111\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger'\n\nimport * as bcrypt from 'bcrypt'\nimport {\n    IsString,\n    MinLength,\n    IsNotEmpty,\n    MaxLength,\n    IsEmail,\n    IsBoolean,\n} from 'class-validator'\nimport type { JSONSchema, Modifiers, PartialModelObject } from 'objection'\nimport { ModelObject, QueryContext } from 'objection'\n\nimport { BaseModel } from '../database/models/base.model'\n\ninterface IUser {\n    username: string\n    email: string\n    firstName?: string\n    lastName?: string\n    isActive: boolean\n    password: string\n}\n\nexport class User extends BaseModel implements IUser {\n    static tableName = 'users'\n\n    username!: string\n\n    email!: string\n\n    firstName?: string\n\n    lastName?: string\n\n    isActive!: boolean\n\n    password!: string\n\n    // JSON schema is not the database schema! Nothing is generated based on this.\n    // This is only used for validation. Whenever a model instance is created it is checked against this schema.\n    static jsonSchema: JSONSchema = {\n        type: 'object',\n        required: ['username', 'email', 'password'],\n        properties: {\n            id: { type: 'integer', readOnly: true },\n            username: { type: 'string', minLength: 3, maxLength: 255 },\n            email: {\n                type: 'string',\n                minLength: 3,\n                maxLength: 255,\n                format: 'email',\n            },\n            password: { type: 'string', minLength: 8, maxLength: 255 },\n            firstName: { type: 'string', minLength: 1, maxLength: 255 },\n            lastName: { type: 'string', minLength: 1, maxLength: 255 },\n            isActive: { type: 'boolean' },\n        },\n    }\n\n    // Modifiers are reusable query snippets that can be used in various places.\n    static modifiers: Modifiers = {\n        // Our example modifier is a a semi-dumb fuzzy name match. We split the name into pieces using whitespace\n        // and then try to partially match each of those pieces to both the `firstName` and the `lastName` fields.\n\n        searchByName(query, name: string) {\n            // This `where` simply creates parentheses so that other `where` statements don't get mixed with the these.\n\n            query.where((q) => {\n                for (const namePart of name.trim().split(/\\s+/)) {\n                    for (const column of ['firstName', 'lastName']) {\n                        q.orWhereRaw('lower(??) like ?', [\n                            column,\n                            `${namePart.toLowerCase()}%`,\n                        ])\n                    }\n                }\n            })\n        },\n    }\n\n    async hashPassword(password: string) {\n        const hash = await bcrypt.hash(password, 12)\n        return hash\n    }\n\n    async $beforeInsert(queryContext: QueryContext) {\n        await super.$beforeInsert(queryContext)\n        this.password = await this.hashPassword(this.password)\n    }\n\n    /*\n    async $beforeUpdate(opt: ModelOptions, queryContext: QueryContext) {\n        await super.$beforeUpdate(opt, queryContext)\n        this.password = await this.hashPassword(this.password)\n    }\n    */\n}\n\n// The `ModelObject` generic gives you a clean interface that can be used on the frontend, without any of the objection Model class properties or methods.\nexport type UserShape = ModelObject\nexport type PartialUserShape = PartialModelObject\n\nexport class CreateUserDto implements IUser {\n    @IsString()\n    @IsNotEmpty()\n    @MinLength(2)\n    @MaxLength(36)\n    username!: string\n\n    @IsEmail()\n    @IsNotEmpty()\n    @MinLength(2)\n    email!: string\n\n    @IsString()\n    @IsNotEmpty()\n    @MinLength(8)\n    password!: string\n\n    @IsString()\n    @IsNotEmpty()\n    @MinLength(2)\n    firstName?: string\n\n    @IsString()\n    @IsNotEmpty()\n    @MinLength(2)\n    lastName?: string\n\n    @IsBoolean()\n    isActive!: boolean\n}\n\nexport class UpdateUserDto extends PartialType(CreateUserDto) {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CronModule.html":{"url":"modules/CronModule.html","title":"module - CronModule","body":"\n                   \n\n\n\n\n    Modules\n    CronModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_CronModule\n\n\n\ncluster_CronModule_providers\n\n\n\n\nCronService\n\nCronService\n\n\n\nCronModule\n\nCronModule\n\nCronModule -->\n\nCronService->CronModule\n\n\n\n\n\nPersistedCronService\n\nPersistedCronService\n\nCronModule -->\n\nPersistedCronService->CronModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/cron/cron.module.ts\n        \n\n\n        \n            Description\n        \n        \n            Cron module\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CronService\n                        \n                        \n                            PersistedCronService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common'\n\nimport { CronService } from './cron.service'\nimport { PersistedCronService } from './persisted-cron.service'\n\n/**\n * Cron module\n */\n@Module({\n    providers: [CronService, PersistedCronService],\n})\nexport class CronModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CronService.html":{"url":"injectables/CronService.html","title":"injectable - CronService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  CronService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/cron/cron.service.ts\n        \n\n            \n                Description\n            \n            \n                @Cron are regular cron jobs\n@Interval To declare that a method should run at a (recurring) specified interval\n@Timeout To declare that a method should run (once) at a specified timeout\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                count\n                            \n                            \n                                fact16\n                            \n                            \n                                logger\n                            \n                            \n                                times\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addCronJob\n                            \n                            \n                                addInterval\n                            \n                            \n                                addTimeout\n                            \n                            \n                                deleteCron\n                            \n                            \n                                deleteInterval\n                            \n                            \n                                deleteTimeout\n                            \n                            \n                                factorial\n                            \n                            \n                                handleCron\n                            \n                            \n                                handleInterval\n                            \n                            \n                                handleTimeout\n                            \n                            \n                                logAllCrons\n                            \n                            \n                                logIntervals\n                            \n                            \n                                logTimeouts\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(scheduler: SchedulerRegistry)\n                    \n                \n                        \n                            \n                                Defined in src/cron/cron.service.ts:28\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        scheduler\n                                                  \n                                                        \n                                                                        SchedulerRegistry\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            addCronJob\n                        \n                        \n                    \n                \n            \n            \n                \naddCronJob(name: string, seconds: string)\n                \n            \n\n\n            \n                \n                    Defined in src/cron/cron.service.ts:97\n                \n            \n\n\n            \n                \n                    Dynamically schedule a name CRON job\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Job Name\n\n                                    \n                                \n                                \n                                    seconds\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Seconds\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            addInterval\n                        \n                        \n                    \n                \n            \n            \n                \naddInterval(name: string, milliseconds: number)\n                \n            \n\n\n            \n                \n                    Defined in src/cron/cron.service.ts:136\n                \n            \n\n\n            \n                \n                    Dynamically schedule a named Interval\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Interval Name\n\n                                    \n                                \n                                \n                                    milliseconds\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Milliseconds\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            addTimeout\n                        \n                        \n                    \n                \n            \n            \n                \naddTimeout(name: string, milliseconds: number)\n                \n            \n\n\n            \n                \n                    Defined in src/cron/cron.service.ts:174\n                \n            \n\n\n            \n                \n                    Dynamically schedule a named Timeout\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Timeout Name\n\n                                    \n                                \n                                \n                                    milliseconds\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Milliseconds\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            deleteCron\n                        \n                        \n                    \n                \n            \n            \n                \ndeleteCron(name: string)\n                \n            \n\n\n            \n                \n                    Defined in src/cron/cron.service.ts:112\n                \n            \n\n\n            \n                \n                    Dynamically delete a named scheduled CRON job\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Job Name\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            deleteInterval\n                        \n                        \n                    \n                \n            \n            \n                \ndeleteInterval(name: string)\n                \n            \n\n\n            \n                \n                    Defined in src/cron/cron.service.ts:151\n                \n            \n\n\n            \n                \n                    Dynamically delete a named Interval\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Interval Name\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            deleteTimeout\n                        \n                        \n                    \n                \n            \n            \n                \ndeleteTimeout(name: string)\n                \n            \n\n\n            \n                \n                    Defined in src/cron/cron.service.ts:187\n                \n            \n\n\n            \n                \n                    Dynamically delete a named Timeout\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Timeout Name\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            factorial\n                        \n                        \n                    \n                \n            \n            \n                \nfactorial(n: number)\n                \n            \n\n\n            \n                \n                    Defined in src/cron/cron.service.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    n\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            handleCron\n                        \n                        \n                    \n                \n            \n            \n                \nhandleCron()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Cron(CronExpression.EVERY_MINUTE, {name: 'handleCronFn'})\n                \n            \n\n            \n                \n                    Defined in src/cron/cron.service.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            handleInterval\n                        \n                        \n                    \n                \n            \n            \n                \nhandleInterval()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Interval('handleIntervalFn', 100000)\n                \n            \n\n            \n                \n                    Defined in src/cron/cron.service.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            handleTimeout\n                        \n                        \n                    \n                \n            \n            \n                \nhandleTimeout()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Timeout('handleTimeoutFn', 50000)\n                \n            \n\n            \n                \n                    Defined in src/cron/cron.service.ts:63\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            logAllCrons\n                        \n                        \n                    \n                \n            \n            \n                \nlogAllCrons()\n                \n            \n\n\n            \n                \n                    Defined in src/cron/cron.service.ts:76\n                \n            \n\n\n            \n                \n                    Get all of the CRON jobs\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            logIntervals\n                        \n                        \n                    \n                \n            \n            \n                \nlogIntervals()\n                \n            \n\n\n            \n                \n                    Defined in src/cron/cron.service.ts:126\n                \n            \n\n\n            \n                \n                    Get all of the Intervals\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            logTimeouts\n                        \n                        \n                    \n                \n            \n            \n                \nlogTimeouts()\n                \n            \n\n\n            \n                \n                    Defined in src/cron/cron.service.ts:164\n                \n            \n\n\n            \n                \n                    Get all of the Timeouts\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            count\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 0\n                        \n                    \n                        \n                            \n                                    Defined in src/cron/cron.service.ts:22\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            fact16\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 20922789888000\n                        \n                    \n                        \n                            \n                                    Defined in src/cron/cron.service.ts:28\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            logger\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Logger(CronService.name)\n                        \n                    \n                        \n                            \n                                    Defined in src/cron/cron.service.ts:24\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            times\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 50000000\n                        \n                    \n                        \n                            \n                                    Defined in src/cron/cron.service.ts:26\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable, Logger } from '@nestjs/common'\nimport {\n    Cron,\n    CronExpression,\n    Interval,\n    SchedulerRegistry,\n    Timeout,\n} from '@nestjs/schedule'\n\nimport { CronJob } from 'cron'\n\n/**\n * `@Cron` are regular cron jobs\n *\n * `@Interval` To declare that a method should run at a (recurring) specified interval\n *\n * `@Timeout` To declare that a method should run (once) at a specified timeout\n */\n@Injectable()\nexport class CronService {\n    static count = 0\n\n    logger = new Logger(CronService.name)\n\n    times = 50000000\n\n    fact16 = 20922789888000\n\n    constructor(readonly scheduler: SchedulerRegistry) {}\n\n    factorial(n: number): number {\n        if (n === 1) return 1\n        return n * this.factorial(n - 1)\n    }\n\n    @Cron(CronExpression.EVERY_MINUTE, { name: 'handleCronFn' })\n    handleCron() {\n        CronService.count += 1\n        this.logger.debug(\n            `Called when the second is 60, current count is ${CronService.count}`,\n        )\n\n        let ok = true\n        for (let i = 0; i  {\n            let next\n\n            try {\n                next = value.nextDates().toDate()\n            } catch (e) {\n                next = 'error: next fire date is in the past!'\n            }\n            // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n            this.logger.log(`job: ${key} -> next: ${next}`)\n        })\n    }\n\n    /**\n     * Dynamically schedule a name CRON job\n     * @param {string} name Job Name\n     * @param {Number} seconds Seconds\n     */\n    addCronJob(name: string, seconds: string) {\n        const job = new CronJob(`${seconds} * * * * *`, () => {\n            this.logger.warn(`time (${seconds}) for job ${name} to run!`)\n        })\n\n        this.scheduler.addCronJob(name, job)\n        job.start()\n\n        this.logger.warn(`job ${name} added for each minute at ${seconds} seconds!`)\n    }\n\n    /**\n     * Dynamically delete a named scheduled CRON job\n     * @param {string} name Job Name\n     */\n    deleteCron(name: string) {\n        const job = this.scheduler.getCronJob(name)\n\n        if (job) {\n            this.scheduler.deleteCronJob(name)\n            this.logger.warn(`job ${name} deleted!`)\n        } else {\n            this.logger.warn(`job ${name} not found!`)\n        }\n    }\n\n    /**\n     * Get all of the Intervals\n     */\n    logIntervals() {\n        const intervals = this.scheduler.getIntervals()\n        intervals.forEach((key) => this.logger.log(`Interval: ${key}`))\n    }\n\n    /**\n     * Dynamically schedule a named Interval\n     * @param {string} name Interval Name\n     * @param {Number} milliseconds Milliseconds\n     */\n    addInterval(name: string, milliseconds: number) {\n        const callback = () => {\n            this.logger.warn(\n                `Interval ${name} executing at time (${milliseconds})!`,\n            )\n        }\n\n        const interval = setInterval(callback, milliseconds)\n        this.scheduler.addInterval(name, interval)\n    }\n\n    /**\n     * Dynamically delete a named Interval\n     * @param {string} name Interval Name\n     */\n    deleteInterval(name: string) {\n        const interval = this.scheduler.getInterval(name)\n        if (interval) {\n            this.scheduler.deleteInterval(name)\n            this.logger.warn(`Interval ${name} deleted!`)\n        } else {\n            this.logger.warn(`Interval ${name} not found!`)\n        }\n    }\n\n    /**\n     * Get all of the Timeouts\n     */\n    logTimeouts() {\n        const timeouts = this.scheduler.getTimeouts()\n        timeouts.forEach((key) => this.logger.log(`Timeout: ${key}`))\n    }\n\n    /**\n     * Dynamically schedule a named Timeout\n     * @param {string} name Timeout Name\n     * @param {Number} milliseconds Milliseconds\n     */\n    addTimeout(name: string, milliseconds: number) {\n        const callback = () => {\n            this.logger.warn(`Timeout ${name} executing after (${milliseconds})!`)\n        }\n\n        const timeout = setTimeout(callback, milliseconds)\n        this.scheduler.addTimeout(name, timeout)\n    }\n\n    /**\n     * Dynamically delete a named Timeout\n     * @param {string} name Timeout Name\n     */\n    deleteTimeout(name: string) {\n        const timeout = this.scheduler.getTimeout(name)\n\n        if (timeout) {\n            this.scheduler.deleteTimeout(name)\n            this.logger.warn(`Timeout ${name} deleted!`)\n        } else {\n            this.logger.warn(`Timeout ${name} not found!`)\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CrudConfigService.html":{"url":"classes/CrudConfigService.html","title":"class - CrudConfigService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CrudConfigService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/base/swagger-gen/crud-routes.factory.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                config\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                load\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            config\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Partial\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        query: {\n            alwaysPaginate: false,\n        },\n    }\n                        \n                    \n                        \n                            \n                                    Defined in src/base/swagger-gen/crud-routes.factory.ts:201\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            load\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    load(config: Record)\n                \n            \n\n\n            \n                \n                    Defined in src/base/swagger-gen/crud-routes.factory.ts:207\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    config\n                                    \n                                                Record\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { HttpStatus, RequestMethod } from '@nestjs/common'\n\nimport { Type } from 'class-transformer'\nimport * as deepmerge from 'deepmerge'\n\nimport {\n    ApiProperty,\n    BaseRoute,\n    isFalse,\n    isFunction,\n    isObjectFull,\n    objKeys,\n    swagger,\n    swaggerConst,\n} from './utils'\nimport type { CrudOptions, GetManyDefaultResponse, BaseRouteName } from './utils'\n\nexport class R {\n    static set(\n        metadataKey: string,\n        metadataValue: any,\n        target: Object,\n        propertyKey?: string | symbol,\n    ) {\n        if (!propertyKey) {\n            Reflect.defineMetadata(metadataKey, metadataValue, target)\n        } else {\n            Reflect.defineMetadata(metadataKey, metadataValue, target, propertyKey)\n        }\n    }\n\n    static get(\n        metadataKey: any,\n        target: Object,\n        propertyKey?: string | symbol,\n    ): T {\n        if (!propertyKey) return Reflect.getMetadata(metadataKey, target)\n\n        return Reflect.getMetadata(metadataKey, target, propertyKey)\n    }\n\n    static setRoute(route: BaseRoute, func: Function) {\n        R.set('path', route.path, func)\n        R.set('method', route.method, func)\n    }\n}\n\nexport class Swagger {\n    /**\n     * Sets extra swagger metadata for GET Calls\n     */\n    static setExtraModels(swaggerModels: {\n        [x: string]: any\n        get: Record\n    }) {\n        if (swaggerConst) {\n            const meta = Swagger.getExtraModels(swaggerModels.get)\n            const models = [\n                ...meta,\n                ...objKeys(swaggerModels)\n                    .map((name) => swaggerModels[name])\n                    .filter((one) => one && one.name !== swaggerModels.get.name),\n            ]\n\n            R.set(\n                swaggerConst.DECORATORS.API_EXTRA_MODELS,\n                models,\n                swaggerModels.get,\n            )\n        }\n    }\n\n    /**\n     * Sets swagger metadata for response of GET Calls\n     */\n    static setResponseOk(metadata: any[], func: Function) {\n        if (swaggerConst) {\n            R.set(swaggerConst.DECORATORS.API_RESPONSE, metadata, func)\n        }\n    }\n\n    static getExtraModels(target: Record): any[] {\n        return swaggerConst\n            ? R.get(swaggerConst.API_EXTRA_MODELS, target) || []\n            : []\n    }\n\n    static getResponseOk(func: Function) {\n        return swaggerConst\n            ? R.get(swaggerConst.DECORATORS.API_RESPONSE, func) || {}\n            : {}\n    }\n\n    static createResponseMeta(\n        name: BaseRouteName,\n        options: CrudOptions,\n        swaggerModels: {\n            [x: string]: any\n            get: { name: any }\n            getMany: { name: any }\n        },\n    ) {\n        if (swagger) {\n            const { query } = options\n\n            switch (name) {\n                case 'getOneBase':\n                    return {\n                        [HttpStatus.OK]: {\n                            description: 'Get one base response',\n                            type: swaggerModels.get,\n                        },\n                    }\n                case 'getOne':\n                    return {\n                        [HttpStatus.OK]: query?.alwaysPaginate\n                            ? {\n                                  description: 'Get paginated response',\n                                  type: swaggerModels.getMany,\n                              }\n                            : {\n                                  description: 'Get many base response',\n                                  schema: {\n                                      oneOf: [\n                                          {\n                                              $ref: swagger.getSchemaPath(\n                                                  swaggerModels.getMany.name,\n                                              ),\n                                          },\n                                          {\n                                              type: 'array',\n                                              items: {\n                                                  $ref: swagger.getSchemaPath(\n                                                      swaggerModels.get.name,\n                                                  ),\n                                              },\n                                          },\n                                      ],\n                                  },\n                              },\n                    }\n                default:\n                    // eslint-disable-next-line no-case-declarations\n                    const dto = swaggerModels[name.split('OneBase')[0]]\n\n                    return {\n                        [HttpStatus.OK]: {\n                            description: 'Response',\n                            schema: { $ref: swagger.getSchemaPath(dto.name) },\n                        },\n                    }\n            }\n        } else {\n            return {}\n        }\n    }\n}\n\nexport class SerializeHelper {\n    static createGetManyDto(dto: any, resourceName: string): any {\n        class GetManyResponseDto implements GetManyDefaultResponse {\n            @ApiProperty({ type: dto, isArray: true })\n            @Type(() => dto)\n            data!: any[]\n\n            @ApiProperty({ type: 'number' })\n            count!: number\n\n            @ApiProperty({ type: 'number' })\n            total!: number\n\n            @ApiProperty({ type: 'number' })\n            page!: number\n\n            @ApiProperty({ type: 'number' })\n            pageCount!: number\n        }\n\n        Object.defineProperty(GetManyResponseDto, 'name', {\n            writable: false,\n            value: `GetMany${resourceName}ResponseDto`,\n        })\n\n        return GetManyResponseDto\n    }\n\n    static createGetOneResponseDto(resourceName: string): any {\n        class GetOneResponseDto {}\n\n        Object.defineProperty(GetOneResponseDto, 'name', {\n            writable: false,\n            value: `${resourceName}ResponseDto`,\n        })\n\n        return GetOneResponseDto\n    }\n}\n\nexport class CrudConfigService {\n    static config: Partial = {\n        query: {\n            alwaysPaginate: false,\n        },\n    }\n\n    static load(config: Record) {\n        const query = isObjectFull(config.query) ? config.query : {}\n        const params = isObjectFull(config.params) ? config.params : {}\n        const serialize = isObjectFull(config.serialize) ? config.serialize : {}\n\n        CrudConfigService.config = deepmerge(\n            CrudConfigService.config,\n            { query, params, serialize },\n            { arrayMerge: (a, b, c) => b },\n        )\n    }\n}\n\nexport class CrudRoutesFactory {\n    protected options\n\n    protected swaggerModels: any = {}\n\n    constructor(private target: Object, options: CrudOptions) {\n        this.options = options\n        this.create()\n\n        console.log(\n            'CrudRoutesFactory::constructor',\n            // { ...options },\n            // this.targetProto,\n            // this.modelType,\n            // this.modelName,\n            // this.swaggerModels,\n        )\n    }\n\n    static create(target: Object, options: CrudOptions): CrudRoutesFactory {\n        return new CrudRoutesFactory(target, options)\n    }\n\n    get targetProto() {\n        // @ts-ignore\n        return this.target.prototype\n    }\n\n    get modelName() {\n        return this.options.model.type?.name\n    }\n\n    get modelType() {\n        return this.options.model.type\n    }\n\n    private create() {\n        const routesSchema = CrudRoutesFactory.getRoutesSchema()\n        this.mergeOptions()\n        this.setResponseModels()\n        this.createRoutes(routesSchema)\n        this.enableRoutes(routesSchema)\n    }\n\n    getOne(name: BaseRouteName) {\n        this.targetProto[name] = function getOne(req: any) {\n            return this.service.getOne(req)\n        }\n    }\n\n    getOneBase(name: BaseRouteName) {\n        this.targetProto[name] = function getOneBase(req: any) {\n            return this.service.getOneBase(req)\n        }\n    }\n\n    static getRoutesSchema(): BaseRoute[] {\n        return [\n            {\n                name: 'getOneBase',\n                path: '/',\n                method: RequestMethod.GET,\n                enable: false,\n                override: false,\n                withParams: true,\n            },\n            {\n                name: 'getOne',\n                path: '/',\n                method: RequestMethod.GET,\n                enable: false,\n                override: false,\n                withParams: false,\n            },\n        ]\n    }\n\n    mergeOptions() {\n        // merge query config\n        const query = isObjectFull(this.options.query) ? this.options.query : {}\n        this.options.query = { ...CrudConfigService.config.query, ...query }\n\n        // set dto\n        if (!isObjectFull(this.options.dto)) {\n            this.options.dto = {}\n        }\n\n        // set serialize\n        this.options.serialize = {\n            ...CrudConfigService.config.serialize,\n            ...this.options.serialize,\n        }\n\n        this.options.serialize.get = isFalse(this.options.serialize?.get)\n            ? false\n            : this.options.serialize?.get || this.modelType\n\n        this.options.serialize.getMany = isFalse(this.options.serialize?.getMany)\n            ? false\n            : this.options.serialize?.getMany\n            ? this.options.serialize?.getMany\n            : isFalse(this.options.serialize?.get)\n            ? false\n            : SerializeHelper.createGetManyDto(\n                  this.options.serialize?.get,\n                  this.modelName,\n              )\n\n        this.options.serialize.create = isFalse(this.options.serialize?.create)\n            ? false\n            : this.options.serialize?.create || this.modelType\n\n        this.options.serialize.update = isFalse(this.options.serialize?.update)\n            ? false\n            : this.options.serialize?.update || this.modelType\n\n        this.options.serialize.replace = isFalse(this.options.serialize?.replace)\n            ? false\n            : this.options.serialize?.replace || this.modelType\n\n        this.options.serialize.delete =\n            isFalse(this.options.serialize?.delete) ||\n            !this.options.routes?.deleteOneBase?.returnDeleted\n                ? false\n                : this.options.serialize?.delete || this.modelType\n\n        R.set('CRUD_OPTIONS_METADATA', this.options, this.target)\n    }\n\n    setResponseModels() {\n        const modelType = isFunction(this.modelType)\n            ? this.modelType\n            : SerializeHelper.createGetOneResponseDto(this.modelName)\n\n        this.swaggerModels.get = isFunction(this.options.serialize?.get)\n            ? this.options.serialize?.get\n            : modelType\n\n        this.swaggerModels.getMany =\n            this.options.serialize?.getMany ||\n            SerializeHelper.createGetManyDto(this.swaggerModels.get, this.modelName)\n\n        this.swaggerModels.create = isFunction(this.options.serialize?.create)\n            ? this.options.serialize?.create\n            : modelType\n\n        this.swaggerModels.update = isFunction(this.options.serialize?.update)\n            ? this.options.serialize?.update\n            : modelType\n\n        this.swaggerModels.replace = isFunction(this.options.serialize?.replace)\n            ? this.options.serialize?.replace\n            : modelType\n\n        this.swaggerModels.delete = isFunction(this.options.serialize?.delete)\n            ? this.options.serialize?.delete\n            : modelType\n\n        Swagger.setExtraModels(this.swaggerModels)\n    }\n\n    enableRoutes(routesSchema: BaseRoute[]) {\n        routesSchema.forEach((route) => {\n            if (!route.override && route.enable) {\n                R.setRoute(route, this.targetProto[route.name])\n            }\n        })\n    }\n\n    createRoutes(routesSchema: BaseRoute[]) {\n        routesSchema.forEach((route) => {\n            // create base method\n            /* this[route.name](route.name) */\n            route.enable = true\n\n            // set metadata\n            this.setSwaggerResponseOk(route.name)\n        })\n    }\n\n    setSwaggerResponseOk(name: BaseRouteName) {\n        const metadata = Swagger.getResponseOk(this.targetProto[name]) || {}\n        const metadataToAdd =\n            Swagger.createResponseMeta(name, this.options, this.swaggerModels) || {}\n\n        Swagger.setResponseOk(\n            // @ts-ignore\n            { ...metadata, ...metadataToAdd },\n            this.targetProto[name],\n        )\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CrudController.html":{"url":"classes/CrudController.html","title":"class - CrudController","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CrudController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/base/crud/crud.controller.ts\n        \n\n            \n                Description\n            \n            \n                Abstract base controller of BaseModel that other controller can extend to\nprovide base CRUD functionality such as to create, find, update and delete data.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOneById\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Protected\n                        constructor(service: ICrudService)\n                    \n                \n                        \n                            \n                                Defined in src/base/crud/crud.controller.ts:26\n                            \n                        \n\n                \n                    \n                            The constructor must receive the injected service from the child controller\nin order to provide all the proper base functionality.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        service\n                                                  \n                                                        \n                                                                        ICrudService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe injected service.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            create\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    create(input: T)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Create one record', description: 'Creates one record'})@ApiResponse({status: undefined, description: 'Created one record', type: BaseModel})@Post(':id')\n                \n            \n\n            \n                \n                    Defined in src/base/crud/crud.controller.ts:124\n                \n            \n\n\n            \n                \n                    create\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    input\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(paginationParams: PaginationParams)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'find all', description: 'Get all of the records'})@ApiResponse({status: undefined, description: 'Found all records'})@Get()\n                \n            \n\n            \n                \n                    Defined in src/base/crud/crud.controller.ts:45\n                \n            \n\n\n            \n                \n                    findAll\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    paginationParams\n                                    \n                                                PaginationParams\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOneById\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneById(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Get one record by id', description: 'Get one record from database with provided by id'})@ApiResponse({status: undefined, description: 'Found one record', type: BaseModel})@Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/base/crud/crud.controller.ts:72\n                \n            \n\n\n            \n                \n                    findOneById\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            remove\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Soft-delete one record by id', description: 'Soft-delete one record from database with provided by id'})@ApiResponse({status: undefined, description: 'Deleted one record', type: BaseModel})@ApiResponse({status: undefined, description: 'Deleted one record'})@Delete(':id')\n                \n            \n\n            \n                \n                    Defined in src/base/crud/crud.controller.ts:102\n                \n            \n\n\n            \n                \n                    remove\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: number, input: Partial)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Update one record', description: 'Updates one record'})@ApiResponse({status: undefined, description: 'Updated one record', type: BaseModel})@Put(':id')\n                \n            \n\n            \n                \n                    Defined in src/base/crud/crud.controller.ts:146\n                \n            \n\n\n            \n                \n                    update\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    input\n                                    \n                                            Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n    Get,\n    Delete,\n    Param,\n    ParseIntPipe,\n    HttpStatus,\n    Query,\n    Body,\n    Put,\n    Post,\n    NotFoundException,\n} from '@nestjs/common'\nimport { ApiOperation, ApiResponse } from '@nestjs/swagger'\n\nimport { BaseModel } from '../../database/models/base.model'\nimport { Result } from '../../domain'\nimport { ApiErrors } from '../swagger-gen/api-errors.decorator'\nimport { ICrudService } from './crud.service.interface'\nimport { IPaginationResult, PaginationParams } from './pagination'\n\n/**\n * Abstract base controller of BaseModel that other controller can extend to\n * provide base CRUD functionality such as to create, find, update and delete data.\n */\n@ApiErrors()\nexport abstract class CrudController {\n    /**\n     * The constructor must receive the injected service from the child controller\n     * in order to provide all the proper base functionality.\n     *\n     * @param {ICrudService} service - The injected service.\n     */\n    protected constructor(protected readonly service: ICrudService) {}\n\n    /**\n     * findAll\n     */\n    @ApiOperation({ summary: 'find all', description: 'Get all of the records' })\n    @ApiResponse({\n        status: HttpStatus.OK,\n        description: 'Found all records',\n        // type: IPagination | BaseModel[]\n    })\n    @Get()\n    async findAll(\n        @Query() paginationParams: PaginationParams,\n    ): Promise> {\n        const { data, paging } = await this.service.paginatedFindAll(\n            paginationParams,\n        )\n\n        return ({\n            data,\n            paging,\n            statusCode: HttpStatus.OK,\n        } as unknown) as IPaginationResult\n    }\n\n    /**\n     * findOneById\n     */\n    @ApiOperation({\n        summary: 'Get one record by id',\n        description: 'Get one record from database with provided by id',\n    })\n    @ApiResponse({\n        status: HttpStatus.OK,\n        description: 'Found one record',\n        type: BaseModel, // type: T,\n    })\n    @Get(':id')\n    async findOneById(@Param('id', ParseIntPipe) id: number): Promise> {\n        const data = await this.service.findOneById(id)\n\n        if (!data) {\n            throw new NotFoundException()\n        }\n\n        return {\n            data,\n            statusCode: HttpStatus.OK,\n        }\n    }\n\n    /**\n     * remove\n     */\n    @ApiOperation({\n        summary: 'Soft-delete one record by id',\n        description: 'Soft-delete one record from database with provided by id',\n    })\n    @ApiResponse({\n        status: HttpStatus.OK,\n        description: 'Deleted one record',\n        type: BaseModel, // type: T,\n    })\n    @ApiResponse({\n        status: HttpStatus.NO_CONTENT,\n        description: 'Deleted one record',\n    })\n    @Delete(':id')\n    async remove(@Param('id', ParseIntPipe) id: number) {\n        const data = await this.service.remove(id)\n\n        return {\n            data,\n            statusCode: !data ? HttpStatus.NO_CONTENT : HttpStatus.OK,\n        }\n    }\n\n    /**\n     * create\n     */\n    @ApiOperation({\n        summary: 'Create one record',\n        description: 'Creates one record',\n    })\n    @ApiResponse({\n        status: HttpStatus.OK,\n        description: 'Created one record',\n        type: BaseModel, // type: T,\n    })\n    @Post(':id')\n    async create(@Body() input: T) {\n        const data = await this.service.create(input)\n\n        return {\n            data,\n            statusCode: HttpStatus.CREATED,\n        }\n    }\n\n    /**\n     * update\n     */\n    @ApiOperation({\n        summary: 'Update one record',\n        description: 'Updates one record',\n    })\n    @ApiResponse({\n        status: HttpStatus.OK,\n        description: 'Updated one record',\n        type: BaseModel, // type: T,\n    })\n    @Put(':id')\n    async update(@Param('id', ParseIntPipe) id: number, @Body() input: Partial) {\n        const data = await this.service.update(id, input)\n\n        return {\n            data,\n            statusCode: !data ? HttpStatus.NO_CONTENT : HttpStatus.OK,\n        }\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CrudOptions.html":{"url":"interfaces/CrudOptions.html","title":"interface - CrudOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  CrudOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/base/swagger-gen/utils/other.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        dto\n                                \n                                \n                                        model\n                                \n                                \n                                            Optional\n                                        params\n                                \n                                \n                                            Optional\n                                        query\n                                \n                                \n                                            Optional\n                                        routes\n                                \n                                \n                                            Optional\n                                        serialize\n                                \n                                \n                                            Optional\n                                        validation\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        dto\n                                    \n                                \n                                \n                                    \n                                        dto:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        model\n                                    \n                                \n                                \n                                    \n                                        model:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        params\n                                    \n                                \n                                \n                                    \n                                        params:         ParamsOptions\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ParamsOptions\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        query\n                                    \n                                \n                                \n                                    \n                                        query:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        routes\n                                    \n                                \n                                \n                                    \n                                        routes:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        serialize\n                                    \n                                \n                                \n                                    \n                                        serialize:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        validation\n                                    \n                                \n                                \n                                    \n                                        validation:     ValidationPipeOptions | \"undefined\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     ValidationPipeOptions | \"undefined\"\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { RequestMethod, ValidationPipeOptions } from '@nestjs/common'\nimport { SwaggerEnumType } from '@nestjs/swagger/dist/types/swagger-enum.type'\n\nexport declare type BaseRouteName =\n    | 'getManyBase'\n    | 'getOneBase'\n    | 'createOneBase'\n    | 'createManyBase'\n    | 'updateOneBase'\n    | 'replaceOneBase'\n    | 'deleteOneBase'\n    | 'getOne'\n\nexport interface BaseRoute {\n    name: BaseRouteName\n    path: string\n    method: RequestMethod\n    enable: boolean\n    override: boolean\n    withParams: boolean\n}\n\nexport interface GetManyDefaultResponse {\n    data: T[]\n    count: number\n    total: number\n    page: number\n    pageCount: number\n}\n\nexport interface ParamOption {\n    field?: string\n    type?: 'number' | 'string' | 'uuid'\n    enum?: SwaggerEnumType\n    primary?: boolean\n    disabled?: boolean\n}\n\nexport interface ParamsOptions {\n    [key: string]: ParamOption\n}\n\nexport interface CrudOptions {\n    model: {\n        type: { name: string }\n    }\n    dto?: {}\n    routes?: {\n        deleteOneBase?: { returnDeleted?: boolean }\n    }\n    validation?: ValidationPipeOptions | false\n    params?: ParamsOptions\n    query?: {\n        limit?: number\n        maxLimit?: number\n        cache?: number | false\n        alwaysPaginate?: boolean\n    }\n    serialize?: {\n        getMany?: false | object\n        get?: false | object\n        create?: false | object\n        createMany?: false | object\n        update?: false | object\n        replace?: false | object\n        delete?: false | object\n    }\n}\n\nexport function safeRequire(path: string): T | null {\n    try {\n        // eslint-disable-next-line global-require,@typescript-eslint/no-var-requires,import/no-dynamic-require\n        const pack = require(path)\n        return pack\n    } catch (_) {\n        return null\n    }\n}\n\nexport const swagger = safeRequire('@nestjs/swagger')\nexport const swaggerConst = safeRequire('@nestjs/swagger/dist/constants')\n\nexport function ApiProperty(options?: any): PropertyDecorator {\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    return (target: object, propertyKey: string | symbol) => {\n        if (swagger) {\n            const ApiPropertyDecorator =\n                swagger.ApiProperty || swagger.ApiModelProperty\n            ApiPropertyDecorator(options)(target, propertyKey)\n        }\n    }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CrudRoutesFactory.html":{"url":"classes/CrudRoutesFactory.html","title":"class - CrudRoutesFactory","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CrudRoutesFactory\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/base/swagger-gen/crud-routes.factory.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                options\n                            \n                            \n                                    Protected\n                                swaggerModels\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                create\n                            \n                            \n                                    Private\n                                create\n                            \n                            \n                                createRoutes\n                            \n                            \n                                enableRoutes\n                            \n                            \n                                getOne\n                            \n                            \n                                getOneBase\n                            \n                            \n                                    Static\n                                getRoutesSchema\n                            \n                            \n                                mergeOptions\n                            \n                            \n                                setResponseModels\n                            \n                            \n                                setSwaggerResponseOk\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    targetProto\n                                \n                                \n                                    modelName\n                                \n                                \n                                    modelType\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(target: Object, options: CrudOptions)\n                    \n                \n                        \n                            \n                                Defined in src/base/swagger-gen/crud-routes.factory.ts:223\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        target\n                                                  \n                                                        \n                                                                        Object\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        options\n                                                  \n                                                        \n                                                                        CrudOptions\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            options\n                            \n                        \n                    \n                \n                        \n                            \n                                    Defined in src/base/swagger-gen/crud-routes.factory.ts:221\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            swaggerModels\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                    \n                        \n                            Default value : {}\n                        \n                    \n                        \n                            \n                                    Defined in src/base/swagger-gen/crud-routes.factory.ts:223\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            create\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    create(target: Object, options: CrudOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/base/swagger-gen/crud-routes.factory.ts:239\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    target\n                                    \n                                                Object\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                CrudOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         CrudRoutesFactory\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            create\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    create()\n                \n            \n\n\n            \n                \n                    Defined in src/base/swagger-gen/crud-routes.factory.ts:256\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            createRoutes\n                        \n                        \n                    \n                \n            \n            \n                \ncreateRoutes(routesSchema: BaseRoute[])\n                \n            \n\n\n            \n                \n                    Defined in src/base/swagger-gen/crud-routes.factory.ts:389\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    routesSchema\n                                    \n                                                BaseRoute[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            enableRoutes\n                        \n                        \n                    \n                \n            \n            \n                \nenableRoutes(routesSchema: BaseRoute[])\n                \n            \n\n\n            \n                \n                    Defined in src/base/swagger-gen/crud-routes.factory.ts:381\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    routesSchema\n                                    \n                                                BaseRoute[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getOne\n                        \n                        \n                    \n                \n            \n            \n                \ngetOne(name: BaseRouteName)\n                \n            \n\n\n            \n                \n                    Defined in src/base/swagger-gen/crud-routes.factory.ts:264\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                BaseRouteName\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getOneBase\n                        \n                        \n                    \n                \n            \n            \n                \ngetOneBase(name: BaseRouteName)\n                \n            \n\n\n            \n                \n                    Defined in src/base/swagger-gen/crud-routes.factory.ts:270\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                BaseRouteName\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            getRoutesSchema\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getRoutesSchema()\n                \n            \n\n\n            \n                \n                    Defined in src/base/swagger-gen/crud-routes.factory.ts:276\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         BaseRoute[]\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            mergeOptions\n                        \n                        \n                    \n                \n            \n            \n                \nmergeOptions()\n                \n            \n\n\n            \n                \n                    Defined in src/base/swagger-gen/crud-routes.factory.ts:297\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setResponseModels\n                        \n                        \n                    \n                \n            \n            \n                \nsetResponseModels()\n                \n            \n\n\n            \n                \n                    Defined in src/base/swagger-gen/crud-routes.factory.ts:349\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setSwaggerResponseOk\n                        \n                        \n                    \n                \n            \n            \n                \nsetSwaggerResponseOk(name: BaseRouteName)\n                \n            \n\n\n            \n                \n                    Defined in src/base/swagger-gen/crud-routes.factory.ts:400\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                BaseRouteName\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        targetProto\n                    \n                \n\n                \n                    \n                        gettargetProto()\n                    \n                \n                            \n                                \n                                    Defined in src/base/swagger-gen/crud-routes.factory.ts:243\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        modelName\n                    \n                \n\n                \n                    \n                        getmodelName()\n                    \n                \n                            \n                                \n                                    Defined in src/base/swagger-gen/crud-routes.factory.ts:248\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        modelType\n                    \n                \n\n                \n                    \n                        getmodelType()\n                    \n                \n                            \n                                \n                                    Defined in src/base/swagger-gen/crud-routes.factory.ts:252\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { HttpStatus, RequestMethod } from '@nestjs/common'\n\nimport { Type } from 'class-transformer'\nimport * as deepmerge from 'deepmerge'\n\nimport {\n    ApiProperty,\n    BaseRoute,\n    isFalse,\n    isFunction,\n    isObjectFull,\n    objKeys,\n    swagger,\n    swaggerConst,\n} from './utils'\nimport type { CrudOptions, GetManyDefaultResponse, BaseRouteName } from './utils'\n\nexport class R {\n    static set(\n        metadataKey: string,\n        metadataValue: any,\n        target: Object,\n        propertyKey?: string | symbol,\n    ) {\n        if (!propertyKey) {\n            Reflect.defineMetadata(metadataKey, metadataValue, target)\n        } else {\n            Reflect.defineMetadata(metadataKey, metadataValue, target, propertyKey)\n        }\n    }\n\n    static get(\n        metadataKey: any,\n        target: Object,\n        propertyKey?: string | symbol,\n    ): T {\n        if (!propertyKey) return Reflect.getMetadata(metadataKey, target)\n\n        return Reflect.getMetadata(metadataKey, target, propertyKey)\n    }\n\n    static setRoute(route: BaseRoute, func: Function) {\n        R.set('path', route.path, func)\n        R.set('method', route.method, func)\n    }\n}\n\nexport class Swagger {\n    /**\n     * Sets extra swagger metadata for GET Calls\n     */\n    static setExtraModels(swaggerModels: {\n        [x: string]: any\n        get: Record\n    }) {\n        if (swaggerConst) {\n            const meta = Swagger.getExtraModels(swaggerModels.get)\n            const models = [\n                ...meta,\n                ...objKeys(swaggerModels)\n                    .map((name) => swaggerModels[name])\n                    .filter((one) => one && one.name !== swaggerModels.get.name),\n            ]\n\n            R.set(\n                swaggerConst.DECORATORS.API_EXTRA_MODELS,\n                models,\n                swaggerModels.get,\n            )\n        }\n    }\n\n    /**\n     * Sets swagger metadata for response of GET Calls\n     */\n    static setResponseOk(metadata: any[], func: Function) {\n        if (swaggerConst) {\n            R.set(swaggerConst.DECORATORS.API_RESPONSE, metadata, func)\n        }\n    }\n\n    static getExtraModels(target: Record): any[] {\n        return swaggerConst\n            ? R.get(swaggerConst.API_EXTRA_MODELS, target) || []\n            : []\n    }\n\n    static getResponseOk(func: Function) {\n        return swaggerConst\n            ? R.get(swaggerConst.DECORATORS.API_RESPONSE, func) || {}\n            : {}\n    }\n\n    static createResponseMeta(\n        name: BaseRouteName,\n        options: CrudOptions,\n        swaggerModels: {\n            [x: string]: any\n            get: { name: any }\n            getMany: { name: any }\n        },\n    ) {\n        if (swagger) {\n            const { query } = options\n\n            switch (name) {\n                case 'getOneBase':\n                    return {\n                        [HttpStatus.OK]: {\n                            description: 'Get one base response',\n                            type: swaggerModels.get,\n                        },\n                    }\n                case 'getOne':\n                    return {\n                        [HttpStatus.OK]: query?.alwaysPaginate\n                            ? {\n                                  description: 'Get paginated response',\n                                  type: swaggerModels.getMany,\n                              }\n                            : {\n                                  description: 'Get many base response',\n                                  schema: {\n                                      oneOf: [\n                                          {\n                                              $ref: swagger.getSchemaPath(\n                                                  swaggerModels.getMany.name,\n                                              ),\n                                          },\n                                          {\n                                              type: 'array',\n                                              items: {\n                                                  $ref: swagger.getSchemaPath(\n                                                      swaggerModels.get.name,\n                                                  ),\n                                              },\n                                          },\n                                      ],\n                                  },\n                              },\n                    }\n                default:\n                    // eslint-disable-next-line no-case-declarations\n                    const dto = swaggerModels[name.split('OneBase')[0]]\n\n                    return {\n                        [HttpStatus.OK]: {\n                            description: 'Response',\n                            schema: { $ref: swagger.getSchemaPath(dto.name) },\n                        },\n                    }\n            }\n        } else {\n            return {}\n        }\n    }\n}\n\nexport class SerializeHelper {\n    static createGetManyDto(dto: any, resourceName: string): any {\n        class GetManyResponseDto implements GetManyDefaultResponse {\n            @ApiProperty({ type: dto, isArray: true })\n            @Type(() => dto)\n            data!: any[]\n\n            @ApiProperty({ type: 'number' })\n            count!: number\n\n            @ApiProperty({ type: 'number' })\n            total!: number\n\n            @ApiProperty({ type: 'number' })\n            page!: number\n\n            @ApiProperty({ type: 'number' })\n            pageCount!: number\n        }\n\n        Object.defineProperty(GetManyResponseDto, 'name', {\n            writable: false,\n            value: `GetMany${resourceName}ResponseDto`,\n        })\n\n        return GetManyResponseDto\n    }\n\n    static createGetOneResponseDto(resourceName: string): any {\n        class GetOneResponseDto {}\n\n        Object.defineProperty(GetOneResponseDto, 'name', {\n            writable: false,\n            value: `${resourceName}ResponseDto`,\n        })\n\n        return GetOneResponseDto\n    }\n}\n\nexport class CrudConfigService {\n    static config: Partial = {\n        query: {\n            alwaysPaginate: false,\n        },\n    }\n\n    static load(config: Record) {\n        const query = isObjectFull(config.query) ? config.query : {}\n        const params = isObjectFull(config.params) ? config.params : {}\n        const serialize = isObjectFull(config.serialize) ? config.serialize : {}\n\n        CrudConfigService.config = deepmerge(\n            CrudConfigService.config,\n            { query, params, serialize },\n            { arrayMerge: (a, b, c) => b },\n        )\n    }\n}\n\nexport class CrudRoutesFactory {\n    protected options\n\n    protected swaggerModels: any = {}\n\n    constructor(private target: Object, options: CrudOptions) {\n        this.options = options\n        this.create()\n\n        console.log(\n            'CrudRoutesFactory::constructor',\n            // { ...options },\n            // this.targetProto,\n            // this.modelType,\n            // this.modelName,\n            // this.swaggerModels,\n        )\n    }\n\n    static create(target: Object, options: CrudOptions): CrudRoutesFactory {\n        return new CrudRoutesFactory(target, options)\n    }\n\n    get targetProto() {\n        // @ts-ignore\n        return this.target.prototype\n    }\n\n    get modelName() {\n        return this.options.model.type?.name\n    }\n\n    get modelType() {\n        return this.options.model.type\n    }\n\n    private create() {\n        const routesSchema = CrudRoutesFactory.getRoutesSchema()\n        this.mergeOptions()\n        this.setResponseModels()\n        this.createRoutes(routesSchema)\n        this.enableRoutes(routesSchema)\n    }\n\n    getOne(name: BaseRouteName) {\n        this.targetProto[name] = function getOne(req: any) {\n            return this.service.getOne(req)\n        }\n    }\n\n    getOneBase(name: BaseRouteName) {\n        this.targetProto[name] = function getOneBase(req: any) {\n            return this.service.getOneBase(req)\n        }\n    }\n\n    static getRoutesSchema(): BaseRoute[] {\n        return [\n            {\n                name: 'getOneBase',\n                path: '/',\n                method: RequestMethod.GET,\n                enable: false,\n                override: false,\n                withParams: true,\n            },\n            {\n                name: 'getOne',\n                path: '/',\n                method: RequestMethod.GET,\n                enable: false,\n                override: false,\n                withParams: false,\n            },\n        ]\n    }\n\n    mergeOptions() {\n        // merge query config\n        const query = isObjectFull(this.options.query) ? this.options.query : {}\n        this.options.query = { ...CrudConfigService.config.query, ...query }\n\n        // set dto\n        if (!isObjectFull(this.options.dto)) {\n            this.options.dto = {}\n        }\n\n        // set serialize\n        this.options.serialize = {\n            ...CrudConfigService.config.serialize,\n            ...this.options.serialize,\n        }\n\n        this.options.serialize.get = isFalse(this.options.serialize?.get)\n            ? false\n            : this.options.serialize?.get || this.modelType\n\n        this.options.serialize.getMany = isFalse(this.options.serialize?.getMany)\n            ? false\n            : this.options.serialize?.getMany\n            ? this.options.serialize?.getMany\n            : isFalse(this.options.serialize?.get)\n            ? false\n            : SerializeHelper.createGetManyDto(\n                  this.options.serialize?.get,\n                  this.modelName,\n              )\n\n        this.options.serialize.create = isFalse(this.options.serialize?.create)\n            ? false\n            : this.options.serialize?.create || this.modelType\n\n        this.options.serialize.update = isFalse(this.options.serialize?.update)\n            ? false\n            : this.options.serialize?.update || this.modelType\n\n        this.options.serialize.replace = isFalse(this.options.serialize?.replace)\n            ? false\n            : this.options.serialize?.replace || this.modelType\n\n        this.options.serialize.delete =\n            isFalse(this.options.serialize?.delete) ||\n            !this.options.routes?.deleteOneBase?.returnDeleted\n                ? false\n                : this.options.serialize?.delete || this.modelType\n\n        R.set('CRUD_OPTIONS_METADATA', this.options, this.target)\n    }\n\n    setResponseModels() {\n        const modelType = isFunction(this.modelType)\n            ? this.modelType\n            : SerializeHelper.createGetOneResponseDto(this.modelName)\n\n        this.swaggerModels.get = isFunction(this.options.serialize?.get)\n            ? this.options.serialize?.get\n            : modelType\n\n        this.swaggerModels.getMany =\n            this.options.serialize?.getMany ||\n            SerializeHelper.createGetManyDto(this.swaggerModels.get, this.modelName)\n\n        this.swaggerModels.create = isFunction(this.options.serialize?.create)\n            ? this.options.serialize?.create\n            : modelType\n\n        this.swaggerModels.update = isFunction(this.options.serialize?.update)\n            ? this.options.serialize?.update\n            : modelType\n\n        this.swaggerModels.replace = isFunction(this.options.serialize?.replace)\n            ? this.options.serialize?.replace\n            : modelType\n\n        this.swaggerModels.delete = isFunction(this.options.serialize?.delete)\n            ? this.options.serialize?.delete\n            : modelType\n\n        Swagger.setExtraModels(this.swaggerModels)\n    }\n\n    enableRoutes(routesSchema: BaseRoute[]) {\n        routesSchema.forEach((route) => {\n            if (!route.override && route.enable) {\n                R.setRoute(route, this.targetProto[route.name])\n            }\n        })\n    }\n\n    createRoutes(routesSchema: BaseRoute[]) {\n        routesSchema.forEach((route) => {\n            // create base method\n            /* this[route.name](route.name) */\n            route.enable = true\n\n            // set metadata\n            this.setSwaggerResponseOk(route.name)\n        })\n    }\n\n    setSwaggerResponseOk(name: BaseRouteName) {\n        const metadata = Swagger.getResponseOk(this.targetProto[name]) || {}\n        const metadataToAdd =\n            Swagger.createResponseMeta(name, this.options, this.swaggerModels) || {}\n\n        Swagger.setResponseOk(\n            // @ts-ignore\n            { ...metadata, ...metadataToAdd },\n            this.targetProto[name],\n        )\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CrudService.html":{"url":"classes/CrudService.html","title":"class - CrudService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CrudService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/base/crud/crud.service.ts\n        \n\n            \n                Description\n            \n            \n                Abstract base service that other services can extend to provide base CRUD\nfunctionality such as to create, find, update and delete data.\n\n            \n\n\n            \n                Implements\n            \n            \n                            ICrudService\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                findOneByEmail\n                            \n                            \n                                    Async\n                                findOneById\n                            \n                            \n                                    Async\n                                paginatedFindAll\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Protected\n                        constructor(model: ModelClass)\n                    \n                \n                        \n                            \n                                Defined in src/base/crud/crud.service.ts:15\n                            \n                        \n\n                \n                    \n                            The constructor must receive the injected model from the child service in\norder to provide all the proper base functionality.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        model\n                                                  \n                                                        \n                                                                    ModelClass\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe injected model.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            create\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    create(input: CreateUserDto | CreateTagsDto | T)\n                \n            \n\n\n            \n                \n                    Defined in src/base/crud/crud.service.ts:99\n                \n            \n\n\n            \n                \n                    Created a entry and return it\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    input\n                                    \n                                                CreateUserDto | CreateTagsDto | T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n\n            \n                \n                    Defined in src/base/crud/crud.service.ts:27\n                \n            \n\n\n            \n                \n                    Finds all entries and return the result\n\n\n                    \n                        Returns :     {}\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(filter: object)\n                \n            \n\n\n            \n                \n                    Defined in src/base/crud/crud.service.ts:56\n                \n            \n\n\n            \n                \n                    Finds one entry with where filter and return the result\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    filter\n                                    \n                                                object\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOneByEmail\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneByEmail(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/base/crud/crud.service.ts:78\n                \n            \n\n\n            \n                \n                    Finds onw entry by email and return the result\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOneById\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/base/crud/crud.service.ts:67\n                \n            \n\n\n            \n                \n                    Finds paginated entries and return the result\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            paginatedFindAll\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    paginatedFindAll(paginationParams: PaginationParams)\n                \n            \n\n\n            \n                \n                    Defined in src/base/crud/crud.service.ts:38\n                \n            \n\n\n            \n                \n                    Finds paginated entries and return the result\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    paginationParams\n                                    \n                                                PaginationParams\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            remove\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/base/crud/crud.service.ts:89\n                \n            \n\n\n            \n                \n                    Soft-deletes a entry and return it\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: number, input: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/base/crud/crud.service.ts:112\n                \n            \n\n\n            \n                \n                    Updates a entry and return it\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    input\n                                    \n                                            Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { NotFoundException } from '@nestjs/common'\n\nimport { ModelClass, raw } from 'objection'\n\nimport { BaseModel } from '../../database/models/base.model'\nimport { CreateTagsDto } from '../../tags/tag.model'\nimport { CreateUserDto } from '../../users/user.model'\nimport { ICrudService } from './crud.service.interface'\nimport { IPaginationResult, PaginationParams } from './pagination'\n\n/**\n * Abstract base service that other services can extend to provide base CRUD\n * functionality such as to create, find, update and delete data.\n */\nexport abstract class CrudService implements ICrudService {\n    /**\n     * The constructor must receive the injected model from the child service in\n     * order to provide all the proper base functionality.\n     *\n     * @param {Model} model - The injected model.\n     */\n    protected constructor(protected readonly model: ModelClass) {}\n\n    /**\n     * Finds all entries and return the result\n     */\n    async findAll() {\n        const data = await this.model.query()\n\n        if (data) return (data as unknown) as Promise\n\n        return Promise.reject(new NotFoundException())\n    }\n\n    /**\n     * Finds paginated entries and return the result\n     */\n    async paginatedFindAll(paginationParams: PaginationParams) {\n        const { page = 0, pageSize = 3, order } = paginationParams\n        const { results, total } = await this.model.query().page(page, pageSize)\n\n        return ({\n            data: results,\n            paging: {\n                pageSize,\n                page,\n                total,\n                totalPages: Math.ceil(total / pageSize),\n            },\n        } as unknown) as Promise>\n    }\n\n    /**\n     * Finds one entry with where filter and return the result\n     */\n    async findOne(filter = {}) {\n        const data = await this.model.query().findOne(filter)\n\n        if (data) return (data as unknown) as Promise\n\n        return Promise.reject(new NotFoundException())\n    }\n\n    /**\n     * Finds paginated entries and return the result\n     */\n    async findOneById(id: number) {\n        const data = await this.model.query().findById(id).first()\n\n        if (data) return (data as unknown) as Promise\n\n        return Promise.reject(new NotFoundException())\n    }\n\n    /**\n     * Finds onw entry by email and return the result\n     */\n    async findOneByEmail(email: string) {\n        const data = await this.model.query().findOne({ email })\n\n        if (data) return (data as unknown) as Promise\n\n        return Promise.reject(new NotFoundException())\n    }\n\n    /**\n     * Soft-deletes a entry and return it\n     */\n    async remove(id: number) {\n        // @ts-ignore\n        return this.update(id, {\n            deleted_at: raw('CURRENT_TIMESTAMP'),\n        })\n    }\n\n    /**\n     * Created a entry and return it\n     */\n    async create(input: CreateUserDto | CreateTagsDto | T) {\n        try {\n            const data = await this.model.query().insertAndFetch(input as T)\n\n            return (data as unknown) as Promise\n        } catch (e) {\n            return Promise.reject(e)\n        }\n    }\n\n    /**\n     * Updates a entry and return it\n     */\n    async update(id: number, input: Partial) {\n        try {\n            const data = await this.model.query().patchAndFetchById(id, input)\n\n            return (data as unknown) as Promise\n        } catch (e) {\n            return Promise.reject(e)\n        }\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CustomQueryBuilder.html":{"url":"classes/CustomQueryBuilder.html","title":"class - CustomQueryBuilder","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CustomQueryBuilder\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/models/helpers.ts\n        \n\n\n            \n                Extends\n            \n            \n                    QueryBuilder\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                ArrayQueryBuilderType\n                            \n                            \n                                NumberQueryBuilderType\n                            \n                            \n                                PageQueryBuilderType\n                            \n                            \n                                SingleQueryBuilderType\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                chunk\n                            \n                            \n                                    Async\n                                exists\n                            \n                            \n                                    Async\n                                onlyCount\n                            \n                            \n                                    Async\n                                paginate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ArrayQueryBuilderType\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         CustomQueryBuilder\n\n                        \n                    \n                        \n                            \n                                    Defined in src/database/models/helpers.ts:37\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            NumberQueryBuilderType\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         CustomQueryBuilder\n\n                        \n                    \n                        \n                            \n                                    Defined in src/database/models/helpers.ts:41\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            PageQueryBuilderType\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         CustomQueryBuilder>\n\n                        \n                    \n                        \n                            \n                                    Defined in src/database/models/helpers.ts:43\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            SingleQueryBuilderType\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         CustomQueryBuilder\n\n                        \n                    \n                        \n                            \n                                    Defined in src/database/models/helpers.ts:39\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            chunk\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    chunk(cb: Function, size: number)\n                \n            \n\n\n            \n                \n                    Defined in src/database/models/helpers.ts:75\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    cb\n                                    \n                                                Function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    size\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            exists\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    exists()\n                \n            \n\n\n            \n                \n                    Defined in src/database/models/helpers.ts:70\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     {}\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            onlyCount\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    onlyCount()\n                \n            \n\n\n            \n                \n                    Defined in src/database/models/helpers.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     {}\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            paginate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    paginate(page: number, perPage: number)\n                \n            \n\n\n            \n                \n                    Defined in src/database/models/helpers.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    page\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    perPage\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { cloneDeep } from 'lodash'\nimport { Model, Page, QueryBuilder } from 'objection'\n\n/**\n * Check if value is of type object.\n *\n * @param value\n */\nexport function isObject(value: any): boolean {\n    return typeof value === 'object' && value !== null\n}\n\n/**\n * Check if value is empty\n *\n * @param value\n */\nexport function isEmpty(value: any): boolean {\n    if (Array.isArray(value) && value.length  extends QueryBuilder {\n    ArrayQueryBuilderType!: CustomQueryBuilder\n\n    SingleQueryBuilderType!: CustomQueryBuilder\n\n    NumberQueryBuilderType!: CustomQueryBuilder\n\n    PageQueryBuilderType!: CustomQueryBuilder>\n\n    async paginate(page: number, perPage: number) {\n        page = +page ? +page : 1 // eslint-disable-line no-param-reassign\n        perPage = +perPage ? +perPage : 15 // eslint-disable-line no-param-reassign\n\n        const result = await this.page(page - 1, perPage)\n        return {\n            pagination: {\n                currentPage: page,\n                totalPages: Math.ceil(result.total / perPage),\n                perPage,\n                total: result.total,\n            },\n            data: result.results,\n        }\n    }\n\n    async onlyCount() {\n        const result: { c: unknown }[] = ((await this.count({\n            c: '*',\n        })) as unknown) as {\n            c: unknown\n        }[]\n        return result[0].c\n    }\n\n    async exists() {\n        return !!(await this.onlyCount())\n    }\n\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    async chunk(cb: Function, size: number): Promise {\n        let offset = 0\n        let hasMore = true\n\n        while (!offset || hasMore) {\n            const query = cloneDeep(this)\n            const records = await query.offset(offset).limit(size) // eslint-disable-line no-await-in-loop\n\n            hasMore = isNotEmpty(records)\n\n            if (!hasMore) return\n\n            await cb(records) // eslint-disable-line no-await-in-loop\n\n            offset += size\n        }\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/DatabaseModule.html":{"url":"modules/DatabaseModule.html","title":"module - DatabaseModule","body":"\n                   \n\n\n\n\n    Modules\n    DatabaseModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/database/database.module.ts\n        \n\n\n        \n            Description\n        \n        \n            Database module\n\n        \n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Global, Module } from '@nestjs/common'\n\nimport * as Knex from 'knex'\nimport { Model } from 'objection'\n\nimport { Tag } from '../tags/tag.model'\nimport { User } from '../users/user.model'\n\nconst models = [Tag, User]\n\nexport const modelProviders = models.map((model) => {\n    return {\n        provide: model.name,\n        useValue: model,\n    }\n})\n\nexport const databaseProviders = [\n    ...modelProviders,\n    {\n        provide: 'KnexConnection',\n        useFactory: async () => {\n            const knex = Knex({\n                client: 'sqlite3',\n                useNullAsDefault: true,\n                connection: {\n                    filename: './knex.sqlite',\n                },\n                debug: true,\n            })\n\n            Model.knex(knex)\n            return knex\n        },\n    },\n]\n\n/**\n * Database module\n */\n@Global()\n@Module({\n    providers: [...databaseProviders],\n    exports: [...databaseProviders],\n})\nexport class DatabaseModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/EmailModule.html":{"url":"modules/EmailModule.html","title":"module - EmailModule","body":"\n                   \n\n\n\n\n    Modules\n    EmailModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_EmailModule\n\n\n\ncluster_EmailModule_exports\n\n\n\ncluster_EmailModule_providers\n\n\n\n\nEmailService \n\nEmailService \n\n\n\nEmailModule\n\nEmailModule\n\nEmailService  -->\n\nEmailModule->EmailService \n\n\n\n\n\nEmailService\n\nEmailService\n\nEmailModule -->\n\nEmailService->EmailModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/email/email.module.ts\n        \n\n\n        \n            Description\n        \n        \n            Email module\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            EmailService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            EmailService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common'\nimport { ConfigModule } from '@nestjs/config'\n\nimport EmailService from './email.service'\n\n/**\n * Email module\n */\n@Module({\n    imports: [ConfigModule],\n    controllers: [],\n    providers: [EmailService],\n    exports: [EmailService],\n})\nexport class EmailModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EmailScheduleDto.html":{"url":"classes/EmailScheduleDto.html","title":"class - EmailScheduleDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EmailScheduleDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/emailScheduling/emailSchedule.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                content\n                            \n                            \n                                date\n                            \n                            \n                                recipient\n                            \n                            \n                                subject\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            content\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/emailScheduling/emailSchedule.dto.ts:13\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            date\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsDateString()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/emailScheduling/emailSchedule.dto.ts:16\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            recipient\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsEmail()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/emailScheduling/emailSchedule.dto.ts:5\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            subject\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/emailScheduling/emailSchedule.dto.ts:9\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsNotEmpty, IsDateString, IsEmail } from 'class-validator'\n\nexport class EmailScheduleDto {\n    @IsEmail()\n    recipient!: string\n\n    @IsString()\n    @IsNotEmpty()\n    subject!: string\n\n    @IsString()\n    @IsNotEmpty()\n    content!: string\n\n    @IsDateString()\n    date!: string\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/EmailSchedulingController.html":{"url":"controllers/EmailSchedulingController.html","title":"controller - EmailSchedulingController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  EmailSchedulingController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/emailScheduling/emailScheduling.controller.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                scheduleEmail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            scheduleEmail\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    scheduleEmail(emailSchedule: EmailScheduleDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('schedule')\n                \n            \n\n            \n                \n                    Defined in src/emailScheduling/emailScheduling.controller.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    emailSchedule\n                                    \n                                                EmailScheduleDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post } from '@nestjs/common'\nimport { ApiTags } from '@nestjs/swagger'\n\nimport { EmailScheduleDto } from './emailSchedule.dto'\nimport EmailSchedulingService from './emailScheduling.service'\n\n@ApiTags(EmailSchedulingController.name)\n@Controller(EmailSchedulingController.path)\nexport default class EmailSchedulingController {\n    static path = 'email-scheduling'\n\n    constructor(readonly emailSchedulingService: EmailSchedulingService) {}\n\n    @Post('schedule')\n    async scheduleEmail(@Body() emailSchedule: EmailScheduleDto) {\n        await this.emailSchedulingService.scheduleEmail(emailSchedule)\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/EmailSchedulingModule.html":{"url":"modules/EmailSchedulingModule.html","title":"module - EmailSchedulingModule","body":"\n                   \n\n\n\n\n    Modules\n    EmailSchedulingModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_EmailSchedulingModule\n\n\n\ncluster_EmailSchedulingModule_imports\n\n\n\ncluster_EmailSchedulingModule_providers\n\n\n\n\nEmailModule\n\nEmailModule\n\n\n\nEmailSchedulingModule\n\nEmailSchedulingModule\n\nEmailSchedulingModule -->\n\nEmailModule->EmailSchedulingModule\n\n\n\n\n\nEmailSchedulingService\n\nEmailSchedulingService\n\nEmailSchedulingModule -->\n\nEmailSchedulingService->EmailSchedulingModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/emailScheduling/emailScheduling.module.ts\n        \n\n\n        \n            Description\n        \n        \n            Email scheduling module\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            EmailSchedulingService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            EmailSchedulingController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            EmailModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common'\n\nimport { EmailModule } from '../email/email.module'\nimport EmailSchedulingController from './emailScheduling.controller'\nimport EmailSchedulingService from './emailScheduling.service'\n\n/**\n * Email scheduling module\n */\n@Module({\n    imports: [EmailModule],\n    controllers: [EmailSchedulingController],\n    providers: [EmailSchedulingService],\n})\nexport class EmailSchedulingModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/EmailSchedulingService.html":{"url":"injectables/EmailSchedulingService.html","title":"injectable - EmailSchedulingService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  EmailSchedulingService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/emailScheduling/emailScheduling.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                scheduleEmail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(emailService: EmailService, scheduler: SchedulerRegistry)\n                    \n                \n                        \n                            \n                                Defined in src/emailScheduling/emailScheduling.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        emailService\n                                                  \n                                                        \n                                                                        EmailService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        scheduler\n                                                  \n                                                        \n                                                                        SchedulerRegistry\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            scheduleEmail\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    scheduleEmail(emailSchedule: EmailScheduleDto)\n                \n            \n\n\n            \n                \n                    Defined in src/emailScheduling/emailScheduling.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    emailSchedule\n                                    \n                                                EmailScheduleDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            logger\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Logger(EmailSchedulingService.name)\n                        \n                    \n                        \n                            \n                                    Defined in src/emailScheduling/emailScheduling.service.ts:11\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable, Logger } from '@nestjs/common'\nimport { SchedulerRegistry } from '@nestjs/schedule'\n\nimport { CronJob } from 'cron'\n\nimport EmailService from '../email/email.service'\nimport { EmailScheduleDto } from './emailSchedule.dto'\n\n@Injectable()\nexport default class EmailSchedulingService {\n    logger = new Logger(EmailSchedulingService.name)\n\n    constructor(\n        readonly emailService: EmailService,\n        readonly scheduler: SchedulerRegistry,\n    ) {}\n\n    async scheduleEmail(emailSchedule: EmailScheduleDto) {\n        const date = new Date(emailSchedule.date)\n\n        const job = new CronJob(date, () => {\n            this.emailService.sendMail({\n                subject: emailSchedule.subject,\n                text: emailSchedule.content,\n                to: emailSchedule.recipient,\n            })\n        })\n\n        this.scheduler.addCronJob(`${Date.now()}-${emailSchedule.subject}`, job)\n\n        job.start()\n        this.logger.log(`email job added at ${date.toLocaleDateString()}!`)\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/EmailService.html":{"url":"injectables/EmailService.html","title":"injectable - EmailService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  EmailService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/email/email.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                sendMail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/email/email.service.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            sendMail\n                        \n                        \n                    \n                \n            \n            \n                \nsendMail(options)\n                \n            \n\n\n            \n                \n                    Defined in src/email/email.service.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common'\nimport { ConfigService } from '@nestjs/config'\n\n@Injectable()\nexport default class EmailService {\n    constructor(\n        private readonly configService: ConfigService,\n    ) {}\n\n    // TODO: Implement this\n    sendMail(options) {\n        console.log({ options, config: this.configService.get('NODE_ENV') })\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ExcludeNullUndefinedInterceptor.html":{"url":"injectables/ExcludeNullUndefinedInterceptor.html","title":"injectable - ExcludeNullUndefinedInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ExcludeNullUndefinedInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infra/interceptors/null-undefined-override.ts\n        \n\n            \n                Description\n            \n            \n                Interceptors to transform each occurrence of a null value to an empty string ''\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            intercept\n                        \n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n            \n                \n                    Defined in src/infra/interceptors/null-undefined-override.ts:51\n                \n            \n\n\n            \n                \n                    Interceptor Method to implement a custom interceptor.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        an ExecutionContext object providing methods to access the\nroute handler and class about to be invoked.\n\n                                    \n                                \n                                \n                                    next\n                                    \n                                            CallHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        a reference to the CallHandler, which provides access to an\nObservable representing the response stream from the route handler.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n    Injectable,\n    NestInterceptor,\n    ExecutionContext,\n    CallHandler,\n} from '@nestjs/common'\n\nimport { Observable } from 'rxjs'\nimport { map } from 'rxjs/operators'\n\n/**\n * Recursively Strip Null Values\n */\nfunction recursivelyStripNullValues(value: unknown): unknown {\n    if (Array.isArray(value)) {\n        return value.map(recursivelyStripNullValues)\n    }\n\n    if (value !== null && typeof value === 'object') {\n        // @ts-ignore\n        return Object.fromEntries(\n            // @ts-ignore\n            // eslint-disable-next-line @typescript-eslint/no-shadow\n            Object.entries(value).map(([key, value]) => [\n                key,\n                recursivelyStripNullValues(value),\n            ]),\n        )\n    }\n\n    if (value !== null) {\n        return value\n    }\n\n    return ''\n}\n\n/**\n * Interceptors to transform each occurrence of a null value to an empty string ''\n */\n@Injectable()\nexport class ExcludeNullUndefinedInterceptor implements NestInterceptor {\n    /**\n     * Interceptor Method to implement a custom interceptor.\n     *\n     * @param context an `ExecutionContext` object providing methods to access the\n     * route handler and class about to be invoked.\n     * @param next a reference to the `CallHandler`, which provides access to an\n     * `Observable` representing the response stream from the route handler.\n     */\n    intercept(context: ExecutionContext, next: CallHandler): Observable {\n        return next.handle().pipe(\n            map(\n                (value) => value ?? '', // recursivelyStripNullValues(value),\n            ),\n        )\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Follower.html":{"url":"interfaces/Follower.html","title":"interface - Follower","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Follower\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/domain.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        areYouFollowing\n                                \n                                \n                                        profileImage\n                                \n                                \n                                        showRemoveOption\n                                \n                                \n                                        userId\n                                \n                                \n                                        userName\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        areYouFollowing\n                                    \n                                \n                                \n                                    \n                                        areYouFollowing:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        profileImage\n                                    \n                                \n                                \n                                    \n                                        profileImage:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        showRemoveOption\n                                    \n                                \n                                \n                                    \n                                        showRemoveOption:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        userId\n                                    \n                                \n                                \n                                    \n                                        userId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        userName\n                                    \n                                \n                                \n                                    \n                                        userName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { HttpStatus } from '@nestjs/common'\n\nexport type Results =\n    | GetAppLaunchData\n    | GetUserProfile\n    | GetUserPosts\n    | GetComments\n    | GetRescueList\n    | GetFollowers\n    | GetFollowing\n\nexport type APIError = Error | string | null\n\nexport interface Result {\n    data: T\n    error?: APIError\n    message?: string | string[]\n    statusCode: HttpStatus\n}\n\nexport interface APIResponse {\n    data: T\n    error?: APIError\n    message?: string | string[]\n    statusCode: HttpStatus\n\n    count?: number\n    page?: number\n    pageCount?: number\n    total?: number\n}\n\nexport interface GetAppLaunchData {\n    link: 'api:/'\n    response: APIResponse\n}\n\nexport interface GetUserProfile {\n    link: 'api:v1/user/getUserProfile?userId=25'\n    response: APIResponse\n}\n\nexport interface GetUserPosts {\n    link: 'api:v1/user/getUserPosts?pageNo=0&pageSize=25'\n    response: APIResponse\n}\n\nexport interface GetRescueList {\n    link: 'api:v1/rescue/getRescueList?pageNo=0&pageSize=10&status=pending|inProgress|completed|nearest'\n    response: APIResponse\n}\n\nexport interface GetComments {\n    link: 'api:v1/rescue/getComments?pageNo=0&pageSize=10&postId=1230'\n    response: APIResponse\n}\n\nexport interface GetFollowers {\n    link: 'api:v1/rescue/getUserFollowers?userId=1230'\n    response: APIResponse\n}\n\nexport interface GetFollowing {\n    link: 'api:v1/rescue/getUserFollowing?userId=1230'\n    response: APIResponse\n}\n\nexport interface AppLaunchAction {\n    actionId: number\n    action: string\n    isActive: boolean\n    subject?: string\n}\n\nexport interface User {\n    usesId: number\n\n    coverImage: string\n    following: boolean\n    gender: string\n    isOwnProfile: number\n    isRescuer: boolean\n    latitude: number\n    longitude: number\n    numberOfFollowers: number\n    numberOfFollowing: number\n    numberOfPosts: number\n    numberOfRescuesCompleted: number\n    numberOfRescuesCreated: number\n    numberOfRescuesInProgress: number\n    profileImage: string\n    rescuer: boolean\n    userAddress: string\n    userContacts: string\n    userEmail: string\n    userName: string\n    badge: {\n        badgeId: number\n        badgeName: string\n        badgeDescription: string\n        recuesCompletionNeeded: number\n    }\n    setting: {\n        showMyContacts: boolean\n        getNotifications: boolean\n    }\n}\n\nexport interface PostType {\n    postTypeId: number\n    postType: string\n}\n\nexport interface PostedByUser {\n    usesId: number\n    badgeName: string\n    following: boolean\n    profileImage: string\n    rescuer: boolean\n    userName: string\n}\n\nexport interface UserPost {\n    postId: number\n    commentsCount: number\n    isUserReactedToPost: boolean\n    ownPage: boolean\n    postBy: PostedByUser\n    postImage: string\n    postTime: string\n    postType: PostType\n    postVideo: string\n    reactionsCount: number\n    timeAgo: string\n\n    adCorporateLogoUrl: string | null\n    corporateDescription: string | null\n    corporateName: string | null\n}\n\nexport interface UserPosts {\n    isRecent: boolean\n    feed: UserPost[]\n}\n\nexport interface Rescues {\n    rescueId: number\n    animalImageUrl: string\n    distance: number\n    distanceAway: string\n    emergencyType: string\n    postedBy: string\n    postedMinAgo: string\n    rescueDate: Date\n    rescuedPetName: string\n    rescueLocality: string\n    rescuers: {\n        contact: number\n        name: string\n        profileId: number\n        profileImageUrl: string\n        rescues: boolean\n        showMyNumber: boolean\n    }\n    rescueStatus: string\n    viewsCont: number\n}\n\nexport interface RescueLists {\n    rescues: Rescues[]\n}\n\nexport interface Comment {\n    commentId: number\n    comment: string\n    commentedUseName: string\n    commentedUserId: number\n    timeAgo: string\n}\n\nexport interface Comments {\n    comments: Comment[]\n}\n\nexport interface Follower {\n    userId: number\n    userName: string\n    profileImage: string\n    areYouFollowing: boolean\n    showRemoveOption: boolean\n}\n\nexport type Following = Follower\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/GetAppLaunchData.html":{"url":"interfaces/GetAppLaunchData.html","title":"interface - GetAppLaunchData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  GetAppLaunchData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/domain.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        link\n                                \n                                \n                                        response\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        link\n                                    \n                                \n                                \n                                    \n                                        link:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        response\n                                    \n                                \n                                \n                                    \n                                        response:         APIResponse\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         APIResponse\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { HttpStatus } from '@nestjs/common'\n\nexport type Results =\n    | GetAppLaunchData\n    | GetUserProfile\n    | GetUserPosts\n    | GetComments\n    | GetRescueList\n    | GetFollowers\n    | GetFollowing\n\nexport type APIError = Error | string | null\n\nexport interface Result {\n    data: T\n    error?: APIError\n    message?: string | string[]\n    statusCode: HttpStatus\n}\n\nexport interface APIResponse {\n    data: T\n    error?: APIError\n    message?: string | string[]\n    statusCode: HttpStatus\n\n    count?: number\n    page?: number\n    pageCount?: number\n    total?: number\n}\n\nexport interface GetAppLaunchData {\n    link: 'api:/'\n    response: APIResponse\n}\n\nexport interface GetUserProfile {\n    link: 'api:v1/user/getUserProfile?userId=25'\n    response: APIResponse\n}\n\nexport interface GetUserPosts {\n    link: 'api:v1/user/getUserPosts?pageNo=0&pageSize=25'\n    response: APIResponse\n}\n\nexport interface GetRescueList {\n    link: 'api:v1/rescue/getRescueList?pageNo=0&pageSize=10&status=pending|inProgress|completed|nearest'\n    response: APIResponse\n}\n\nexport interface GetComments {\n    link: 'api:v1/rescue/getComments?pageNo=0&pageSize=10&postId=1230'\n    response: APIResponse\n}\n\nexport interface GetFollowers {\n    link: 'api:v1/rescue/getUserFollowers?userId=1230'\n    response: APIResponse\n}\n\nexport interface GetFollowing {\n    link: 'api:v1/rescue/getUserFollowing?userId=1230'\n    response: APIResponse\n}\n\nexport interface AppLaunchAction {\n    actionId: number\n    action: string\n    isActive: boolean\n    subject?: string\n}\n\nexport interface User {\n    usesId: number\n\n    coverImage: string\n    following: boolean\n    gender: string\n    isOwnProfile: number\n    isRescuer: boolean\n    latitude: number\n    longitude: number\n    numberOfFollowers: number\n    numberOfFollowing: number\n    numberOfPosts: number\n    numberOfRescuesCompleted: number\n    numberOfRescuesCreated: number\n    numberOfRescuesInProgress: number\n    profileImage: string\n    rescuer: boolean\n    userAddress: string\n    userContacts: string\n    userEmail: string\n    userName: string\n    badge: {\n        badgeId: number\n        badgeName: string\n        badgeDescription: string\n        recuesCompletionNeeded: number\n    }\n    setting: {\n        showMyContacts: boolean\n        getNotifications: boolean\n    }\n}\n\nexport interface PostType {\n    postTypeId: number\n    postType: string\n}\n\nexport interface PostedByUser {\n    usesId: number\n    badgeName: string\n    following: boolean\n    profileImage: string\n    rescuer: boolean\n    userName: string\n}\n\nexport interface UserPost {\n    postId: number\n    commentsCount: number\n    isUserReactedToPost: boolean\n    ownPage: boolean\n    postBy: PostedByUser\n    postImage: string\n    postTime: string\n    postType: PostType\n    postVideo: string\n    reactionsCount: number\n    timeAgo: string\n\n    adCorporateLogoUrl: string | null\n    corporateDescription: string | null\n    corporateName: string | null\n}\n\nexport interface UserPosts {\n    isRecent: boolean\n    feed: UserPost[]\n}\n\nexport interface Rescues {\n    rescueId: number\n    animalImageUrl: string\n    distance: number\n    distanceAway: string\n    emergencyType: string\n    postedBy: string\n    postedMinAgo: string\n    rescueDate: Date\n    rescuedPetName: string\n    rescueLocality: string\n    rescuers: {\n        contact: number\n        name: string\n        profileId: number\n        profileImageUrl: string\n        rescues: boolean\n        showMyNumber: boolean\n    }\n    rescueStatus: string\n    viewsCont: number\n}\n\nexport interface RescueLists {\n    rescues: Rescues[]\n}\n\nexport interface Comment {\n    commentId: number\n    comment: string\n    commentedUseName: string\n    commentedUserId: number\n    timeAgo: string\n}\n\nexport interface Comments {\n    comments: Comment[]\n}\n\nexport interface Follower {\n    userId: number\n    userName: string\n    profileImage: string\n    areYouFollowing: boolean\n    showRemoveOption: boolean\n}\n\nexport type Following = Follower\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/GetComments.html":{"url":"interfaces/GetComments.html","title":"interface - GetComments","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  GetComments\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/domain.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        link\n                                \n                                \n                                        response\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        link\n                                    \n                                \n                                \n                                    \n                                        link:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        response\n                                    \n                                \n                                \n                                    \n                                        response:         APIResponse\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         APIResponse\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { HttpStatus } from '@nestjs/common'\n\nexport type Results =\n    | GetAppLaunchData\n    | GetUserProfile\n    | GetUserPosts\n    | GetComments\n    | GetRescueList\n    | GetFollowers\n    | GetFollowing\n\nexport type APIError = Error | string | null\n\nexport interface Result {\n    data: T\n    error?: APIError\n    message?: string | string[]\n    statusCode: HttpStatus\n}\n\nexport interface APIResponse {\n    data: T\n    error?: APIError\n    message?: string | string[]\n    statusCode: HttpStatus\n\n    count?: number\n    page?: number\n    pageCount?: number\n    total?: number\n}\n\nexport interface GetAppLaunchData {\n    link: 'api:/'\n    response: APIResponse\n}\n\nexport interface GetUserProfile {\n    link: 'api:v1/user/getUserProfile?userId=25'\n    response: APIResponse\n}\n\nexport interface GetUserPosts {\n    link: 'api:v1/user/getUserPosts?pageNo=0&pageSize=25'\n    response: APIResponse\n}\n\nexport interface GetRescueList {\n    link: 'api:v1/rescue/getRescueList?pageNo=0&pageSize=10&status=pending|inProgress|completed|nearest'\n    response: APIResponse\n}\n\nexport interface GetComments {\n    link: 'api:v1/rescue/getComments?pageNo=0&pageSize=10&postId=1230'\n    response: APIResponse\n}\n\nexport interface GetFollowers {\n    link: 'api:v1/rescue/getUserFollowers?userId=1230'\n    response: APIResponse\n}\n\nexport interface GetFollowing {\n    link: 'api:v1/rescue/getUserFollowing?userId=1230'\n    response: APIResponse\n}\n\nexport interface AppLaunchAction {\n    actionId: number\n    action: string\n    isActive: boolean\n    subject?: string\n}\n\nexport interface User {\n    usesId: number\n\n    coverImage: string\n    following: boolean\n    gender: string\n    isOwnProfile: number\n    isRescuer: boolean\n    latitude: number\n    longitude: number\n    numberOfFollowers: number\n    numberOfFollowing: number\n    numberOfPosts: number\n    numberOfRescuesCompleted: number\n    numberOfRescuesCreated: number\n    numberOfRescuesInProgress: number\n    profileImage: string\n    rescuer: boolean\n    userAddress: string\n    userContacts: string\n    userEmail: string\n    userName: string\n    badge: {\n        badgeId: number\n        badgeName: string\n        badgeDescription: string\n        recuesCompletionNeeded: number\n    }\n    setting: {\n        showMyContacts: boolean\n        getNotifications: boolean\n    }\n}\n\nexport interface PostType {\n    postTypeId: number\n    postType: string\n}\n\nexport interface PostedByUser {\n    usesId: number\n    badgeName: string\n    following: boolean\n    profileImage: string\n    rescuer: boolean\n    userName: string\n}\n\nexport interface UserPost {\n    postId: number\n    commentsCount: number\n    isUserReactedToPost: boolean\n    ownPage: boolean\n    postBy: PostedByUser\n    postImage: string\n    postTime: string\n    postType: PostType\n    postVideo: string\n    reactionsCount: number\n    timeAgo: string\n\n    adCorporateLogoUrl: string | null\n    corporateDescription: string | null\n    corporateName: string | null\n}\n\nexport interface UserPosts {\n    isRecent: boolean\n    feed: UserPost[]\n}\n\nexport interface Rescues {\n    rescueId: number\n    animalImageUrl: string\n    distance: number\n    distanceAway: string\n    emergencyType: string\n    postedBy: string\n    postedMinAgo: string\n    rescueDate: Date\n    rescuedPetName: string\n    rescueLocality: string\n    rescuers: {\n        contact: number\n        name: string\n        profileId: number\n        profileImageUrl: string\n        rescues: boolean\n        showMyNumber: boolean\n    }\n    rescueStatus: string\n    viewsCont: number\n}\n\nexport interface RescueLists {\n    rescues: Rescues[]\n}\n\nexport interface Comment {\n    commentId: number\n    comment: string\n    commentedUseName: string\n    commentedUserId: number\n    timeAgo: string\n}\n\nexport interface Comments {\n    comments: Comment[]\n}\n\nexport interface Follower {\n    userId: number\n    userName: string\n    profileImage: string\n    areYouFollowing: boolean\n    showRemoveOption: boolean\n}\n\nexport type Following = Follower\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/GetFollowers.html":{"url":"interfaces/GetFollowers.html","title":"interface - GetFollowers","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  GetFollowers\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/domain.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        link\n                                \n                                \n                                        response\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        link\n                                    \n                                \n                                \n                                    \n                                        link:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        response\n                                    \n                                \n                                \n                                    \n                                        response:         APIResponse\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         APIResponse\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { HttpStatus } from '@nestjs/common'\n\nexport type Results =\n    | GetAppLaunchData\n    | GetUserProfile\n    | GetUserPosts\n    | GetComments\n    | GetRescueList\n    | GetFollowers\n    | GetFollowing\n\nexport type APIError = Error | string | null\n\nexport interface Result {\n    data: T\n    error?: APIError\n    message?: string | string[]\n    statusCode: HttpStatus\n}\n\nexport interface APIResponse {\n    data: T\n    error?: APIError\n    message?: string | string[]\n    statusCode: HttpStatus\n\n    count?: number\n    page?: number\n    pageCount?: number\n    total?: number\n}\n\nexport interface GetAppLaunchData {\n    link: 'api:/'\n    response: APIResponse\n}\n\nexport interface GetUserProfile {\n    link: 'api:v1/user/getUserProfile?userId=25'\n    response: APIResponse\n}\n\nexport interface GetUserPosts {\n    link: 'api:v1/user/getUserPosts?pageNo=0&pageSize=25'\n    response: APIResponse\n}\n\nexport interface GetRescueList {\n    link: 'api:v1/rescue/getRescueList?pageNo=0&pageSize=10&status=pending|inProgress|completed|nearest'\n    response: APIResponse\n}\n\nexport interface GetComments {\n    link: 'api:v1/rescue/getComments?pageNo=0&pageSize=10&postId=1230'\n    response: APIResponse\n}\n\nexport interface GetFollowers {\n    link: 'api:v1/rescue/getUserFollowers?userId=1230'\n    response: APIResponse\n}\n\nexport interface GetFollowing {\n    link: 'api:v1/rescue/getUserFollowing?userId=1230'\n    response: APIResponse\n}\n\nexport interface AppLaunchAction {\n    actionId: number\n    action: string\n    isActive: boolean\n    subject?: string\n}\n\nexport interface User {\n    usesId: number\n\n    coverImage: string\n    following: boolean\n    gender: string\n    isOwnProfile: number\n    isRescuer: boolean\n    latitude: number\n    longitude: number\n    numberOfFollowers: number\n    numberOfFollowing: number\n    numberOfPosts: number\n    numberOfRescuesCompleted: number\n    numberOfRescuesCreated: number\n    numberOfRescuesInProgress: number\n    profileImage: string\n    rescuer: boolean\n    userAddress: string\n    userContacts: string\n    userEmail: string\n    userName: string\n    badge: {\n        badgeId: number\n        badgeName: string\n        badgeDescription: string\n        recuesCompletionNeeded: number\n    }\n    setting: {\n        showMyContacts: boolean\n        getNotifications: boolean\n    }\n}\n\nexport interface PostType {\n    postTypeId: number\n    postType: string\n}\n\nexport interface PostedByUser {\n    usesId: number\n    badgeName: string\n    following: boolean\n    profileImage: string\n    rescuer: boolean\n    userName: string\n}\n\nexport interface UserPost {\n    postId: number\n    commentsCount: number\n    isUserReactedToPost: boolean\n    ownPage: boolean\n    postBy: PostedByUser\n    postImage: string\n    postTime: string\n    postType: PostType\n    postVideo: string\n    reactionsCount: number\n    timeAgo: string\n\n    adCorporateLogoUrl: string | null\n    corporateDescription: string | null\n    corporateName: string | null\n}\n\nexport interface UserPosts {\n    isRecent: boolean\n    feed: UserPost[]\n}\n\nexport interface Rescues {\n    rescueId: number\n    animalImageUrl: string\n    distance: number\n    distanceAway: string\n    emergencyType: string\n    postedBy: string\n    postedMinAgo: string\n    rescueDate: Date\n    rescuedPetName: string\n    rescueLocality: string\n    rescuers: {\n        contact: number\n        name: string\n        profileId: number\n        profileImageUrl: string\n        rescues: boolean\n        showMyNumber: boolean\n    }\n    rescueStatus: string\n    viewsCont: number\n}\n\nexport interface RescueLists {\n    rescues: Rescues[]\n}\n\nexport interface Comment {\n    commentId: number\n    comment: string\n    commentedUseName: string\n    commentedUserId: number\n    timeAgo: string\n}\n\nexport interface Comments {\n    comments: Comment[]\n}\n\nexport interface Follower {\n    userId: number\n    userName: string\n    profileImage: string\n    areYouFollowing: boolean\n    showRemoveOption: boolean\n}\n\nexport type Following = Follower\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/GetFollowing.html":{"url":"interfaces/GetFollowing.html","title":"interface - GetFollowing","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  GetFollowing\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/domain.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        link\n                                \n                                \n                                        response\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        link\n                                    \n                                \n                                \n                                    \n                                        link:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        response\n                                    \n                                \n                                \n                                    \n                                        response:         APIResponse\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         APIResponse\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { HttpStatus } from '@nestjs/common'\n\nexport type Results =\n    | GetAppLaunchData\n    | GetUserProfile\n    | GetUserPosts\n    | GetComments\n    | GetRescueList\n    | GetFollowers\n    | GetFollowing\n\nexport type APIError = Error | string | null\n\nexport interface Result {\n    data: T\n    error?: APIError\n    message?: string | string[]\n    statusCode: HttpStatus\n}\n\nexport interface APIResponse {\n    data: T\n    error?: APIError\n    message?: string | string[]\n    statusCode: HttpStatus\n\n    count?: number\n    page?: number\n    pageCount?: number\n    total?: number\n}\n\nexport interface GetAppLaunchData {\n    link: 'api:/'\n    response: APIResponse\n}\n\nexport interface GetUserProfile {\n    link: 'api:v1/user/getUserProfile?userId=25'\n    response: APIResponse\n}\n\nexport interface GetUserPosts {\n    link: 'api:v1/user/getUserPosts?pageNo=0&pageSize=25'\n    response: APIResponse\n}\n\nexport interface GetRescueList {\n    link: 'api:v1/rescue/getRescueList?pageNo=0&pageSize=10&status=pending|inProgress|completed|nearest'\n    response: APIResponse\n}\n\nexport interface GetComments {\n    link: 'api:v1/rescue/getComments?pageNo=0&pageSize=10&postId=1230'\n    response: APIResponse\n}\n\nexport interface GetFollowers {\n    link: 'api:v1/rescue/getUserFollowers?userId=1230'\n    response: APIResponse\n}\n\nexport interface GetFollowing {\n    link: 'api:v1/rescue/getUserFollowing?userId=1230'\n    response: APIResponse\n}\n\nexport interface AppLaunchAction {\n    actionId: number\n    action: string\n    isActive: boolean\n    subject?: string\n}\n\nexport interface User {\n    usesId: number\n\n    coverImage: string\n    following: boolean\n    gender: string\n    isOwnProfile: number\n    isRescuer: boolean\n    latitude: number\n    longitude: number\n    numberOfFollowers: number\n    numberOfFollowing: number\n    numberOfPosts: number\n    numberOfRescuesCompleted: number\n    numberOfRescuesCreated: number\n    numberOfRescuesInProgress: number\n    profileImage: string\n    rescuer: boolean\n    userAddress: string\n    userContacts: string\n    userEmail: string\n    userName: string\n    badge: {\n        badgeId: number\n        badgeName: string\n        badgeDescription: string\n        recuesCompletionNeeded: number\n    }\n    setting: {\n        showMyContacts: boolean\n        getNotifications: boolean\n    }\n}\n\nexport interface PostType {\n    postTypeId: number\n    postType: string\n}\n\nexport interface PostedByUser {\n    usesId: number\n    badgeName: string\n    following: boolean\n    profileImage: string\n    rescuer: boolean\n    userName: string\n}\n\nexport interface UserPost {\n    postId: number\n    commentsCount: number\n    isUserReactedToPost: boolean\n    ownPage: boolean\n    postBy: PostedByUser\n    postImage: string\n    postTime: string\n    postType: PostType\n    postVideo: string\n    reactionsCount: number\n    timeAgo: string\n\n    adCorporateLogoUrl: string | null\n    corporateDescription: string | null\n    corporateName: string | null\n}\n\nexport interface UserPosts {\n    isRecent: boolean\n    feed: UserPost[]\n}\n\nexport interface Rescues {\n    rescueId: number\n    animalImageUrl: string\n    distance: number\n    distanceAway: string\n    emergencyType: string\n    postedBy: string\n    postedMinAgo: string\n    rescueDate: Date\n    rescuedPetName: string\n    rescueLocality: string\n    rescuers: {\n        contact: number\n        name: string\n        profileId: number\n        profileImageUrl: string\n        rescues: boolean\n        showMyNumber: boolean\n    }\n    rescueStatus: string\n    viewsCont: number\n}\n\nexport interface RescueLists {\n    rescues: Rescues[]\n}\n\nexport interface Comment {\n    commentId: number\n    comment: string\n    commentedUseName: string\n    commentedUserId: number\n    timeAgo: string\n}\n\nexport interface Comments {\n    comments: Comment[]\n}\n\nexport interface Follower {\n    userId: number\n    userName: string\n    profileImage: string\n    areYouFollowing: boolean\n    showRemoveOption: boolean\n}\n\nexport type Following = Follower\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/GetManyDefaultResponse.html":{"url":"interfaces/GetManyDefaultResponse.html","title":"interface - GetManyDefaultResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  GetManyDefaultResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/base/swagger-gen/utils/other.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        count\n                                \n                                \n                                        data\n                                \n                                \n                                        page\n                                \n                                \n                                        pageCount\n                                \n                                \n                                        total\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        count\n                                    \n                                \n                                \n                                    \n                                        count:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                    \n                                \n                                \n                                    \n                                        data:     T[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        page\n                                    \n                                \n                                \n                                    \n                                        page:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        pageCount\n                                    \n                                \n                                \n                                    \n                                        pageCount:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        total\n                                    \n                                \n                                \n                                    \n                                        total:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { RequestMethod, ValidationPipeOptions } from '@nestjs/common'\nimport { SwaggerEnumType } from '@nestjs/swagger/dist/types/swagger-enum.type'\n\nexport declare type BaseRouteName =\n    | 'getManyBase'\n    | 'getOneBase'\n    | 'createOneBase'\n    | 'createManyBase'\n    | 'updateOneBase'\n    | 'replaceOneBase'\n    | 'deleteOneBase'\n    | 'getOne'\n\nexport interface BaseRoute {\n    name: BaseRouteName\n    path: string\n    method: RequestMethod\n    enable: boolean\n    override: boolean\n    withParams: boolean\n}\n\nexport interface GetManyDefaultResponse {\n    data: T[]\n    count: number\n    total: number\n    page: number\n    pageCount: number\n}\n\nexport interface ParamOption {\n    field?: string\n    type?: 'number' | 'string' | 'uuid'\n    enum?: SwaggerEnumType\n    primary?: boolean\n    disabled?: boolean\n}\n\nexport interface ParamsOptions {\n    [key: string]: ParamOption\n}\n\nexport interface CrudOptions {\n    model: {\n        type: { name: string }\n    }\n    dto?: {}\n    routes?: {\n        deleteOneBase?: { returnDeleted?: boolean }\n    }\n    validation?: ValidationPipeOptions | false\n    params?: ParamsOptions\n    query?: {\n        limit?: number\n        maxLimit?: number\n        cache?: number | false\n        alwaysPaginate?: boolean\n    }\n    serialize?: {\n        getMany?: false | object\n        get?: false | object\n        create?: false | object\n        createMany?: false | object\n        update?: false | object\n        replace?: false | object\n        delete?: false | object\n    }\n}\n\nexport function safeRequire(path: string): T | null {\n    try {\n        // eslint-disable-next-line global-require,@typescript-eslint/no-var-requires,import/no-dynamic-require\n        const pack = require(path)\n        return pack\n    } catch (_) {\n        return null\n    }\n}\n\nexport const swagger = safeRequire('@nestjs/swagger')\nexport const swaggerConst = safeRequire('@nestjs/swagger/dist/constants')\n\nexport function ApiProperty(options?: any): PropertyDecorator {\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    return (target: object, propertyKey: string | symbol) => {\n        if (swagger) {\n            const ApiPropertyDecorator =\n                swagger.ApiProperty || swagger.ApiModelProperty\n            ApiPropertyDecorator(options)(target, propertyKey)\n        }\n    }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/GetRescueList.html":{"url":"interfaces/GetRescueList.html","title":"interface - GetRescueList","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  GetRescueList\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/domain.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        link\n                                \n                                \n                                        response\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        link\n                                    \n                                \n                                \n                                    \n                                        link:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        response\n                                    \n                                \n                                \n                                    \n                                        response:         APIResponse\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         APIResponse\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { HttpStatus } from '@nestjs/common'\n\nexport type Results =\n    | GetAppLaunchData\n    | GetUserProfile\n    | GetUserPosts\n    | GetComments\n    | GetRescueList\n    | GetFollowers\n    | GetFollowing\n\nexport type APIError = Error | string | null\n\nexport interface Result {\n    data: T\n    error?: APIError\n    message?: string | string[]\n    statusCode: HttpStatus\n}\n\nexport interface APIResponse {\n    data: T\n    error?: APIError\n    message?: string | string[]\n    statusCode: HttpStatus\n\n    count?: number\n    page?: number\n    pageCount?: number\n    total?: number\n}\n\nexport interface GetAppLaunchData {\n    link: 'api:/'\n    response: APIResponse\n}\n\nexport interface GetUserProfile {\n    link: 'api:v1/user/getUserProfile?userId=25'\n    response: APIResponse\n}\n\nexport interface GetUserPosts {\n    link: 'api:v1/user/getUserPosts?pageNo=0&pageSize=25'\n    response: APIResponse\n}\n\nexport interface GetRescueList {\n    link: 'api:v1/rescue/getRescueList?pageNo=0&pageSize=10&status=pending|inProgress|completed|nearest'\n    response: APIResponse\n}\n\nexport interface GetComments {\n    link: 'api:v1/rescue/getComments?pageNo=0&pageSize=10&postId=1230'\n    response: APIResponse\n}\n\nexport interface GetFollowers {\n    link: 'api:v1/rescue/getUserFollowers?userId=1230'\n    response: APIResponse\n}\n\nexport interface GetFollowing {\n    link: 'api:v1/rescue/getUserFollowing?userId=1230'\n    response: APIResponse\n}\n\nexport interface AppLaunchAction {\n    actionId: number\n    action: string\n    isActive: boolean\n    subject?: string\n}\n\nexport interface User {\n    usesId: number\n\n    coverImage: string\n    following: boolean\n    gender: string\n    isOwnProfile: number\n    isRescuer: boolean\n    latitude: number\n    longitude: number\n    numberOfFollowers: number\n    numberOfFollowing: number\n    numberOfPosts: number\n    numberOfRescuesCompleted: number\n    numberOfRescuesCreated: number\n    numberOfRescuesInProgress: number\n    profileImage: string\n    rescuer: boolean\n    userAddress: string\n    userContacts: string\n    userEmail: string\n    userName: string\n    badge: {\n        badgeId: number\n        badgeName: string\n        badgeDescription: string\n        recuesCompletionNeeded: number\n    }\n    setting: {\n        showMyContacts: boolean\n        getNotifications: boolean\n    }\n}\n\nexport interface PostType {\n    postTypeId: number\n    postType: string\n}\n\nexport interface PostedByUser {\n    usesId: number\n    badgeName: string\n    following: boolean\n    profileImage: string\n    rescuer: boolean\n    userName: string\n}\n\nexport interface UserPost {\n    postId: number\n    commentsCount: number\n    isUserReactedToPost: boolean\n    ownPage: boolean\n    postBy: PostedByUser\n    postImage: string\n    postTime: string\n    postType: PostType\n    postVideo: string\n    reactionsCount: number\n    timeAgo: string\n\n    adCorporateLogoUrl: string | null\n    corporateDescription: string | null\n    corporateName: string | null\n}\n\nexport interface UserPosts {\n    isRecent: boolean\n    feed: UserPost[]\n}\n\nexport interface Rescues {\n    rescueId: number\n    animalImageUrl: string\n    distance: number\n    distanceAway: string\n    emergencyType: string\n    postedBy: string\n    postedMinAgo: string\n    rescueDate: Date\n    rescuedPetName: string\n    rescueLocality: string\n    rescuers: {\n        contact: number\n        name: string\n        profileId: number\n        profileImageUrl: string\n        rescues: boolean\n        showMyNumber: boolean\n    }\n    rescueStatus: string\n    viewsCont: number\n}\n\nexport interface RescueLists {\n    rescues: Rescues[]\n}\n\nexport interface Comment {\n    commentId: number\n    comment: string\n    commentedUseName: string\n    commentedUserId: number\n    timeAgo: string\n}\n\nexport interface Comments {\n    comments: Comment[]\n}\n\nexport interface Follower {\n    userId: number\n    userName: string\n    profileImage: string\n    areYouFollowing: boolean\n    showRemoveOption: boolean\n}\n\nexport type Following = Follower\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/GetUserPosts.html":{"url":"interfaces/GetUserPosts.html","title":"interface - GetUserPosts","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  GetUserPosts\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/domain.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        link\n                                \n                                \n                                        response\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        link\n                                    \n                                \n                                \n                                    \n                                        link:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        response\n                                    \n                                \n                                \n                                    \n                                        response:     APIResponse\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     APIResponse\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { HttpStatus } from '@nestjs/common'\n\nexport type Results =\n    | GetAppLaunchData\n    | GetUserProfile\n    | GetUserPosts\n    | GetComments\n    | GetRescueList\n    | GetFollowers\n    | GetFollowing\n\nexport type APIError = Error | string | null\n\nexport interface Result {\n    data: T\n    error?: APIError\n    message?: string | string[]\n    statusCode: HttpStatus\n}\n\nexport interface APIResponse {\n    data: T\n    error?: APIError\n    message?: string | string[]\n    statusCode: HttpStatus\n\n    count?: number\n    page?: number\n    pageCount?: number\n    total?: number\n}\n\nexport interface GetAppLaunchData {\n    link: 'api:/'\n    response: APIResponse\n}\n\nexport interface GetUserProfile {\n    link: 'api:v1/user/getUserProfile?userId=25'\n    response: APIResponse\n}\n\nexport interface GetUserPosts {\n    link: 'api:v1/user/getUserPosts?pageNo=0&pageSize=25'\n    response: APIResponse\n}\n\nexport interface GetRescueList {\n    link: 'api:v1/rescue/getRescueList?pageNo=0&pageSize=10&status=pending|inProgress|completed|nearest'\n    response: APIResponse\n}\n\nexport interface GetComments {\n    link: 'api:v1/rescue/getComments?pageNo=0&pageSize=10&postId=1230'\n    response: APIResponse\n}\n\nexport interface GetFollowers {\n    link: 'api:v1/rescue/getUserFollowers?userId=1230'\n    response: APIResponse\n}\n\nexport interface GetFollowing {\n    link: 'api:v1/rescue/getUserFollowing?userId=1230'\n    response: APIResponse\n}\n\nexport interface AppLaunchAction {\n    actionId: number\n    action: string\n    isActive: boolean\n    subject?: string\n}\n\nexport interface User {\n    usesId: number\n\n    coverImage: string\n    following: boolean\n    gender: string\n    isOwnProfile: number\n    isRescuer: boolean\n    latitude: number\n    longitude: number\n    numberOfFollowers: number\n    numberOfFollowing: number\n    numberOfPosts: number\n    numberOfRescuesCompleted: number\n    numberOfRescuesCreated: number\n    numberOfRescuesInProgress: number\n    profileImage: string\n    rescuer: boolean\n    userAddress: string\n    userContacts: string\n    userEmail: string\n    userName: string\n    badge: {\n        badgeId: number\n        badgeName: string\n        badgeDescription: string\n        recuesCompletionNeeded: number\n    }\n    setting: {\n        showMyContacts: boolean\n        getNotifications: boolean\n    }\n}\n\nexport interface PostType {\n    postTypeId: number\n    postType: string\n}\n\nexport interface PostedByUser {\n    usesId: number\n    badgeName: string\n    following: boolean\n    profileImage: string\n    rescuer: boolean\n    userName: string\n}\n\nexport interface UserPost {\n    postId: number\n    commentsCount: number\n    isUserReactedToPost: boolean\n    ownPage: boolean\n    postBy: PostedByUser\n    postImage: string\n    postTime: string\n    postType: PostType\n    postVideo: string\n    reactionsCount: number\n    timeAgo: string\n\n    adCorporateLogoUrl: string | null\n    corporateDescription: string | null\n    corporateName: string | null\n}\n\nexport interface UserPosts {\n    isRecent: boolean\n    feed: UserPost[]\n}\n\nexport interface Rescues {\n    rescueId: number\n    animalImageUrl: string\n    distance: number\n    distanceAway: string\n    emergencyType: string\n    postedBy: string\n    postedMinAgo: string\n    rescueDate: Date\n    rescuedPetName: string\n    rescueLocality: string\n    rescuers: {\n        contact: number\n        name: string\n        profileId: number\n        profileImageUrl: string\n        rescues: boolean\n        showMyNumber: boolean\n    }\n    rescueStatus: string\n    viewsCont: number\n}\n\nexport interface RescueLists {\n    rescues: Rescues[]\n}\n\nexport interface Comment {\n    commentId: number\n    comment: string\n    commentedUseName: string\n    commentedUserId: number\n    timeAgo: string\n}\n\nexport interface Comments {\n    comments: Comment[]\n}\n\nexport interface Follower {\n    userId: number\n    userName: string\n    profileImage: string\n    areYouFollowing: boolean\n    showRemoveOption: boolean\n}\n\nexport type Following = Follower\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/GetUserProfile.html":{"url":"interfaces/GetUserProfile.html","title":"interface - GetUserProfile","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  GetUserProfile\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/domain.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        link\n                                \n                                \n                                        response\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        link\n                                    \n                                \n                                \n                                    \n                                        link:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        response\n                                    \n                                \n                                \n                                    \n                                        response:     APIResponse\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     APIResponse\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { HttpStatus } from '@nestjs/common'\n\nexport type Results =\n    | GetAppLaunchData\n    | GetUserProfile\n    | GetUserPosts\n    | GetComments\n    | GetRescueList\n    | GetFollowers\n    | GetFollowing\n\nexport type APIError = Error | string | null\n\nexport interface Result {\n    data: T\n    error?: APIError\n    message?: string | string[]\n    statusCode: HttpStatus\n}\n\nexport interface APIResponse {\n    data: T\n    error?: APIError\n    message?: string | string[]\n    statusCode: HttpStatus\n\n    count?: number\n    page?: number\n    pageCount?: number\n    total?: number\n}\n\nexport interface GetAppLaunchData {\n    link: 'api:/'\n    response: APIResponse\n}\n\nexport interface GetUserProfile {\n    link: 'api:v1/user/getUserProfile?userId=25'\n    response: APIResponse\n}\n\nexport interface GetUserPosts {\n    link: 'api:v1/user/getUserPosts?pageNo=0&pageSize=25'\n    response: APIResponse\n}\n\nexport interface GetRescueList {\n    link: 'api:v1/rescue/getRescueList?pageNo=0&pageSize=10&status=pending|inProgress|completed|nearest'\n    response: APIResponse\n}\n\nexport interface GetComments {\n    link: 'api:v1/rescue/getComments?pageNo=0&pageSize=10&postId=1230'\n    response: APIResponse\n}\n\nexport interface GetFollowers {\n    link: 'api:v1/rescue/getUserFollowers?userId=1230'\n    response: APIResponse\n}\n\nexport interface GetFollowing {\n    link: 'api:v1/rescue/getUserFollowing?userId=1230'\n    response: APIResponse\n}\n\nexport interface AppLaunchAction {\n    actionId: number\n    action: string\n    isActive: boolean\n    subject?: string\n}\n\nexport interface User {\n    usesId: number\n\n    coverImage: string\n    following: boolean\n    gender: string\n    isOwnProfile: number\n    isRescuer: boolean\n    latitude: number\n    longitude: number\n    numberOfFollowers: number\n    numberOfFollowing: number\n    numberOfPosts: number\n    numberOfRescuesCompleted: number\n    numberOfRescuesCreated: number\n    numberOfRescuesInProgress: number\n    profileImage: string\n    rescuer: boolean\n    userAddress: string\n    userContacts: string\n    userEmail: string\n    userName: string\n    badge: {\n        badgeId: number\n        badgeName: string\n        badgeDescription: string\n        recuesCompletionNeeded: number\n    }\n    setting: {\n        showMyContacts: boolean\n        getNotifications: boolean\n    }\n}\n\nexport interface PostType {\n    postTypeId: number\n    postType: string\n}\n\nexport interface PostedByUser {\n    usesId: number\n    badgeName: string\n    following: boolean\n    profileImage: string\n    rescuer: boolean\n    userName: string\n}\n\nexport interface UserPost {\n    postId: number\n    commentsCount: number\n    isUserReactedToPost: boolean\n    ownPage: boolean\n    postBy: PostedByUser\n    postImage: string\n    postTime: string\n    postType: PostType\n    postVideo: string\n    reactionsCount: number\n    timeAgo: string\n\n    adCorporateLogoUrl: string | null\n    corporateDescription: string | null\n    corporateName: string | null\n}\n\nexport interface UserPosts {\n    isRecent: boolean\n    feed: UserPost[]\n}\n\nexport interface Rescues {\n    rescueId: number\n    animalImageUrl: string\n    distance: number\n    distanceAway: string\n    emergencyType: string\n    postedBy: string\n    postedMinAgo: string\n    rescueDate: Date\n    rescuedPetName: string\n    rescueLocality: string\n    rescuers: {\n        contact: number\n        name: string\n        profileId: number\n        profileImageUrl: string\n        rescues: boolean\n        showMyNumber: boolean\n    }\n    rescueStatus: string\n    viewsCont: number\n}\n\nexport interface RescueLists {\n    rescues: Rescues[]\n}\n\nexport interface Comment {\n    commentId: number\n    comment: string\n    commentedUseName: string\n    commentedUserId: number\n    timeAgo: string\n}\n\nexport interface Comments {\n    comments: Comment[]\n}\n\nexport interface Follower {\n    userId: number\n    userName: string\n    profileImage: string\n    areYouFollowing: boolean\n    showRemoveOption: boolean\n}\n\nexport type Following = Follower\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/HealthController.html":{"url":"controllers/HealthController.html","title":"controller - HealthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  HealthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/health/health.controller.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                check\n                            \n                            \n                                collectOsMetrics\n                            \n                            \n                                onApplicationShutdown\n                            \n                            \n                                onModuleInit\n                            \n                            \n                                sse\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            check\n                        \n                        \n                    \n                \n            \n            \n                \ncheck()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@HttpCode(200)@HealthCheck()\n                \n            \n\n            \n                \n                    Defined in src/health/health.controller.ts:55\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            collectOsMetrics\n                        \n                        \n                    \n                \n            \n            \n                \ncollectOsMetrics(metrics: literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/health/health.controller.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    metrics\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onApplicationShutdown\n                        \n                        \n                    \n                \n            \n            \n                \nonApplicationShutdown(signal?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/health/health.controller.ts:86\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    signal\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onModuleInit\n                        \n                        \n                    \n                \n            \n            \n                \nonModuleInit()\n                \n            \n\n\n            \n                \n                    Defined in src/health/health.controller.ts:80\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            sse\n                        \n                        \n                    \n                \n            \n            \n                \nsse()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Sse('sse')\n                \n            \n\n            \n                \n                    Defined in src/health/health.controller.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Observable\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Controller,\n    Get,\n    HttpCode,\n    OnApplicationShutdown,\n    OnModuleInit,\n    MessageEvent,\n    Sse,\n} from '@nestjs/common'\nimport { ConfigService } from '@nestjs/config'\nimport { ApiTags } from '@nestjs/swagger'\nimport {\n    DNSHealthIndicator,\n    HealthCheck,\n    HealthCheckService,\n} from '@nestjs/terminus'\n\nimport * as os from 'os'\n// @ts-ignore\nimport * as pidusage from 'pidusage'\nimport { interval, Observable } from 'rxjs'\nimport { map } from 'rxjs/operators'\n\n@ApiTags(HealthController.name)\n@Controller(HealthController.path)\nexport class HealthController implements OnModuleInit, OnApplicationShutdown {\n    static path = 'health'\n\n    constructor(\n        readonly health: HealthCheckService,\n        readonly dns: DNSHealthIndicator,\n        readonly config: ConfigService,\n    ) {}\n\n    @Sse('sse')\n    sse(): Observable {\n        const metrics = {\n            os: {},\n            interval: 1, // Every 1 second\n            retention: 60, // Keep 60 datapoints in memory\n        }\n\n        return interval(5000).pipe(\n            map((_) => {\n                this.collectOsMetrics(metrics)\n\n                return { data: metrics }\n            }),\n        )\n    }\n\n    @Get()\n    @HttpCode(200)\n    @HealthCheck()\n    check() {\n        return this.health.check([\n            () => this.dns.pingCheck('nestjs-docs', 'https://docs.nestjs.com'),\n        ])\n    }\n\n    collectOsMetrics(metrics: { os: any; interval?: number; retention?: number }) {\n        pidusage(\n            process.pid,\n            (\n                err: any,\n                stat: { memory: number; timestamp: number; load: number[] },\n            ) => {\n                if (err) return\n\n                // Convert from B to MB\n                stat.memory = stat.memory / 1024 / 1024 // eslint-disable-line no-param-reassign\n                stat.timestamp = Date.now() // eslint-disable-line no-param-reassign\n                stat.load = os.loadavg() // eslint-disable-line no-param-reassign\n\n                metrics.os = stat // eslint-disable-line no-param-reassign\n            },\n        )\n    }\n\n    onModuleInit() {\n        console.log(`ModuleInit - HealthController has been initialized.`, {\n            config: this.config.get('NODE_ENV'),\n        })\n    }\n\n    onApplicationShutdown(signal?: string) {\n        console.log(\n            // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n            `ApplicationShutdown - HealthController has been shutdown with ${signal} signal`,\n        )\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IBaseModel.html":{"url":"interfaces/IBaseModel.html","title":"interface - IBaseModel","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IBaseModel\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/models/base.model.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        created_at\n                                \n                                \n                                            Optional\n                                        deleted_at\n                                \n                                \n                                        id\n                                \n                                \n                                        updated_at\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        created_at\n                                    \n                                \n                                \n                                    \n                                        created_at:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        deleted_at\n                                    \n                                \n                                \n                                    \n                                        deleted_at:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                    \n                                \n                                \n                                    \n                                        id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        updated_at\n                                    \n                                \n                                \n                                    \n                                        updated_at:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import Objection, {\n    raw,\n    mixin,\n    Model,\n    ModelOptions,\n    QueryContext,\n    RelationExpression,\n} from 'objection'\nimport { DBErrors } from 'objection-db-errors'\nimport visibilityPlugin from 'objection-visibility'\n\nimport { CustomQueryBuilder } from './helpers'\n\nexport interface IBaseModel {\n    id: number\n    created_at: any\n    updated_at: any\n    deleted_at?: any\n}\n\nexport class BaseModel\n    extends mixin(Model, [visibilityPlugin, DBErrors])\n    implements IBaseModel {\n    // hidden fields to filter from query result\n    static hidden = [\n        'salt',\n        'password',\n        'created_at',\n        'updated_at',\n        // 'deleted_at'\n    ]\n\n    // QueryBuilderType!: CustomQueryBuilder // custom query builder for pagination\n\n    static QueryBuilder = CustomQueryBuilder\n\n    id!: number\n\n    created_at: any\n\n    updated_at: any\n\n    deleted_at?: any | null\n\n    // fetch data with relation mapping\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    async fetchRelation(\n        expression: string | Record,\n        options: Objection.FetchGraphOptions,\n    ) {\n        if (typeof expression === 'string' && expression.toString() in this) {\n            // @ts-ignore\n            if (this[expression.toString()]) return this\n        }\n\n        await this.$fetchGraph(expression, options)\n        return this\n    }\n\n    async $beforeUpdate(opt: ModelOptions, queryContext: QueryContext) {\n        await super.$beforeUpdate(opt, queryContext)\n\n        this.updated_at = raw('CURRENT_TIMESTAMP') // new Date().toISOString() // fn.now()\n    }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ICrudService.html":{"url":"interfaces/ICrudService.html","title":"interface - ICrudService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ICrudService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/base/crud/crud.service.interface.ts\n        \n\n            \n                Description\n            \n            \n                Interface to enforce on the CRUD services\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    create\n                                \n                                \n                                    findAll\n                                \n                                \n                                    findOneByEmail\n                                \n                                \n                                    findOneById\n                                \n                                \n                                    paginatedFindAll\n                                \n                                \n                                    remove\n                                \n                                \n                                    update\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            create\n                        \n                        \n                    \n                \n            \n            \n                \ncreate(data: T)\n                \n            \n\n\n            \n                \n                    Defined in src/base/crud/crud.service.interface.ts:37\n                \n            \n\n\n            \n                \n                    create\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n            \n                \n                    Defined in src/base/crud/crud.service.interface.ts:10\n                \n            \n\n\n            \n                \n                    findAll\n\n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findOneByEmail\n                        \n                        \n                    \n                \n            \n            \n                \nfindOneByEmail(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/base/crud/crud.service.interface.ts:20\n                \n            \n\n\n            \n                \n                    findOneByEmail\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findOneById\n                        \n                        \n                    \n                \n            \n            \n                \nfindOneById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/base/crud/crud.service.interface.ts:15\n                \n            \n\n\n            \n                \n                    findOneById\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            paginatedFindAll\n                        \n                        \n                    \n                \n            \n            \n                \npaginatedFindAll(paginationParams?: PaginationParams)\n                \n            \n\n\n            \n                \n                    Defined in src/base/crud/crud.service.interface.ts:25\n                \n            \n\n\n            \n                \n                    paginatedFindAll\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    paginationParams\n                                    \n                                                PaginationParams\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            remove\n                        \n                        \n                    \n                \n            \n            \n                \nremove(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/base/crud/crud.service.interface.ts:32\n                \n            \n\n\n            \n                \n                    remove\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            update\n                        \n                        \n                    \n                \n            \n            \n                \nupdate(id: number, data: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/base/crud/crud.service.interface.ts:42\n                \n            \n\n\n            \n                \n                    update\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n                                    \n                                            Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { IPaginationResult, PaginationParams } from './pagination'\n\n/**\n * Interface to enforce on the CRUD services\n */\nexport interface ICrudService {\n    /**\n     * findAll\n     */\n    findAll(): Promise\n\n    /**\n     * findOneById\n     */\n    findOneById(id: number): Promise\n\n    /**\n     * findOneByEmail\n     */\n    findOneByEmail(email: string): Promise\n\n    /**\n     * paginatedFindAll\n     */\n    paginatedFindAll(\n        paginationParams?: PaginationParams,\n    ): Promise>\n\n    /**\n     * remove\n     */\n    remove(id: number): Promise\n\n    /**\n     * create\n     */\n    create(data: T): Promise\n\n    /**\n     * update\n     */\n    update(id: number, data: Partial): Promise\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IPaginationResult.html":{"url":"interfaces/IPaginationResult.html","title":"interface - IPaginationResult","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IPaginationResult\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/base/crud/pagination.ts\n        \n\n            \n                Description\n            \n            \n                Generic pagination response interface\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        data\n                                \n                                \n                                            Optional\n                                        error\n                                \n                                \n                                            Optional\n                                        message\n                                \n                                \n                                        paging\n                                \n                                \n                                        statusCode\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                    \n                                \n                                \n                                    \n                                        data:     T[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Items included in the current listing\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        error\n                                    \n                                \n                                \n                                    \n                                        error:         APIError\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         APIError\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Error if any\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                    \n                                \n                                \n                                    \n                                        message:     string | string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string | string[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Message if anu\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        paging\n                                    \n                                \n                                \n                                    \n                                        paging:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Paging metadata\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        statusCode\n                                    \n                                \n                                \n                                    \n                                        statusCode:     HttpStatus\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     HttpStatus\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Http status code\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { HttpStatus } from '@nestjs/common'\nimport { ApiPropertyOptional } from '@nestjs/swagger'\n\nimport { Transform } from 'class-transformer'\nimport { IsOptional, Min } from 'class-validator'\n\nimport { APIError } from '../../domain'\n\nexport enum OrderType {\n    DESC = 'DESC',\n    ASC = 'ASC',\n}\n\n/**\n * Describes generic pagination params\n */\nexport abstract class PaginationParams {\n    /**\n     * page\n     */\n    @ApiPropertyOptional({ type: Number, minimum: 0 })\n    @IsOptional()\n    @Min(0)\n    @Transform((val: string) => parseInt(val, 10))\n    readonly page?: number // = 0\n\n    /**\n     * page size\n     */\n    @ApiPropertyOptional({ type: Number, minimum: 0 })\n    @IsOptional()\n    @Min(0)\n    @Transform((val: string) => parseInt(val, 10))\n    readonly pageSize?: number // = 10\n\n    /**\n     * order\n     */\n    @ApiPropertyOptional()\n    @IsOptional()\n    abstract readonly order?: { [P in keyof T]?: OrderType }\n}\n\n/**\n * Generic pagination response interface\n */\nexport interface IPaginationResult {\n    /**\n     * Items included in the current listing\n     */\n    readonly data: T[]\n\n    /**\n     * Paging metadata\n     */\n    readonly paging: {\n        pageSize: number\n        page: number\n        total: number\n        totalPages: number\n    }\n\n    /**\n     * Error if any\n     */ error?: APIError\n\n    /**\n     * Message if anu\n     */\n    message?: string | string[]\n\n    /**\n     * Http status code\n     */\n    statusCode: HttpStatus\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ITag.html":{"url":"interfaces/ITag.html","title":"interface - ITag","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ITag\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/tag.model.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        name\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger'\n\nimport { IsNotEmpty, IsString, MaxLength, MinLength } from 'class-validator'\nimport type { JSONSchema, ModelObject, PartialModelObject } from 'objection'\n\nimport { BaseModel } from '../database/models/base.model'\n\ninterface ITag {\n    name: string\n}\n\nexport class Tag extends BaseModel implements ITag {\n    static tableName = 'tags'\n\n    name!: string\n\n    // JSON schema is not the database schema! Nothing is generated based on this.\n    // This is only used for validation. Whenever a model instance is created it is checked against this schema.\n    static jsonSchema: JSONSchema = {\n        type: 'object',\n        required: ['name'],\n        properties: {\n            id: { type: 'integer' },\n            name: { type: 'string', minLength: 2, maxLength: 255 },\n        },\n    }\n}\n\n// The `ModelObject` generic gives you a clean interface that can be used on the frontend, without any of the objection Model class properties or methods.\nexport type TagShape = ModelObject\nexport type PartialTagShape = PartialModelObject\n\nexport class CreateTagsDto implements ITag {\n    @IsString()\n    @IsNotEmpty()\n    @MinLength(2)\n    @MaxLength(36)\n    name!: string\n}\n\nexport class UpdateTagsDto extends PartialType(CreateTagsDto) {}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IUser.html":{"url":"interfaces/IUser.html","title":"interface - IUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/user.model.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        email\n                                \n                                \n                                            Optional\n                                        firstName\n                                \n                                \n                                        isActive\n                                \n                                \n                                            Optional\n                                        lastName\n                                \n                                \n                                        password\n                                \n                                \n                                        username\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        firstName\n                                    \n                                \n                                \n                                    \n                                        firstName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        isActive\n                                    \n                                \n                                \n                                    \n                                        isActive:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        lastName\n                                    \n                                \n                                \n                                    \n                                        lastName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        password\n                                    \n                                \n                                \n                                    \n                                        password:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        username\n                                    \n                                \n                                \n                                    \n                                        username:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger'\n\nimport * as bcrypt from 'bcrypt'\nimport {\n    IsString,\n    MinLength,\n    IsNotEmpty,\n    MaxLength,\n    IsEmail,\n    IsBoolean,\n} from 'class-validator'\nimport type { JSONSchema, Modifiers, PartialModelObject } from 'objection'\nimport { ModelObject, QueryContext } from 'objection'\n\nimport { BaseModel } from '../database/models/base.model'\n\ninterface IUser {\n    username: string\n    email: string\n    firstName?: string\n    lastName?: string\n    isActive: boolean\n    password: string\n}\n\nexport class User extends BaseModel implements IUser {\n    static tableName = 'users'\n\n    username!: string\n\n    email!: string\n\n    firstName?: string\n\n    lastName?: string\n\n    isActive!: boolean\n\n    password!: string\n\n    // JSON schema is not the database schema! Nothing is generated based on this.\n    // This is only used for validation. Whenever a model instance is created it is checked against this schema.\n    static jsonSchema: JSONSchema = {\n        type: 'object',\n        required: ['username', 'email', 'password'],\n        properties: {\n            id: { type: 'integer', readOnly: true },\n            username: { type: 'string', minLength: 3, maxLength: 255 },\n            email: {\n                type: 'string',\n                minLength: 3,\n                maxLength: 255,\n                format: 'email',\n            },\n            password: { type: 'string', minLength: 8, maxLength: 255 },\n            firstName: { type: 'string', minLength: 1, maxLength: 255 },\n            lastName: { type: 'string', minLength: 1, maxLength: 255 },\n            isActive: { type: 'boolean' },\n        },\n    }\n\n    // Modifiers are reusable query snippets that can be used in various places.\n    static modifiers: Modifiers = {\n        // Our example modifier is a a semi-dumb fuzzy name match. We split the name into pieces using whitespace\n        // and then try to partially match each of those pieces to both the `firstName` and the `lastName` fields.\n\n        searchByName(query, name: string) {\n            // This `where` simply creates parentheses so that other `where` statements don't get mixed with the these.\n\n            query.where((q) => {\n                for (const namePart of name.trim().split(/\\s+/)) {\n                    for (const column of ['firstName', 'lastName']) {\n                        q.orWhereRaw('lower(??) like ?', [\n                            column,\n                            `${namePart.toLowerCase()}%`,\n                        ])\n                    }\n                }\n            })\n        },\n    }\n\n    async hashPassword(password: string) {\n        const hash = await bcrypt.hash(password, 12)\n        return hash\n    }\n\n    async $beforeInsert(queryContext: QueryContext) {\n        await super.$beforeInsert(queryContext)\n        this.password = await this.hashPassword(this.password)\n    }\n\n    /*\n    async $beforeUpdate(opt: ModelOptions, queryContext: QueryContext) {\n        await super.$beforeUpdate(opt, queryContext)\n        this.password = await this.hashPassword(this.password)\n    }\n    */\n}\n\n// The `ModelObject` generic gives you a clean interface that can be used on the frontend, without any of the objection Model class properties or methods.\nexport type UserShape = ModelObject\nexport type PartialUserShape = PartialModelObject\n\nexport class CreateUserDto implements IUser {\n    @IsString()\n    @IsNotEmpty()\n    @MinLength(2)\n    @MaxLength(36)\n    username!: string\n\n    @IsEmail()\n    @IsNotEmpty()\n    @MinLength(2)\n    email!: string\n\n    @IsString()\n    @IsNotEmpty()\n    @MinLength(8)\n    password!: string\n\n    @IsString()\n    @IsNotEmpty()\n    @MinLength(2)\n    firstName?: string\n\n    @IsString()\n    @IsNotEmpty()\n    @MinLength(2)\n    lastName?: string\n\n    @IsBoolean()\n    isActive!: boolean\n}\n\nexport class UpdateUserDto extends PartialType(CreateUserDto) {}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt.strategy.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, userService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/jwt.strategy.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: TokenPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/jwt.strategy.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                TokenPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common'\nimport { ConfigService } from '@nestjs/config'\nimport { PassportStrategy } from '@nestjs/passport'\n\nimport { ExtractJwt, Strategy } from 'passport-jwt'\n\nimport { UsersService } from '../users/users.service'\nimport TokenPayload from './tokenPayload.interface'\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n    constructor(\n        readonly configService: ConfigService,\n        readonly userService: UsersService,\n    ) {\n        super({\n            ignoreExpiration: true,\n            secretOrKey: configService.get('JWTKEY'),\n            jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n        })\n    }\n\n    async validate(payload: TokenPayload) {\n        if (!payload.email) return Promise.reject(new UnauthorizedException())\n\n        const user = await this.userService.findOneByEmail(payload.email)\n\n        if (!user)\n            return Promise.reject(\n                new UnauthorizedException(\n                    'You are not authorized to perform the operation',\n                ),\n            )\n\n        return payload\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalStrategy.html":{"url":"injectables/LocalStrategy.html","title":"injectable - LocalStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  LocalStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/local.strategy.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                passwordField\n                            \n                            \n                                    Static\n                                usernameField\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/local.strategy.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(email: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/local.strategy.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            passwordField\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'password'\n                        \n                    \n                        \n                            \n                                    Defined in src/auth/local.strategy.ts:12\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            usernameField\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'email'\n                        \n                    \n                        \n                            \n                                    Defined in src/auth/local.strategy.ts:10\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common'\nimport { PassportStrategy } from '@nestjs/passport'\n\nimport { Strategy } from 'passport-local'\n\nimport { AuthService } from './auth.service'\n\n@Injectable()\nexport class LocalStrategy extends PassportStrategy(Strategy) {\n    static usernameField = 'email'\n\n    static passwordField = 'password'\n\n    constructor(readonly authService: AuthService) {\n        super({\n            usernameField: LocalStrategy.usernameField,\n            passwordField: LocalStrategy.passwordField,\n            session: false,\n        })\n    }\n\n    async validate(email: string, password: string) {\n        if (!email || !password)\n            return Promise.reject(\n                new UnauthorizedException('Credentials cannot be empty'),\n            )\n\n        return this.authService.validateUser(email, password)\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginCredsDto.html":{"url":"classes/LoginCredsDto.html","title":"class - LoginCredsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginCredsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                email\n                            \n                            \n                                    Readonly\n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            email\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'admin@demo.com'})@IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auth/auth.controller.ts:14\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: '12345678'})@IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auth/auth.controller.ts:18\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Body, Controller, HttpStatus, Post, Req, UseGuards } from '@nestjs/common'\nimport { AuthGuard } from '@nestjs/passport'\nimport { ApiProperty, ApiTags } from '@nestjs/swagger'\n\nimport { IsNotEmpty } from 'class-validator'\nimport type { Request } from 'express'\n\nimport { UsersService } from '../users/users.service'\nimport { AuthService } from './auth.service'\n\nexport class LoginCredsDto {\n    @ApiProperty({ example: 'admin@demo.com' })\n    @IsNotEmpty()\n    readonly email!: string\n\n    @ApiProperty({ example: '12345678' })\n    @IsNotEmpty()\n    readonly password!: string\n}\n\n@Controller(AuthController.path)\n@ApiTags(AuthController.name)\nexport class AuthController {\n    static path = 'auth'\n\n    constructor(\n        readonly authService: AuthService,\n        readonly userService: UsersService,\n    ) {}\n\n    @UseGuards(AuthGuard('local'))\n    @Post('login')\n    async login(\n        @Req() req: Request,\n        @Body() loginCreds: LoginCredsDto,\n    ): Promise {\n        const { user } = req\n        const { email, password } = loginCreds\n\n        const data = await this.authService.login(user)\n\n        return {\n            data,\n            statusCode: HttpStatus.OK,\n        }\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PaginationParams.html":{"url":"classes/PaginationParams.html","title":"class - PaginationParams","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PaginationParams\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/base/crud/pagination.ts\n        \n\n            \n                Description\n            \n            \n                Describes generic pagination params\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Abstract\n                                    Readonly\n                                    Optional\n                                order\n                            \n                            \n                                    Readonly\n                                    Optional\n                                page\n                            \n                            \n                                    Readonly\n                                    Optional\n                                pageSize\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Abstract\n                                Readonly\n                                Optional\n                            order\n                            \n                        \n                    \n                \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiPropertyOptional()@IsOptional()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/base/crud/pagination.ts:41\n                            \n                        \n\n                \n                    \n                        order\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                                Optional\n                            page\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiPropertyOptional({type: Number, minimum: 0})@IsOptional()@Min(0)@Transform(undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/base/crud/pagination.ts:25\n                            \n                        \n\n                \n                    \n                        page\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                                Optional\n                            pageSize\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiPropertyOptional({type: Number, minimum: 0})@IsOptional()@Min(0)@Transform(undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/base/crud/pagination.ts:34\n                            \n                        \n\n                \n                    \n                        page size\n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { HttpStatus } from '@nestjs/common'\nimport { ApiPropertyOptional } from '@nestjs/swagger'\n\nimport { Transform } from 'class-transformer'\nimport { IsOptional, Min } from 'class-validator'\n\nimport { APIError } from '../../domain'\n\nexport enum OrderType {\n    DESC = 'DESC',\n    ASC = 'ASC',\n}\n\n/**\n * Describes generic pagination params\n */\nexport abstract class PaginationParams {\n    /**\n     * page\n     */\n    @ApiPropertyOptional({ type: Number, minimum: 0 })\n    @IsOptional()\n    @Min(0)\n    @Transform((val: string) => parseInt(val, 10))\n    readonly page?: number // = 0\n\n    /**\n     * page size\n     */\n    @ApiPropertyOptional({ type: Number, minimum: 0 })\n    @IsOptional()\n    @Min(0)\n    @Transform((val: string) => parseInt(val, 10))\n    readonly pageSize?: number // = 10\n\n    /**\n     * order\n     */\n    @ApiPropertyOptional()\n    @IsOptional()\n    abstract readonly order?: { [P in keyof T]?: OrderType }\n}\n\n/**\n * Generic pagination response interface\n */\nexport interface IPaginationResult {\n    /**\n     * Items included in the current listing\n     */\n    readonly data: T[]\n\n    /**\n     * Paging metadata\n     */\n    readonly paging: {\n        pageSize: number\n        page: number\n        total: number\n        totalPages: number\n    }\n\n    /**\n     * Error if any\n     */ error?: APIError\n\n    /**\n     * Message if anu\n     */\n    message?: string | string[]\n\n    /**\n     * Http status code\n     */\n    statusCode: HttpStatus\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ParamOption.html":{"url":"interfaces/ParamOption.html","title":"interface - ParamOption","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ParamOption\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/base/swagger-gen/utils/other.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        disabled\n                                \n                                \n                                            Optional\n                                        enum\n                                \n                                \n                                            Optional\n                                        field\n                                \n                                \n                                            Optional\n                                        primary\n                                \n                                \n                                            Optional\n                                        type\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        disabled\n                                    \n                                \n                                \n                                    \n                                        disabled:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        enum\n                                    \n                                \n                                \n                                    \n                                        enum:         SwaggerEnumType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         SwaggerEnumType\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        field\n                                    \n                                \n                                \n                                    \n                                        field:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        primary\n                                    \n                                \n                                \n                                    \n                                        primary:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                    \n                                \n                                \n                                    \n                                        type:     \"number\" | \"string\" | \"uuid\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"number\" | \"string\" | \"uuid\"\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { RequestMethod, ValidationPipeOptions } from '@nestjs/common'\nimport { SwaggerEnumType } from '@nestjs/swagger/dist/types/swagger-enum.type'\n\nexport declare type BaseRouteName =\n    | 'getManyBase'\n    | 'getOneBase'\n    | 'createOneBase'\n    | 'createManyBase'\n    | 'updateOneBase'\n    | 'replaceOneBase'\n    | 'deleteOneBase'\n    | 'getOne'\n\nexport interface BaseRoute {\n    name: BaseRouteName\n    path: string\n    method: RequestMethod\n    enable: boolean\n    override: boolean\n    withParams: boolean\n}\n\nexport interface GetManyDefaultResponse {\n    data: T[]\n    count: number\n    total: number\n    page: number\n    pageCount: number\n}\n\nexport interface ParamOption {\n    field?: string\n    type?: 'number' | 'string' | 'uuid'\n    enum?: SwaggerEnumType\n    primary?: boolean\n    disabled?: boolean\n}\n\nexport interface ParamsOptions {\n    [key: string]: ParamOption\n}\n\nexport interface CrudOptions {\n    model: {\n        type: { name: string }\n    }\n    dto?: {}\n    routes?: {\n        deleteOneBase?: { returnDeleted?: boolean }\n    }\n    validation?: ValidationPipeOptions | false\n    params?: ParamsOptions\n    query?: {\n        limit?: number\n        maxLimit?: number\n        cache?: number | false\n        alwaysPaginate?: boolean\n    }\n    serialize?: {\n        getMany?: false | object\n        get?: false | object\n        create?: false | object\n        createMany?: false | object\n        update?: false | object\n        replace?: false | object\n        delete?: false | object\n    }\n}\n\nexport function safeRequire(path: string): T | null {\n    try {\n        // eslint-disable-next-line global-require,@typescript-eslint/no-var-requires,import/no-dynamic-require\n        const pack = require(path)\n        return pack\n    } catch (_) {\n        return null\n    }\n}\n\nexport const swagger = safeRequire('@nestjs/swagger')\nexport const swaggerConst = safeRequire('@nestjs/swagger/dist/constants')\n\nexport function ApiProperty(options?: any): PropertyDecorator {\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    return (target: object, propertyKey: string | symbol) => {\n        if (swagger) {\n            const ApiPropertyDecorator =\n                swagger.ApiProperty || swagger.ApiModelProperty\n            ApiPropertyDecorator(options)(target, propertyKey)\n        }\n    }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ParamsOptions.html":{"url":"interfaces/ParamsOptions.html","title":"interface - ParamsOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ParamsOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/base/swagger-gen/utils/other.ts\n        \n\n\n\n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:        ParamOption\n\n                    \n                \n                        \n                            \n                                Defined in src/base/swagger-gen/utils/other.ts:40\n                            \n                        \n            \n        \n\n\n    \n\n\n    \n        import { RequestMethod, ValidationPipeOptions } from '@nestjs/common'\nimport { SwaggerEnumType } from '@nestjs/swagger/dist/types/swagger-enum.type'\n\nexport declare type BaseRouteName =\n    | 'getManyBase'\n    | 'getOneBase'\n    | 'createOneBase'\n    | 'createManyBase'\n    | 'updateOneBase'\n    | 'replaceOneBase'\n    | 'deleteOneBase'\n    | 'getOne'\n\nexport interface BaseRoute {\n    name: BaseRouteName\n    path: string\n    method: RequestMethod\n    enable: boolean\n    override: boolean\n    withParams: boolean\n}\n\nexport interface GetManyDefaultResponse {\n    data: T[]\n    count: number\n    total: number\n    page: number\n    pageCount: number\n}\n\nexport interface ParamOption {\n    field?: string\n    type?: 'number' | 'string' | 'uuid'\n    enum?: SwaggerEnumType\n    primary?: boolean\n    disabled?: boolean\n}\n\nexport interface ParamsOptions {\n    [key: string]: ParamOption\n}\n\nexport interface CrudOptions {\n    model: {\n        type: { name: string }\n    }\n    dto?: {}\n    routes?: {\n        deleteOneBase?: { returnDeleted?: boolean }\n    }\n    validation?: ValidationPipeOptions | false\n    params?: ParamsOptions\n    query?: {\n        limit?: number\n        maxLimit?: number\n        cache?: number | false\n        alwaysPaginate?: boolean\n    }\n    serialize?: {\n        getMany?: false | object\n        get?: false | object\n        create?: false | object\n        createMany?: false | object\n        update?: false | object\n        replace?: false | object\n        delete?: false | object\n    }\n}\n\nexport function safeRequire(path: string): T | null {\n    try {\n        // eslint-disable-next-line global-require,@typescript-eslint/no-var-requires,import/no-dynamic-require\n        const pack = require(path)\n        return pack\n    } catch (_) {\n        return null\n    }\n}\n\nexport const swagger = safeRequire('@nestjs/swagger')\nexport const swaggerConst = safeRequire('@nestjs/swagger/dist/constants')\n\nexport function ApiProperty(options?: any): PropertyDecorator {\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    return (target: object, propertyKey: string | symbol) => {\n        if (swagger) {\n            const ApiPropertyDecorator =\n                swagger.ApiProperty || swagger.ApiModelProperty\n            ApiPropertyDecorator(options)(target, propertyKey)\n        }\n    }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PersistedCronService.html":{"url":"injectables/PersistedCronService.html","title":"injectable - PersistedCronService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  PersistedCronService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/cron/persisted-cron.service.ts\n        \n\n            \n                Description\n            \n            \n                Each time the server restarts, this service finds the jobs from the table and restored them\nTODO: make a service to gracefully stop cron jobs on ApplicationShutdown\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                onApplicationBootstrap\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(schedule: SchedulerRegistry)\n                    \n                \n                        \n                            \n                                Defined in src/cron/persisted-cron.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        schedule\n                                                  \n                                                        \n                                                                        SchedulerRegistry\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            onApplicationBootstrap\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    onApplicationBootstrap()\n                \n            \n\n\n            \n                \n                    Defined in src/cron/persisted-cron.service.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     {}\n\n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            logger\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Logger(PersistedCronService.name)\n                        \n                    \n                        \n                            \n                                    Defined in src/cron/persisted-cron.service.ts:11\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable, Logger, OnApplicationBootstrap } from '@nestjs/common'\nimport { SchedulerRegistry } from '@nestjs/schedule'\n\n/**\n * Each time the server restarts, this service finds the jobs from the table and restored them\n *\n * TODO: make a service to gracefully stop cron jobs on ApplicationShutdown\n */\n@Injectable()\nexport class PersistedCronService implements OnApplicationBootstrap {\n    logger = new Logger(PersistedCronService.name)\n\n    constructor(readonly schedule: SchedulerRegistry) {}\n\n    // NestJs hook invoked when the app bootstrapped\n    async onApplicationBootstrap() {\n        // TODO: Implement commented out flow\n\n        /*\n        const jobs = await Job.find() // the jobs are all saved in `Job` table.\n\n        jobs.forEach((job) => {\n            const cron = new CronJob(job.time, () => {}) // You can define the handler for each job type\n            this.schedule.addCronJob(job.name, cron)\n            cron.start()\n        })\n        */\n\n        return Promise.resolve()\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PostType.html":{"url":"interfaces/PostType.html","title":"interface - PostType","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  PostType\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/domain.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        postType\n                                \n                                \n                                        postTypeId\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        postType\n                                    \n                                \n                                \n                                    \n                                        postType:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        postTypeId\n                                    \n                                \n                                \n                                    \n                                        postTypeId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { HttpStatus } from '@nestjs/common'\n\nexport type Results =\n    | GetAppLaunchData\n    | GetUserProfile\n    | GetUserPosts\n    | GetComments\n    | GetRescueList\n    | GetFollowers\n    | GetFollowing\n\nexport type APIError = Error | string | null\n\nexport interface Result {\n    data: T\n    error?: APIError\n    message?: string | string[]\n    statusCode: HttpStatus\n}\n\nexport interface APIResponse {\n    data: T\n    error?: APIError\n    message?: string | string[]\n    statusCode: HttpStatus\n\n    count?: number\n    page?: number\n    pageCount?: number\n    total?: number\n}\n\nexport interface GetAppLaunchData {\n    link: 'api:/'\n    response: APIResponse\n}\n\nexport interface GetUserProfile {\n    link: 'api:v1/user/getUserProfile?userId=25'\n    response: APIResponse\n}\n\nexport interface GetUserPosts {\n    link: 'api:v1/user/getUserPosts?pageNo=0&pageSize=25'\n    response: APIResponse\n}\n\nexport interface GetRescueList {\n    link: 'api:v1/rescue/getRescueList?pageNo=0&pageSize=10&status=pending|inProgress|completed|nearest'\n    response: APIResponse\n}\n\nexport interface GetComments {\n    link: 'api:v1/rescue/getComments?pageNo=0&pageSize=10&postId=1230'\n    response: APIResponse\n}\n\nexport interface GetFollowers {\n    link: 'api:v1/rescue/getUserFollowers?userId=1230'\n    response: APIResponse\n}\n\nexport interface GetFollowing {\n    link: 'api:v1/rescue/getUserFollowing?userId=1230'\n    response: APIResponse\n}\n\nexport interface AppLaunchAction {\n    actionId: number\n    action: string\n    isActive: boolean\n    subject?: string\n}\n\nexport interface User {\n    usesId: number\n\n    coverImage: string\n    following: boolean\n    gender: string\n    isOwnProfile: number\n    isRescuer: boolean\n    latitude: number\n    longitude: number\n    numberOfFollowers: number\n    numberOfFollowing: number\n    numberOfPosts: number\n    numberOfRescuesCompleted: number\n    numberOfRescuesCreated: number\n    numberOfRescuesInProgress: number\n    profileImage: string\n    rescuer: boolean\n    userAddress: string\n    userContacts: string\n    userEmail: string\n    userName: string\n    badge: {\n        badgeId: number\n        badgeName: string\n        badgeDescription: string\n        recuesCompletionNeeded: number\n    }\n    setting: {\n        showMyContacts: boolean\n        getNotifications: boolean\n    }\n}\n\nexport interface PostType {\n    postTypeId: number\n    postType: string\n}\n\nexport interface PostedByUser {\n    usesId: number\n    badgeName: string\n    following: boolean\n    profileImage: string\n    rescuer: boolean\n    userName: string\n}\n\nexport interface UserPost {\n    postId: number\n    commentsCount: number\n    isUserReactedToPost: boolean\n    ownPage: boolean\n    postBy: PostedByUser\n    postImage: string\n    postTime: string\n    postType: PostType\n    postVideo: string\n    reactionsCount: number\n    timeAgo: string\n\n    adCorporateLogoUrl: string | null\n    corporateDescription: string | null\n    corporateName: string | null\n}\n\nexport interface UserPosts {\n    isRecent: boolean\n    feed: UserPost[]\n}\n\nexport interface Rescues {\n    rescueId: number\n    animalImageUrl: string\n    distance: number\n    distanceAway: string\n    emergencyType: string\n    postedBy: string\n    postedMinAgo: string\n    rescueDate: Date\n    rescuedPetName: string\n    rescueLocality: string\n    rescuers: {\n        contact: number\n        name: string\n        profileId: number\n        profileImageUrl: string\n        rescues: boolean\n        showMyNumber: boolean\n    }\n    rescueStatus: string\n    viewsCont: number\n}\n\nexport interface RescueLists {\n    rescues: Rescues[]\n}\n\nexport interface Comment {\n    commentId: number\n    comment: string\n    commentedUseName: string\n    commentedUserId: number\n    timeAgo: string\n}\n\nexport interface Comments {\n    comments: Comment[]\n}\n\nexport interface Follower {\n    userId: number\n    userName: string\n    profileImage: string\n    areYouFollowing: boolean\n    showRemoveOption: boolean\n}\n\nexport type Following = Follower\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PostedByUser.html":{"url":"interfaces/PostedByUser.html","title":"interface - PostedByUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  PostedByUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/domain.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        badgeName\n                                \n                                \n                                        following\n                                \n                                \n                                        profileImage\n                                \n                                \n                                        rescuer\n                                \n                                \n                                        userName\n                                \n                                \n                                        usesId\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        badgeName\n                                    \n                                \n                                \n                                    \n                                        badgeName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        following\n                                    \n                                \n                                \n                                    \n                                        following:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        profileImage\n                                    \n                                \n                                \n                                    \n                                        profileImage:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        rescuer\n                                    \n                                \n                                \n                                    \n                                        rescuer:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        userName\n                                    \n                                \n                                \n                                    \n                                        userName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        usesId\n                                    \n                                \n                                \n                                    \n                                        usesId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { HttpStatus } from '@nestjs/common'\n\nexport type Results =\n    | GetAppLaunchData\n    | GetUserProfile\n    | GetUserPosts\n    | GetComments\n    | GetRescueList\n    | GetFollowers\n    | GetFollowing\n\nexport type APIError = Error | string | null\n\nexport interface Result {\n    data: T\n    error?: APIError\n    message?: string | string[]\n    statusCode: HttpStatus\n}\n\nexport interface APIResponse {\n    data: T\n    error?: APIError\n    message?: string | string[]\n    statusCode: HttpStatus\n\n    count?: number\n    page?: number\n    pageCount?: number\n    total?: number\n}\n\nexport interface GetAppLaunchData {\n    link: 'api:/'\n    response: APIResponse\n}\n\nexport interface GetUserProfile {\n    link: 'api:v1/user/getUserProfile?userId=25'\n    response: APIResponse\n}\n\nexport interface GetUserPosts {\n    link: 'api:v1/user/getUserPosts?pageNo=0&pageSize=25'\n    response: APIResponse\n}\n\nexport interface GetRescueList {\n    link: 'api:v1/rescue/getRescueList?pageNo=0&pageSize=10&status=pending|inProgress|completed|nearest'\n    response: APIResponse\n}\n\nexport interface GetComments {\n    link: 'api:v1/rescue/getComments?pageNo=0&pageSize=10&postId=1230'\n    response: APIResponse\n}\n\nexport interface GetFollowers {\n    link: 'api:v1/rescue/getUserFollowers?userId=1230'\n    response: APIResponse\n}\n\nexport interface GetFollowing {\n    link: 'api:v1/rescue/getUserFollowing?userId=1230'\n    response: APIResponse\n}\n\nexport interface AppLaunchAction {\n    actionId: number\n    action: string\n    isActive: boolean\n    subject?: string\n}\n\nexport interface User {\n    usesId: number\n\n    coverImage: string\n    following: boolean\n    gender: string\n    isOwnProfile: number\n    isRescuer: boolean\n    latitude: number\n    longitude: number\n    numberOfFollowers: number\n    numberOfFollowing: number\n    numberOfPosts: number\n    numberOfRescuesCompleted: number\n    numberOfRescuesCreated: number\n    numberOfRescuesInProgress: number\n    profileImage: string\n    rescuer: boolean\n    userAddress: string\n    userContacts: string\n    userEmail: string\n    userName: string\n    badge: {\n        badgeId: number\n        badgeName: string\n        badgeDescription: string\n        recuesCompletionNeeded: number\n    }\n    setting: {\n        showMyContacts: boolean\n        getNotifications: boolean\n    }\n}\n\nexport interface PostType {\n    postTypeId: number\n    postType: string\n}\n\nexport interface PostedByUser {\n    usesId: number\n    badgeName: string\n    following: boolean\n    profileImage: string\n    rescuer: boolean\n    userName: string\n}\n\nexport interface UserPost {\n    postId: number\n    commentsCount: number\n    isUserReactedToPost: boolean\n    ownPage: boolean\n    postBy: PostedByUser\n    postImage: string\n    postTime: string\n    postType: PostType\n    postVideo: string\n    reactionsCount: number\n    timeAgo: string\n\n    adCorporateLogoUrl: string | null\n    corporateDescription: string | null\n    corporateName: string | null\n}\n\nexport interface UserPosts {\n    isRecent: boolean\n    feed: UserPost[]\n}\n\nexport interface Rescues {\n    rescueId: number\n    animalImageUrl: string\n    distance: number\n    distanceAway: string\n    emergencyType: string\n    postedBy: string\n    postedMinAgo: string\n    rescueDate: Date\n    rescuedPetName: string\n    rescueLocality: string\n    rescuers: {\n        contact: number\n        name: string\n        profileId: number\n        profileImageUrl: string\n        rescues: boolean\n        showMyNumber: boolean\n    }\n    rescueStatus: string\n    viewsCont: number\n}\n\nexport interface RescueLists {\n    rescues: Rescues[]\n}\n\nexport interface Comment {\n    commentId: number\n    comment: string\n    commentedUseName: string\n    commentedUserId: number\n    timeAgo: string\n}\n\nexport interface Comments {\n    comments: Comment[]\n}\n\nexport interface Follower {\n    userId: number\n    userName: string\n    profileImage: string\n    areYouFollowing: boolean\n    showRemoveOption: boolean\n}\n\nexport type Following = Follower\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/QueryFailedFilter.html":{"url":"classes/QueryFailedFilter.html","title":"class - QueryFailedFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  QueryFailedFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infra/filters/query-failed.filter.ts\n        \n\n            \n                Description\n            \n            \n                Query Failed Exception Filter\n\n            \n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            catch\n                        \n                        \n                    \n                \n            \n            \n                \ncatch(exception: CheckViolationError | ConstraintViolationError | DataError | ForeignKeyViolationError | NotNullViolationError | UniqueViolationError | NotFoundError, host: ArgumentsHost)\n                \n            \n\n\n            \n                \n                    Defined in src/infra/filters/query-failed.filter.ts:33\n                \n            \n\n\n            \n                \n                    Method to implement a custom exception filter.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                            CheckViolationError | ConstraintViolationError | DataError | ForeignKeyViolationError | NotNullViolationError | UniqueViolationError | NotFoundError\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the class of the exception being handled\n\n                                    \n                                \n                                \n                                    host\n                                    \n                                            ArgumentsHost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        used to access an array of arguments for\nthe in-flight request\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ArgumentsHost, Catch, ExceptionFilter, HttpStatus } from '@nestjs/common'\n\nimport { NotFoundError } from 'objection'\nimport {\n    UniqueViolationError,\n    NotNullViolationError,\n    ForeignKeyViolationError,\n    ConstraintViolationError,\n    CheckViolationError,\n    DataError,\n} from 'objection-db-errors'\n\n/**\n * Query Failed Exception Filter\n */\n@Catch(\n    CheckViolationError,\n    ConstraintViolationError,\n    DataError,\n    ForeignKeyViolationError,\n    NotNullViolationError,\n    UniqueViolationError,\n    NotFoundError,\n)\nexport class QueryFailedFilter implements ExceptionFilter {\n    /**\n     * Method to implement a custom exception filter.\n     *\n     * @param exception the class of the exception being handled\n     * @param host used to access an array of arguments for\n     * the in-flight request\n     */\n    catch(\n        exception:\n            | CheckViolationError\n            | ConstraintViolationError\n            | DataError\n            | ForeignKeyViolationError\n            | NotNullViolationError\n            | UniqueViolationError\n            | NotFoundError,\n        host: ArgumentsHost,\n    ) {\n        const ctx = host.switchToHttp()\n        const response = ctx.getResponse()\n        const request = ctx.getRequest()\n        const status = HttpStatus.PRECONDITION_FAILED\n\n        const {\n            name, // @ts-ignore\n            data, // @ts-ignore\n            type, // @ts-ignore\n            table, // @ts-ignore\n            column, // @ts-ignore\n            schema, // @ts-ignore\n            message, // @ts-ignore\n            columns, // @ts-ignore\n            database, // @ts-ignore\n            constraint, // @ts-ignore\n            nativeError, // @ts-ignore\n        } = exception\n\n        // @ts-ignore\n        response.status(status).json({\n            statusCode: status,\n            message,\n\n            name,\n            table,\n            schema,\n            database,\n            constraint,\n            nativeError,\n            columns: column ? [column] : columns,\n\n            data,\n            type,\n\n            path: request.url,\n            timestamp: new Date().toISOString(),\n        })\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/R.html":{"url":"classes/R.html","title":"class - R","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  R\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/base/swagger-gen/crud-routes.factory.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                get\n                            \n                            \n                                    Static\n                                set\n                            \n                            \n                                    Static\n                                setRoute\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            get\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    get(metadataKey: any, target: Object, propertyKey?: string | symbol)\n                \n            \n\n\n            \n                \n                    Defined in src/base/swagger-gen/crud-routes.factory.ts:33\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    metadataKey\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    target\n                                    \n                                                Object\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    propertyKey\n                                    \n                                            string | symbol\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            set\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    set(metadataKey: string, metadataValue: any, target: Object, propertyKey?: string | symbol)\n                \n            \n\n\n            \n                \n                    Defined in src/base/swagger-gen/crud-routes.factory.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    metadataKey\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    metadataValue\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    target\n                                    \n                                                Object\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    propertyKey\n                                    \n                                            string | symbol\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            setRoute\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setRoute(route: BaseRoute, func: Function)\n                \n            \n\n\n            \n                \n                    Defined in src/base/swagger-gen/crud-routes.factory.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    route\n                                    \n                                                BaseRoute\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    func\n                                    \n                                                Function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { HttpStatus, RequestMethod } from '@nestjs/common'\n\nimport { Type } from 'class-transformer'\nimport * as deepmerge from 'deepmerge'\n\nimport {\n    ApiProperty,\n    BaseRoute,\n    isFalse,\n    isFunction,\n    isObjectFull,\n    objKeys,\n    swagger,\n    swaggerConst,\n} from './utils'\nimport type { CrudOptions, GetManyDefaultResponse, BaseRouteName } from './utils'\n\nexport class R {\n    static set(\n        metadataKey: string,\n        metadataValue: any,\n        target: Object,\n        propertyKey?: string | symbol,\n    ) {\n        if (!propertyKey) {\n            Reflect.defineMetadata(metadataKey, metadataValue, target)\n        } else {\n            Reflect.defineMetadata(metadataKey, metadataValue, target, propertyKey)\n        }\n    }\n\n    static get(\n        metadataKey: any,\n        target: Object,\n        propertyKey?: string | symbol,\n    ): T {\n        if (!propertyKey) return Reflect.getMetadata(metadataKey, target)\n\n        return Reflect.getMetadata(metadataKey, target, propertyKey)\n    }\n\n    static setRoute(route: BaseRoute, func: Function) {\n        R.set('path', route.path, func)\n        R.set('method', route.method, func)\n    }\n}\n\nexport class Swagger {\n    /**\n     * Sets extra swagger metadata for GET Calls\n     */\n    static setExtraModels(swaggerModels: {\n        [x: string]: any\n        get: Record\n    }) {\n        if (swaggerConst) {\n            const meta = Swagger.getExtraModels(swaggerModels.get)\n            const models = [\n                ...meta,\n                ...objKeys(swaggerModels)\n                    .map((name) => swaggerModels[name])\n                    .filter((one) => one && one.name !== swaggerModels.get.name),\n            ]\n\n            R.set(\n                swaggerConst.DECORATORS.API_EXTRA_MODELS,\n                models,\n                swaggerModels.get,\n            )\n        }\n    }\n\n    /**\n     * Sets swagger metadata for response of GET Calls\n     */\n    static setResponseOk(metadata: any[], func: Function) {\n        if (swaggerConst) {\n            R.set(swaggerConst.DECORATORS.API_RESPONSE, metadata, func)\n        }\n    }\n\n    static getExtraModels(target: Record): any[] {\n        return swaggerConst\n            ? R.get(swaggerConst.API_EXTRA_MODELS, target) || []\n            : []\n    }\n\n    static getResponseOk(func: Function) {\n        return swaggerConst\n            ? R.get(swaggerConst.DECORATORS.API_RESPONSE, func) || {}\n            : {}\n    }\n\n    static createResponseMeta(\n        name: BaseRouteName,\n        options: CrudOptions,\n        swaggerModels: {\n            [x: string]: any\n            get: { name: any }\n            getMany: { name: any }\n        },\n    ) {\n        if (swagger) {\n            const { query } = options\n\n            switch (name) {\n                case 'getOneBase':\n                    return {\n                        [HttpStatus.OK]: {\n                            description: 'Get one base response',\n                            type: swaggerModels.get,\n                        },\n                    }\n                case 'getOne':\n                    return {\n                        [HttpStatus.OK]: query?.alwaysPaginate\n                            ? {\n                                  description: 'Get paginated response',\n                                  type: swaggerModels.getMany,\n                              }\n                            : {\n                                  description: 'Get many base response',\n                                  schema: {\n                                      oneOf: [\n                                          {\n                                              $ref: swagger.getSchemaPath(\n                                                  swaggerModels.getMany.name,\n                                              ),\n                                          },\n                                          {\n                                              type: 'array',\n                                              items: {\n                                                  $ref: swagger.getSchemaPath(\n                                                      swaggerModels.get.name,\n                                                  ),\n                                              },\n                                          },\n                                      ],\n                                  },\n                              },\n                    }\n                default:\n                    // eslint-disable-next-line no-case-declarations\n                    const dto = swaggerModels[name.split('OneBase')[0]]\n\n                    return {\n                        [HttpStatus.OK]: {\n                            description: 'Response',\n                            schema: { $ref: swagger.getSchemaPath(dto.name) },\n                        },\n                    }\n            }\n        } else {\n            return {}\n        }\n    }\n}\n\nexport class SerializeHelper {\n    static createGetManyDto(dto: any, resourceName: string): any {\n        class GetManyResponseDto implements GetManyDefaultResponse {\n            @ApiProperty({ type: dto, isArray: true })\n            @Type(() => dto)\n            data!: any[]\n\n            @ApiProperty({ type: 'number' })\n            count!: number\n\n            @ApiProperty({ type: 'number' })\n            total!: number\n\n            @ApiProperty({ type: 'number' })\n            page!: number\n\n            @ApiProperty({ type: 'number' })\n            pageCount!: number\n        }\n\n        Object.defineProperty(GetManyResponseDto, 'name', {\n            writable: false,\n            value: `GetMany${resourceName}ResponseDto`,\n        })\n\n        return GetManyResponseDto\n    }\n\n    static createGetOneResponseDto(resourceName: string): any {\n        class GetOneResponseDto {}\n\n        Object.defineProperty(GetOneResponseDto, 'name', {\n            writable: false,\n            value: `${resourceName}ResponseDto`,\n        })\n\n        return GetOneResponseDto\n    }\n}\n\nexport class CrudConfigService {\n    static config: Partial = {\n        query: {\n            alwaysPaginate: false,\n        },\n    }\n\n    static load(config: Record) {\n        const query = isObjectFull(config.query) ? config.query : {}\n        const params = isObjectFull(config.params) ? config.params : {}\n        const serialize = isObjectFull(config.serialize) ? config.serialize : {}\n\n        CrudConfigService.config = deepmerge(\n            CrudConfigService.config,\n            { query, params, serialize },\n            { arrayMerge: (a, b, c) => b },\n        )\n    }\n}\n\nexport class CrudRoutesFactory {\n    protected options\n\n    protected swaggerModels: any = {}\n\n    constructor(private target: Object, options: CrudOptions) {\n        this.options = options\n        this.create()\n\n        console.log(\n            'CrudRoutesFactory::constructor',\n            // { ...options },\n            // this.targetProto,\n            // this.modelType,\n            // this.modelName,\n            // this.swaggerModels,\n        )\n    }\n\n    static create(target: Object, options: CrudOptions): CrudRoutesFactory {\n        return new CrudRoutesFactory(target, options)\n    }\n\n    get targetProto() {\n        // @ts-ignore\n        return this.target.prototype\n    }\n\n    get modelName() {\n        return this.options.model.type?.name\n    }\n\n    get modelType() {\n        return this.options.model.type\n    }\n\n    private create() {\n        const routesSchema = CrudRoutesFactory.getRoutesSchema()\n        this.mergeOptions()\n        this.setResponseModels()\n        this.createRoutes(routesSchema)\n        this.enableRoutes(routesSchema)\n    }\n\n    getOne(name: BaseRouteName) {\n        this.targetProto[name] = function getOne(req: any) {\n            return this.service.getOne(req)\n        }\n    }\n\n    getOneBase(name: BaseRouteName) {\n        this.targetProto[name] = function getOneBase(req: any) {\n            return this.service.getOneBase(req)\n        }\n    }\n\n    static getRoutesSchema(): BaseRoute[] {\n        return [\n            {\n                name: 'getOneBase',\n                path: '/',\n                method: RequestMethod.GET,\n                enable: false,\n                override: false,\n                withParams: true,\n            },\n            {\n                name: 'getOne',\n                path: '/',\n                method: RequestMethod.GET,\n                enable: false,\n                override: false,\n                withParams: false,\n            },\n        ]\n    }\n\n    mergeOptions() {\n        // merge query config\n        const query = isObjectFull(this.options.query) ? this.options.query : {}\n        this.options.query = { ...CrudConfigService.config.query, ...query }\n\n        // set dto\n        if (!isObjectFull(this.options.dto)) {\n            this.options.dto = {}\n        }\n\n        // set serialize\n        this.options.serialize = {\n            ...CrudConfigService.config.serialize,\n            ...this.options.serialize,\n        }\n\n        this.options.serialize.get = isFalse(this.options.serialize?.get)\n            ? false\n            : this.options.serialize?.get || this.modelType\n\n        this.options.serialize.getMany = isFalse(this.options.serialize?.getMany)\n            ? false\n            : this.options.serialize?.getMany\n            ? this.options.serialize?.getMany\n            : isFalse(this.options.serialize?.get)\n            ? false\n            : SerializeHelper.createGetManyDto(\n                  this.options.serialize?.get,\n                  this.modelName,\n              )\n\n        this.options.serialize.create = isFalse(this.options.serialize?.create)\n            ? false\n            : this.options.serialize?.create || this.modelType\n\n        this.options.serialize.update = isFalse(this.options.serialize?.update)\n            ? false\n            : this.options.serialize?.update || this.modelType\n\n        this.options.serialize.replace = isFalse(this.options.serialize?.replace)\n            ? false\n            : this.options.serialize?.replace || this.modelType\n\n        this.options.serialize.delete =\n            isFalse(this.options.serialize?.delete) ||\n            !this.options.routes?.deleteOneBase?.returnDeleted\n                ? false\n                : this.options.serialize?.delete || this.modelType\n\n        R.set('CRUD_OPTIONS_METADATA', this.options, this.target)\n    }\n\n    setResponseModels() {\n        const modelType = isFunction(this.modelType)\n            ? this.modelType\n            : SerializeHelper.createGetOneResponseDto(this.modelName)\n\n        this.swaggerModels.get = isFunction(this.options.serialize?.get)\n            ? this.options.serialize?.get\n            : modelType\n\n        this.swaggerModels.getMany =\n            this.options.serialize?.getMany ||\n            SerializeHelper.createGetManyDto(this.swaggerModels.get, this.modelName)\n\n        this.swaggerModels.create = isFunction(this.options.serialize?.create)\n            ? this.options.serialize?.create\n            : modelType\n\n        this.swaggerModels.update = isFunction(this.options.serialize?.update)\n            ? this.options.serialize?.update\n            : modelType\n\n        this.swaggerModels.replace = isFunction(this.options.serialize?.replace)\n            ? this.options.serialize?.replace\n            : modelType\n\n        this.swaggerModels.delete = isFunction(this.options.serialize?.delete)\n            ? this.options.serialize?.delete\n            : modelType\n\n        Swagger.setExtraModels(this.swaggerModels)\n    }\n\n    enableRoutes(routesSchema: BaseRoute[]) {\n        routesSchema.forEach((route) => {\n            if (!route.override && route.enable) {\n                R.setRoute(route, this.targetProto[route.name])\n            }\n        })\n    }\n\n    createRoutes(routesSchema: BaseRoute[]) {\n        routesSchema.forEach((route) => {\n            // create base method\n            /* this[route.name](route.name) */\n            route.enable = true\n\n            // set metadata\n            this.setSwaggerResponseOk(route.name)\n        })\n    }\n\n    setSwaggerResponseOk(name: BaseRouteName) {\n        const metadata = Swagger.getResponseOk(this.targetProto[name]) || {}\n        const metadataToAdd =\n            Swagger.createResponseMeta(name, this.options, this.swaggerModels) || {}\n\n        Swagger.setResponseOk(\n            // @ts-ignore\n            { ...metadata, ...metadataToAdd },\n            this.targetProto[name],\n        )\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/RequestGuard.html":{"url":"guards/RequestGuard.html","title":"guard - RequestGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n    Guards\n    RequestGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/infra/guards/req.ts\n            \n\n                \n                Description\n                \n                \n                    Request Guard\n\n                \n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                bindRequestHelpers\n                            \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            bindRequestHelpers\n                        \n                        \n                    \n                \n            \n            \n                \nbindRequestHelpers(request: any)\n                \n            \n\n\n            \n                \n                    Defined in src/infra/guards/req.ts:33\n                \n            \n\n\n            \n                \n                    Bind Request Helpers\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            canActivate\n                        \n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/infra/guards/req.ts:20\n                \n            \n\n\n            \n                \n                    Guard Method\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Current execution context. Provides access to details about\nthe current request pipeline.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     boolean | Promise | Observable\n\n                    \n                    \n                        Value indicating whether or not the current request is allowed to\nproceed.\n\n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { Injectable, CanActivate, ExecutionContext } from '@nestjs/common'\n\nimport { Observable } from 'rxjs'\n\n/**\n * Request Guard\n */\n@Injectable()\nexport class RequestGuard implements CanActivate {\n    /**\n     * Guard Method\n     *\n     * @param context Current execution context. Provides access to details about\n     * the current request pipeline.\n     *\n     * @returns Value indicating whether or not the current request is allowed to\n     * proceed.\n     */\n    canActivate(\n        context: ExecutionContext,\n    ): boolean | Promise | Observable {\n        this.bindRequestHelpers(context.switchToHttp().getRequest())\n\n        return true\n    }\n\n    /**\n     * Bind Request Helpers\n     *\n     * @param request\n     */\n    bindRequestHelpers(request: any): any {\n        function all(): Record {\n            const inputs = { ...request.query, ...request.body, ...request.params }\n\n            // eslint-disable-next-line guard-for-in,no-restricted-syntax\n            for (const key in inputs) {\n                const value = inputs[key]\n\n                if (typeof value === 'string' || value instanceof String) {\n                    inputs[key] = value.trim()\n                }\n            }\n\n            return inputs\n        }\n\n        request.all = all\n\n        return request\n    }\n}\n\n        \n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RescueLists.html":{"url":"interfaces/RescueLists.html","title":"interface - RescueLists","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  RescueLists\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/domain.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        rescues\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        rescues\n                                    \n                                \n                                \n                                    \n                                        rescues:         Rescues[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Rescues[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { HttpStatus } from '@nestjs/common'\n\nexport type Results =\n    | GetAppLaunchData\n    | GetUserProfile\n    | GetUserPosts\n    | GetComments\n    | GetRescueList\n    | GetFollowers\n    | GetFollowing\n\nexport type APIError = Error | string | null\n\nexport interface Result {\n    data: T\n    error?: APIError\n    message?: string | string[]\n    statusCode: HttpStatus\n}\n\nexport interface APIResponse {\n    data: T\n    error?: APIError\n    message?: string | string[]\n    statusCode: HttpStatus\n\n    count?: number\n    page?: number\n    pageCount?: number\n    total?: number\n}\n\nexport interface GetAppLaunchData {\n    link: 'api:/'\n    response: APIResponse\n}\n\nexport interface GetUserProfile {\n    link: 'api:v1/user/getUserProfile?userId=25'\n    response: APIResponse\n}\n\nexport interface GetUserPosts {\n    link: 'api:v1/user/getUserPosts?pageNo=0&pageSize=25'\n    response: APIResponse\n}\n\nexport interface GetRescueList {\n    link: 'api:v1/rescue/getRescueList?pageNo=0&pageSize=10&status=pending|inProgress|completed|nearest'\n    response: APIResponse\n}\n\nexport interface GetComments {\n    link: 'api:v1/rescue/getComments?pageNo=0&pageSize=10&postId=1230'\n    response: APIResponse\n}\n\nexport interface GetFollowers {\n    link: 'api:v1/rescue/getUserFollowers?userId=1230'\n    response: APIResponse\n}\n\nexport interface GetFollowing {\n    link: 'api:v1/rescue/getUserFollowing?userId=1230'\n    response: APIResponse\n}\n\nexport interface AppLaunchAction {\n    actionId: number\n    action: string\n    isActive: boolean\n    subject?: string\n}\n\nexport interface User {\n    usesId: number\n\n    coverImage: string\n    following: boolean\n    gender: string\n    isOwnProfile: number\n    isRescuer: boolean\n    latitude: number\n    longitude: number\n    numberOfFollowers: number\n    numberOfFollowing: number\n    numberOfPosts: number\n    numberOfRescuesCompleted: number\n    numberOfRescuesCreated: number\n    numberOfRescuesInProgress: number\n    profileImage: string\n    rescuer: boolean\n    userAddress: string\n    userContacts: string\n    userEmail: string\n    userName: string\n    badge: {\n        badgeId: number\n        badgeName: string\n        badgeDescription: string\n        recuesCompletionNeeded: number\n    }\n    setting: {\n        showMyContacts: boolean\n        getNotifications: boolean\n    }\n}\n\nexport interface PostType {\n    postTypeId: number\n    postType: string\n}\n\nexport interface PostedByUser {\n    usesId: number\n    badgeName: string\n    following: boolean\n    profileImage: string\n    rescuer: boolean\n    userName: string\n}\n\nexport interface UserPost {\n    postId: number\n    commentsCount: number\n    isUserReactedToPost: boolean\n    ownPage: boolean\n    postBy: PostedByUser\n    postImage: string\n    postTime: string\n    postType: PostType\n    postVideo: string\n    reactionsCount: number\n    timeAgo: string\n\n    adCorporateLogoUrl: string | null\n    corporateDescription: string | null\n    corporateName: string | null\n}\n\nexport interface UserPosts {\n    isRecent: boolean\n    feed: UserPost[]\n}\n\nexport interface Rescues {\n    rescueId: number\n    animalImageUrl: string\n    distance: number\n    distanceAway: string\n    emergencyType: string\n    postedBy: string\n    postedMinAgo: string\n    rescueDate: Date\n    rescuedPetName: string\n    rescueLocality: string\n    rescuers: {\n        contact: number\n        name: string\n        profileId: number\n        profileImageUrl: string\n        rescues: boolean\n        showMyNumber: boolean\n    }\n    rescueStatus: string\n    viewsCont: number\n}\n\nexport interface RescueLists {\n    rescues: Rescues[]\n}\n\nexport interface Comment {\n    commentId: number\n    comment: string\n    commentedUseName: string\n    commentedUserId: number\n    timeAgo: string\n}\n\nexport interface Comments {\n    comments: Comment[]\n}\n\nexport interface Follower {\n    userId: number\n    userName: string\n    profileImage: string\n    areYouFollowing: boolean\n    showRemoveOption: boolean\n}\n\nexport type Following = Follower\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Rescues.html":{"url":"interfaces/Rescues.html","title":"interface - Rescues","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Rescues\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/domain.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        animalImageUrl\n                                \n                                \n                                        distance\n                                \n                                \n                                        distanceAway\n                                \n                                \n                                        emergencyType\n                                \n                                \n                                        postedBy\n                                \n                                \n                                        postedMinAgo\n                                \n                                \n                                        rescueDate\n                                \n                                \n                                        rescuedPetName\n                                \n                                \n                                        rescueId\n                                \n                                \n                                        rescueLocality\n                                \n                                \n                                        rescuers\n                                \n                                \n                                        rescueStatus\n                                \n                                \n                                        viewsCont\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        animalImageUrl\n                                    \n                                \n                                \n                                    \n                                        animalImageUrl:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        distance\n                                    \n                                \n                                \n                                    \n                                        distance:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        distanceAway\n                                    \n                                \n                                \n                                    \n                                        distanceAway:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        emergencyType\n                                    \n                                \n                                \n                                    \n                                        emergencyType:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        postedBy\n                                    \n                                \n                                \n                                    \n                                        postedBy:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        postedMinAgo\n                                    \n                                \n                                \n                                    \n                                        postedMinAgo:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        rescueDate\n                                    \n                                \n                                \n                                    \n                                        rescueDate:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        rescuedPetName\n                                    \n                                \n                                \n                                    \n                                        rescuedPetName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        rescueId\n                                    \n                                \n                                \n                                    \n                                        rescueId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        rescueLocality\n                                    \n                                \n                                \n                                    \n                                        rescueLocality:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        rescuers\n                                    \n                                \n                                \n                                    \n                                        rescuers:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        rescueStatus\n                                    \n                                \n                                \n                                    \n                                        rescueStatus:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        viewsCont\n                                    \n                                \n                                \n                                    \n                                        viewsCont:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { HttpStatus } from '@nestjs/common'\n\nexport type Results =\n    | GetAppLaunchData\n    | GetUserProfile\n    | GetUserPosts\n    | GetComments\n    | GetRescueList\n    | GetFollowers\n    | GetFollowing\n\nexport type APIError = Error | string | null\n\nexport interface Result {\n    data: T\n    error?: APIError\n    message?: string | string[]\n    statusCode: HttpStatus\n}\n\nexport interface APIResponse {\n    data: T\n    error?: APIError\n    message?: string | string[]\n    statusCode: HttpStatus\n\n    count?: number\n    page?: number\n    pageCount?: number\n    total?: number\n}\n\nexport interface GetAppLaunchData {\n    link: 'api:/'\n    response: APIResponse\n}\n\nexport interface GetUserProfile {\n    link: 'api:v1/user/getUserProfile?userId=25'\n    response: APIResponse\n}\n\nexport interface GetUserPosts {\n    link: 'api:v1/user/getUserPosts?pageNo=0&pageSize=25'\n    response: APIResponse\n}\n\nexport interface GetRescueList {\n    link: 'api:v1/rescue/getRescueList?pageNo=0&pageSize=10&status=pending|inProgress|completed|nearest'\n    response: APIResponse\n}\n\nexport interface GetComments {\n    link: 'api:v1/rescue/getComments?pageNo=0&pageSize=10&postId=1230'\n    response: APIResponse\n}\n\nexport interface GetFollowers {\n    link: 'api:v1/rescue/getUserFollowers?userId=1230'\n    response: APIResponse\n}\n\nexport interface GetFollowing {\n    link: 'api:v1/rescue/getUserFollowing?userId=1230'\n    response: APIResponse\n}\n\nexport interface AppLaunchAction {\n    actionId: number\n    action: string\n    isActive: boolean\n    subject?: string\n}\n\nexport interface User {\n    usesId: number\n\n    coverImage: string\n    following: boolean\n    gender: string\n    isOwnProfile: number\n    isRescuer: boolean\n    latitude: number\n    longitude: number\n    numberOfFollowers: number\n    numberOfFollowing: number\n    numberOfPosts: number\n    numberOfRescuesCompleted: number\n    numberOfRescuesCreated: number\n    numberOfRescuesInProgress: number\n    profileImage: string\n    rescuer: boolean\n    userAddress: string\n    userContacts: string\n    userEmail: string\n    userName: string\n    badge: {\n        badgeId: number\n        badgeName: string\n        badgeDescription: string\n        recuesCompletionNeeded: number\n    }\n    setting: {\n        showMyContacts: boolean\n        getNotifications: boolean\n    }\n}\n\nexport interface PostType {\n    postTypeId: number\n    postType: string\n}\n\nexport interface PostedByUser {\n    usesId: number\n    badgeName: string\n    following: boolean\n    profileImage: string\n    rescuer: boolean\n    userName: string\n}\n\nexport interface UserPost {\n    postId: number\n    commentsCount: number\n    isUserReactedToPost: boolean\n    ownPage: boolean\n    postBy: PostedByUser\n    postImage: string\n    postTime: string\n    postType: PostType\n    postVideo: string\n    reactionsCount: number\n    timeAgo: string\n\n    adCorporateLogoUrl: string | null\n    corporateDescription: string | null\n    corporateName: string | null\n}\n\nexport interface UserPosts {\n    isRecent: boolean\n    feed: UserPost[]\n}\n\nexport interface Rescues {\n    rescueId: number\n    animalImageUrl: string\n    distance: number\n    distanceAway: string\n    emergencyType: string\n    postedBy: string\n    postedMinAgo: string\n    rescueDate: Date\n    rescuedPetName: string\n    rescueLocality: string\n    rescuers: {\n        contact: number\n        name: string\n        profileId: number\n        profileImageUrl: string\n        rescues: boolean\n        showMyNumber: boolean\n    }\n    rescueStatus: string\n    viewsCont: number\n}\n\nexport interface RescueLists {\n    rescues: Rescues[]\n}\n\nexport interface Comment {\n    commentId: number\n    comment: string\n    commentedUseName: string\n    commentedUserId: number\n    timeAgo: string\n}\n\nexport interface Comments {\n    comments: Comment[]\n}\n\nexport interface Follower {\n    userId: number\n    userName: string\n    profileImage: string\n    areYouFollowing: boolean\n    showRemoveOption: boolean\n}\n\nexport type Following = Follower\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Response.html":{"url":"interfaces/Response.html","title":"interface - Response","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Response\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infra/interceptors/transform.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        data\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                    \n                                \n                                \n                                    \n                                        data:     T\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n    Injectable,\n    NestInterceptor,\n    ExecutionContext,\n    CallHandler,\n} from '@nestjs/common'\n\nimport { Observable } from 'rxjs'\nimport { map } from 'rxjs/operators'\n\nexport interface Response {\n    data: T\n}\n\n/**\n * Transform interceptor is Observer which transform response\n */\n@Injectable()\nexport class TransformInterceptor implements NestInterceptor> {\n    /**\n     * Interceptor Method to implement a custom interceptor.\n     *\n     * @param context an `ExecutionContext` object providing methods to access the\n     * route handler and class about to be invoked.\n     * @param next a reference to the `CallHandler`, which provides access to an\n     * `Observable` representing the response stream from the route handler.\n     */\n    intercept(\n        context: ExecutionContext,\n        next: CallHandler,\n    ): Observable> {\n        return next.handle().pipe(map((data) => ({ data })))\n    }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/ResponseGuard.html":{"url":"guards/ResponseGuard.html","title":"guard - ResponseGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n    Guards\n    ResponseGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/infra/guards/res.ts\n            \n\n                \n                Description\n                \n                \n                    Response Guard\n\n                \n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                bindResponseHelpers\n                            \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            bindResponseHelpers\n                        \n                        \n                    \n                \n            \n            \n                \nbindResponseHelpers(response: any)\n                \n            \n\n\n            \n                \n                    Defined in src/infra/guards/res.ts:32\n                \n            \n\n\n            \n                \n                    Bind Response Helpers\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    response\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            canActivate\n                        \n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/infra/guards/res.ts:19\n                \n            \n\n\n            \n                \n                    Guard Method\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Current execution context. Provides access to details about\nthe current request pipeline.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     boolean | Promise | Observable\n\n                    \n                    \n                        Value indicating whether or not the current request is allowed to\nproceed.\n\n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { Injectable, CanActivate, ExecutionContext } from '@nestjs/common'\n\nimport { Observable } from 'rxjs'\n\n/**\n * Response Guard\n */\n@Injectable()\nexport class ResponseGuard implements CanActivate {\n    /**\n     * Guard Method\n     *\n     * @param context Current execution context. Provides access to details about\n     * the current request pipeline.\n     *\n     * @returns Value indicating whether or not the current request is allowed to\n     * proceed.\n     */\n    canActivate(\n        context: ExecutionContext,\n    ): boolean | Promise | Observable {\n        this.bindResponseHelpers(context.switchToHttp().getResponse())\n\n        return true\n    }\n\n    /**\n     * Bind Response Helpers\n     *\n     * @param response\n     */\n    bindResponseHelpers(response: any): any {\n        function success(\n            data: Record | Array | string,\n            status = 200,\n        ) {\n            return response.status(status).json({\n                success: true,\n                code: status,\n                data,\n            })\n        }\n\n        function error(err: Record | string, status = 401) {\n            let message = 'Something went wrong!'\n            let errors = null\n\n            if (typeof err === 'string') {\n                message = err\n            } else {\n                message = err.message\n                errors = err.errors\n            }\n\n            return response.status(status).json({\n                success: false,\n                code: status,\n                message,\n                errors,\n            })\n        }\n\n        function noContent() {\n            return response.status(204).end()\n        }\n\n        function withMeta(data: Record, status = 200) {\n            const { data: dataObj, ...meta } = data\n\n            return response.status(status).json({\n                success: true,\n                code: status,\n                data: dataObj,\n                meta,\n            })\n        }\n\n        response.error = error\n        response.success = success\n        response.withMeta = withMeta\n        response.noContent = noContent\n\n        return response\n    }\n}\n\n        \n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Result.html":{"url":"interfaces/Result.html","title":"interface - Result","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Result\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/domain.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        data\n                                \n                                \n                                            Optional\n                                        error\n                                \n                                \n                                            Optional\n                                        message\n                                \n                                \n                                        statusCode\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                    \n                                \n                                \n                                    \n                                        data:     T\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        error\n                                    \n                                \n                                \n                                    \n                                        error:         APIError\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         APIError\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                    \n                                \n                                \n                                    \n                                        message:     string | string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string | string[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        statusCode\n                                    \n                                \n                                \n                                    \n                                        statusCode:     HttpStatus\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     HttpStatus\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { HttpStatus } from '@nestjs/common'\n\nexport type Results =\n    | GetAppLaunchData\n    | GetUserProfile\n    | GetUserPosts\n    | GetComments\n    | GetRescueList\n    | GetFollowers\n    | GetFollowing\n\nexport type APIError = Error | string | null\n\nexport interface Result {\n    data: T\n    error?: APIError\n    message?: string | string[]\n    statusCode: HttpStatus\n}\n\nexport interface APIResponse {\n    data: T\n    error?: APIError\n    message?: string | string[]\n    statusCode: HttpStatus\n\n    count?: number\n    page?: number\n    pageCount?: number\n    total?: number\n}\n\nexport interface GetAppLaunchData {\n    link: 'api:/'\n    response: APIResponse\n}\n\nexport interface GetUserProfile {\n    link: 'api:v1/user/getUserProfile?userId=25'\n    response: APIResponse\n}\n\nexport interface GetUserPosts {\n    link: 'api:v1/user/getUserPosts?pageNo=0&pageSize=25'\n    response: APIResponse\n}\n\nexport interface GetRescueList {\n    link: 'api:v1/rescue/getRescueList?pageNo=0&pageSize=10&status=pending|inProgress|completed|nearest'\n    response: APIResponse\n}\n\nexport interface GetComments {\n    link: 'api:v1/rescue/getComments?pageNo=0&pageSize=10&postId=1230'\n    response: APIResponse\n}\n\nexport interface GetFollowers {\n    link: 'api:v1/rescue/getUserFollowers?userId=1230'\n    response: APIResponse\n}\n\nexport interface GetFollowing {\n    link: 'api:v1/rescue/getUserFollowing?userId=1230'\n    response: APIResponse\n}\n\nexport interface AppLaunchAction {\n    actionId: number\n    action: string\n    isActive: boolean\n    subject?: string\n}\n\nexport interface User {\n    usesId: number\n\n    coverImage: string\n    following: boolean\n    gender: string\n    isOwnProfile: number\n    isRescuer: boolean\n    latitude: number\n    longitude: number\n    numberOfFollowers: number\n    numberOfFollowing: number\n    numberOfPosts: number\n    numberOfRescuesCompleted: number\n    numberOfRescuesCreated: number\n    numberOfRescuesInProgress: number\n    profileImage: string\n    rescuer: boolean\n    userAddress: string\n    userContacts: string\n    userEmail: string\n    userName: string\n    badge: {\n        badgeId: number\n        badgeName: string\n        badgeDescription: string\n        recuesCompletionNeeded: number\n    }\n    setting: {\n        showMyContacts: boolean\n        getNotifications: boolean\n    }\n}\n\nexport interface PostType {\n    postTypeId: number\n    postType: string\n}\n\nexport interface PostedByUser {\n    usesId: number\n    badgeName: string\n    following: boolean\n    profileImage: string\n    rescuer: boolean\n    userName: string\n}\n\nexport interface UserPost {\n    postId: number\n    commentsCount: number\n    isUserReactedToPost: boolean\n    ownPage: boolean\n    postBy: PostedByUser\n    postImage: string\n    postTime: string\n    postType: PostType\n    postVideo: string\n    reactionsCount: number\n    timeAgo: string\n\n    adCorporateLogoUrl: string | null\n    corporateDescription: string | null\n    corporateName: string | null\n}\n\nexport interface UserPosts {\n    isRecent: boolean\n    feed: UserPost[]\n}\n\nexport interface Rescues {\n    rescueId: number\n    animalImageUrl: string\n    distance: number\n    distanceAway: string\n    emergencyType: string\n    postedBy: string\n    postedMinAgo: string\n    rescueDate: Date\n    rescuedPetName: string\n    rescueLocality: string\n    rescuers: {\n        contact: number\n        name: string\n        profileId: number\n        profileImageUrl: string\n        rescues: boolean\n        showMyNumber: boolean\n    }\n    rescueStatus: string\n    viewsCont: number\n}\n\nexport interface RescueLists {\n    rescues: Rescues[]\n}\n\nexport interface Comment {\n    commentId: number\n    comment: string\n    commentedUseName: string\n    commentedUserId: number\n    timeAgo: string\n}\n\nexport interface Comments {\n    comments: Comment[]\n}\n\nexport interface Follower {\n    userId: number\n    userName: string\n    profileImage: string\n    areYouFollowing: boolean\n    showRemoveOption: boolean\n}\n\nexport type Following = Follower\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SerializeHelper.html":{"url":"classes/SerializeHelper.html","title":"class - SerializeHelper","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SerializeHelper\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/base/swagger-gen/crud-routes.factory.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                createGetManyDto\n                            \n                            \n                                    Static\n                                createGetOneResponseDto\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            createGetManyDto\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createGetManyDto(dto: any, resourceName: string)\n                \n            \n\n\n            \n                \n                    Defined in src/base/swagger-gen/crud-routes.factory.ts:161\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    resourceName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            createGetOneResponseDto\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createGetOneResponseDto(resourceName: string)\n                \n            \n\n\n            \n                \n                    Defined in src/base/swagger-gen/crud-routes.factory.ts:188\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    resourceName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { HttpStatus, RequestMethod } from '@nestjs/common'\n\nimport { Type } from 'class-transformer'\nimport * as deepmerge from 'deepmerge'\n\nimport {\n    ApiProperty,\n    BaseRoute,\n    isFalse,\n    isFunction,\n    isObjectFull,\n    objKeys,\n    swagger,\n    swaggerConst,\n} from './utils'\nimport type { CrudOptions, GetManyDefaultResponse, BaseRouteName } from './utils'\n\nexport class R {\n    static set(\n        metadataKey: string,\n        metadataValue: any,\n        target: Object,\n        propertyKey?: string | symbol,\n    ) {\n        if (!propertyKey) {\n            Reflect.defineMetadata(metadataKey, metadataValue, target)\n        } else {\n            Reflect.defineMetadata(metadataKey, metadataValue, target, propertyKey)\n        }\n    }\n\n    static get(\n        metadataKey: any,\n        target: Object,\n        propertyKey?: string | symbol,\n    ): T {\n        if (!propertyKey) return Reflect.getMetadata(metadataKey, target)\n\n        return Reflect.getMetadata(metadataKey, target, propertyKey)\n    }\n\n    static setRoute(route: BaseRoute, func: Function) {\n        R.set('path', route.path, func)\n        R.set('method', route.method, func)\n    }\n}\n\nexport class Swagger {\n    /**\n     * Sets extra swagger metadata for GET Calls\n     */\n    static setExtraModels(swaggerModels: {\n        [x: string]: any\n        get: Record\n    }) {\n        if (swaggerConst) {\n            const meta = Swagger.getExtraModels(swaggerModels.get)\n            const models = [\n                ...meta,\n                ...objKeys(swaggerModels)\n                    .map((name) => swaggerModels[name])\n                    .filter((one) => one && one.name !== swaggerModels.get.name),\n            ]\n\n            R.set(\n                swaggerConst.DECORATORS.API_EXTRA_MODELS,\n                models,\n                swaggerModels.get,\n            )\n        }\n    }\n\n    /**\n     * Sets swagger metadata for response of GET Calls\n     */\n    static setResponseOk(metadata: any[], func: Function) {\n        if (swaggerConst) {\n            R.set(swaggerConst.DECORATORS.API_RESPONSE, metadata, func)\n        }\n    }\n\n    static getExtraModels(target: Record): any[] {\n        return swaggerConst\n            ? R.get(swaggerConst.API_EXTRA_MODELS, target) || []\n            : []\n    }\n\n    static getResponseOk(func: Function) {\n        return swaggerConst\n            ? R.get(swaggerConst.DECORATORS.API_RESPONSE, func) || {}\n            : {}\n    }\n\n    static createResponseMeta(\n        name: BaseRouteName,\n        options: CrudOptions,\n        swaggerModels: {\n            [x: string]: any\n            get: { name: any }\n            getMany: { name: any }\n        },\n    ) {\n        if (swagger) {\n            const { query } = options\n\n            switch (name) {\n                case 'getOneBase':\n                    return {\n                        [HttpStatus.OK]: {\n                            description: 'Get one base response',\n                            type: swaggerModels.get,\n                        },\n                    }\n                case 'getOne':\n                    return {\n                        [HttpStatus.OK]: query?.alwaysPaginate\n                            ? {\n                                  description: 'Get paginated response',\n                                  type: swaggerModels.getMany,\n                              }\n                            : {\n                                  description: 'Get many base response',\n                                  schema: {\n                                      oneOf: [\n                                          {\n                                              $ref: swagger.getSchemaPath(\n                                                  swaggerModels.getMany.name,\n                                              ),\n                                          },\n                                          {\n                                              type: 'array',\n                                              items: {\n                                                  $ref: swagger.getSchemaPath(\n                                                      swaggerModels.get.name,\n                                                  ),\n                                              },\n                                          },\n                                      ],\n                                  },\n                              },\n                    }\n                default:\n                    // eslint-disable-next-line no-case-declarations\n                    const dto = swaggerModels[name.split('OneBase')[0]]\n\n                    return {\n                        [HttpStatus.OK]: {\n                            description: 'Response',\n                            schema: { $ref: swagger.getSchemaPath(dto.name) },\n                        },\n                    }\n            }\n        } else {\n            return {}\n        }\n    }\n}\n\nexport class SerializeHelper {\n    static createGetManyDto(dto: any, resourceName: string): any {\n        class GetManyResponseDto implements GetManyDefaultResponse {\n            @ApiProperty({ type: dto, isArray: true })\n            @Type(() => dto)\n            data!: any[]\n\n            @ApiProperty({ type: 'number' })\n            count!: number\n\n            @ApiProperty({ type: 'number' })\n            total!: number\n\n            @ApiProperty({ type: 'number' })\n            page!: number\n\n            @ApiProperty({ type: 'number' })\n            pageCount!: number\n        }\n\n        Object.defineProperty(GetManyResponseDto, 'name', {\n            writable: false,\n            value: `GetMany${resourceName}ResponseDto`,\n        })\n\n        return GetManyResponseDto\n    }\n\n    static createGetOneResponseDto(resourceName: string): any {\n        class GetOneResponseDto {}\n\n        Object.defineProperty(GetOneResponseDto, 'name', {\n            writable: false,\n            value: `${resourceName}ResponseDto`,\n        })\n\n        return GetOneResponseDto\n    }\n}\n\nexport class CrudConfigService {\n    static config: Partial = {\n        query: {\n            alwaysPaginate: false,\n        },\n    }\n\n    static load(config: Record) {\n        const query = isObjectFull(config.query) ? config.query : {}\n        const params = isObjectFull(config.params) ? config.params : {}\n        const serialize = isObjectFull(config.serialize) ? config.serialize : {}\n\n        CrudConfigService.config = deepmerge(\n            CrudConfigService.config,\n            { query, params, serialize },\n            { arrayMerge: (a, b, c) => b },\n        )\n    }\n}\n\nexport class CrudRoutesFactory {\n    protected options\n\n    protected swaggerModels: any = {}\n\n    constructor(private target: Object, options: CrudOptions) {\n        this.options = options\n        this.create()\n\n        console.log(\n            'CrudRoutesFactory::constructor',\n            // { ...options },\n            // this.targetProto,\n            // this.modelType,\n            // this.modelName,\n            // this.swaggerModels,\n        )\n    }\n\n    static create(target: Object, options: CrudOptions): CrudRoutesFactory {\n        return new CrudRoutesFactory(target, options)\n    }\n\n    get targetProto() {\n        // @ts-ignore\n        return this.target.prototype\n    }\n\n    get modelName() {\n        return this.options.model.type?.name\n    }\n\n    get modelType() {\n        return this.options.model.type\n    }\n\n    private create() {\n        const routesSchema = CrudRoutesFactory.getRoutesSchema()\n        this.mergeOptions()\n        this.setResponseModels()\n        this.createRoutes(routesSchema)\n        this.enableRoutes(routesSchema)\n    }\n\n    getOne(name: BaseRouteName) {\n        this.targetProto[name] = function getOne(req: any) {\n            return this.service.getOne(req)\n        }\n    }\n\n    getOneBase(name: BaseRouteName) {\n        this.targetProto[name] = function getOneBase(req: any) {\n            return this.service.getOneBase(req)\n        }\n    }\n\n    static getRoutesSchema(): BaseRoute[] {\n        return [\n            {\n                name: 'getOneBase',\n                path: '/',\n                method: RequestMethod.GET,\n                enable: false,\n                override: false,\n                withParams: true,\n            },\n            {\n                name: 'getOne',\n                path: '/',\n                method: RequestMethod.GET,\n                enable: false,\n                override: false,\n                withParams: false,\n            },\n        ]\n    }\n\n    mergeOptions() {\n        // merge query config\n        const query = isObjectFull(this.options.query) ? this.options.query : {}\n        this.options.query = { ...CrudConfigService.config.query, ...query }\n\n        // set dto\n        if (!isObjectFull(this.options.dto)) {\n            this.options.dto = {}\n        }\n\n        // set serialize\n        this.options.serialize = {\n            ...CrudConfigService.config.serialize,\n            ...this.options.serialize,\n        }\n\n        this.options.serialize.get = isFalse(this.options.serialize?.get)\n            ? false\n            : this.options.serialize?.get || this.modelType\n\n        this.options.serialize.getMany = isFalse(this.options.serialize?.getMany)\n            ? false\n            : this.options.serialize?.getMany\n            ? this.options.serialize?.getMany\n            : isFalse(this.options.serialize?.get)\n            ? false\n            : SerializeHelper.createGetManyDto(\n                  this.options.serialize?.get,\n                  this.modelName,\n              )\n\n        this.options.serialize.create = isFalse(this.options.serialize?.create)\n            ? false\n            : this.options.serialize?.create || this.modelType\n\n        this.options.serialize.update = isFalse(this.options.serialize?.update)\n            ? false\n            : this.options.serialize?.update || this.modelType\n\n        this.options.serialize.replace = isFalse(this.options.serialize?.replace)\n            ? false\n            : this.options.serialize?.replace || this.modelType\n\n        this.options.serialize.delete =\n            isFalse(this.options.serialize?.delete) ||\n            !this.options.routes?.deleteOneBase?.returnDeleted\n                ? false\n                : this.options.serialize?.delete || this.modelType\n\n        R.set('CRUD_OPTIONS_METADATA', this.options, this.target)\n    }\n\n    setResponseModels() {\n        const modelType = isFunction(this.modelType)\n            ? this.modelType\n            : SerializeHelper.createGetOneResponseDto(this.modelName)\n\n        this.swaggerModels.get = isFunction(this.options.serialize?.get)\n            ? this.options.serialize?.get\n            : modelType\n\n        this.swaggerModels.getMany =\n            this.options.serialize?.getMany ||\n            SerializeHelper.createGetManyDto(this.swaggerModels.get, this.modelName)\n\n        this.swaggerModels.create = isFunction(this.options.serialize?.create)\n            ? this.options.serialize?.create\n            : modelType\n\n        this.swaggerModels.update = isFunction(this.options.serialize?.update)\n            ? this.options.serialize?.update\n            : modelType\n\n        this.swaggerModels.replace = isFunction(this.options.serialize?.replace)\n            ? this.options.serialize?.replace\n            : modelType\n\n        this.swaggerModels.delete = isFunction(this.options.serialize?.delete)\n            ? this.options.serialize?.delete\n            : modelType\n\n        Swagger.setExtraModels(this.swaggerModels)\n    }\n\n    enableRoutes(routesSchema: BaseRoute[]) {\n        routesSchema.forEach((route) => {\n            if (!route.override && route.enable) {\n                R.setRoute(route, this.targetProto[route.name])\n            }\n        })\n    }\n\n    createRoutes(routesSchema: BaseRoute[]) {\n        routesSchema.forEach((route) => {\n            // create base method\n            /* this[route.name](route.name) */\n            route.enable = true\n\n            // set metadata\n            this.setSwaggerResponseOk(route.name)\n        })\n    }\n\n    setSwaggerResponseOk(name: BaseRouteName) {\n        const metadata = Swagger.getResponseOk(this.targetProto[name]) || {}\n        const metadataToAdd =\n            Swagger.createResponseMeta(name, this.options, this.swaggerModels) || {}\n\n        Swagger.setResponseOk(\n            // @ts-ignore\n            { ...metadata, ...metadataToAdd },\n            this.targetProto[name],\n        )\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Swagger.html":{"url":"classes/Swagger.html","title":"class - Swagger","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Swagger\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/base/swagger-gen/crud-routes.factory.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                createResponseMeta\n                            \n                            \n                                    Static\n                                getExtraModels\n                            \n                            \n                                    Static\n                                getResponseOk\n                            \n                            \n                                    Static\n                                setExtraModels\n                            \n                            \n                                    Static\n                                setResponseOk\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            createResponseMeta\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createResponseMeta(name: BaseRouteName, options: CrudOptions, swaggerModels: literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/base/swagger-gen/crud-routes.factory.ts:95\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                BaseRouteName\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                CrudOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    swaggerModels\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     { [x: number]: any; }\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            getExtraModels\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getExtraModels(target: Record)\n                \n            \n\n\n            \n                \n                    Defined in src/base/swagger-gen/crud-routes.factory.ts:83\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    target\n                                    \n                                                Record\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     any[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            getResponseOk\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getResponseOk(func: Function)\n                \n            \n\n\n            \n                \n                    Defined in src/base/swagger-gen/crud-routes.factory.ts:89\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    func\n                                    \n                                                Function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            setExtraModels\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setExtraModels(swaggerModels: literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/base/swagger-gen/crud-routes.factory.ts:53\n                \n            \n\n\n            \n                \n                    Sets extra swagger metadata for GET Calls\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    swaggerModels\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            setResponseOk\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setResponseOk(metadata: any[], func: Function)\n                \n            \n\n\n            \n                \n                    Defined in src/base/swagger-gen/crud-routes.factory.ts:77\n                \n            \n\n\n            \n                \n                    Sets swagger metadata for response of GET Calls\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    metadata\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    func\n                                    \n                                                Function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { HttpStatus, RequestMethod } from '@nestjs/common'\n\nimport { Type } from 'class-transformer'\nimport * as deepmerge from 'deepmerge'\n\nimport {\n    ApiProperty,\n    BaseRoute,\n    isFalse,\n    isFunction,\n    isObjectFull,\n    objKeys,\n    swagger,\n    swaggerConst,\n} from './utils'\nimport type { CrudOptions, GetManyDefaultResponse, BaseRouteName } from './utils'\n\nexport class R {\n    static set(\n        metadataKey: string,\n        metadataValue: any,\n        target: Object,\n        propertyKey?: string | symbol,\n    ) {\n        if (!propertyKey) {\n            Reflect.defineMetadata(metadataKey, metadataValue, target)\n        } else {\n            Reflect.defineMetadata(metadataKey, metadataValue, target, propertyKey)\n        }\n    }\n\n    static get(\n        metadataKey: any,\n        target: Object,\n        propertyKey?: string | symbol,\n    ): T {\n        if (!propertyKey) return Reflect.getMetadata(metadataKey, target)\n\n        return Reflect.getMetadata(metadataKey, target, propertyKey)\n    }\n\n    static setRoute(route: BaseRoute, func: Function) {\n        R.set('path', route.path, func)\n        R.set('method', route.method, func)\n    }\n}\n\nexport class Swagger {\n    /**\n     * Sets extra swagger metadata for GET Calls\n     */\n    static setExtraModels(swaggerModels: {\n        [x: string]: any\n        get: Record\n    }) {\n        if (swaggerConst) {\n            const meta = Swagger.getExtraModels(swaggerModels.get)\n            const models = [\n                ...meta,\n                ...objKeys(swaggerModels)\n                    .map((name) => swaggerModels[name])\n                    .filter((one) => one && one.name !== swaggerModels.get.name),\n            ]\n\n            R.set(\n                swaggerConst.DECORATORS.API_EXTRA_MODELS,\n                models,\n                swaggerModels.get,\n            )\n        }\n    }\n\n    /**\n     * Sets swagger metadata for response of GET Calls\n     */\n    static setResponseOk(metadata: any[], func: Function) {\n        if (swaggerConst) {\n            R.set(swaggerConst.DECORATORS.API_RESPONSE, metadata, func)\n        }\n    }\n\n    static getExtraModels(target: Record): any[] {\n        return swaggerConst\n            ? R.get(swaggerConst.API_EXTRA_MODELS, target) || []\n            : []\n    }\n\n    static getResponseOk(func: Function) {\n        return swaggerConst\n            ? R.get(swaggerConst.DECORATORS.API_RESPONSE, func) || {}\n            : {}\n    }\n\n    static createResponseMeta(\n        name: BaseRouteName,\n        options: CrudOptions,\n        swaggerModels: {\n            [x: string]: any\n            get: { name: any }\n            getMany: { name: any }\n        },\n    ) {\n        if (swagger) {\n            const { query } = options\n\n            switch (name) {\n                case 'getOneBase':\n                    return {\n                        [HttpStatus.OK]: {\n                            description: 'Get one base response',\n                            type: swaggerModels.get,\n                        },\n                    }\n                case 'getOne':\n                    return {\n                        [HttpStatus.OK]: query?.alwaysPaginate\n                            ? {\n                                  description: 'Get paginated response',\n                                  type: swaggerModels.getMany,\n                              }\n                            : {\n                                  description: 'Get many base response',\n                                  schema: {\n                                      oneOf: [\n                                          {\n                                              $ref: swagger.getSchemaPath(\n                                                  swaggerModels.getMany.name,\n                                              ),\n                                          },\n                                          {\n                                              type: 'array',\n                                              items: {\n                                                  $ref: swagger.getSchemaPath(\n                                                      swaggerModels.get.name,\n                                                  ),\n                                              },\n                                          },\n                                      ],\n                                  },\n                              },\n                    }\n                default:\n                    // eslint-disable-next-line no-case-declarations\n                    const dto = swaggerModels[name.split('OneBase')[0]]\n\n                    return {\n                        [HttpStatus.OK]: {\n                            description: 'Response',\n                            schema: { $ref: swagger.getSchemaPath(dto.name) },\n                        },\n                    }\n            }\n        } else {\n            return {}\n        }\n    }\n}\n\nexport class SerializeHelper {\n    static createGetManyDto(dto: any, resourceName: string): any {\n        class GetManyResponseDto implements GetManyDefaultResponse {\n            @ApiProperty({ type: dto, isArray: true })\n            @Type(() => dto)\n            data!: any[]\n\n            @ApiProperty({ type: 'number' })\n            count!: number\n\n            @ApiProperty({ type: 'number' })\n            total!: number\n\n            @ApiProperty({ type: 'number' })\n            page!: number\n\n            @ApiProperty({ type: 'number' })\n            pageCount!: number\n        }\n\n        Object.defineProperty(GetManyResponseDto, 'name', {\n            writable: false,\n            value: `GetMany${resourceName}ResponseDto`,\n        })\n\n        return GetManyResponseDto\n    }\n\n    static createGetOneResponseDto(resourceName: string): any {\n        class GetOneResponseDto {}\n\n        Object.defineProperty(GetOneResponseDto, 'name', {\n            writable: false,\n            value: `${resourceName}ResponseDto`,\n        })\n\n        return GetOneResponseDto\n    }\n}\n\nexport class CrudConfigService {\n    static config: Partial = {\n        query: {\n            alwaysPaginate: false,\n        },\n    }\n\n    static load(config: Record) {\n        const query = isObjectFull(config.query) ? config.query : {}\n        const params = isObjectFull(config.params) ? config.params : {}\n        const serialize = isObjectFull(config.serialize) ? config.serialize : {}\n\n        CrudConfigService.config = deepmerge(\n            CrudConfigService.config,\n            { query, params, serialize },\n            { arrayMerge: (a, b, c) => b },\n        )\n    }\n}\n\nexport class CrudRoutesFactory {\n    protected options\n\n    protected swaggerModels: any = {}\n\n    constructor(private target: Object, options: CrudOptions) {\n        this.options = options\n        this.create()\n\n        console.log(\n            'CrudRoutesFactory::constructor',\n            // { ...options },\n            // this.targetProto,\n            // this.modelType,\n            // this.modelName,\n            // this.swaggerModels,\n        )\n    }\n\n    static create(target: Object, options: CrudOptions): CrudRoutesFactory {\n        return new CrudRoutesFactory(target, options)\n    }\n\n    get targetProto() {\n        // @ts-ignore\n        return this.target.prototype\n    }\n\n    get modelName() {\n        return this.options.model.type?.name\n    }\n\n    get modelType() {\n        return this.options.model.type\n    }\n\n    private create() {\n        const routesSchema = CrudRoutesFactory.getRoutesSchema()\n        this.mergeOptions()\n        this.setResponseModels()\n        this.createRoutes(routesSchema)\n        this.enableRoutes(routesSchema)\n    }\n\n    getOne(name: BaseRouteName) {\n        this.targetProto[name] = function getOne(req: any) {\n            return this.service.getOne(req)\n        }\n    }\n\n    getOneBase(name: BaseRouteName) {\n        this.targetProto[name] = function getOneBase(req: any) {\n            return this.service.getOneBase(req)\n        }\n    }\n\n    static getRoutesSchema(): BaseRoute[] {\n        return [\n            {\n                name: 'getOneBase',\n                path: '/',\n                method: RequestMethod.GET,\n                enable: false,\n                override: false,\n                withParams: true,\n            },\n            {\n                name: 'getOne',\n                path: '/',\n                method: RequestMethod.GET,\n                enable: false,\n                override: false,\n                withParams: false,\n            },\n        ]\n    }\n\n    mergeOptions() {\n        // merge query config\n        const query = isObjectFull(this.options.query) ? this.options.query : {}\n        this.options.query = { ...CrudConfigService.config.query, ...query }\n\n        // set dto\n        if (!isObjectFull(this.options.dto)) {\n            this.options.dto = {}\n        }\n\n        // set serialize\n        this.options.serialize = {\n            ...CrudConfigService.config.serialize,\n            ...this.options.serialize,\n        }\n\n        this.options.serialize.get = isFalse(this.options.serialize?.get)\n            ? false\n            : this.options.serialize?.get || this.modelType\n\n        this.options.serialize.getMany = isFalse(this.options.serialize?.getMany)\n            ? false\n            : this.options.serialize?.getMany\n            ? this.options.serialize?.getMany\n            : isFalse(this.options.serialize?.get)\n            ? false\n            : SerializeHelper.createGetManyDto(\n                  this.options.serialize?.get,\n                  this.modelName,\n              )\n\n        this.options.serialize.create = isFalse(this.options.serialize?.create)\n            ? false\n            : this.options.serialize?.create || this.modelType\n\n        this.options.serialize.update = isFalse(this.options.serialize?.update)\n            ? false\n            : this.options.serialize?.update || this.modelType\n\n        this.options.serialize.replace = isFalse(this.options.serialize?.replace)\n            ? false\n            : this.options.serialize?.replace || this.modelType\n\n        this.options.serialize.delete =\n            isFalse(this.options.serialize?.delete) ||\n            !this.options.routes?.deleteOneBase?.returnDeleted\n                ? false\n                : this.options.serialize?.delete || this.modelType\n\n        R.set('CRUD_OPTIONS_METADATA', this.options, this.target)\n    }\n\n    setResponseModels() {\n        const modelType = isFunction(this.modelType)\n            ? this.modelType\n            : SerializeHelper.createGetOneResponseDto(this.modelName)\n\n        this.swaggerModels.get = isFunction(this.options.serialize?.get)\n            ? this.options.serialize?.get\n            : modelType\n\n        this.swaggerModels.getMany =\n            this.options.serialize?.getMany ||\n            SerializeHelper.createGetManyDto(this.swaggerModels.get, this.modelName)\n\n        this.swaggerModels.create = isFunction(this.options.serialize?.create)\n            ? this.options.serialize?.create\n            : modelType\n\n        this.swaggerModels.update = isFunction(this.options.serialize?.update)\n            ? this.options.serialize?.update\n            : modelType\n\n        this.swaggerModels.replace = isFunction(this.options.serialize?.replace)\n            ? this.options.serialize?.replace\n            : modelType\n\n        this.swaggerModels.delete = isFunction(this.options.serialize?.delete)\n            ? this.options.serialize?.delete\n            : modelType\n\n        Swagger.setExtraModels(this.swaggerModels)\n    }\n\n    enableRoutes(routesSchema: BaseRoute[]) {\n        routesSchema.forEach((route) => {\n            if (!route.override && route.enable) {\n                R.setRoute(route, this.targetProto[route.name])\n            }\n        })\n    }\n\n    createRoutes(routesSchema: BaseRoute[]) {\n        routesSchema.forEach((route) => {\n            // create base method\n            /* this[route.name](route.name) */\n            route.enable = true\n\n            // set metadata\n            this.setSwaggerResponseOk(route.name)\n        })\n    }\n\n    setSwaggerResponseOk(name: BaseRouteName) {\n        const metadata = Swagger.getResponseOk(this.targetProto[name]) || {}\n        const metadataToAdd =\n            Swagger.createResponseMeta(name, this.options, this.swaggerModels) || {}\n\n        Swagger.setResponseOk(\n            // @ts-ignore\n            { ...metadata, ...metadataToAdd },\n            this.targetProto[name],\n        )\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Tag.html":{"url":"classes/Tag.html","title":"class - Tag","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Tag\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/tag.model.ts\n        \n\n\n            \n                Extends\n            \n            \n                        BaseModel\n            \n\n            \n                Implements\n            \n            \n                            ITag\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                jsonSchema\n                            \n                            \n                                name\n                            \n                            \n                                    Static\n                                tableName\n                            \n                            \n                                created_at\n                            \n                            \n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Static\n                                hidden\n                            \n                            \n                                id\n                            \n                            \n                                    Static\n                                QueryBuilder\n                            \n                            \n                                updated_at\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                $beforeUpdate\n                            \n                            \n                                    Async\n                                fetchRelation\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            jsonSchema\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     JSONSchema\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        type: 'object',\n        required: ['name'],\n        properties: {\n            id: { type: 'integer' },\n            name: { type: 'string', minLength: 2, maxLength: 255 },\n        },\n    }\n                        \n                    \n                        \n                            \n                                    Defined in src/tags/tag.model.ts:19\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/tags/tag.model.ts:15\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            tableName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'tags'\n                        \n                    \n                        \n                            \n                                    Defined in src/tags/tag.model.ts:13\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            created_at\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                            \n                                \n                                    Inherited from         BaseModel\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseModel:39\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            deleted_at\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     any | null\n\n                        \n                    \n                            \n                                \n                                    Inherited from         BaseModel\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseModel:43\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            hidden\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : [\n        'salt',\n        'password',\n        'created_at',\n        'updated_at',\n        // 'deleted_at'\n    ]\n                        \n                    \n                            \n                                \n                                    Inherited from         BaseModel\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseModel:25\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                            \n                                \n                                    Inherited from         BaseModel\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseModel:37\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            QueryBuilder\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : CustomQueryBuilder\n                        \n                    \n                            \n                                \n                                    Inherited from         BaseModel\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseModel:35\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updated_at\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                            \n                                \n                                    Inherited from         BaseModel\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseModel:41\n\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            $beforeUpdate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    $beforeUpdate(opt: ModelOptions, queryContext: QueryContext)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseModel\n\n                \n            \n            \n                \n                        Defined in         BaseModel:60\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    opt\n                                    \n                                            ModelOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    queryContext\n                                    \n                                            QueryContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            fetchRelation\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    fetchRelation(expression: string | Record, options: Objection.FetchGraphOptions)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseModel\n\n                \n            \n            \n                \n                        Defined in         BaseModel:47\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    expression\n                                    \n                                                string | Record\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                            Objection.FetchGraphOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger'\n\nimport { IsNotEmpty, IsString, MaxLength, MinLength } from 'class-validator'\nimport type { JSONSchema, ModelObject, PartialModelObject } from 'objection'\n\nimport { BaseModel } from '../database/models/base.model'\n\ninterface ITag {\n    name: string\n}\n\nexport class Tag extends BaseModel implements ITag {\n    static tableName = 'tags'\n\n    name!: string\n\n    // JSON schema is not the database schema! Nothing is generated based on this.\n    // This is only used for validation. Whenever a model instance is created it is checked against this schema.\n    static jsonSchema: JSONSchema = {\n        type: 'object',\n        required: ['name'],\n        properties: {\n            id: { type: 'integer' },\n            name: { type: 'string', minLength: 2, maxLength: 255 },\n        },\n    }\n}\n\n// The `ModelObject` generic gives you a clean interface that can be used on the frontend, without any of the objection Model class properties or methods.\nexport type TagShape = ModelObject\nexport type PartialTagShape = PartialModelObject\n\nexport class CreateTagsDto implements ITag {\n    @IsString()\n    @IsNotEmpty()\n    @MinLength(2)\n    @MaxLength(36)\n    name!: string\n}\n\nexport class UpdateTagsDto extends PartialType(CreateTagsDto) {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TagsController.html":{"url":"controllers/TagsController.html","title":"controller - TagsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  TagsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/tags.controller.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            create\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    create(input: CreateTagsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n            \n                \n                    Defined in src/tags/tags.controller.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    input\n                                    \n                                                CreateTagsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: number, input: UpdateTagsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put(':id')\n                \n            \n\n            \n                \n                    Defined in src/tags/tags.controller.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    input\n                                    \n                                                UpdateTagsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Body,\n    Controller,\n    Delete,\n    Get,\n    HttpStatus,\n    Param,\n    ParseIntPipe,\n    Post,\n    Put,\n    UseGuards,\n} from '@nestjs/common'\nimport { AuthGuard } from '@nestjs/passport'\nimport { ApiBearerAuth, ApiTags } from '@nestjs/swagger'\n\nimport { CrudController } from '../base/crud'\nimport { CreateTagsDto, Tag, UpdateTagsDto } from './tag.model'\nimport { TagsService } from './tags.service'\n\n@Controller(TagsController.path)\n@ApiTags(TagsController.name)\n@ApiBearerAuth()\n@UseGuards(AuthGuard('jwt'))\nexport class TagsController extends CrudController {\n    static path = 'tags'\n\n    constructor(readonly service: TagsService) {\n        super(service)\n    }\n\n    @Post()\n    async create(@Body() input: CreateTagsDto) {\n        const data = await this.service.create(input)\n\n        return {\n            data,\n            statusCode: HttpStatus.CREATED,\n        }\n    }\n\n    @Put(':id')\n    async update(\n        @Param('id', ParseIntPipe) id: number,\n        @Body() input: UpdateTagsDto,\n    ) {\n        const data = await this.service.update(id, input)\n\n        return {\n            data,\n            statusCode: !data ? HttpStatus.NO_CONTENT : HttpStatus.OK,\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TagsModule.html":{"url":"modules/TagsModule.html","title":"module - TagsModule","body":"\n                   \n\n\n\n\n    Modules\n    TagsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_TagsModule\n\n\n\ncluster_TagsModule_exports\n\n\n\ncluster_TagsModule_providers\n\n\n\n\nTagsService \n\nTagsService \n\n\n\nTagsModule\n\nTagsModule\n\nTagsService  -->\n\nTagsModule->TagsService \n\n\n\n\n\nTagsService\n\nTagsService\n\nTagsModule -->\n\nTagsService->TagsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/tags/tags.module.ts\n        \n\n\n        \n            Description\n        \n        \n            Tags module\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            TagsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            TagsController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            TagsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common'\n\nimport { TagsController } from './tags.controller'\nimport { TagsService } from './tags.service'\n\n/**\n * Tags module\n */\n@Module({\n    controllers: [TagsController],\n    providers: [TagsService],\n    exports: [TagsService],\n})\nexport class TagsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TagsService.html":{"url":"injectables/TagsService.html","title":"injectable - TagsService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  TagsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/tags.service.ts\n        \n\n\n            \n                Extends\n            \n            \n                        CrudService\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                findOneByEmail\n                            \n                            \n                                    Async\n                                findOneById\n                            \n                            \n                                    Async\n                                paginatedFindAll\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(model: ModelClass)\n                    \n                \n                        \n                            \n                                Defined in src/tags/tags.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        model\n                                                  \n                                                        \n                                                                        ModelClass\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            create\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    create(data: CreateTagsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/tags/tags.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                CreateTagsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            create\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    create(input: CreateUserDto | CreateTagsDto | T)\n                \n            \n\n\n            \n                \n                    Inherited from         CrudService\n\n                \n            \n            \n                \n                        Defined in         CrudService:99\n\n                \n            \n\n\n            \n                \n                    Created a entry and return it\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    input\n                                    \n                                                CreateUserDto | CreateTagsDto | T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n\n            \n                \n                    Inherited from         CrudService\n\n                \n            \n            \n                \n                        Defined in         CrudService:27\n\n                \n            \n\n\n            \n                \n                    Finds all entries and return the result\n\n\n                    \n                        Returns :     {}\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(filter: object)\n                \n            \n\n\n            \n                \n                    Inherited from         CrudService\n\n                \n            \n            \n                \n                        Defined in         CrudService:56\n\n                \n            \n\n\n            \n                \n                    Finds one entry with where filter and return the result\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    filter\n                                    \n                                                object\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOneByEmail\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneByEmail(email: string)\n                \n            \n\n\n            \n                \n                    Inherited from         CrudService\n\n                \n            \n            \n                \n                        Defined in         CrudService:78\n\n                \n            \n\n\n            \n                \n                    Finds onw entry by email and return the result\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOneById\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneById(id: number)\n                \n            \n\n\n            \n                \n                    Inherited from         CrudService\n\n                \n            \n            \n                \n                        Defined in         CrudService:67\n\n                \n            \n\n\n            \n                \n                    Finds paginated entries and return the result\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            paginatedFindAll\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    paginatedFindAll(paginationParams: PaginationParams)\n                \n            \n\n\n            \n                \n                    Inherited from         CrudService\n\n                \n            \n            \n                \n                        Defined in         CrudService:38\n\n                \n            \n\n\n            \n                \n                    Finds paginated entries and return the result\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    paginationParams\n                                    \n                                                PaginationParams\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            remove\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: number)\n                \n            \n\n\n            \n                \n                    Inherited from         CrudService\n\n                \n            \n            \n                \n                        Defined in         CrudService:89\n\n                \n            \n\n\n            \n                \n                    Soft-deletes a entry and return it\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: number, input: Partial)\n                \n            \n\n\n            \n                \n                    Inherited from         CrudService\n\n                \n            \n            \n                \n                        Defined in         CrudService:112\n\n                \n            \n\n\n            \n                \n                    Updates a entry and return it\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    input\n                                    \n                                            Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, Inject, Injectable } from '@nestjs/common'\n\nimport { ModelClass } from 'objection'\n\nimport { CrudService } from '../base/crud'\nimport { CreateTagsDto, Tag } from './tag.model'\n\n@Injectable()\nexport class TagsService extends CrudService {\n    constructor(@Inject(Tag.name) readonly model: ModelClass) {\n        super(model)\n    }\n\n    async create(data: CreateTagsDto) {\n        const tag = await this.findOne({ name: data.name })\n\n        if (tag)\n            return Promise.reject(\n                new BadRequestException([`Duplicate tag name: ${tag.name}`]),\n            )\n\n        return super.create(data)\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TimeoutInterceptor.html":{"url":"injectables/TimeoutInterceptor.html","title":"injectable - TimeoutInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  TimeoutInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infra/interceptors/timeout.ts\n        \n\n            \n                Description\n            \n            \n                Timeout interceptor is Observer which terminate request if it takes more than timeout value\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            intercept\n                        \n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n            \n                \n                    Defined in src/infra/interceptors/timeout.ts:25\n                \n            \n\n\n            \n                \n                    Interceptor Method to implement a custom interceptor.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        an ExecutionContext object providing methods to access the\nroute handler and class about to be invoked.\n\n                                    \n                                \n                                \n                                    next\n                                    \n                                            CallHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        a reference to the CallHandler, which provides access to an\nObservable representing the response stream from the route handler.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n    Injectable,\n    NestInterceptor,\n    ExecutionContext,\n    CallHandler,\n    RequestTimeoutException,\n} from '@nestjs/common'\n\nimport { Observable, throwError, TimeoutError } from 'rxjs'\nimport { catchError, timeout } from 'rxjs/operators'\n\n/**\n * Timeout interceptor is Observer which terminate request if it takes more than timeout value\n */\n@Injectable()\nexport class TimeoutInterceptor implements NestInterceptor {\n    /**\n     * Interceptor Method to implement a custom interceptor.\n     *\n     * @param context an `ExecutionContext` object providing methods to access the\n     * route handler and class about to be invoked.\n     * @param next a reference to the `CallHandler`, which provides access to an\n     * `Observable` representing the response stream from the route handler.\n     */\n    intercept(context: ExecutionContext, next: CallHandler): Observable {\n        return next.handle().pipe(\n            timeout(10000), // end request after 10_000 milliseconds\n\n            catchError((e) => {\n                if (e instanceof TimeoutError) {\n                    return throwError(new RequestTimeoutException())\n                }\n\n                return throwError(e)\n            }),\n        )\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TokenPayload.html":{"url":"interfaces/TokenPayload.html","title":"interface - TokenPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  TokenPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/tokenPayload.interface.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        email\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        interface TokenPayload {\n    email: string\n}\n\nexport default TokenPayload\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TransformInterceptor.html":{"url":"injectables/TransformInterceptor.html","title":"injectable - TransformInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  TransformInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infra/interceptors/transform.ts\n        \n\n            \n                Description\n            \n            \n                Transform interceptor is Observer which transform response\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            intercept\n                        \n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n            \n                \n                    Defined in src/infra/interceptors/transform.ts:28\n                \n            \n\n\n            \n                \n                    Interceptor Method to implement a custom interceptor.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        an ExecutionContext object providing methods to access the\nroute handler and class about to be invoked.\n\n                                    \n                                \n                                \n                                    next\n                                    \n                                            CallHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        a reference to the CallHandler, which provides access to an\nObservable representing the response stream from the route handler.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n    Injectable,\n    NestInterceptor,\n    ExecutionContext,\n    CallHandler,\n} from '@nestjs/common'\n\nimport { Observable } from 'rxjs'\nimport { map } from 'rxjs/operators'\n\nexport interface Response {\n    data: T\n}\n\n/**\n * Transform interceptor is Observer which transform response\n */\n@Injectable()\nexport class TransformInterceptor implements NestInterceptor> {\n    /**\n     * Interceptor Method to implement a custom interceptor.\n     *\n     * @param context an `ExecutionContext` object providing methods to access the\n     * route handler and class about to be invoked.\n     * @param next a reference to the `CallHandler`, which provides access to an\n     * `Observable` representing the response stream from the route handler.\n     */\n    intercept(\n        context: ExecutionContext,\n        next: CallHandler,\n    ): Observable> {\n        return next.handle().pipe(map((data) => ({ data })))\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateTagsDto.html":{"url":"classes/UpdateTagsDto.html","title":"class - UpdateTagsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateTagsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/tag.model.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger'\n\nimport { IsNotEmpty, IsString, MaxLength, MinLength } from 'class-validator'\nimport type { JSONSchema, ModelObject, PartialModelObject } from 'objection'\n\nimport { BaseModel } from '../database/models/base.model'\n\ninterface ITag {\n    name: string\n}\n\nexport class Tag extends BaseModel implements ITag {\n    static tableName = 'tags'\n\n    name!: string\n\n    // JSON schema is not the database schema! Nothing is generated based on this.\n    // This is only used for validation. Whenever a model instance is created it is checked against this schema.\n    static jsonSchema: JSONSchema = {\n        type: 'object',\n        required: ['name'],\n        properties: {\n            id: { type: 'integer' },\n            name: { type: 'string', minLength: 2, maxLength: 255 },\n        },\n    }\n}\n\n// The `ModelObject` generic gives you a clean interface that can be used on the frontend, without any of the objection Model class properties or methods.\nexport type TagShape = ModelObject\nexport type PartialTagShape = PartialModelObject\n\nexport class CreateTagsDto implements ITag {\n    @IsString()\n    @IsNotEmpty()\n    @MinLength(2)\n    @MaxLength(36)\n    name!: string\n}\n\nexport class UpdateTagsDto extends PartialType(CreateTagsDto) {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/user.model.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger'\n\nimport * as bcrypt from 'bcrypt'\nimport {\n    IsString,\n    MinLength,\n    IsNotEmpty,\n    MaxLength,\n    IsEmail,\n    IsBoolean,\n} from 'class-validator'\nimport type { JSONSchema, Modifiers, PartialModelObject } from 'objection'\nimport { ModelObject, QueryContext } from 'objection'\n\nimport { BaseModel } from '../database/models/base.model'\n\ninterface IUser {\n    username: string\n    email: string\n    firstName?: string\n    lastName?: string\n    isActive: boolean\n    password: string\n}\n\nexport class User extends BaseModel implements IUser {\n    static tableName = 'users'\n\n    username!: string\n\n    email!: string\n\n    firstName?: string\n\n    lastName?: string\n\n    isActive!: boolean\n\n    password!: string\n\n    // JSON schema is not the database schema! Nothing is generated based on this.\n    // This is only used for validation. Whenever a model instance is created it is checked against this schema.\n    static jsonSchema: JSONSchema = {\n        type: 'object',\n        required: ['username', 'email', 'password'],\n        properties: {\n            id: { type: 'integer', readOnly: true },\n            username: { type: 'string', minLength: 3, maxLength: 255 },\n            email: {\n                type: 'string',\n                minLength: 3,\n                maxLength: 255,\n                format: 'email',\n            },\n            password: { type: 'string', minLength: 8, maxLength: 255 },\n            firstName: { type: 'string', minLength: 1, maxLength: 255 },\n            lastName: { type: 'string', minLength: 1, maxLength: 255 },\n            isActive: { type: 'boolean' },\n        },\n    }\n\n    // Modifiers are reusable query snippets that can be used in various places.\n    static modifiers: Modifiers = {\n        // Our example modifier is a a semi-dumb fuzzy name match. We split the name into pieces using whitespace\n        // and then try to partially match each of those pieces to both the `firstName` and the `lastName` fields.\n\n        searchByName(query, name: string) {\n            // This `where` simply creates parentheses so that other `where` statements don't get mixed with the these.\n\n            query.where((q) => {\n                for (const namePart of name.trim().split(/\\s+/)) {\n                    for (const column of ['firstName', 'lastName']) {\n                        q.orWhereRaw('lower(??) like ?', [\n                            column,\n                            `${namePart.toLowerCase()}%`,\n                        ])\n                    }\n                }\n            })\n        },\n    }\n\n    async hashPassword(password: string) {\n        const hash = await bcrypt.hash(password, 12)\n        return hash\n    }\n\n    async $beforeInsert(queryContext: QueryContext) {\n        await super.$beforeInsert(queryContext)\n        this.password = await this.hashPassword(this.password)\n    }\n\n    /*\n    async $beforeUpdate(opt: ModelOptions, queryContext: QueryContext) {\n        await super.$beforeUpdate(opt, queryContext)\n        this.password = await this.hashPassword(this.password)\n    }\n    */\n}\n\n// The `ModelObject` generic gives you a clean interface that can be used on the frontend, without any of the objection Model class properties or methods.\nexport type UserShape = ModelObject\nexport type PartialUserShape = PartialModelObject\n\nexport class CreateUserDto implements IUser {\n    @IsString()\n    @IsNotEmpty()\n    @MinLength(2)\n    @MaxLength(36)\n    username!: string\n\n    @IsEmail()\n    @IsNotEmpty()\n    @MinLength(2)\n    email!: string\n\n    @IsString()\n    @IsNotEmpty()\n    @MinLength(8)\n    password!: string\n\n    @IsString()\n    @IsNotEmpty()\n    @MinLength(2)\n    firstName?: string\n\n    @IsString()\n    @IsNotEmpty()\n    @MinLength(2)\n    lastName?: string\n\n    @IsBoolean()\n    isActive!: boolean\n}\n\nexport class UpdateUserDto extends PartialType(CreateUserDto) {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/User.html":{"url":"classes/User.html","title":"class - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/user.model.ts\n        \n\n\n            \n                Extends\n            \n            \n                        BaseModel\n            \n\n            \n                Implements\n            \n            \n                            IUser\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                    Optional\n                                firstName\n                            \n                            \n                                isActive\n                            \n                            \n                                    Static\n                                jsonSchema\n                            \n                            \n                                    Optional\n                                lastName\n                            \n                            \n                                    Static\n                                modifiers\n                            \n                            \n                                password\n                            \n                            \n                                    Static\n                                tableName\n                            \n                            \n                                username\n                            \n                            \n                                created_at\n                            \n                            \n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Static\n                                hidden\n                            \n                            \n                                id\n                            \n                            \n                                    Static\n                                QueryBuilder\n                            \n                            \n                                updated_at\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                $beforeInsert\n                            \n                            \n                                    Async\n                                hashPassword\n                            \n                            \n                                    Async\n                                $beforeUpdate\n                            \n                            \n                                    Async\n                                fetchRelation\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            email\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/users/user.model.ts:32\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            firstName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/users/user.model.ts:34\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isActive\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in src/users/user.model.ts:38\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            jsonSchema\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     JSONSchema\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        type: 'object',\n        required: ['username', 'email', 'password'],\n        properties: {\n            id: { type: 'integer', readOnly: true },\n            username: { type: 'string', minLength: 3, maxLength: 255 },\n            email: {\n                type: 'string',\n                minLength: 3,\n                maxLength: 255,\n                format: 'email',\n            },\n            password: { type: 'string', minLength: 8, maxLength: 255 },\n            firstName: { type: 'string', minLength: 1, maxLength: 255 },\n            lastName: { type: 'string', minLength: 1, maxLength: 255 },\n            isActive: { type: 'boolean' },\n        },\n    }\n                        \n                    \n                        \n                            \n                                    Defined in src/users/user.model.ts:44\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            lastName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/users/user.model.ts:36\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            modifiers\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Modifiers\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        // Our example modifier is a a semi-dumb fuzzy name match. We split the name into pieces using whitespace\n        // and then try to partially match each of those pieces to both the `firstName` and the `lastName` fields.\n\n        searchByName(query, name: string) {\n            // This `where` simply creates parentheses so that other `where` statements don't get mixed with the these.\n\n            query.where((q) => {\n                for (const namePart of name.trim().split(/\\s+/)) {\n                    for (const column of ['firstName', 'lastName']) {\n                        q.orWhereRaw('lower(??) like ?', [\n                            column,\n                            `${namePart.toLowerCase()}%`,\n                        ])\n                    }\n                }\n            })\n        },\n    }\n                        \n                    \n                        \n                            \n                                    Defined in src/users/user.model.ts:64\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/users/user.model.ts:40\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            tableName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'users'\n                        \n                    \n                        \n                            \n                                    Defined in src/users/user.model.ts:28\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            username\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/users/user.model.ts:30\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            created_at\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                            \n                                \n                                    Inherited from         BaseModel\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseModel:39\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            deleted_at\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     any | null\n\n                        \n                    \n                            \n                                \n                                    Inherited from         BaseModel\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseModel:43\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            hidden\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : [\n        'salt',\n        'password',\n        'created_at',\n        'updated_at',\n        // 'deleted_at'\n    ]\n                        \n                    \n                            \n                                \n                                    Inherited from         BaseModel\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseModel:25\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                            \n                                \n                                    Inherited from         BaseModel\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseModel:37\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            QueryBuilder\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : CustomQueryBuilder\n                        \n                    \n                            \n                                \n                                    Inherited from         BaseModel\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseModel:35\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updated_at\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                            \n                                \n                                    Inherited from         BaseModel\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseModel:41\n\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            $beforeInsert\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    $beforeInsert(queryContext: QueryContext)\n                \n            \n\n\n            \n                \n                    Defined in src/users/user.model.ts:89\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryContext\n                                    \n                                            QueryContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            hashPassword\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    hashPassword(password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/user.model.ts:84\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            $beforeUpdate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    $beforeUpdate(opt: ModelOptions, queryContext: QueryContext)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseModel\n\n                \n            \n            \n                \n                        Defined in         BaseModel:60\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    opt\n                                    \n                                            ModelOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    queryContext\n                                    \n                                            QueryContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            fetchRelation\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    fetchRelation(expression: string | Record, options: Objection.FetchGraphOptions)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseModel\n\n                \n            \n            \n                \n                        Defined in         BaseModel:47\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    expression\n                                    \n                                                string | Record\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                            Objection.FetchGraphOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger'\n\nimport * as bcrypt from 'bcrypt'\nimport {\n    IsString,\n    MinLength,\n    IsNotEmpty,\n    MaxLength,\n    IsEmail,\n    IsBoolean,\n} from 'class-validator'\nimport type { JSONSchema, Modifiers, PartialModelObject } from 'objection'\nimport { ModelObject, QueryContext } from 'objection'\n\nimport { BaseModel } from '../database/models/base.model'\n\ninterface IUser {\n    username: string\n    email: string\n    firstName?: string\n    lastName?: string\n    isActive: boolean\n    password: string\n}\n\nexport class User extends BaseModel implements IUser {\n    static tableName = 'users'\n\n    username!: string\n\n    email!: string\n\n    firstName?: string\n\n    lastName?: string\n\n    isActive!: boolean\n\n    password!: string\n\n    // JSON schema is not the database schema! Nothing is generated based on this.\n    // This is only used for validation. Whenever a model instance is created it is checked against this schema.\n    static jsonSchema: JSONSchema = {\n        type: 'object',\n        required: ['username', 'email', 'password'],\n        properties: {\n            id: { type: 'integer', readOnly: true },\n            username: { type: 'string', minLength: 3, maxLength: 255 },\n            email: {\n                type: 'string',\n                minLength: 3,\n                maxLength: 255,\n                format: 'email',\n            },\n            password: { type: 'string', minLength: 8, maxLength: 255 },\n            firstName: { type: 'string', minLength: 1, maxLength: 255 },\n            lastName: { type: 'string', minLength: 1, maxLength: 255 },\n            isActive: { type: 'boolean' },\n        },\n    }\n\n    // Modifiers are reusable query snippets that can be used in various places.\n    static modifiers: Modifiers = {\n        // Our example modifier is a a semi-dumb fuzzy name match. We split the name into pieces using whitespace\n        // and then try to partially match each of those pieces to both the `firstName` and the `lastName` fields.\n\n        searchByName(query, name: string) {\n            // This `where` simply creates parentheses so that other `where` statements don't get mixed with the these.\n\n            query.where((q) => {\n                for (const namePart of name.trim().split(/\\s+/)) {\n                    for (const column of ['firstName', 'lastName']) {\n                        q.orWhereRaw('lower(??) like ?', [\n                            column,\n                            `${namePart.toLowerCase()}%`,\n                        ])\n                    }\n                }\n            })\n        },\n    }\n\n    async hashPassword(password: string) {\n        const hash = await bcrypt.hash(password, 12)\n        return hash\n    }\n\n    async $beforeInsert(queryContext: QueryContext) {\n        await super.$beforeInsert(queryContext)\n        this.password = await this.hashPassword(this.password)\n    }\n\n    /*\n    async $beforeUpdate(opt: ModelOptions, queryContext: QueryContext) {\n        await super.$beforeUpdate(opt, queryContext)\n        this.password = await this.hashPassword(this.password)\n    }\n    */\n}\n\n// The `ModelObject` generic gives you a clean interface that can be used on the frontend, without any of the objection Model class properties or methods.\nexport type UserShape = ModelObject\nexport type PartialUserShape = PartialModelObject\n\nexport class CreateUserDto implements IUser {\n    @IsString()\n    @IsNotEmpty()\n    @MinLength(2)\n    @MaxLength(36)\n    username!: string\n\n    @IsEmail()\n    @IsNotEmpty()\n    @MinLength(2)\n    email!: string\n\n    @IsString()\n    @IsNotEmpty()\n    @MinLength(8)\n    password!: string\n\n    @IsString()\n    @IsNotEmpty()\n    @MinLength(2)\n    firstName?: string\n\n    @IsString()\n    @IsNotEmpty()\n    @MinLength(2)\n    lastName?: string\n\n    @IsBoolean()\n    isActive!: boolean\n}\n\nexport class UpdateUserDto extends PartialType(CreateUserDto) {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/UserPost.html":{"url":"interfaces/UserPost.html","title":"interface - UserPost","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  UserPost\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/domain.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        adCorporateLogoUrl\n                                \n                                \n                                        commentsCount\n                                \n                                \n                                        corporateDescription\n                                \n                                \n                                        corporateName\n                                \n                                \n                                        isUserReactedToPost\n                                \n                                \n                                        ownPage\n                                \n                                \n                                        postBy\n                                \n                                \n                                        postId\n                                \n                                \n                                        postImage\n                                \n                                \n                                        postTime\n                                \n                                \n                                        postType\n                                \n                                \n                                        postVideo\n                                \n                                \n                                        reactionsCount\n                                \n                                \n                                        timeAgo\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        adCorporateLogoUrl\n                                    \n                                \n                                \n                                    \n                                        adCorporateLogoUrl:     string | null\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string | null\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        commentsCount\n                                    \n                                \n                                \n                                    \n                                        commentsCount:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        corporateDescription\n                                    \n                                \n                                \n                                    \n                                        corporateDescription:     string | null\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string | null\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        corporateName\n                                    \n                                \n                                \n                                    \n                                        corporateName:     string | null\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string | null\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        isUserReactedToPost\n                                    \n                                \n                                \n                                    \n                                        isUserReactedToPost:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        ownPage\n                                    \n                                \n                                \n                                    \n                                        ownPage:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        postBy\n                                    \n                                \n                                \n                                    \n                                        postBy:         PostedByUser\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         PostedByUser\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        postId\n                                    \n                                \n                                \n                                    \n                                        postId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        postImage\n                                    \n                                \n                                \n                                    \n                                        postImage:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        postTime\n                                    \n                                \n                                \n                                    \n                                        postTime:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        postType\n                                    \n                                \n                                \n                                    \n                                        postType:         PostType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         PostType\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        postVideo\n                                    \n                                \n                                \n                                    \n                                        postVideo:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        reactionsCount\n                                    \n                                \n                                \n                                    \n                                        reactionsCount:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        timeAgo\n                                    \n                                \n                                \n                                    \n                                        timeAgo:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { HttpStatus } from '@nestjs/common'\n\nexport type Results =\n    | GetAppLaunchData\n    | GetUserProfile\n    | GetUserPosts\n    | GetComments\n    | GetRescueList\n    | GetFollowers\n    | GetFollowing\n\nexport type APIError = Error | string | null\n\nexport interface Result {\n    data: T\n    error?: APIError\n    message?: string | string[]\n    statusCode: HttpStatus\n}\n\nexport interface APIResponse {\n    data: T\n    error?: APIError\n    message?: string | string[]\n    statusCode: HttpStatus\n\n    count?: number\n    page?: number\n    pageCount?: number\n    total?: number\n}\n\nexport interface GetAppLaunchData {\n    link: 'api:/'\n    response: APIResponse\n}\n\nexport interface GetUserProfile {\n    link: 'api:v1/user/getUserProfile?userId=25'\n    response: APIResponse\n}\n\nexport interface GetUserPosts {\n    link: 'api:v1/user/getUserPosts?pageNo=0&pageSize=25'\n    response: APIResponse\n}\n\nexport interface GetRescueList {\n    link: 'api:v1/rescue/getRescueList?pageNo=0&pageSize=10&status=pending|inProgress|completed|nearest'\n    response: APIResponse\n}\n\nexport interface GetComments {\n    link: 'api:v1/rescue/getComments?pageNo=0&pageSize=10&postId=1230'\n    response: APIResponse\n}\n\nexport interface GetFollowers {\n    link: 'api:v1/rescue/getUserFollowers?userId=1230'\n    response: APIResponse\n}\n\nexport interface GetFollowing {\n    link: 'api:v1/rescue/getUserFollowing?userId=1230'\n    response: APIResponse\n}\n\nexport interface AppLaunchAction {\n    actionId: number\n    action: string\n    isActive: boolean\n    subject?: string\n}\n\nexport interface User {\n    usesId: number\n\n    coverImage: string\n    following: boolean\n    gender: string\n    isOwnProfile: number\n    isRescuer: boolean\n    latitude: number\n    longitude: number\n    numberOfFollowers: number\n    numberOfFollowing: number\n    numberOfPosts: number\n    numberOfRescuesCompleted: number\n    numberOfRescuesCreated: number\n    numberOfRescuesInProgress: number\n    profileImage: string\n    rescuer: boolean\n    userAddress: string\n    userContacts: string\n    userEmail: string\n    userName: string\n    badge: {\n        badgeId: number\n        badgeName: string\n        badgeDescription: string\n        recuesCompletionNeeded: number\n    }\n    setting: {\n        showMyContacts: boolean\n        getNotifications: boolean\n    }\n}\n\nexport interface PostType {\n    postTypeId: number\n    postType: string\n}\n\nexport interface PostedByUser {\n    usesId: number\n    badgeName: string\n    following: boolean\n    profileImage: string\n    rescuer: boolean\n    userName: string\n}\n\nexport interface UserPost {\n    postId: number\n    commentsCount: number\n    isUserReactedToPost: boolean\n    ownPage: boolean\n    postBy: PostedByUser\n    postImage: string\n    postTime: string\n    postType: PostType\n    postVideo: string\n    reactionsCount: number\n    timeAgo: string\n\n    adCorporateLogoUrl: string | null\n    corporateDescription: string | null\n    corporateName: string | null\n}\n\nexport interface UserPosts {\n    isRecent: boolean\n    feed: UserPost[]\n}\n\nexport interface Rescues {\n    rescueId: number\n    animalImageUrl: string\n    distance: number\n    distanceAway: string\n    emergencyType: string\n    postedBy: string\n    postedMinAgo: string\n    rescueDate: Date\n    rescuedPetName: string\n    rescueLocality: string\n    rescuers: {\n        contact: number\n        name: string\n        profileId: number\n        profileImageUrl: string\n        rescues: boolean\n        showMyNumber: boolean\n    }\n    rescueStatus: string\n    viewsCont: number\n}\n\nexport interface RescueLists {\n    rescues: Rescues[]\n}\n\nexport interface Comment {\n    commentId: number\n    comment: string\n    commentedUseName: string\n    commentedUserId: number\n    timeAgo: string\n}\n\nexport interface Comments {\n    comments: Comment[]\n}\n\nexport interface Follower {\n    userId: number\n    userName: string\n    profileImage: string\n    areYouFollowing: boolean\n    showRemoveOption: boolean\n}\n\nexport type Following = Follower\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/UserPosts.html":{"url":"interfaces/UserPosts.html","title":"interface - UserPosts","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  UserPosts\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/domain.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        feed\n                                \n                                \n                                        isRecent\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        feed\n                                    \n                                \n                                \n                                    \n                                        feed:         UserPost[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         UserPost[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        isRecent\n                                    \n                                \n                                \n                                    \n                                        isRecent:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { HttpStatus } from '@nestjs/common'\n\nexport type Results =\n    | GetAppLaunchData\n    | GetUserProfile\n    | GetUserPosts\n    | GetComments\n    | GetRescueList\n    | GetFollowers\n    | GetFollowing\n\nexport type APIError = Error | string | null\n\nexport interface Result {\n    data: T\n    error?: APIError\n    message?: string | string[]\n    statusCode: HttpStatus\n}\n\nexport interface APIResponse {\n    data: T\n    error?: APIError\n    message?: string | string[]\n    statusCode: HttpStatus\n\n    count?: number\n    page?: number\n    pageCount?: number\n    total?: number\n}\n\nexport interface GetAppLaunchData {\n    link: 'api:/'\n    response: APIResponse\n}\n\nexport interface GetUserProfile {\n    link: 'api:v1/user/getUserProfile?userId=25'\n    response: APIResponse\n}\n\nexport interface GetUserPosts {\n    link: 'api:v1/user/getUserPosts?pageNo=0&pageSize=25'\n    response: APIResponse\n}\n\nexport interface GetRescueList {\n    link: 'api:v1/rescue/getRescueList?pageNo=0&pageSize=10&status=pending|inProgress|completed|nearest'\n    response: APIResponse\n}\n\nexport interface GetComments {\n    link: 'api:v1/rescue/getComments?pageNo=0&pageSize=10&postId=1230'\n    response: APIResponse\n}\n\nexport interface GetFollowers {\n    link: 'api:v1/rescue/getUserFollowers?userId=1230'\n    response: APIResponse\n}\n\nexport interface GetFollowing {\n    link: 'api:v1/rescue/getUserFollowing?userId=1230'\n    response: APIResponse\n}\n\nexport interface AppLaunchAction {\n    actionId: number\n    action: string\n    isActive: boolean\n    subject?: string\n}\n\nexport interface User {\n    usesId: number\n\n    coverImage: string\n    following: boolean\n    gender: string\n    isOwnProfile: number\n    isRescuer: boolean\n    latitude: number\n    longitude: number\n    numberOfFollowers: number\n    numberOfFollowing: number\n    numberOfPosts: number\n    numberOfRescuesCompleted: number\n    numberOfRescuesCreated: number\n    numberOfRescuesInProgress: number\n    profileImage: string\n    rescuer: boolean\n    userAddress: string\n    userContacts: string\n    userEmail: string\n    userName: string\n    badge: {\n        badgeId: number\n        badgeName: string\n        badgeDescription: string\n        recuesCompletionNeeded: number\n    }\n    setting: {\n        showMyContacts: boolean\n        getNotifications: boolean\n    }\n}\n\nexport interface PostType {\n    postTypeId: number\n    postType: string\n}\n\nexport interface PostedByUser {\n    usesId: number\n    badgeName: string\n    following: boolean\n    profileImage: string\n    rescuer: boolean\n    userName: string\n}\n\nexport interface UserPost {\n    postId: number\n    commentsCount: number\n    isUserReactedToPost: boolean\n    ownPage: boolean\n    postBy: PostedByUser\n    postImage: string\n    postTime: string\n    postType: PostType\n    postVideo: string\n    reactionsCount: number\n    timeAgo: string\n\n    adCorporateLogoUrl: string | null\n    corporateDescription: string | null\n    corporateName: string | null\n}\n\nexport interface UserPosts {\n    isRecent: boolean\n    feed: UserPost[]\n}\n\nexport interface Rescues {\n    rescueId: number\n    animalImageUrl: string\n    distance: number\n    distanceAway: string\n    emergencyType: string\n    postedBy: string\n    postedMinAgo: string\n    rescueDate: Date\n    rescuedPetName: string\n    rescueLocality: string\n    rescuers: {\n        contact: number\n        name: string\n        profileId: number\n        profileImageUrl: string\n        rescues: boolean\n        showMyNumber: boolean\n    }\n    rescueStatus: string\n    viewsCont: number\n}\n\nexport interface RescueLists {\n    rescues: Rescues[]\n}\n\nexport interface Comment {\n    commentId: number\n    comment: string\n    commentedUseName: string\n    commentedUserId: number\n    timeAgo: string\n}\n\nexport interface Comments {\n    comments: Comment[]\n}\n\nexport interface Follower {\n    userId: number\n    userName: string\n    profileImage: string\n    areYouFollowing: boolean\n    showRemoveOption: boolean\n}\n\nexport type Following = Follower\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findOneByEmail\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            create\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    create(input: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Create a User', description: 'Create a new User and store it in database'})@Post()\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    input\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOneByEmail\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneByEmail(email: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Get one record by email', description: 'Get one record from database with provided by email'})@Get()\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: number, input: UpdateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Update one users by id', description: 'Update one users by id'})@Put(':id')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    input\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Controller,\n    Get,\n    Post,\n    Body,\n    Put,\n    Param,\n    Delete,\n    ParseIntPipe,\n    Query,\n    HttpStatus,\n} from '@nestjs/common'\nimport { ApiOperation, ApiTags } from '@nestjs/swagger'\n\nimport { CrudController } from '../base/crud'\nimport { CreateUserDto, UpdateUserDto, User } from './user.model'\nimport { UsersService } from './users.service'\n\n@Controller(UsersController.path)\n@ApiTags(UsersController.name)\nexport class UsersController extends CrudController {\n    static path = 'users'\n\n    constructor(readonly service: UsersService) {\n        super(service)\n    }\n\n    @ApiOperation({\n        summary: 'Get one record by email',\n        description: 'Get one record from database with provided by email',\n    })\n    @Get()\n    async findOneByEmail(@Query() email: string) {\n        return this.service.findOneByEmail(email)\n    }\n\n    @ApiOperation({\n        summary: 'Create a User',\n        description: 'Create a new User and store it in database',\n    })\n    @Post()\n    async create(@Body() input: CreateUserDto) {\n        const data = await this.service.create(input)\n\n        return {\n            data,\n            statusCode: HttpStatus.CREATED,\n        }\n    }\n\n    @ApiOperation({\n        summary: 'Update one users by id',\n        description: 'Update one users by id',\n    })\n    @Put(':id')\n    async update(\n        @Param('id', ParseIntPipe) id: number,\n        @Body() input: UpdateUserDto,\n    ) {\n        const data = await this.service.update(id, input)\n\n        return {\n            data,\n            statusCode: !data ? HttpStatus.NO_CONTENT : HttpStatus.OK,\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nUsersService \n\nUsersService \n\n\n\nUsersModule\n\nUsersModule\n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n        \n            Description\n        \n        \n            Users module\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common'\n\nimport { UsersController } from './users.controller'\nimport { UsersService } from './users.service'\n\n/**\n * Users module\n */\n@Module({\n    controllers: [UsersController],\n    providers: [UsersService],\n    exports: [UsersService],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.service.ts\n        \n\n\n            \n                Extends\n            \n            \n                        CrudService\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                findOneByEmail\n                            \n                            \n                                    Async\n                                hashPassword\n                            \n                            \n                                    Async\n                                update\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                findOneByEmail\n                            \n                            \n                                    Async\n                                findOneById\n                            \n                            \n                                    Async\n                                paginatedFindAll\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(model: ModelClass)\n                    \n                \n                        \n                            \n                                Defined in src/users/users.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        model\n                                                  \n                                                        \n                                                                        ModelClass\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            create\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    create(user: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: string | number)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            string | number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOneByEmail\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneByEmail(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            hashPassword\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    hashPassword(password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: number, user: UpdateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            create\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    create(input: CreateUserDto | CreateTagsDto | T)\n                \n            \n\n\n            \n                \n                    Inherited from         CrudService\n\n                \n            \n            \n                \n                        Defined in         CrudService:99\n\n                \n            \n\n\n            \n                \n                    Created a entry and return it\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    input\n                                    \n                                                CreateUserDto | CreateTagsDto | T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n\n            \n                \n                    Inherited from         CrudService\n\n                \n            \n            \n                \n                        Defined in         CrudService:27\n\n                \n            \n\n\n            \n                \n                    Finds all entries and return the result\n\n\n                    \n                        Returns :     {}\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(filter: object)\n                \n            \n\n\n            \n                \n                    Inherited from         CrudService\n\n                \n            \n            \n                \n                        Defined in         CrudService:56\n\n                \n            \n\n\n            \n                \n                    Finds one entry with where filter and return the result\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    filter\n                                    \n                                                object\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOneByEmail\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneByEmail(email: string)\n                \n            \n\n\n            \n                \n                    Inherited from         CrudService\n\n                \n            \n            \n                \n                        Defined in         CrudService:78\n\n                \n            \n\n\n            \n                \n                    Finds onw entry by email and return the result\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOneById\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneById(id: number)\n                \n            \n\n\n            \n                \n                    Inherited from         CrudService\n\n                \n            \n            \n                \n                        Defined in         CrudService:67\n\n                \n            \n\n\n            \n                \n                    Finds paginated entries and return the result\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            paginatedFindAll\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    paginatedFindAll(paginationParams: PaginationParams)\n                \n            \n\n\n            \n                \n                    Inherited from         CrudService\n\n                \n            \n            \n                \n                        Defined in         CrudService:38\n\n                \n            \n\n\n            \n                \n                    Finds paginated entries and return the result\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    paginationParams\n                                    \n                                                PaginationParams\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            remove\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: number)\n                \n            \n\n\n            \n                \n                    Inherited from         CrudService\n\n                \n            \n            \n                \n                        Defined in         CrudService:89\n\n                \n            \n\n\n            \n                \n                    Soft-deletes a entry and return it\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: number, input: Partial)\n                \n            \n\n\n            \n                \n                    Inherited from         CrudService\n\n                \n            \n            \n                \n                        Defined in         CrudService:112\n\n                \n            \n\n\n            \n                \n                    Updates a entry and return it\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    input\n                                    \n                                            Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable, NotFoundException } from '@nestjs/common'\n\nimport * as bcrypt from 'bcrypt'\nimport { ModelClass } from 'objection'\n\nimport { CrudService } from '../base/crud'\nimport { CreateUserDto, UpdateUserDto, User } from './user.model'\n\n@Injectable()\nexport class UsersService extends CrudService {\n    constructor(@Inject(User.name) readonly model: ModelClass) {\n        super(model)\n    }\n\n    async hashPassword(password: string) {\n        return await bcrypt.hash(password, 12)\n    }\n\n    async findOne(id: string | number) {\n        const data = await this.model.query().findById(id).first()\n\n        if (data) return data\n\n        return Promise.reject(new NotFoundException())\n    }\n\n    async findOneByEmail(email: string) {\n        const data = await this.model.query().findOne({ email })\n\n        if (data) return data\n\n        return Promise.reject(new NotFoundException())\n    }\n\n    async create(user: CreateUserDto) {\n        return this.model.query().insertAndFetch(user)\n    }\n\n    async update(id: number, user: UpdateUserDto) {\n        if (user?.password) user.password = await this.hashPassword(user.password) // eslint-disable-line no-param-reassign\n\n        return this.model.query().patchAndFetchById(id, user)\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ValidationFailedFilter.html":{"url":"classes/ValidationFailedFilter.html","title":"class - ValidationFailedFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ValidationFailedFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infra/filters/validation-failed.filter.ts\n        \n\n            \n                Description\n            \n            \n                Validation Failed Exception Filter\n\n            \n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            catch\n                        \n                        \n                    \n                \n            \n            \n                \ncatch(exception: ValidationError, host: ArgumentsHost)\n                \n            \n\n\n            \n                \n                    Defined in src/infra/filters/validation-failed.filter.ts:17\n                \n            \n\n\n            \n                \n                    Method to implement a custom exception filter.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                            ValidationError\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the class of the exception being handled\n\n                                    \n                                \n                                \n                                    host\n                                    \n                                            ArgumentsHost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        used to access an array of arguments for\nthe in-flight request\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ArgumentsHost, Catch, ExceptionFilter, HttpStatus } from '@nestjs/common'\n\nimport { ValidationError } from 'objection'\n\n/**\n * Validation Failed Exception Filter\n */\n@Catch(ValidationError)\nexport class ValidationFailedFilter implements ExceptionFilter {\n    /**\n     * Method to implement a custom exception filter.\n     *\n     * @param exception the class of the exception being handled\n     * @param host used to access an array of arguments for\n     * the in-flight request\n     */\n    catch(exception: ValidationError, host: ArgumentsHost) {\n        const ctx = host.switchToHttp()\n        const response = ctx.getResponse()\n        const request = ctx.getRequest()\n        const status = HttpStatus.PRECONDITION_FAILED\n\n        const {\n            statusCode: validationErrorCode,\n            message,\n            data, // ErrorHash?\n            type, // ValidationErrorType\n        } = exception\n\n        // @ts-ignore\n        response.status(status).json({\n            data,\n            type,\n            message,\n            validationErrorCode,\n\n            statusCode: status,\n\n            path: request.url,\n            timestamp: new Date().toISOString(),\n        })\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.module.ts\n            \n            variable\n            ConfigModuleOptions\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            class\n            LoginCredsDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/auth/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/local.strategy.ts\n            \n            injectable\n            LocalStrategy\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/auth/spec/mocks.ts\n            \n            variable\n            mockedConfigService\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/spec/mocks.ts\n            \n            variable\n            mockedJwtService\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/tokenPayload.interface.ts\n            \n            interface\n            TokenPayload\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/base/crud/crud.controller.ts\n            \n            class\n            CrudController\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/base/crud/crud.service.interface.ts\n            \n            interface\n            ICrudService\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                src/base/crud/crud.service.ts\n            \n            class\n            CrudService\n            \n                100 %\n                (10/10)\n            \n        \n        \n            \n                \n                src/base/crud/pagination.ts\n            \n            class\n            PaginationParams\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/base/crud/pagination.ts\n            \n            interface\n            IPaginationResult\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/base/moment-extend.ts\n            \n            variable\n            moment\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/base/swagger-gen/api-errors.decorator.ts\n            \n            class\n            ApiException\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/base/swagger-gen/api-errors.decorator.ts\n            \n            function\n            ApiErrors\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/base/swagger-gen/crud-routes.factory.ts\n            \n            class\n            CrudConfigService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/base/swagger-gen/crud-routes.factory.ts\n            \n            class\n            CrudRoutesFactory\n            \n                0 %\n                (0/14)\n            \n        \n        \n            \n                \n                src/base/swagger-gen/crud-routes.factory.ts\n            \n            class\n            R\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/base/swagger-gen/crud-routes.factory.ts\n            \n            class\n            SerializeHelper\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/base/swagger-gen/crud-routes.factory.ts\n            \n            class\n            Swagger\n            \n                33 %\n                (2/6)\n            \n        \n        \n            \n                \n                src/base/swagger-gen/crud.decorator.ts\n            \n            variable\n            Crud\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/base/swagger-gen/utils/checks.util.ts\n            \n            variable\n            hasLength\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/base/swagger-gen/utils/checks.util.ts\n            \n            variable\n            hasValue\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/base/swagger-gen/utils/checks.util.ts\n            \n            variable\n            isArrayFull\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/base/swagger-gen/utils/checks.util.ts\n            \n            variable\n            isArrayStrings\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/base/swagger-gen/utils/checks.util.ts\n            \n            variable\n            isBoolean\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/base/swagger-gen/utils/checks.util.ts\n            \n            variable\n            isDate\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/base/swagger-gen/utils/checks.util.ts\n            \n            variable\n            isDateString\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/base/swagger-gen/utils/checks.util.ts\n            \n            variable\n            isEqual\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/base/swagger-gen/utils/checks.util.ts\n            \n            variable\n            isFalse\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/base/swagger-gen/utils/checks.util.ts\n            \n            variable\n            isFunction\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/base/swagger-gen/utils/checks.util.ts\n            \n            variable\n            isIn\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/base/swagger-gen/utils/checks.util.ts\n            \n            variable\n            isNil\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/base/swagger-gen/utils/checks.util.ts\n            \n            variable\n            isNull\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/base/swagger-gen/utils/checks.util.ts\n            \n            variable\n            isNumber\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/base/swagger-gen/utils/checks.util.ts\n            \n            variable\n            isNumeric\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/base/swagger-gen/utils/checks.util.ts\n            \n            variable\n            isObject\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/base/swagger-gen/utils/checks.util.ts\n            \n            variable\n            isObjectFull\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/base/swagger-gen/utils/checks.util.ts\n            \n            variable\n            isString\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/base/swagger-gen/utils/checks.util.ts\n            \n            variable\n            isStringFull\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/base/swagger-gen/utils/checks.util.ts\n            \n            variable\n            isTrue\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/base/swagger-gen/utils/checks.util.ts\n            \n            variable\n            isUndefined\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/base/swagger-gen/utils/checks.util.ts\n            \n            variable\n            isValue\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/base/swagger-gen/utils/obj.util.ts\n            \n            variable\n            getOwnPropNames\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/base/swagger-gen/utils/obj.util.ts\n            \n            variable\n            objKeys\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/base/swagger-gen/utils/other.ts\n            \n            interface\n            BaseRoute\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/base/swagger-gen/utils/other.ts\n            \n            interface\n            CrudOptions\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/base/swagger-gen/utils/other.ts\n            \n            interface\n            GetManyDefaultResponse\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/base/swagger-gen/utils/other.ts\n            \n            interface\n            ParamOption\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/base/swagger-gen/utils/other.ts\n            \n            interface\n            ParamsOptions\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/base/swagger-gen/utils/other.ts\n            \n            function\n            ApiProperty\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/base/swagger-gen/utils/other.ts\n            \n            function\n            safeRequire\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/base/swagger-gen/utils/other.ts\n            \n            variable\n            swagger\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/base/swagger-gen/utils/other.ts\n            \n            variable\n            swaggerConst\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/cron/cron.service.ts\n            \n            injectable\n            CronService\n            \n                52 %\n                (10/19)\n            \n        \n        \n            \n                \n                src/cron/persisted-cron.service.ts\n            \n            injectable\n            PersistedCronService\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                src/database/database.module.ts\n            \n            variable\n            databaseProviders\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/database.module.ts\n            \n            variable\n            modelProviders\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/database.module.ts\n            \n            variable\n            models\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/migrations/20190609143930_CreateTag.ts\n            \n            function\n            down\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/migrations/20190609143930_CreateTag.ts\n            \n            function\n            up\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/migrations/20190609143930_CreateTag.ts\n            \n            variable\n            tableName\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/migrations/20190609143930_CreateUser.ts\n            \n            function\n            down\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/migrations/20190609143930_CreateUser.ts\n            \n            function\n            up\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/migrations/20190609143930_CreateUser.ts\n            \n            variable\n            tableName\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/models/base.model.ts\n            \n            class\n            BaseModel\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/database/models/base.model.ts\n            \n            interface\n            IBaseModel\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/database/models/helpers.ts\n            \n            class\n            CustomQueryBuilder\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/database/models/helpers.ts\n            \n            function\n            isEmpty\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/database/models/helpers.ts\n            \n            function\n            isNotEmpty\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/database/models/helpers.ts\n            \n            function\n            isObject\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/database/seeds/01-User.ts\n            \n            function\n            seed\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/seeds/02-Tag.ts\n            \n            function\n            seed\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/domain.ts\n            \n            interface\n            APIResponse\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/domain.ts\n            \n            interface\n            AppLaunchAction\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/domain.ts\n            \n            interface\n            Comment\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/domain.ts\n            \n            interface\n            Comments\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/domain.ts\n            \n            interface\n            Follower\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/domain.ts\n            \n            interface\n            GetAppLaunchData\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/domain.ts\n            \n            interface\n            GetComments\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/domain.ts\n            \n            interface\n            GetFollowers\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/domain.ts\n            \n            interface\n            GetFollowing\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/domain.ts\n            \n            interface\n            GetRescueList\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/domain.ts\n            \n            interface\n            GetUserPosts\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/domain.ts\n            \n            interface\n            GetUserProfile\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/domain.ts\n            \n            interface\n            PostedByUser\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/domain.ts\n            \n            interface\n            PostType\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/domain.ts\n            \n            interface\n            RescueLists\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/domain.ts\n            \n            interface\n            Rescues\n            \n                0 %\n                (0/14)\n            \n        \n        \n            \n                \n                src/domain.ts\n            \n            interface\n            Result\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/domain.ts\n            \n            interface\n            User\n            \n                0 %\n                (0/23)\n            \n        \n        \n            \n                \n                src/domain.ts\n            \n            interface\n            UserPost\n            \n                0 %\n                (0/15)\n            \n        \n        \n            \n                \n                src/domain.ts\n            \n            interface\n            UserPosts\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/email/email.service.ts\n            \n            injectable\n            EmailService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/emailScheduling/emailSchedule.dto.ts\n            \n            class\n            EmailScheduleDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/emailScheduling/emailScheduling.controller.ts\n            \n            controller\n            EmailSchedulingController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/emailScheduling/emailScheduling.service.ts\n            \n            injectable\n            EmailSchedulingService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/health/health.controller.ts\n            \n            controller\n            HealthController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/infra/filters/query-failed.filter.ts\n            \n            class\n            QueryFailedFilter\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/infra/filters/validation-failed.filter.ts\n            \n            class\n            ValidationFailedFilter\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/infra/guards/req.ts\n            \n            guard\n            RequestGuard\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/infra/guards/res.ts\n            \n            guard\n            ResponseGuard\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/infra/interceptors/null-undefined-override.ts\n            \n            injectable\n            ExcludeNullUndefinedInterceptor\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/infra/interceptors/null-undefined-override.ts\n            \n            function\n            recursivelyStripNullValues\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/infra/interceptors/timeout.ts\n            \n            injectable\n            TimeoutInterceptor\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/infra/interceptors/transform.ts\n            \n            injectable\n            TransformInterceptor\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/infra/interceptors/transform.ts\n            \n            interface\n            Response\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            run\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            setupInfra\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            setupMiddlewares\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            setupSwaggerDocs\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/tags/tag.model.ts\n            \n            class\n            CreateTagsDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/tags/tag.model.ts\n            \n            class\n            Tag\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/tags/tag.model.ts\n            \n            class\n            UpdateTagsDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/tags/tag.model.ts\n            \n            interface\n            ITag\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/tags/tags.controller.ts\n            \n            controller\n            TagsController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/tags/tags.service.ts\n            \n            injectable\n            TagsService\n            \n                72 %\n                (8/11)\n            \n        \n        \n            \n                \n                src/users/user.model.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/users/user.model.ts\n            \n            class\n            UpdateUserDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/user.model.ts\n            \n            class\n            User\n            \n                0 %\n                (0/20)\n            \n        \n        \n            \n                \n                src/users/user.model.ts\n            \n            interface\n            IUser\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                53 %\n                (8/15)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @hapi/joi : ^17.1.1\n        \n            @nestjs/bull : ^0.3.1\n        \n            @nestjs/common : ^7.5.1\n        \n            @nestjs/config : ^0.6.1\n        \n            @nestjs/core : ^7.5.1\n        \n            @nestjs/jwt : ^7.2.0\n        \n            @nestjs/mapped-types : ^0.1.1\n        \n            @nestjs/passport : ^7.1.5\n        \n            @nestjs/platform-express : ^7.5.1\n        \n            @nestjs/platform-socket.io : ^7.6.5\n        \n            @nestjs/schedule : ^0.4.1\n        \n            @nestjs/serve-static : ^2.1.4\n        \n            @nestjs/swagger : ^4.7.5\n        \n            @nestjs/terminus : ^7.0.1\n        \n            @types/dotenv : ^8.2.0\n        \n            bcrypt : ^5.0.0\n        \n            blocked-at : ^1.2.0\n        \n            bull : ^3.20.0\n        \n            class-transformer : ^0.3.1\n        \n            class-validator : ^0.12.2\n        \n            cron : ^1.8.2\n        \n            deepmerge : ^4.2.2\n        \n            dotenv : ^8.2.0\n        \n            express : ^4.17.1\n        \n            express-rate-limit : ^5.2.3\n        \n            helmet : ^4.2.0\n        \n            knex : ^0.21.15\n        \n            lodash : ^4.17.20\n        \n            moment : ^2.29.1\n        \n            moment-range : ^4.0.2\n        \n            objection : ^2.2.6\n        \n            objection-db-errors : ^1.1.2\n        \n            objection-find : ^3.0.1\n        \n            objection-visibility : ^1.1.0\n        \n            passport : ^0.4.1\n        \n            passport-jwt : ^4.0.0\n        \n            passport-local : ^1.0.0\n        \n            pidusage : ^2.0.21\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^6.6.3\n        \n            source-map-support : ^0.5.19\n        \n            sqlite3 : ^5.0.0\n        \n            swagger-ui-express : ^4.1.5\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            OrderType   (src/.../pagination.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/base/crud/pagination.ts\n    \n        \n            \n                \n                    \n                        \n                        OrderType\n                    \n                \n                        \n                            \n                                 DESC\n                            \n                        \n                        \n                            \n                                Value : DESC\n                            \n                        \n                        \n                            \n                                 ASC\n                            \n                        \n                        \n                            \n                                Value : ASC\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ApiErrors   (src/.../api-errors.decorator.ts)\n                        \n                        \n                            ApiProperty   (src/.../other.ts)\n                        \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            down   (src/.../20190609143930_CreateTag.ts)\n                        \n                        \n                            down   (src/.../20190609143930_CreateUser.ts)\n                        \n                        \n                            isEmpty   (src/.../helpers.ts)\n                        \n                        \n                            isNotEmpty   (src/.../helpers.ts)\n                        \n                        \n                            isObject   (src/.../helpers.ts)\n                        \n                        \n                            recursivelyStripNullValues   (src/.../null-undefined-override.ts)\n                        \n                        \n                            run   (src/.../main.ts)\n                        \n                        \n                            safeRequire   (src/.../other.ts)\n                        \n                        \n                            seed   (src/.../01-User.ts)\n                        \n                        \n                            seed   (src/.../02-Tag.ts)\n                        \n                        \n                            setupInfra   (src/.../main.ts)\n                        \n                        \n                            setupMiddlewares   (src/.../main.ts)\n                        \n                        \n                            setupSwaggerDocs   (src/.../main.ts)\n                        \n                        \n                            up   (src/.../20190609143930_CreateTag.ts)\n                        \n                        \n                            up   (src/.../20190609143930_CreateUser.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/base/swagger-gen/api-errors.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            ApiErrors\n                        \n                        \n                    \n                \n            \n            \n                \nApiErrors()\n                \n            \n\n\n\n\n        \n    \n    src/base/swagger-gen/utils/other.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            ApiProperty\n                        \n                        \n                    \n                \n            \n            \n                \nApiProperty(options?: any)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                any\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     PropertyDecorator\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            safeRequire\n                        \n                        \n                    \n                \n            \n            \n                \nsafeRequire(path)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    path\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T | null\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            bootstrap\n                        \n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            run\n                        \n                        \n                    \n                \n            \n            \n                \nrun(boot, options: object)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    boot\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                object\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setupInfra\n                        \n                        \n                    \n                \n            \n            \n                \nsetupInfra(app)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    app\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setupMiddlewares\n                        \n                        \n                    \n                \n            \n            \n                \nsetupMiddlewares(app)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    app\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setupSwaggerDocs\n                        \n                        \n                    \n                \n            \n            \n                \nsetupSwaggerDocs(app)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    app\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/database/migrations/20190609143930_CreateTag.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            down\n                        \n                        \n                    \n                \n            \n            \n                \ndown(knex)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    knex\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            up\n                        \n                        \n                    \n                \n            \n            \n                \nup(knex)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    knex\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/database/migrations/20190609143930_CreateUser.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            down\n                        \n                        \n                    \n                \n            \n            \n                \ndown(knex)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    knex\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            up\n                        \n                        \n                    \n                \n            \n            \n                \nup(knex)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    knex\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    src/database/models/helpers.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            isEmpty\n                        \n                        \n                    \n                \n            \n            \n                \nisEmpty(value: any)\n                \n            \n\n\n\n\n            \n                \n                    Check if value is empty\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            isNotEmpty\n                        \n                        \n                    \n                \n            \n            \n                \nisNotEmpty(value: any)\n                \n            \n\n\n\n\n            \n                \n                    Check if value is not empty\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            isObject\n                        \n                        \n                    \n                \n            \n            \n                \nisObject(value: any)\n                \n            \n\n\n\n\n            \n                \n                    Check if value is of type object.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    src/infra/interceptors/null-undefined-override.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            recursivelyStripNullValues\n                        \n                        \n                    \n                \n            \n            \n                \nrecursivelyStripNullValues(value)\n                \n            \n\n\n\n\n            \n                \n                    Recursively Strip Null Values\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    src/database/seeds/01-User.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            seed\n                        \n                        \n                    \n                \n            \n            \n                \nseed(knex)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    knex\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    src/database/seeds/02-Tag.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            seed\n                        \n                        \n                    \n                \n            \n            \n                \nseed(knex)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    knex\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\n$ npm installRunning the app\n# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CronModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        DatabaseModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        EmailModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        EmailSchedulingModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TagsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_CronModule\n\n\n\ncluster_CronModule_providers\n\n\n\ncluster_EmailModule\n\n\n\ncluster_EmailModule_exports\n\n\n\ncluster_EmailModule_providers\n\n\n\ncluster_EmailSchedulingModule\n\n\n\ncluster_EmailSchedulingModule_providers\n\n\n\ncluster_TagsModule\n\n\n\ncluster_TagsModule_exports\n\n\n\ncluster_TagsModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nCronModule\n\nCronModule\n\nAppModule -->\n\nCronModule->AppModule\n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\n\n\nEmailSchedulingModule\n\nEmailSchedulingModule\n\nAppModule -->\n\nEmailSchedulingModule->AppModule\n\n\n\n\n\nTagsModule\n\nTagsModule\n\nAppModule -->\n\nTagsModule->AppModule\n\n\n\n\n\nTagsService \n\nTagsService \n\nTagsService  -->\n\nTagsModule->TagsService \n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\nCronService\n\nCronService\n\nCronModule -->\n\nCronService->CronModule\n\n\n\n\n\nPersistedCronService\n\nPersistedCronService\n\nCronModule -->\n\nPersistedCronService->CronModule\n\n\n\n\n\nEmailService \n\nEmailService \n\n\n\nEmailModule\n\nEmailModule\n\nEmailSchedulingModule -->\n\nEmailModule->EmailSchedulingModule\n\n\n\nEmailService  -->\n\nEmailModule->EmailService \n\n\n\n\n\nEmailService\n\nEmailService\n\nEmailModule -->\n\nEmailService->EmailModule\n\n\n\n\n\nEmailSchedulingService\n\nEmailSchedulingService\n\nEmailSchedulingModule -->\n\nEmailSchedulingService->EmailSchedulingModule\n\n\n\n\n\nTagsService\n\nTagsService\n\nTagsModule -->\n\nTagsService->TagsModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        8 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    6 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    12 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    21 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    2 Guards\n                \n            \n        \n        \n            \n                \n                    \n                    32 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            APIError   (src/.../domain.ts)\n                        \n                        \n                            BaseRouteName   (src/.../other.ts)\n                        \n                        \n                            Following   (src/.../domain.ts)\n                        \n                        \n                            ObjectLiteral   (src/.../object-literal.type.ts)\n                        \n                        \n                            PartialTagShape   (src/.../tag.model.ts)\n                        \n                        \n                            PartialUserShape   (src/.../user.model.ts)\n                        \n                        \n                            Results   (src/.../domain.ts)\n                        \n                        \n                            TagShape   (src/.../tag.model.ts)\n                        \n                        \n                            UserShape   (src/.../user.model.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/domain.ts\n    \n    \n        \n            \n                \n                    \n                    APIError\n                \n            \n            \n                \n                        Error | string | null\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Following\n                \n            \n            \n                \n                            Follower\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Results\n                \n            \n            \n                \n                            GetAppLaunchData | GetUserProfile | GetUserPosts | GetComments | GetRescueList | GetFollowers | GetFollowing\n\n                \n            \n        \n    \n    src/base/swagger-gen/utils/other.ts\n    \n    \n        \n            \n                \n                    \n                    BaseRouteName\n                \n            \n            \n                \n                        \"getManyBase\" | \"getOneBase\" | \"createOneBase\" | \"createManyBase\" | \"updateOneBase\" | \"replaceOneBase\" | \"deleteOneBase\" | \"getOne\"\n\n                \n            \n        \n    \n    src/base/swagger-gen/utils/types/object-literal.type.ts\n    \n    \n        \n            \n                \n                    \n                    ObjectLiteral\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/tags/tag.model.ts\n    \n    \n        \n            \n                \n                    \n                    PartialTagShape\n                \n            \n            \n                \n                            PartialModelObject\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    TagShape\n                \n            \n            \n                \n                            ModelObject\n\n                \n            \n        \n    \n    src/users/user.model.ts\n    \n    \n        \n            \n                \n                    \n                    PartialUserShape\n                \n            \n            \n                \n                            PartialModelObject\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    UserShape\n                \n            \n            \n                \n                            ModelObject\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ConfigModuleOptions   (src/.../app.module.ts)\n                        \n                        \n                            Crud   (src/.../crud.decorator.ts)\n                        \n                        \n                            databaseProviders   (src/.../database.module.ts)\n                        \n                        \n                            getOwnPropNames   (src/.../obj.util.ts)\n                        \n                        \n                            hasLength   (src/.../checks.util.ts)\n                        \n                        \n                            hasValue   (src/.../checks.util.ts)\n                        \n                        \n                            isArrayFull   (src/.../checks.util.ts)\n                        \n                        \n                            isArrayStrings   (src/.../checks.util.ts)\n                        \n                        \n                            isBoolean   (src/.../checks.util.ts)\n                        \n                        \n                            isDate   (src/.../checks.util.ts)\n                        \n                        \n                            isDateString   (src/.../checks.util.ts)\n                        \n                        \n                            isEqual   (src/.../checks.util.ts)\n                        \n                        \n                            isFalse   (src/.../checks.util.ts)\n                        \n                        \n                            isFunction   (src/.../checks.util.ts)\n                        \n                        \n                            isIn   (src/.../checks.util.ts)\n                        \n                        \n                            isNil   (src/.../checks.util.ts)\n                        \n                        \n                            isNull   (src/.../checks.util.ts)\n                        \n                        \n                            isNumber   (src/.../checks.util.ts)\n                        \n                        \n                            isNumeric   (src/.../checks.util.ts)\n                        \n                        \n                            isObject   (src/.../checks.util.ts)\n                        \n                        \n                            isObjectFull   (src/.../checks.util.ts)\n                        \n                        \n                            isString   (src/.../checks.util.ts)\n                        \n                        \n                            isStringFull   (src/.../checks.util.ts)\n                        \n                        \n                            isTrue   (src/.../checks.util.ts)\n                        \n                        \n                            isUndefined   (src/.../checks.util.ts)\n                        \n                        \n                            isValue   (src/.../checks.util.ts)\n                        \n                        \n                            mockedConfigService   (src/.../mocks.ts)\n                        \n                        \n                            mockedJwtService   (src/.../mocks.ts)\n                        \n                        \n                            modelProviders   (src/.../database.module.ts)\n                        \n                        \n                            models   (src/.../database.module.ts)\n                        \n                        \n                            moment   (src/.../moment-extend.ts)\n                        \n                        \n                            objKeys   (src/.../obj.util.ts)\n                        \n                        \n                            swagger   (src/.../other.ts)\n                        \n                        \n                            swaggerConst   (src/.../other.ts)\n                        \n                        \n                            tableName   (src/.../20190609143930_CreateTag.ts)\n                        \n                        \n                            tableName   (src/.../20190609143930_CreateUser.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app.module.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            ConfigModuleOptions\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n    isGlobal: true,\n    validationOptions: {\n        allowUnknown: true,\n        abortEarly: true,\n    },\n    /* eslint-disable */\n    validationSchema: Joi.object({\n        PORT: Joi.number().default(3000),\n        NODE_ENV: Joi.string()\n            .required()\n            .valid('development', 'production', 'test', 'provision')\n            .default('development'),\n\n        JWTKEY: Joi.string().required(),\n        TOKEN_EXPIRATION: Joi.string().required(),\n\n        database: Joi.string().required(),\n        type: Joi.string().required(),\n        logging: Joi.string().required(),\n        synchronize: Joi.string().required(),\n    }),\n    /* eslint-enable */\n}\n                        \n                    \n\n\n            \n        \n\n    src/base/swagger-gen/crud.decorator.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            Crud\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (options: any) => (target: Object) => {\n    let factory = CrudRoutesFactory.create(target, options)\n    // @ts-ignore\n    factory = undefined\n}\n                        \n                    \n\n\n            \n        \n\n    src/database/database.module.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            databaseProviders\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : [\n    ...modelProviders,\n    {\n        provide: 'KnexConnection',\n        useFactory: async () => {\n            const knex = Knex({\n                client: 'sqlite3',\n                useNullAsDefault: true,\n                connection: {\n                    filename: './knex.sqlite',\n                },\n                debug: true,\n            })\n\n            Model.knex(knex)\n            return knex\n        },\n    },\n]\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            modelProviders\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : models.map((model) => {\n    return {\n        provide: model.name,\n        useValue: model,\n    }\n})\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            models\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : [Tag, User]\n                        \n                    \n\n\n            \n        \n\n    src/base/swagger-gen/utils/obj.util.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            getOwnPropNames\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (val: any): string[] =>\n    Object.getOwnPropertyNames(val)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            objKeys\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (val: any): string[] => Object.keys(val)\n                        \n                    \n\n\n            \n        \n\n    src/base/swagger-gen/utils/checks.util.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            hasLength\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (val: any): boolean => val.length > 0\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            hasValue\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (val: any): boolean =>\n    isArrayFull(val) ? (val as any[]).every((o) => isValue(o)) : isValue(val)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isArrayFull\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (val: any): boolean =>\n    Array.isArray(val) && hasLength(val)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isArrayStrings\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (val: any): boolean =>\n    isArrayFull(val) && (val as string[]).every((v) => isStringFull(v))\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isBoolean\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (val: any): boolean => typeof val === 'boolean'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isDate\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (val: any): val is Date => val instanceof Date\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isDateString\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (val: any): boolean =>\n    isStringFull(val) &&\n    /^\\d{4}-[01]\\d-[0-3]\\d(?:T[0-2]\\d:[0-5]\\d:[0-5]\\d(?:\\.\\d+)?(?:Z|[-+][0-2]\\d(?::?[0-5]\\d)?)?)?$/g.test(\n        val,\n    )\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isEqual\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (val: any, eq: any): boolean => val === eq\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isFalse\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (val: any): boolean => val === false\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isFunction\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (val: any): boolean => typeof val === 'function'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isIn\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (val: any, arr: any[] = []): boolean =>\n    arr.some((o) => isEqual(val, o))\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isNil\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (val: any): boolean => isUndefined(val) || isNull(val)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isNull\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (val: any): boolean => val === null\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isNumber\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (val: any): boolean =>\n    typeof val === 'number' && !Number.isNaN(val) && Number.isFinite(val)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isNumeric\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (val: any): boolean =>\n    /^[+-]?([0-9]*[.])?[0-9]+$/.test(val)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isObject\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (val: any): boolean =>\n    typeof val === 'object' && !isNull(val)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isObjectFull\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (val: any) => isObject(val) && hasLength(objKeys(val))\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isString\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (val: any): boolean => typeof val === 'string'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isStringFull\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (val: any): boolean => isString(val) && hasLength(val)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isTrue\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (val: any): boolean => val === true\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isUndefined\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (val: any): boolean => typeof val === 'undefined'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isValue\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (val: any): boolean =>\n    isStringFull(val) || isNumber(val) || isBoolean(val) || isDate(val)\n                        \n                    \n\n\n            \n        \n\n    src/auth/spec/mocks.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            mockedConfigService\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n    get(key: string) {\n        switch (key) {\n            case 'JWT_ACCESS_TOKEN_EXPIRATION_TIME':\n                return '3600'\n            default:\n                return ''\n        }\n    },\n}\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            mockedJwtService\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n    sign: () => '',\n    signAsync: async () => Promise.resolve(''),\n}\n                        \n                    \n\n\n            \n        \n\n    src/base/moment-extend.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            moment\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : extendMoment(momentDefault)\n                        \n                    \n\n\n            \n        \n\n    src/base/swagger-gen/utils/other.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            swagger\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : safeRequire('@nestjs/swagger')\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            swaggerConst\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : safeRequire('@nestjs/swagger/dist/constants')\n                        \n                    \n\n\n            \n        \n\n    src/database/migrations/20190609143930_CreateTag.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            tableName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'tags'\n                        \n                    \n\n\n            \n        \n\n    src/database/migrations/20190609143930_CreateUser.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            tableName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'users'\n                        \n                    \n\n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
